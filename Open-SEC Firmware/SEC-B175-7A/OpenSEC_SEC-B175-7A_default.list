
OpenSEC_SEC-B175-7A_default.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  080159c0  080159c0  000259c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016550  08016550  00030580  2**0
                  CONTENTS
  4 .ARM          00000008  08016550  08016550  00026550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016558  08016558  00030580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016558  08016558  00026558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801655c  0801655c  0002655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  08016560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032f0  20000580  08016ae0  00030580  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003870  08016ae0  00033870  2**0
                  ALLOC
 11 .erom_flash   00000800  0807b800  0807b800  0003b800  2**3
                  ALLOC
 12 .erom_ram     00000158  2001f800  2001f800  0003f800  2**2
                  ALLOC
 13 .bootflash    00000000  0807c000  0807c000  00030580  2**0
                  CONTENTS
 14 .appflash     00000000  0803d800  0803d800  00030580  2**0
                  CONTENTS
 15 .ARM.attributes 00000030  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY
 16 .debug_info   00036f52  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000060b9  00000000  00000000  00067502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001cd0  00000000  00000000  0006d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001ae0  00000000  00000000  0006f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000307cf  00000000  00000000  00070d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002b32e  00000000  00000000  000a153f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012c509  00000000  00000000  000cc86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001f8d76  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000091ac  00000000  00000000  001f8dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000580 	.word	0x20000580
 80001fc:	00000000 	.word	0x00000000
 8000200:	080159a4 	.word	0x080159a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000584 	.word	0x20000584
 800021c:	080159a4 	.word	0x080159a4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a4 	b.w	8001058 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8083 	bne.w	8000eaa <__udivmoddi4+0x116>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d947      	bls.n	8000e3a <__udivmoddi4+0xa6>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b142      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	f1c2 0020 	rsb	r0, r2, #32
 8000db4:	fa24 f000 	lsr.w	r0, r4, r0
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4097      	lsls	r7, r2
 8000dbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dcc:	fa1f fe87 	uxth.w	lr, r7
 8000dd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x60>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000de6:	f080 8119 	bcs.w	800101c <__udivmoddi4+0x288>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 8116 	bls.w	800101c <__udivmoddi4+0x288>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x8c>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	f080 8105 	bcs.w	8001020 <__udivmoddi4+0x28c>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8102 	bls.w	8001020 <__udivmoddi4+0x28c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	2600      	movs	r6, #0
 8000e2a:	b11d      	cbz	r5, 8000e34 <__udivmoddi4+0xa0>
 8000e2c:	40d4      	lsrs	r4, r2
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e9c5 4300 	strd	r4, r3, [r5]
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xaa>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d150      	bne.n	8000ee8 <__udivmoddi4+0x154>
 8000e46:	1bcb      	subs	r3, r1, r7
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	2601      	movs	r6, #1
 8000e52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb08 f30c 	mul.w	r3, r8, ip
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0xe4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0xe2>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	f200 80e9 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000e76:	4684      	mov	ip, r0
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	b2a3      	uxth	r3, r4
 8000e7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e88:	fb08 f800 	mul.w	r8, r8, r0
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x10c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x10a>
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	f200 80d9 	bhi.w	8001050 <__udivmoddi4+0x2bc>
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	eba4 0408 	sub.w	r4, r4, r8
 8000ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea8:	e7bf      	b.n	8000e2a <__udivmoddi4+0x96>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0x12e>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <__udivmoddi4+0x282>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f683 	clz	r6, r3
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d14a      	bne.n	8000f60 <__udivmoddi4+0x1cc>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0x140>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80b8 	bhi.w	8001044 <__udivmoddi4+0x2b0>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	468c      	mov	ip, r1
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0a8      	beq.n	8000e34 <__udivmoddi4+0xa0>
 8000ee2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ee6:	e7a5      	b.n	8000e34 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef0:	4097      	lsls	r7, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	4330      	orrs	r0, r6
 8000efe:	0c03      	lsrs	r3, r0, #16
 8000f00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f04:	fa1f f887 	uxth.w	r8, r7
 8000f08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb06 f108 	mul.w	r1, r6, r8
 8000f14:	4299      	cmp	r1, r3
 8000f16:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x19c>
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f22:	f080 808d 	bcs.w	8001040 <__udivmoddi4+0x2ac>
 8000f26:	4299      	cmp	r1, r3
 8000f28:	f240 808a 	bls.w	8001040 <__udivmoddi4+0x2ac>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b281      	uxth	r1, r0
 8000f34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb00 f308 	mul.w	r3, r0, r8
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1c4>
 8000f48:	1879      	adds	r1, r7, r1
 8000f4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4e:	d273      	bcs.n	8001038 <__udivmoddi4+0x2a4>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d971      	bls.n	8001038 <__udivmoddi4+0x2a4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4439      	add	r1, r7
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f5e:	e778      	b.n	8000e52 <__udivmoddi4+0xbe>
 8000f60:	f1c6 0c20 	rsb	ip, r6, #32
 8000f64:	fa03 f406 	lsl.w	r4, r3, r6
 8000f68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f72:	fa01 f306 	lsl.w	r3, r1, r6
 8000f76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	0c3b      	lsrs	r3, r7, #16
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fa1f f884 	uxth.w	r8, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f92:	fb09 fa08 	mul.w	sl, r9, r8
 8000f96:	458a      	cmp	sl, r1
 8000f98:	fa02 f206 	lsl.w	r2, r2, r6
 8000f9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x220>
 8000fa2:	1861      	adds	r1, r4, r1
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa8:	d248      	bcs.n	800103c <__udivmoddi4+0x2a8>
 8000faa:	458a      	cmp	sl, r1
 8000fac:	d946      	bls.n	800103c <__udivmoddi4+0x2a8>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4421      	add	r1, r4
 8000fb4:	eba1 010a 	sub.w	r1, r1, sl
 8000fb8:	b2bf      	uxth	r7, r7
 8000fba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45b8      	cmp	r8, r7
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x24a>
 8000fce:	19e7      	adds	r7, r4, r7
 8000fd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd4:	d22e      	bcs.n	8001034 <__udivmoddi4+0x2a0>
 8000fd6:	45b8      	cmp	r8, r7
 8000fd8:	d92c      	bls.n	8001034 <__udivmoddi4+0x2a0>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4427      	add	r7, r4
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba7 0708 	sub.w	r7, r7, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454f      	cmp	r7, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	4649      	mov	r1, r9
 8000ff0:	d31a      	bcc.n	8001028 <__udivmoddi4+0x294>
 8000ff2:	d017      	beq.n	8001024 <__udivmoddi4+0x290>
 8000ff4:	b15d      	cbz	r5, 800100e <__udivmoddi4+0x27a>
 8000ff6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ffa:	eb67 0701 	sbc.w	r7, r7, r1
 8000ffe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001002:	40f2      	lsrs	r2, r6
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	40f7      	lsrs	r7, r6
 800100a:	e9c5 2700 	strd	r2, r7, [r5]
 800100e:	2600      	movs	r6, #0
 8001010:	4631      	mov	r1, r6
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e70b      	b.n	8000e34 <__udivmoddi4+0xa0>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e9      	b.n	8000df4 <__udivmoddi4+0x60>
 8001020:	4618      	mov	r0, r3
 8001022:	e6fd      	b.n	8000e20 <__udivmoddi4+0x8c>
 8001024:	4543      	cmp	r3, r8
 8001026:	d2e5      	bcs.n	8000ff4 <__udivmoddi4+0x260>
 8001028:	ebb8 0e02 	subs.w	lr, r8, r2
 800102c:	eb69 0104 	sbc.w	r1, r9, r4
 8001030:	3801      	subs	r0, #1
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001034:	4608      	mov	r0, r1
 8001036:	e7d2      	b.n	8000fde <__udivmoddi4+0x24a>
 8001038:	4660      	mov	r0, ip
 800103a:	e78d      	b.n	8000f58 <__udivmoddi4+0x1c4>
 800103c:	4681      	mov	r9, r0
 800103e:	e7b9      	b.n	8000fb4 <__udivmoddi4+0x220>
 8001040:	4666      	mov	r6, ip
 8001042:	e775      	b.n	8000f30 <__udivmoddi4+0x19c>
 8001044:	4630      	mov	r0, r6
 8001046:	e74a      	b.n	8000ede <__udivmoddi4+0x14a>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	4439      	add	r1, r7
 800104e:	e713      	b.n	8000e78 <__udivmoddi4+0xe4>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	e724      	b.n	8000ea0 <__udivmoddi4+0x10c>
 8001056:	bf00      	nop

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f002 f8e0 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106c:	2002      	movs	r0, #2
 800106e:	f000 f80d 	bl	800108c <HAL_InitTick>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	e001      	b.n	8001082 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107e:	f00c ff0d 	bl	800de9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001082:	79fb      	ldrb	r3, [r7, #7]

}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d022      	beq.n	80010e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_InitTick+0x6c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 f8ec 	bl	8003292 <HAL_SYSTICK_Config>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d809      	bhi.n	80010da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c6:	2200      	movs	r2, #0
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f002 f8b8 	bl	8003242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_InitTick+0x70>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e007      	b.n	80010ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e004      	b.n	80010ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000004 	.word	0x20000004
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	20000000 	.word	0x20000000

08001100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x1c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	; (800111c <HAL_IncTick+0x1c>)
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20001cc8 	.word	0x20001cc8
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20001cc8 	.word	0x20001cc8

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d004      	beq.n	8001160 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_Delay+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001160:	bf00      	nop
 8001162:	f7ff ffdf 	bl	8001124 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8f7      	bhi.n	8001162 <HAL_Delay+0x26>
  {
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40010030 	.word	0x40010030

080011a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 0202 	bic.w	r2, r3, #2
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40010030 	.word	0x40010030

080011d0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80011e2:	f7ff ff9f 	bl	8001124 <HAL_GetTick>
 80011e6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80011e8:	e008      	b.n	80011fc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80011ea:	f7ff ff9b 	bl	8001124 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b0a      	cmp	r3, #10
 80011f6:	d901      	bls.n	80011fc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e006      	b.n	800120a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40010030 	.word	0x40010030

08001218 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LL_ADC_SetOffset+0x44>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	03fff000 	.word	0x03fff000

080012c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3360      	adds	r3, #96	; 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3360      	adds	r3, #96	; 0x60
 8001304:	461a      	mov	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800132a:	b480      	push	{r7}
 800132c:	b087      	sub	sp, #28
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3360      	adds	r3, #96	; 0x60
 800133a:	461a      	mov	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3360      	adds	r3, #96	; 0x60
 8001370:	461a      	mov	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	615a      	str	r2, [r3, #20]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3330      	adds	r3, #48	; 0x30
 80013f2:	461a      	mov	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	211f      	movs	r1, #31
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0e9b      	lsrs	r3, r3, #26
 800141a:	f003 011f 	and.w	r1, r3, #31
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3314      	adds	r3, #20
 8001470:	461a      	mov	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	0e5b      	lsrs	r3, r3, #25
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	0d1b      	lsrs	r3, r3, #20
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2107      	movs	r1, #7
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	401a      	ands	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0d1b      	lsrs	r3, r3, #20
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0318 	and.w	r3, r3, #24
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014dc:	40d9      	lsrs	r1, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	400b      	ands	r3, r1
 80014e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e6:	431a      	orrs	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	0007ffff 	.word	0x0007ffff

08001500 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6093      	str	r3, [r2, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800156c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001570:	d101      	bne.n	8001576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <LL_ADC_IsEnabled+0x18>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_ADC_IsEnabled+0x1a>
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001636:	f043 0204 	orr.w	r2, r3, #4
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b04      	cmp	r3, #4
 800165c:	d101      	bne.n	8001662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b08      	cmp	r3, #8
 8001682:	d101      	bne.n	8001688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1af      	b.n	8001a12 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f9ab 	bl	8001a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff3f 	bl	800155c <LL_ADC_IsDeepPowerDownEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff25 	bl	8001538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff5a 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff3e 	bl	8001584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001708:	4b9f      	ldr	r3, [pc, #636]	; (8001988 <HAL_ADC_Init+0x2f0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_ADC_Init+0x2f4>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff3c 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff75 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8148 	bne.w	8001a00 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8144 	bne.w	8001a00 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d141      	bne.n	800181c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a0:	d004      	beq.n	80017ac <HAL_ADC_Init+0x114>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_ADC_Init+0x2f8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d10f      	bne.n	80017cc <HAL_ADC_Init+0x134>
 80017ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017b0:	f7ff ff24 	bl	80015fc <LL_ADC_IsEnabled>
 80017b4:	4604      	mov	r4, r0
 80017b6:	4876      	ldr	r0, [pc, #472]	; (8001990 <HAL_ADC_Init+0x2f8>)
 80017b8:	f7ff ff20 	bl	80015fc <LL_ADC_IsEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	4323      	orrs	r3, r4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e012      	b.n	80017f2 <HAL_ADC_Init+0x15a>
 80017cc:	4871      	ldr	r0, [pc, #452]	; (8001994 <HAL_ADC_Init+0x2fc>)
 80017ce:	f7ff ff15 	bl	80015fc <LL_ADC_IsEnabled>
 80017d2:	4604      	mov	r4, r0
 80017d4:	4870      	ldr	r0, [pc, #448]	; (8001998 <HAL_ADC_Init+0x300>)
 80017d6:	f7ff ff11 	bl	80015fc <LL_ADC_IsEnabled>
 80017da:	4603      	mov	r3, r0
 80017dc:	431c      	orrs	r4, r3
 80017de:	486f      	ldr	r0, [pc, #444]	; (800199c <HAL_ADC_Init+0x304>)
 80017e0:	f7ff ff0c 	bl	80015fc <LL_ADC_IsEnabled>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4323      	orrs	r3, r4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d012      	beq.n	800181c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fe:	d004      	beq.n	800180a <HAL_ADC_Init+0x172>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a62      	ldr	r2, [pc, #392]	; (8001990 <HAL_ADC_Init+0x2f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x176>
 800180a:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_ADC_Init+0x308>)
 800180c:	e000      	b.n	8001810 <HAL_ADC_Init+0x178>
 800180e:	4a65      	ldr	r2, [pc, #404]	; (80019a4 <HAL_ADC_Init+0x30c>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f7ff fcfe 	bl	8001218 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7f5b      	ldrb	r3, [r3, #29]
 8001820:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001826:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800182c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001832:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001846:	2b01      	cmp	r3, #1
 8001848:	d106      	bne.n	8001858 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	045b      	lsls	r3, r3, #17
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d009      	beq.n	8001874 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_ADC_Init+0x310>)
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	430b      	orrs	r3, r1
 8001886:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fed1 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 80018a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fede 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 80018b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d17f      	bne.n	80019bc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d17c      	bne.n	80019bc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d017      	beq.n	8001924 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001902:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800190c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6911      	ldr	r1, [r2, #16]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	430b      	orrs	r3, r1
 800191e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001922:	e013      	b.n	800194c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001932:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001948:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001952:	2b01      	cmp	r3, #1
 8001954:	d12a      	bne.n	80019ac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001978:	430a      	orrs	r2, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	e019      	b.n	80019bc <HAL_ADC_Init+0x324>
 8001988:	2000004c 	.word	0x2000004c
 800198c:	053e2d63 	.word	0x053e2d63
 8001990:	50000100 	.word	0x50000100
 8001994:	50000400 	.word	0x50000400
 8001998:	50000500 	.word	0x50000500
 800199c:	50000600 	.word	0x50000600
 80019a0:	50000300 	.word	0x50000300
 80019a4:	50000700 	.word	0x50000700
 80019a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10c      	bne.n	80019de <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f023 010f 	bic.w	r1, r3, #15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	e007      	b.n	80019ee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 020f 	bic.w	r2, r2, #15
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fe:	e007      	b.n	8001a10 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop

08001a1c <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_Start_IT+0x1c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a93      	ldr	r2, [pc, #588]	; (8001c94 <HAL_ADC_Start_IT+0x264>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Start_IT+0x20>
 8001a4c:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_ADC_Start_IT+0x268>)
 8001a4e:	e000      	b.n	8001a52 <HAL_ADC_Start_IT+0x22>
 8001a50:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_ADC_Start_IT+0x26c>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fd54 	bl	8001500 <LL_ADC_GetMultimode>
 8001a58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fdf3 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 8134 	bne.w	8001cd4 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Start_IT+0x4a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e131      	b.n	8001cde <HAL_ADC_Start_IT+0x2ae>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 f8ac 	bl	8002be0 <ADC_Enable>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 811b 	bne.w	8001cca <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a79      	ldr	r2, [pc, #484]	; (8001c94 <HAL_ADC_Start_IT+0x264>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_ADC_Start_IT+0x96>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7a      	ldr	r2, [pc, #488]	; (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_Start_IT+0x92>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e003      	b.n	8001aca <HAL_ADC_Start_IT+0x9a>
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001ac4:	e001      	b.n	8001aca <HAL_ADC_Start_IT+0x9a>
 8001ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d002      	beq.n	8001ad8 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	f023 0206 	bic.w	r2, r3, #6
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	661a      	str	r2, [r3, #96]	; 0x60
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	221c      	movs	r2, #28
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 021c 	bic.w	r2, r2, #28
 8001b22:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d108      	bne.n	8001b3e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0208 	orr.w	r2, r2, #8
 8001b3a:	605a      	str	r2, [r3, #4]
          break;
 8001b3c:	e008      	b.n	8001b50 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <HAL_ADC_Start_IT+0x264>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d009      	beq.n	8001b86 <HAL_ADC_Start_IT+0x156>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d002      	beq.n	8001b82 <HAL_ADC_Start_IT+0x152>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e003      	b.n	8001b8a <HAL_ADC_Start_IT+0x15a>
 8001b82:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001b84:	e001      	b.n	8001b8a <HAL_ADC_Start_IT+0x15a>
 8001b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d002      	beq.n	8001ba4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d13b      	bne.n	8001c1c <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02d      	beq.n	8001c0e <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d110      	bne.n	8001bec <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0220 	bic.w	r2, r2, #32
 8001bd8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be8:	605a      	str	r2, [r3, #4]
              break;
 8001bea:	e011      	b.n	8001c10 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0220 	orr.w	r2, r2, #32
 8001c0a:	605a      	str	r2, [r3, #4]
              break;
 8001c0c:	e000      	b.n	8001c10 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8001c0e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fd04 	bl	8001622 <LL_ADC_REG_StartConversion>
 8001c1a:	e05f      	b.n	8001cdc <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_ADC_Start_IT+0x264>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_ADC_Start_IT+0x216>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d002      	beq.n	8001c42 <HAL_ADC_Start_IT+0x212>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e003      	b.n	8001c4a <HAL_ADC_Start_IT+0x21a>
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001c44:	e001      	b.n	8001c4a <HAL_ADC_Start_IT+0x21a>
 8001c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c4a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d040      	beq.n	8001cda <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0220 	bic.w	r2, r2, #32
 8001c7e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c8e:	605a      	str	r2, [r3, #4]
              break;
 8001c90:	e024      	b.n	8001cdc <HAL_ADC_Start_IT+0x2ac>
 8001c92:	bf00      	nop
 8001c94:	50000100 	.word	0x50000100
 8001c98:	50000300 	.word	0x50000300
 8001c9c:	50000700 	.word	0x50000700
 8001ca0:	50000500 	.word	0x50000500
 8001ca4:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	605a      	str	r2, [r3, #4]
              break;
 8001cc8:	e008      	b.n	8001cdc <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001cd2:	e003      	b.n	8001cdc <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	75fb      	strb	r3, [r7, #23]
 8001cd8:	e000      	b.n	8001cdc <HAL_ADC_Start_IT+0x2ac>
        }
 8001cda:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop

08001ce8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cfc:	d004      	beq.n	8001d08 <HAL_ADC_Start_DMA+0x20>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_ADC_Start_DMA+0x17c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_Start_DMA+0x24>
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_ADC_Start_DMA+0x180>)
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_Start_DMA+0x26>
 8001d0c:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <HAL_ADC_Start_DMA+0x184>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbf6 	bl	8001500 <LL_ADC_GetMultimode>
 8001d14:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fc95 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8096 	bne.w	8001e54 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Start_DMA+0x4e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e091      	b.n	8001e5a <HAL_ADC_Start_DMA+0x172>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d002      	beq.n	8001d50 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d17a      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 ff45 	bl	8002be0 <ADC_Enable>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d16d      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <HAL_ADC_Start_DMA+0x17c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d009      	beq.n	8001d92 <HAL_ADC_Start_DMA+0xaa>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a3b      	ldr	r2, [pc, #236]	; (8001e70 <HAL_ADC_Start_DMA+0x188>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d002      	beq.n	8001d8e <HAL_ADC_Start_DMA+0xa6>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_Start_DMA+0xae>
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_ADC_Start_DMA+0x18c>)
 8001d90:	e001      	b.n	8001d96 <HAL_ADC_Start_DMA+0xae>
 8001d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d002      	beq.n	8001da4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	f023 0206 	bic.w	r2, r3, #6
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_ADC_Start_DMA+0x190>)
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_ADC_Start_DMA+0x194>)
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_ADC_Start_DMA+0x198>)
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	221c      	movs	r2, #28
 8001dee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0210 	orr.w	r2, r2, #16
 8001e06:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3340      	adds	r3, #64	; 0x40
 8001e22:	4619      	mov	r1, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f001 fae8 	bl	80033fc <HAL_DMA_Start_IT>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbf4 	bl	8001622 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e3a:	e00d      	b.n	8001e58 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001e44:	e008      	b.n	8001e58 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
 8001e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	50000100 	.word	0x50000100
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	50000700 	.word	0x50000700
 8001e70:	50000500 	.word	0x50000500
 8001e74:	50000400 	.word	0x50000400
 8001e78:	08002ca5 	.word	0x08002ca5
 8001e7c:	08002d7d 	.word	0x08002d7d
 8001e80:	08002d99 	.word	0x08002d99

08001e84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x30>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a95      	ldr	r2, [pc, #596]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x34>
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_ADC_IRQHandler+0x284>)
 8001eb6:	e000      	b.n	8001eba <HAL_ADC_IRQHandler+0x36>
 8001eb8:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_ADC_IRQHandler+0x288>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb20 	bl	8001500 <LL_ADC_GetMultimode>
 8001ec0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d017      	beq.n	8001efc <HAL_ADC_IRQHandler+0x78>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ffba 	bl	8002e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_IRQHandler+0x8c>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8094 	beq.w	8002044 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808e 	beq.w	8002044 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fa39 	bl	80013bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d072      	beq.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6b      	ldr	r2, [pc, #428]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_ADC_IRQHandler+0xea>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_IRQHandler+0xe6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_IRQHandler+0xee>
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8001f6c:	e001      	b.n	8001f72 <HAL_ADC_IRQHandler+0xee>
 8001f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d008      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d002      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b09      	cmp	r3, #9
 8001f8a:	d104      	bne.n	8001f96 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	e014      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5a      	ldr	r2, [pc, #360]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x130>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x12c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x134>
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8001fb2:	e001      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x134>
 8001fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d135      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fb34 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020c 	bic.w	r2, r2, #12
 8001ff6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d112      	bne.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	65da      	str	r2, [r3, #92]	; 0x5c
 800201c:	e00b      	b.n	8002036 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00b fa68 	bl	800d50c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	220c      	movs	r2, #12
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_ADC_IRQHandler+0x1d4>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80b2 	beq.w	80021c8 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80ac 	beq.w	80021c8 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f9d4 	bl	800143a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002092:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f98f 	bl	80013bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d009      	beq.n	80020be <HAL_ADC_IRQHandler+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <HAL_ADC_IRQHandler+0x236>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_IRQHandler+0x23e>
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 80020bc:	e001      	b.n	80020c2 <HAL_ADC_IRQHandler+0x23e>
 80020be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d008      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d002      	beq.n	80020dc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b07      	cmp	r3, #7
 80020da:	d104      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	e01e      	b.n	8002124 <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_ADC_IRQHandler+0x280>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_ADC_IRQHandler+0x294>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_ADC_IRQHandler+0x28c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_IRQHandler+0x27c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e00d      	b.n	800211c <HAL_ADC_IRQHandler+0x298>
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_ADC_IRQHandler+0x290>)
 8002102:	e00b      	b.n	800211c <HAL_ADC_IRQHandler+0x298>
 8002104:	50000100 	.word	0x50000100
 8002108:	50000300 	.word	0x50000300
 800210c:	50000700 	.word	0x50000700
 8002110:	50000500 	.word	0x50000500
 8002114:	50000400 	.word	0x50000400
 8002118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800211c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d047      	beq.n	80021ba <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_ADC_IRQHandler+0x2c0>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03f      	beq.n	80021ba <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d13a      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d133      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12e      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fa85 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11a      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800217a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fe2c 	bl	8002e18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2260      	movs	r2, #96	; 0x60
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d011      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x372>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8a5 	bl	8002338 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3a2>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fe12 	bl	8002e40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	2b00      	cmp	r3, #0
 800222e:	d012      	beq.n	8002256 <HAL_ADC_IRQHandler+0x3d2>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fe04 	bl	8002e54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x464>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03e      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	e021      	b.n	80022bc <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002286:	d004      	beq.n	8002292 <HAL_ADC_IRQHandler+0x40e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <HAL_ADC_IRQHandler+0x4a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_ADC_IRQHandler+0x412>
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_ADC_IRQHandler+0x4ac>)
 8002294:	e000      	b.n	8002298 <HAL_ADC_IRQHandler+0x414>
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_ADC_IRQHandler+0x4b0>)
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f93f 	bl	800151c <LL_ADC_GetMultiDMATransfer>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e008      	b.n	80022bc <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10e      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f836 	bl	800234c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d018      	beq.n	8002324 <HAL_ADC_IRQHandler+0x4a0>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	f043 0208 	orr.w	r2, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fd84 	bl	8002e2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	50000100 	.word	0x50000100
 8002330:	50000300 	.word	0x50000300
 8002334:	50000700 	.word	0x50000700

08002338 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b6      	sub	sp, #216	; 0xd8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x24>
 800237e:	2302      	movs	r3, #2
 8002380:	f000 bc13 	b.w	8002baa <HAL_ADC_ConfigChannel+0x84a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f95a 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 83f3 	bne.w	8002b84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7ff f819 	bl	80013e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f948 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 80023ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f954 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 80023c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 81d9 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 81d4 	bne.w	8002788 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e8:	d10f      	bne.n	800240a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7ff f833 	bl	8001460 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe ffc7 	bl	8001396 <LL_ADC_SetSamplingTimeCommonConfig>
 8002408:	e00e      	b.n	8002428 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	461a      	mov	r2, r3
 8002418:	f7ff f822 	bl	8001460 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ffb7 	bl	8001396 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d022      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800245a:	f7fe ff11 	bl	8001280 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	461a      	mov	r2, r3
 800246c:	f7fe ff5d 	bl	800132a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7f1b      	ldrb	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x126>
 8002480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002484:	e000      	b.n	8002488 <HAL_ADC_ConfigChannel+0x128>
 8002486:	2300      	movs	r3, #0
 8002488:	461a      	mov	r2, r3
 800248a:	f7fe ff69 	bl	8001360 <LL_ADC_SetOffsetSaturation>
 800248e:	e17b      	b.n	8002788 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ff16 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x15c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe ff0b 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	e01e      	b.n	80024fa <HAL_ADC_ConfigChannel+0x19a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ff00 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e004      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x1b2>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	e018      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1e4>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800252e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e004      	b.n	8002544 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800253a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fecf 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe feb3 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x222>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fea8 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	e01e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x260>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fe9d 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e004      	b.n	80025be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x278>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x2aa>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fe6c 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fe50 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x2e8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fe45 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	e01e      	b.n	8002686 <HAL_ADC_ConfigChannel+0x326>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fe3a 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800266e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e004      	b.n	8002684 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800267a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_ADC_ConfigChannel+0x33e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	e016      	b.n	80026cc <HAL_ADC_ConfigChannel+0x36c>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fe0b 	bl	80012f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2103      	movs	r1, #3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fdef 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_ADC_ConfigChannel+0x3aa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2103      	movs	r1, #3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fde4 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	e017      	b.n	800273a <HAL_ADC_ConfigChannel+0x3da>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2103      	movs	r1, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fdd9 	bl	80012c8 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x3f2>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	e011      	b.n	8002776 <HAL_ADC_ConfigChannel+0x416>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002762:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fdb6 	bl	80012f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe ff35 	bl	80015fc <LL_ADC_IsEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 813d 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f7fe fe86 	bl	80014b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4aa2      	ldr	r2, [pc, #648]	; (8002a3c <HAL_ADC_ConfigChannel+0x6dc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f040 812e 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x480>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e019      	b.n	8002814 <HAL_ADC_ConfigChannel+0x4b4>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80027fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b09      	cmp	r3, #9
 800280c:	bf94      	ite	ls
 800280e:	2301      	movls	r3, #1
 8002810:	2300      	movhi	r3, #0
 8002812:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002814:	2b00      	cmp	r3, #0
 8002816:	d079      	beq.n	800290c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x4d4>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	3301      	adds	r3, #1
 800282c:	069b      	lsls	r3, r3, #26
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002832:	e015      	b.n	8002860 <HAL_ADC_ConfigChannel+0x500>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e003      	b.n	8002858 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	069b      	lsls	r3, r3, #26
 800285c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x520>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	e017      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x550>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800288e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	ea42 0103 	orr.w	r1, r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x576>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	051b      	lsls	r3, r3, #20
 80028d4:	e018      	b.n	8002908 <HAL_ADC_ConfigChannel+0x5a8>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	430b      	orrs	r3, r1
 800290a:	e07e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x5c8>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002926:	e015      	b.n	8002954 <HAL_ADC_ConfigChannel+0x5f4>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	069b      	lsls	r3, r3, #26
 8002950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x614>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	e017      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x644>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	61fb      	str	r3, [r7, #28]
  return result;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	ea42 0103 	orr.w	r1, r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10d      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x670>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	051b      	lsls	r3, r3, #20
 80029ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ce:	e01b      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x6a8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	613b      	str	r3, [r7, #16]
  return result;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	051b      	lsls	r3, r3, #20
 8002a04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	6892      	ldr	r2, [r2, #8]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fe fd26 	bl	8001460 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_ADC_ConfigChannel+0x6e0>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80be 	beq.w	8002b9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x6d6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10a      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x6ec>
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a38:	e009      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x6ee>
 8002a3a:	bf00      	nop
 8002a3c:	407f0000 	.word	0x407f0000
 8002a40:	80080000 	.word	0x80080000
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fc08 	bl	8001264 <LL_ADC_GetCommonPathInternalCh>
 8002a54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a56      	ldr	r2, [pc, #344]	; (8002bb8 <HAL_ADC_ConfigChannel+0x858>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x70c>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <HAL_ADC_ConfigChannel+0x85c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d13a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d134      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d005      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x72e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_ADC_ConfigChannel+0x860>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 8085 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a96:	d004      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x742>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x746>
 8002aa2:	4a49      	ldr	r2, [pc, #292]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x748>
 8002aa6:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fe fbc3 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_ADC_ConfigChannel+0x86c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	4a44      	ldr	r2, [pc, #272]	; (8002bd0 <HAL_ADC_ConfigChannel+0x870>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ad2:	e002      	b.n	8002ada <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae0:	e05a      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <HAL_ADC_ConfigChannel+0x874>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d125      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x7d8>
 8002aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11f      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d104      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x7ac>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <HAL_ADC_ConfigChannel+0x878>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d047      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x7c0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x7c4>
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002b22:	e000      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x7c6>
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7fe fb84 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b36:	e031      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <HAL_ADC_ConfigChannel+0x87c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12d      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d127      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x80c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <HAL_ADC_ConfigChannel+0x864>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x810>
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_ADC_ConfigChannel+0x868>)
 8002b6e:	e000      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x812>
 8002b70:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_ADC_ConfigChannel+0x854>)
 8002b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7fe fb5e 	bl	800123e <LL_ADC_SetCommonPathInternalCh>
 8002b82:	e00c      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	37d8      	adds	r7, #216	; 0xd8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	50000700 	.word	0x50000700
 8002bb8:	c3210000 	.word	0xc3210000
 8002bbc:	90c00010 	.word	0x90c00010
 8002bc0:	50000600 	.word	0x50000600
 8002bc4:	50000100 	.word	0x50000100
 8002bc8:	50000300 	.word	0x50000300
 8002bcc:	2000004c 	.word	0x2000004c
 8002bd0:	053e2d63 	.word	0x053e2d63
 8002bd4:	c7520000 	.word	0xc7520000
 8002bd8:	50000500 	.word	0x50000500
 8002bdc:	cb840000 	.word	0xcb840000

08002be0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fd05 	bl	80015fc <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d14d      	bne.n	8002c94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <ADC_Enable+0xc0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e039      	b.n	8002c96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fcd4 	bl	80015d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fa7a 	bl	8001124 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c32:	e028      	b.n	8002c86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fcdf 	bl	80015fc <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fcc3 	bl	80015d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c4e:	f7fe fa69 	bl	8001124 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d914      	bls.n	8002c86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d00d      	beq.n	8002c86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1cf      	bne.n	8002c34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	8000003f 	.word	0x8000003f

08002ca4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d14b      	bne.n	8002d56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d021      	beq.n	8002d1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fb6d 	bl	80013bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d032      	beq.n	8002d4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d12b      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11f      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d1a:	e018      	b.n	8002d4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d111      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f00a fbdc 	bl	800d50c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d54:	e00e      	b.n	8002d74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff faf2 	bl	800234c <HAL_ADC_ErrorCallback>
}
 8002d68:	e004      	b.n	8002d74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f00a fbaa 	bl	800d4e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	f043 0204 	orr.w	r2, r3, #4
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fac4 	bl	800234c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <LL_ADC_IsEnabled>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_IsEnabled+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_IsEnabled+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b0a1      	sub	sp, #132	; 0x84
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0e7      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb2:	d102      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	e009      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d102      	bne.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ec4:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	e001      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0be      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff7f 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002ef4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff79 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 80a0 	bne.w	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 809c 	bne.w	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f18:	d004      	beq.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a55      	ldr	r2, [pc, #340]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d101      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f26:	e000      	b.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f28:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d04b      	beq.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f46:	035b      	lsls	r3, r3, #13
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f58:	d004      	beq.n	8002f64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a45      	ldr	r2, [pc, #276]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10f      	bne.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f68:	f7ff ff30 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	4841      	ldr	r0, [pc, #260]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f70:	f7ff ff2c 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4323      	orrs	r3, r4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e012      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f84:	483c      	ldr	r0, [pc, #240]	; (8003078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f86:	f7ff ff21 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	483b      	ldr	r0, [pc, #236]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f8e:	f7ff ff1d 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	431c      	orrs	r4, r3
 8002f96:	483c      	ldr	r0, [pc, #240]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f98:	f7ff ff18 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4323      	orrs	r3, r4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d056      	beq.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fb6:	f023 030f 	bic.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	e047      	b.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10f      	bne.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002fec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ff0:	f7ff feec 	bl	8002dcc <LL_ADC_IsEnabled>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	481f      	ldr	r0, [pc, #124]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ff8:	f7ff fee8 	bl	8002dcc <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4323      	orrs	r3, r4
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e012      	b.n	8003032 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800300c:	481a      	ldr	r0, [pc, #104]	; (8003078 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800300e:	f7ff fedd 	bl	8002dcc <LL_ADC_IsEnabled>
 8003012:	4604      	mov	r4, r0
 8003014:	4819      	ldr	r0, [pc, #100]	; (800307c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003016:	f7ff fed9 	bl	8002dcc <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	431c      	orrs	r4, r3
 800301e:	481a      	ldr	r0, [pc, #104]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003020:	f7ff fed4 	bl	8002dcc <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	4323      	orrs	r3, r4
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d012      	beq.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800303e:	f023 030f 	bic.w	r3, r3, #15
 8003042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003044:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003046:	e009      	b.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800305a:	e000      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003066:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800306a:	4618      	mov	r0, r3
 800306c:	3784      	adds	r7, #132	; 0x84
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	50000100 	.word	0x50000100
 8003078:	50000400 	.word	0x50000400
 800307c:	50000500 	.word	0x50000500
 8003080:	50000300 	.word	0x50000300
 8003084:	50000700 	.word	0x50000700
 8003088:	50000600 	.word	0x50000600

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff40 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff90 	bl	8003180 <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5f 	bl	800312c <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff33 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa4 	bl	80031e8 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e08d      	b.n	80033da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_DMA_Init+0x138>)
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d80f      	bhi.n	80032ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_DMA_Init+0x13c>)
 80032d2:	4413      	add	r3, r2
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <HAL_DMA_Init+0x140>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	009a      	lsls	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <HAL_DMA_Init+0x144>)
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
 80032e8:	e00e      	b.n	8003308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_DMA_Init+0x148>)
 80032f2:	4413      	add	r3, r2
 80032f4:	4a3d      	ldr	r2, [pc, #244]	; (80033ec <HAL_DMA_Init+0x140>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <HAL_DMA_Init+0x14c>)
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9b6 	bl	80036cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003368:	d102      	bne.n	8003370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_DMA_Init+0x104>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d80c      	bhi.n	80033b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9d6 	bl	8003748 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e008      	b.n	80033c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40020407 	.word	0x40020407
 80033e8:	bffdfff8 	.word	0xbffdfff8
 80033ec:	cccccccd 	.word	0xcccccccd
 80033f0:	40020000 	.word	0x40020000
 80033f4:	bffdfbf8 	.word	0xbffdfbf8
 80033f8:	40020400 	.word	0x40020400

080033fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_DMA_Start_IT+0x20>
 8003418:	2302      	movs	r3, #2
 800341a:	e066      	b.n	80034ea <HAL_DMA_Start_IT+0xee>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d155      	bne.n	80034dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8fb 	bl	8003650 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 020e 	orr.w	r2, r2, #14
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e00f      	b.n	8003494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0204 	bic.w	r2, r2, #4
 8003482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 020a 	orr.w	r2, r2, #10
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e005      	b.n	80034e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
 80034e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2204      	movs	r2, #4
 8003514:	409a      	lsls	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d026      	beq.n	800356c <HAL_DMA_IRQHandler+0x7a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d021      	beq.n	800356c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d107      	bne.n	8003546 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0204 	bic.w	r2, r2, #4
 8003544:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 021f 	and.w	r2, r3, #31
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2104      	movs	r1, #4
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d071      	beq.n	8003646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800356a:	e06c      	b.n	8003646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2202      	movs	r2, #2
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02e      	beq.n	80035de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d029      	beq.n	80035de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 020a 	bic.w	r2, r2, #10
 80035a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2102      	movs	r1, #2
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d038      	beq.n	8003646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035dc:	e033      	b.n	8003646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2208      	movs	r2, #8
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d025      	beq.n	8003648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 020e 	bic.w	r2, r2, #14
 800360a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003646:	bf00      	nop
 8003648:	bf00      	nop
}
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003666:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f003 021f 	and.w	r2, r3, #31
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d108      	bne.n	80036b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036ae:	e007      	b.n	80036c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	60da      	str	r2, [r3, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e001      	b.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3b08      	subs	r3, #8
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003716:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	409a      	lsls	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40020407 	.word	0x40020407
 8003738:	40020800 	.word	0x40020800
 800373c:	40020820 	.word	0x40020820
 8003740:	cccccccd 	.word	0xcccccccd
 8003744:	40020880 	.word	0x40020880

08003748 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800376a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	1000823f 	.word	0x1000823f
 800378c:	40020940 	.word	0x40020940

08003790 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e147      	b.n	8003a32 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f944 	bl	8003a44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0210 	bic.w	r2, r2, #16
 80037ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037cc:	f7fd fcaa 	bl	8001124 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80037d2:	e012      	b.n	80037fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80037d4:	f7fd fca6 	bl	8001124 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d90b      	bls.n	80037fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e11b      	b.n	8003a32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d0e5      	beq.n	80037d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003818:	f7fd fc84 	bl	8001124 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800381e:	e012      	b.n	8003846 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003820:	f7fd fc80 	bl	8001124 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b0a      	cmp	r3, #10
 800382c:	d90b      	bls.n	8003846 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0f5      	b.n	8003a32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0e5      	beq.n	8003820 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0202 	orr.w	r2, r2, #2
 8003862:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <HAL_FDCAN_Init+0x2ac>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d103      	bne.n	8003876 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800386e:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <HAL_FDCAN_Init+0x2b0>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7c1b      	ldrb	r3, [r3, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d108      	bne.n	8003890 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e007      	b.n	80038a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7c5b      	ldrb	r3, [r3, #17]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b6:	619a      	str	r2, [r3, #24]
 80038b8:	e007      	b.n	80038ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7c9b      	ldrb	r3, [r3, #18]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d108      	bne.n	80038e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038e0:	619a      	str	r2, [r3, #24]
 80038e2:	e007      	b.n	80038f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003918:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d108      	bne.n	8003944 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0204 	orr.w	r2, r2, #4
 8003940:	619a      	str	r2, [r3, #24]
 8003942:	e02c      	b.n	800399e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d01c      	beq.n	800398e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003962:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0210 	orr.w	r2, r2, #16
 8003972:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d110      	bne.n	800399e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0220 	orr.w	r2, r2, #32
 800398a:	619a      	str	r2, [r3, #24]
 800398c:	e007      	b.n	800399e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0220 	orr.w	r2, r2, #32
 800399c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80039b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	3b01      	subs	r3, #1
 80039c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80039c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80039c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d2:	d115      	bne.n	8003a00 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	3b01      	subs	r3, #1
 80039e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	3b01      	subs	r3, #1
 80039ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80039fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fcb4 	bl	8004384 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40006400 	.word	0x40006400
 8003a40:	40006500 	.word	0x40006500

08003a44 <HAL_FDCAN_MspInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hfdcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_MspInit could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a68:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <HAL_FDCAN_ConfigFilter+0x1e>
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d13d      	bne.n	8003af2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a8a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003a92:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e01d      	b.n	8003aee <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	075a      	lsls	r2, r3, #29
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	079a      	lsls	r2, r3, #30
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e006      	b.n	8003b00 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d116      	bne.n	8003b54 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e006      	b.n	8003b62 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d110      	bne.n	8003ba4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e006      	b.n	8003bb2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d12c      	bne.n	8003c30 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e023      	b.n	8003c3e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003bfe:	0c1b      	lsrs	r3, r3, #16
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fc25 	bl	800445c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2101      	movs	r1, #1
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003c22:	2201      	movs	r2, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e006      	b.n	8003c3e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f043 0208 	orr.w	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b08b      	sub	sp, #44	; 0x2c
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c5c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003c5e:	7efb      	ldrb	r3, [r7, #27]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	f040 80bc 	bne.w	8003dde <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d121      	bne.n	8003cb0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0af      	b.n	8003dec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e020      	b.n	8003cf2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e08d      	b.n	8003dec <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	440b      	add	r3, r1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	0c9b      	lsrs	r3, r3, #18
 8003d0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e005      	b.n	8003d22 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e1b      	lsrs	r3, r3, #24
 8003d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0fda      	lsrs	r2, r3, #31
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	3304      	adds	r3, #4
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	e00a      	b.n	8003dac <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	440b      	add	r3, r1
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	3301      	adds	r3, #1
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d3eb      	bcc.n	8003d96 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d105      	bne.n	8003dd0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003dce:	e004      	b.n	8003dda <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e006      	b.n	8003dec <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	372c      	adds	r7, #44	; 0x2c
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	08015d5c 	.word	0x08015d5c

08003dfc <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d107      	bne.n	8003e1c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e006      	b.n	8003e2a <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e6e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d003      	beq.n	8003e7e <HAL_FDCAN_ActivateNotification+0x22>
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f040 80c8 	bne.w	800400e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03b      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d031      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d027      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01d      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00c      	beq.n	8003f22 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d13b      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d131      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d127      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11d      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d113      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0202 	orr.w	r2, r2, #2
 8003fbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	430a      	orrs	r2, r1
 8004008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e006      	b.n	800401c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004044:	4013      	ands	r3, r2
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	4013      	ands	r3, r2
 800405e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	4013      	ands	r3, r2
 8004076:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004082:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800409a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4013      	ands	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2240      	movs	r2, #64	; 0x40
 80040ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f92e 	bl	800432e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01b      	beq.n	8004118 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d014      	beq.n	8004118 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040f6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800410e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004110:	6939      	ldr	r1, [r7, #16]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8ec 	bl	80042f0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8b6 	bl	800429a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f006 fd5e 	bl	800ac00 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f8ab 	bl	80042b0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8a0 	bl	80042c6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01a      	beq.n	80041ca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d013      	beq.n	80041ca <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80041aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f888 	bl	80042da <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f888 	bl	8004306 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800421a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f87c 	bl	800431a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d011      	beq.n	8004254 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004246:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f876 	bl	8004356 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d009      	beq.n	8004284 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f858 	bl	8004342 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004292:	bf00      	nop
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(FDCAN_HandleTypeDef *hfdcan)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800438c:	4b30      	ldr	r3, [pc, #192]	; (8004450 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800438e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2f      	ldr	r2, [pc, #188]	; (8004454 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d103      	bne.n	80043a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80043a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d103      	bne.n	80043b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80043b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	041a      	lsls	r2, r3, #16
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	061a      	lsls	r2, r3, #24
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e005      	b.n	8004436 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	429a      	cmp	r2, r3
 8004440:	d3f3      	bcc.n	800442a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	4000a400 	.word	0x4000a400
 8004454:	40006800 	.word	0x40006800
 8004458:	40006c00 	.word	0x40006c00

0800445c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800447a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004482:	4313      	orrs	r3, r2
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e00a      	b.n	800449e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004490:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004496:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800449c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80044ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80044b4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3304      	adds	r3, #4
 80044da:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3304      	adds	r3, #4
 80044e6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e020      	b.n	8004530 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3303      	adds	r3, #3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	3302      	adds	r3, #2
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	440b      	add	r3, r1
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004506:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	440b      	add	r3, r1
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004514:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	440a      	add	r2, r1
 800451c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800451e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	3304      	adds	r3, #4
 8004528:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	3304      	adds	r3, #4
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	4a06      	ldr	r2, [pc, #24]	; (8004550 <FDCAN_CopyMessageToRAM+0xf4>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	461a      	mov	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4293      	cmp	r3, r2
 8004540:	d3d5      	bcc.n	80044ee <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	3724      	adds	r7, #36	; 0x24
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	08015d5c 	.word	0x08015d5c

08004554 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_FLASH_Program+0xa4>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_FLASH_Program+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e03e      	b.n	80045f0 <HAL_FLASH_Program+0x9c>
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_FLASH_Program+0xa4>)
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800457c:	f000 f87c 	bl	8004678 <FLASH_WaitForLastOperation>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d12e      	bne.n	80045e8 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_FLASH_Program+0xa4>)
 800458c:	2200      	movs	r2, #0
 800458e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f000 f8c0 	bl	8004720 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80045a0:	2301      	movs	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	e010      	b.n	80045c8 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d002      	beq.n	80045b2 <HAL_FLASH_Program+0x5e>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d10a      	bne.n	80045c8 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	68b8      	ldr	r0, [r7, #8]
 80045b8:	f000 f8d8 	bl	800476c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d102      	bne.n	80045c8 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80045c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045c6:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045cc:	f000 f854 	bl	8004678 <FLASH_WaitForLastOperation>
 80045d0:	4603      	mov	r3, r0
 80045d2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_FLASH_Program+0xa8>)
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	4906      	ldr	r1, [pc, #24]	; (80045fc <HAL_FLASH_Program+0xa8>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_FLASH_Program+0xa4>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000008 	.word	0x20000008
 80045fc:	40022000 	.word	0x40022000

08004600 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_FLASH_Unlock+0x38>)
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da0b      	bge.n	800462a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_FLASH_Unlock+0x38>)
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <HAL_FLASH_Unlock+0x3c>)
 8004616:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_FLASH_Unlock+0x38>)
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <HAL_FLASH_Unlock+0x40>)
 800461c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_FLASH_Unlock+0x38>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	da01      	bge.n	800462a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800462a:	79fb      	ldrb	r3, [r7, #7]
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40022000 	.word	0x40022000
 800463c:	45670123 	.word	0x45670123
 8004640:	cdef89ab 	.word	0xcdef89ab

08004644 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_FLASH_Lock+0x30>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <HAL_FLASH_Lock+0x30>)
 8004654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004658:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_FLASH_Lock+0x30>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da01      	bge.n	8004666 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004666:	79fb      	ldrb	r3, [r7, #7]
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40022000 	.word	0x40022000

08004678 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004680:	f7fc fd50 	bl	8001124 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004686:	e009      	b.n	800469c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8004688:	f7fc fd4c 	bl	8001124 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d201      	bcs.n	800469c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e038      	b.n	800470e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d0ee      	beq.n	8004688 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80046b2:	4013      	ands	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01e      	beq.n	80046fa <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <FLASH_WaitForLastOperation+0xa4>)
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <FLASH_WaitForLastOperation+0xa4>)
 80046c6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <FLASH_WaitForLastOperation+0x6a>
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	618b      	str	r3, [r1, #24]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <FLASH_WaitForLastOperation+0x7e>
 80046ec:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046f4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e009      	b.n	800470e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d102      	bne.n	800470c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004706:	4b04      	ldr	r3, [pc, #16]	; (8004718 <FLASH_WaitForLastOperation+0xa0>)
 8004708:	2201      	movs	r2, #1
 800470a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40022000 	.word	0x40022000
 800471c:	20000008 	.word	0x20000008

08004720 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <FLASH_Program_DoubleWord+0x48>)
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <FLASH_Program_DoubleWord+0x48>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800473e:	f3bf 8f6f 	isb	sy
}
 8004742:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	000a      	movs	r2, r1
 8004752:	2300      	movs	r3, #0
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	3104      	adds	r1, #4
 8004758:	4613      	mov	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40022000 	.word	0x40022000

0800476c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <FLASH_Program_Fast+0x68>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <FLASH_Program_Fast+0x68>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800478c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	60fb      	str	r3, [r7, #12]
  return(result);
 8004794:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004798:	b672      	cpsid	i
}
 800479a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3304      	adds	r3, #4
 80047a8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3304      	adds	r3, #4
 80047ae:	617b      	str	r3, [r7, #20]
    row_index--;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ef      	bne.n	800479c <FLASH_Program_Fast+0x30>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047c8:	bf00      	nop
 80047ca:	3724      	adds	r7, #36	; 0x24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40022000 	.word	0x40022000

080047d8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047e2:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_FLASHEx_Erase+0x16>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e08d      	b.n	800490a <HAL_FLASHEx_Erase+0x132>
 80047ee:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f8:	f7ff ff3e 	bl	8004678 <FLASH_WaitForLastOperation>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d17d      	bne.n	8004902 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004806:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004818:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800481e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004822:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004824:	4b3c      	ldr	r3, [pc, #240]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a38      	ldr	r2, [pc, #224]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 8004836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 800483e:	2203      	movs	r2, #3
 8004840:	771a      	strb	r2, [r3, #28]
 8004842:	e016      	b.n	8004872 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004844:	4b33      	ldr	r3, [pc, #204]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 8004846:	2201      	movs	r2, #1
 8004848:	771a      	strb	r2, [r3, #28]
 800484a:	e012      	b.n	8004872 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800484c:	4b32      	ldr	r3, [pc, #200]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004858:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2e      	ldr	r2, [pc, #184]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 800485e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004862:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 8004866:	2202      	movs	r2, #2
 8004868:	771a      	strb	r2, [r3, #28]
 800486a:	e002      	b.n	8004872 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800486c:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 800486e:	2200      	movs	r2, #0
 8004870:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d113      	bne.n	80048a2 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f84c 	bl	800491c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004888:	f7ff fef6 	bl	8004678 <FLASH_WaitForLastOperation>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 8004896:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6153      	str	r3, [r2, #20]
 80048a0:	e02d      	b.n	80048fe <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	e01d      	b.n	80048ee <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4619      	mov	r1, r3
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f000 f867 	bl	800498c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048c2:	f7ff fed9 	bl	8004678 <FLASH_WaitForLastOperation>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <HAL_FLASHEx_Erase+0x140>)
 80048d0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	601a      	str	r2, [r3, #0]
          break;
 80048e6:	e00a      	b.n	80048fe <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3d9      	bcc.n	80048b2 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80048fe:	f000 f889 	bl	8004a14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <HAL_FLASHEx_Erase+0x13c>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000008 	.word	0x20000008
 8004918:	40022000 	.word	0x40022000

0800491c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <FLASH_MassErase+0x6c>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d016      	beq.n	800495e <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <FLASH_MassErase+0x6c>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <FLASH_MassErase+0x6c>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <FLASH_MassErase+0x6c>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <FLASH_MassErase+0x6c>)
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	6153      	str	r3, [r2, #20]
 800495c:	e007      	b.n	800496e <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <FLASH_MassErase+0x6c>)
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <FLASH_MassErase+0x6c>)
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <FLASH_MassErase+0x6c>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <FLASH_MassErase+0x6c>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6153      	str	r3, [r2, #20]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40022000 	.word	0x40022000

0800498c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8004996:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <FLASH_PageErase+0x84>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <FLASH_PageErase+0x84>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4a1a      	ldr	r2, [pc, #104]	; (8004a10 <FLASH_PageErase+0x84>)
 80049a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ac:	6153      	str	r3, [r2, #20]
 80049ae:	e011      	b.n	80049d4 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <FLASH_PageErase+0x84>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <FLASH_PageErase+0x84>)
 80049c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c4:	6153      	str	r3, [r2, #20]
 80049c6:	e005      	b.n	80049d4 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <FLASH_PageErase+0x84>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <FLASH_PageErase+0x84>)
 80049ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049d2:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <FLASH_PageErase+0x84>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80049e4:	490a      	ldr	r1, [pc, #40]	; (8004a10 <FLASH_PageErase+0x84>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <FLASH_PageErase+0x84>)
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <FLASH_PageErase+0x84>)
 80049f0:	f043 0302 	orr.w	r3, r3, #2
 80049f4:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <FLASH_PageErase+0x84>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <FLASH_PageErase+0x84>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6153      	str	r3, [r2, #20]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40022000 	.word	0x40022000

08004a14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004a1a:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <FLASH_FlushCaches+0x80>)
 8004a1c:	7f1b      	ldrb	r3, [r3, #28]
 8004a1e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <FLASH_FlushCaches+0x18>
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d111      	bne.n	8004a50 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d002      	beq.n	8004a5c <FLASH_FlushCaches+0x48>
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d111      	bne.n	8004a80 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <FLASH_FlushCaches+0x84>)
 8004a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a7e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <FLASH_FlushCaches+0x80>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000008 	.word	0x20000008
 8004a98:	40022000 	.word	0x40022000

08004a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aaa:	e15a      	b.n	8004d62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 814c 	beq.w	8004d5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00b      	beq.n	8004ae4 <HAL_GPIO_Init+0x48>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d007      	beq.n	8004ae4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ad8:	2b11      	cmp	r3, #17
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b12      	cmp	r3, #18
 8004ae2:	d130      	bne.n	8004b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	f003 0201 	and.w	r2, r3, #1
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	2203      	movs	r2, #3
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_Init+0xea>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b12      	cmp	r3, #18
 8004b84:	d123      	bne.n	8004bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	08da      	lsrs	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3208      	adds	r2, #8
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	08da      	lsrs	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	2203      	movs	r2, #3
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	43db      	mvns	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80a6 	beq.w	8004d5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c10:	4b5b      	ldr	r3, [pc, #364]	; (8004d80 <HAL_GPIO_Init+0x2e4>)
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	4a5a      	ldr	r2, [pc, #360]	; (8004d80 <HAL_GPIO_Init+0x2e4>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8004c1c:	4b58      	ldr	r3, [pc, #352]	; (8004d80 <HAL_GPIO_Init+0x2e4>)
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c28:	4a56      	ldr	r2, [pc, #344]	; (8004d84 <HAL_GPIO_Init+0x2e8>)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	089b      	lsrs	r3, r3, #2
 8004c2e:	3302      	adds	r3, #2
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	220f      	movs	r2, #15
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c52:	d01f      	beq.n	8004c94 <HAL_GPIO_Init+0x1f8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a4c      	ldr	r2, [pc, #304]	; (8004d88 <HAL_GPIO_Init+0x2ec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d019      	beq.n	8004c90 <HAL_GPIO_Init+0x1f4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a4b      	ldr	r2, [pc, #300]	; (8004d8c <HAL_GPIO_Init+0x2f0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_GPIO_Init+0x1f0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <HAL_GPIO_Init+0x2f4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00d      	beq.n	8004c88 <HAL_GPIO_Init+0x1ec>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a49      	ldr	r2, [pc, #292]	; (8004d94 <HAL_GPIO_Init+0x2f8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <HAL_GPIO_Init+0x1e8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a48      	ldr	r2, [pc, #288]	; (8004d98 <HAL_GPIO_Init+0x2fc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_GPIO_Init+0x1e4>
 8004c7c:	2305      	movs	r3, #5
 8004c7e:	e00a      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c80:	2306      	movs	r3, #6
 8004c82:	e008      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e006      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e004      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e002      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_GPIO_Init+0x1fa>
 8004c94:	2300      	movs	r3, #0
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	f002 0203 	and.w	r2, r2, #3
 8004c9c:	0092      	lsls	r2, r2, #2
 8004c9e:	4093      	lsls	r3, r2
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ca6:	4937      	ldr	r1, [pc, #220]	; (8004d84 <HAL_GPIO_Init+0x2e8>)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	3302      	adds	r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d02:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d32:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <HAL_GPIO_Init+0x300>)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f ae9d 	bne.w	8004aac <HAL_GPIO_Init+0x10>
  }
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40010000 	.word	0x40010000
 8004d88:	48000400 	.word	0x48000400
 8004d8c:	48000800 	.word	0x48000800
 8004d90:	48000c00 	.word	0x48000c00
 8004d94:	48001000 	.word	0x48001000
 8004d98:	48001400 	.word	0x48001400
 8004d9c:	40010400 	.word	0x40010400

08004da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e001      	b.n	8004dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0be      	b.n	8004f90 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02e      	beq.n	8004ebc <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a4d      	ldr	r2, [pc, #308]	; (8004f98 <HAL_HRTIM_Init+0x198>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10b      	bne.n	8004e80 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004e68:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_HRTIM_Init+0x19c>)
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	4a4b      	ldr	r2, [pc, #300]	; (8004f9c <HAL_HRTIM_Init+0x19c>)
 8004e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e72:	6613      	str	r3, [r2, #96]	; 0x60
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <HAL_HRTIM_Init+0x19c>)
 8004e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004e8e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ea4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f86f 	bl	8004fa0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d012      	beq.n	8004ef4 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004edc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
 8004f08:	e03e      	b.n	8004f88 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004f0a:	7dfa      	ldrb	r2, [r7, #23]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3318      	adds	r3, #24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004f1e:	7dfa      	ldrb	r2, [r7, #23]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	331c      	adds	r3, #28
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004f32:	7dfa      	ldrb	r2, [r7, #23]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3320      	adds	r3, #32
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004f46:	7dfa      	ldrb	r2, [r7, #23]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3324      	adds	r3, #36	; 0x24
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004f5a:	7dfa      	ldrb	r2, [r7, #23]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3328      	adds	r3, #40	; 0x28
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004f6e:	7dfa      	ldrb	r2, [r7, #23]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3330      	adds	r3, #48	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	3301      	adds	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d9bd      	bls.n	8004f0a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40016800 	.word	0x40016800
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <HAL_HRTIM_MspInit>:
  * @brief  MSP initialization for a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef * hhrtim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_HRTIM_MspInit could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e045      	b.n	8005058 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d114      	bne.n	800500e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0202 	bic.w	r2, r2, #2
 8004ff4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800500c:	e01f      	b.n	800504e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0202 	orr.w	r2, r2, #2
 800501e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800502a:	f023 010c 	bic.w	r1, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 800506e:	f7fc f859 	bl	8001124 <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005074:	e014      	b.n	80050a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d010      	beq.n	80050a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800507e:	f7fc f851 	bl	8001124 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <HAL_HRTIM_PollForDLLCalibration+0x30>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2207      	movs	r2, #7
 8005098:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e011      	b.n	80050c4 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d1e1      	bne.n	8005076 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d101      	bne.n	80050e8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
 80050e6:	e015      	b.n	8005114 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d104      	bne.n	8005100 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f001 f8c2 	bl	8006282 <HRTIM_MasterBase_Config>
 80050fe:	e004      	b.n	800510a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f001 f8eb 	bl	80062e0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d101      	bne.n	8005138 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8005134:	2302      	movs	r3, #2
 8005136:	e1d7      	b.n	80054e8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8005142:	2302      	movs	r3, #2
 8005144:	e1d0      	b.n	80054e8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800515e:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005168:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005170:	f000 816d 	beq.w	800544e <HAL_HRTIM_ADCTriggerConfig+0x332>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517a:	f200 818d 	bhi.w	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	f000 813f 	beq.w	8005406 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518e:	f200 8183 	bhi.w	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	f000 8111 	beq.w	80053bc <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	f200 817b 	bhi.w	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d84b      	bhi.n	8005240 <HAL_HRTIM_ADCTriggerConfig+0x124>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8174 	beq.w	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	2b1f      	cmp	r3, #31
 80051b6:	f200 816f 	bhi.w	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	0800524b 	.word	0x0800524b
 80051c4:	0800526f 	.word	0x0800526f
 80051c8:	08005499 	.word	0x08005499
 80051cc:	08005295 	.word	0x08005295
 80051d0:	08005499 	.word	0x08005499
 80051d4:	08005499 	.word	0x08005499
 80051d8:	08005499 	.word	0x08005499
 80051dc:	080052bb 	.word	0x080052bb
 80051e0:	08005499 	.word	0x08005499
 80051e4:	08005499 	.word	0x08005499
 80051e8:	08005499 	.word	0x08005499
 80051ec:	08005499 	.word	0x08005499
 80051f0:	08005499 	.word	0x08005499
 80051f4:	08005499 	.word	0x08005499
 80051f8:	08005499 	.word	0x08005499
 80051fc:	080052e1 	.word	0x080052e1
 8005200:	08005499 	.word	0x08005499
 8005204:	08005499 	.word	0x08005499
 8005208:	08005499 	.word	0x08005499
 800520c:	08005499 	.word	0x08005499
 8005210:	08005499 	.word	0x08005499
 8005214:	08005499 	.word	0x08005499
 8005218:	08005499 	.word	0x08005499
 800521c:	08005499 	.word	0x08005499
 8005220:	08005499 	.word	0x08005499
 8005224:	08005499 	.word	0x08005499
 8005228:	08005499 	.word	0x08005499
 800522c:	08005499 	.word	0x08005499
 8005230:	08005499 	.word	0x08005499
 8005234:	08005499 	.word	0x08005499
 8005238:	08005499 	.word	0x08005499
 800523c:	08005329 	.word	0x08005329
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	f000 8095 	beq.w	8005372 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8005248:	e126      	b.n	8005498 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005250:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6852      	ldr	r2, [r2, #4]
 8005268:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 800526c:	e11d      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005274:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6852      	ldr	r2, [r2, #4]
 800528e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8005292:	e10a      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800529a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	019b      	lsls	r3, r3, #6
 80052a2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 80052b8:	e0f7      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80052c0:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	025b      	lsls	r3, r3, #9
 80052c8:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6852      	ldr	r2, [r2, #4]
 80052da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 80052de:	e0e4      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 021f 	bic.w	r2, r2, #31
 8005308:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 021f 	and.w	r2, r3, #31
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005326:	e0c0      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0b1b      	lsrs	r3, r3, #12
 8005336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8005350:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	015b      	lsls	r3, r3, #5
 8005362:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005370:	e09b      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005378:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800539a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80053ba:	e076      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80053e4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005404:	e051      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800540c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 800542c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	055b      	lsls	r3, r3, #21
 800543e:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800544c:	e02d      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005454:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8005476:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	069b      	lsls	r3, r3, #26
 8005488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005496:	e008      	b.n	80054aa <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2207      	movs	r2, #7
 800549c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80054a8:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b07      	cmp	r3, #7
 80054b4:	d101      	bne.n	80054ba <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e016      	b.n	80054e8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d805      	bhi.n	80054cc <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 80054ca:	e004      	b.n	80054d6 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d101      	bne.n	8005510 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	e135      	b.n	800577c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 800551a:	2302      	movs	r3, #2
 800551c:	e12e      	b.n	800577c <HAL_HRTIM_ADCPostScalerConfig+0x288>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	f000 80f8 	beq.w	8005728 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553e:	f200 8103 	bhi.w	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	f000 80de 	beq.w	8005708 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005552:	f200 80f9 	bhi.w	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	f000 80c5 	beq.w	80056e8 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	f200 80f1 	bhi.w	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b20      	cmp	r3, #32
 800556a:	d84b      	bhi.n	8005604 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80ea 	beq.w	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b1f      	cmp	r3, #31
 800557a:	f200 80e5 	bhi.w	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	0800560d 	.word	0x0800560d
 8005588:	0800562b 	.word	0x0800562b
 800558c:	08005749 	.word	0x08005749
 8005590:	0800564b 	.word	0x0800564b
 8005594:	08005749 	.word	0x08005749
 8005598:	08005749 	.word	0x08005749
 800559c:	08005749 	.word	0x08005749
 80055a0:	0800566b 	.word	0x0800566b
 80055a4:	08005749 	.word	0x08005749
 80055a8:	08005749 	.word	0x08005749
 80055ac:	08005749 	.word	0x08005749
 80055b0:	08005749 	.word	0x08005749
 80055b4:	08005749 	.word	0x08005749
 80055b8:	08005749 	.word	0x08005749
 80055bc:	08005749 	.word	0x08005749
 80055c0:	0800568b 	.word	0x0800568b
 80055c4:	08005749 	.word	0x08005749
 80055c8:	08005749 	.word	0x08005749
 80055cc:	08005749 	.word	0x08005749
 80055d0:	08005749 	.word	0x08005749
 80055d4:	08005749 	.word	0x08005749
 80055d8:	08005749 	.word	0x08005749
 80055dc:	08005749 	.word	0x08005749
 80055e0:	08005749 	.word	0x08005749
 80055e4:	08005749 	.word	0x08005749
 80055e8:	08005749 	.word	0x08005749
 80055ec:	08005749 	.word	0x08005749
 80055f0:	08005749 	.word	0x08005749
 80055f4:	08005749 	.word	0x08005749
 80055f8:	08005749 	.word	0x08005749
 80055fc:	08005749 	.word	0x08005749
 8005600:	080056ab 	.word	0x080056ab
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d05e      	beq.n	80056c8 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 800560a:	e09d      	b.n	8005748 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005614:	f023 011f 	bic.w	r1, r3, #31
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 021f 	and.w	r2, r3, #31
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005628:	e097      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005632:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005648:	e087      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005652:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005668:	e077      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005672:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	049b      	lsls	r3, r3, #18
 800567a:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005688:	e067      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005692:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80056a8:	e057      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056b2:	f023 011f 	bic.w	r1, r3, #31
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f003 021f 	and.w	r2, r3, #31
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80056c6:	e048      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056d0:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	019b      	lsls	r3, r3, #6
 80056d8:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80056e6:	e038      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056f0:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	031b      	lsls	r3, r3, #12
 80056f8:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005706:	e028      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005710:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	049b      	lsls	r3, r3, #18
 8005718:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005726:	e018      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005730:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005746:	e008      	b.n	800575a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2207      	movs	r2, #7
 800574c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005758:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b07      	cmp	r3, #7
 8005764:	d101      	bne.n	800576a <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e008      	b.n	800577c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d101      	bne.n	80057a4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
 80057a2:	e05f      	b.n	8005864 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e058      	b.n	8005864 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d104      	bne.n	80057d2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fdc8 	bl	8006360 <HRTIM_MasterWaveform_Config>
 80057d0:	e004      	b.n	80057dc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fe60 	bl	800649c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6819      	ldr	r1, [r3, #0]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4403      	add	r3, r0
 80057ee:	3320      	adds	r3, #32
 80057f0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6859      	ldr	r1, [r3, #4]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4403      	add	r3, r0
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6899      	ldr	r1, [r3, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4403      	add	r3, r0
 800581a:	3328      	adds	r3, #40	; 0x28
 800581c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68d9      	ldr	r1, [r3, #12]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4403      	add	r3, r0
 8005830:	332c      	adds	r3, #44	; 0x2c
 8005832:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6919      	ldr	r1, [r3, #16]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4403      	add	r3, r0
 8005846:	3330      	adds	r3, #48	; 0x30
 8005848:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f001 f929 	bl	8006aa4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d101      	bne.n	8005888 <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	e020      	b.n	80058ca <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005892:	2302      	movs	r3, #2
 8005894:	e019      	b.n	80058ca <HAL_HRTIM_WaveformTimerControl+0x5e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 ff8a 	bl	80067c4 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f001 f8f6 	bl	8006aa4 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d101      	bne.n	80058f0 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
 80058ee:	e067      	b.n	80059c0 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_HRTIM_DeadTimeConfig+0x2a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e060      	b.n	80059c0 <HAL_HRTIM_DeadTimeConfig+0xec>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005916:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	041a      	lsls	r2, r3, #16
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8005958:	4013      	ands	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4413      	add	r3, r2
 8005994:	33b8      	adds	r3, #184	; 0xb8
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 800599a:	4013      	ands	r3, r2
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	6811      	ldr	r1, [r2, #0]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	01db      	lsls	r3, r3, #7
 80059a8:	440b      	add	r3, r1
 80059aa:	33b8      	adds	r3, #184	; 0xb8
 80059ac:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	01ff0000 	.word	0x01ff0000
 80059d0:	3c002000 	.word	0x3c002000

080059d4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d101      	bne.n	80059f2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
 80059f0:	e157      	b.n	8005ca2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e150      	b.n	8005ca2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d140      	bne.n	8005a98 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	2b07      	cmp	r3, #7
 8005a1c:	d82a      	bhi.n	8005a74 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a45 	.word	0x08005a45
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a75 	.word	0x08005a75
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
 8005a3c:	08005a75 	.word	0x08005a75
 8005a40:	08005a69 	.word	0x08005a69
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	61da      	str	r2, [r3, #28]
        break;
 8005a4e:	e01a      	b.n	8005a86 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005a5a:	e014      	b.n	8005a86 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005a66:	e00e      	b.n	8005a86 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005a72:	e008      	b.n	8005a86 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2207      	movs	r2, #7
 8005a78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8005a84:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b07      	cmp	r3, #7
 8005a90:	f040 80fe 	bne.w	8005c90 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e104      	b.n	8005ca2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	2b07      	cmp	r3, #7
 8005a9e:	f200 80e3 	bhi.w	8005c68 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005c69 	.word	0x08005c69
 8005ab4:	08005b99 	.word	0x08005b99
 8005ab8:	08005c69 	.word	0x08005c69
 8005abc:	08005c69 	.word	0x08005c69
 8005ac0:	08005c69 	.word	0x08005c69
 8005ac4:	08005bad 	.word	0x08005bad
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	01db      	lsls	r3, r3, #7
 8005ad4:	440b      	add	r3, r1
 8005ad6:	339c      	adds	r3, #156	; 0x9c
 8005ad8:	601a      	str	r2, [r3, #0]
        break;
 8005ada:	e0d1      	b.n	8005c80 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	440b      	add	r3, r1
 8005aea:	33a4      	adds	r3, #164	; 0xa4
 8005aec:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d03f      	beq.n	8005b76 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	01db      	lsls	r3, r3, #7
 8005b00:	4413      	add	r3, r2
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6811      	ldr	r1, [r2, #0]
 8005b08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	01db      	lsls	r3, r3, #7
 8005b12:	440b      	add	r3, r1
 8005b14:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	01db      	lsls	r3, r3, #7
 8005b20:	4413      	add	r3, r2
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6809      	ldr	r1, [r1, #0]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	3301      	adds	r3, #1
 8005b32:	01db      	lsls	r3, r3, #7
 8005b34:	440b      	add	r3, r1
 8005b36:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b40:	d109      	bne.n	8005b56 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	01db      	lsls	r3, r3, #7
 8005b4e:	440b      	add	r3, r1
 8005b50:	339c      	adds	r3, #156	; 0x9c
 8005b52:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005b54:	e091      	b.n	8005c7a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b5e:	f040 808c 	bne.w	8005c7a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	01db      	lsls	r3, r3, #7
 8005b6e:	440b      	add	r3, r1
 8005b70:	33a8      	adds	r3, #168	; 0xa8
 8005b72:	601a      	str	r2, [r3, #0]
         break;
 8005b74:	e081      	b.n	8005c7a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	4413      	add	r3, r2
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	6811      	ldr	r1, [r2, #0]
 8005b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	440b      	add	r3, r1
 8005b94:	601a      	str	r2, [r3, #0]
         break;
 8005b96:	e070      	b.n	8005c7a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	440b      	add	r3, r1
 8005ba6:	33a8      	adds	r3, #168	; 0xa8
 8005ba8:	601a      	str	r2, [r3, #0]
        break;
 8005baa:	e069      	b.n	8005c80 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	01db      	lsls	r3, r3, #7
 8005bb8:	440b      	add	r3, r1
 8005bba:	33ac      	adds	r3, #172	; 0xac
 8005bbc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d03f      	beq.n	8005c46 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	01db      	lsls	r3, r3, #7
 8005bd0:	4413      	add	r3, r2
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	6811      	ldr	r1, [r2, #0]
 8005bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3301      	adds	r3, #1
 8005be0:	01db      	lsls	r3, r3, #7
 8005be2:	440b      	add	r3, r1
 8005be4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	3301      	adds	r3, #1
 8005bee:	01db      	lsls	r3, r3, #7
 8005bf0:	4413      	add	r3, r2
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6809      	ldr	r1, [r1, #0]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3301      	adds	r3, #1
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	440b      	add	r3, r1
 8005c08:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c12:	d109      	bne.n	8005c28 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	440b      	add	r3, r1
 8005c22:	339c      	adds	r3, #156	; 0x9c
 8005c24:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005c26:	e02a      	b.n	8005c7e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c30:	d125      	bne.n	8005c7e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6819      	ldr	r1, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	01db      	lsls	r3, r3, #7
 8005c3e:	440b      	add	r3, r1
 8005c40:	33a8      	adds	r3, #168	; 0xa8
 8005c42:	601a      	str	r2, [r3, #0]
         break;
 8005c44:	e01b      	b.n	8005c7e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	4413      	add	r3, r2
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	6811      	ldr	r1, [r2, #0]
 8005c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	01db      	lsls	r3, r3, #7
 8005c62:	440b      	add	r3, r1
 8005c64:	601a      	str	r2, [r3, #0]
         break;
 8005c66:	e00a      	b.n	8005c7e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005c78:	e002      	b.n	8005c80 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005c7e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d101      	bne.n	8005c90 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e008      	b.n	8005ca2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d101      	bne.n	8005cce <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e01d      	b.n	8005d0a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e016      	b.n	8005d0a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fdc6 	bl	8006884 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_HRTIM_WaveformOutputStart+0x18>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e01a      	b.n	8005d60 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_HRTIM_WaveformOutputStop+0x18>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e01a      	b.n	8005dba <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_HRTIM_WaveformCountStart+0x18>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e018      	b.n	8005e10 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_HRTIM_WaveformCountStop>:
  * @retval HAL status
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t Timers)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_HRTIM_WaveformCountStop+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e019      	b.n	8005e68 <HAL_HRTIM_WaveformCountStop+0x4c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	400a      	ands	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e05b      	b.n	8005f44 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68d9      	ldr	r1, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
 8005ed4:	e022      	b.n	8005f1c <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8005eda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d017      	beq.n	8005f16 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	4413      	add	r3, r2
 8005ef0:	338c      	adds	r3, #140	; 0x8c
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	3320      	adds	r3, #32
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	4302      	orrs	r2, r0
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	338c      	adds	r3, #140	; 0x8c
 8005f14:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d9d9      	bls.n	8005ed6 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6819      	ldr	r1, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;}
 8005f42:	2300      	movs	r3, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000028 	.word	0x20000028

08005f54 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8005f5e:	f240 137f 	movw	r3, #383	; 0x17f
 8005f62:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e065      	b.n	800603e <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	400a      	ands	r2, r1
 8005f96:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005fb0:	43da      	mvns	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	e023      	b.n	8006008 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4a22      	ldr	r2, [pc, #136]	; (800604c <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8005fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d018      	beq.n	8006002 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	4413      	add	r3, r2
 8005fda:	338c      	adds	r3, #140	; 0x8c
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	7bfa      	ldrb	r2, [r7, #15]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3320      	adds	r3, #32
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	4002      	ands	r2, r0
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	440b      	add	r3, r1
 8005ffe:	338c      	adds	r3, #140	; 0x8c
 8006000:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d9d8      	bls.n	8005fc0 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	3b01      	subs	r3, #1
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f9      	bne.n	800600e <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	43da      	mvns	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	400a      	ands	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000028 	.word	0x20000028

08006050 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2bff      	cmp	r3, #255	; 0xff
 800605e:	d103      	bne.n	8006068 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fd8d 	bl	8006b80 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006066:	e00a      	b.n	800607e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b06      	cmp	r3, #6
 800606c:	d103      	bne.n	8006076 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fe16 	bl	8006ca0 <HRTIM_Master_ISR>
}
 8006074:	e003      	b.n	800607e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fed6 	bl	8006e2a <HRTIM_Timer_ISR>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0307 	bic.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f023 0318 	bic.w	r3, r3, #24
 80062ac:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	619a      	str	r2, [r3, #24]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3301      	adds	r3, #1
 80062f4:	01db      	lsls	r3, r3, #7
 80062f6:	4413      	add	r3, r2
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f023 0307 	bic.w	r3, r3, #7
 8006302:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 0318 	bic.w	r3, r3, #24
 8006314:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	3301      	adds	r3, #1
 8006328:	01db      	lsls	r3, r3, #7
 800632a:	4413      	add	r3, r2
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	440b      	add	r3, r1
 800633e:	3394      	adds	r3, #148	; 0x94
 8006340:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	01db      	lsls	r3, r3, #7
 800634e:	440b      	add	r3, r1
 8006350:	3398      	adds	r3, #152	; 0x98
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800637a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0320 	bic.w	r3, r3, #32
 8006382:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006394:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b20      	cmp	r3, #32
 800639c:	d003      	beq.n	80063a6 <HRTIM_MasterWaveform_Config+0x46>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d108      	bne.n	80063b8 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063ac:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f043 0320 	orr.w	r3, r3, #32
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e021      	b.n	80063fc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d108      	bne.n	80063d2 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c6:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e014      	b.n	80063fc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d108      	bne.n	80063ec <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e007      	b.n	80063fc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063fa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006402:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006414:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006426:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006438:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800644a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800645e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006470:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4313      	orrs	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800649c:	b480      	push	{r7}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3301      	adds	r3, #1
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	6811      	ldr	r1, [r2, #0]
 80064ba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3301      	adds	r3, #1
 80064c2:	01db      	lsls	r3, r3, #7
 80064c4:	440b      	add	r3, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3301      	adds	r3, #1
 80064d0:	01db      	lsls	r3, r3, #7
 80064d2:	4413      	add	r3, r2
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	01db      	lsls	r3, r3, #7
 80064e0:	4413      	add	r3, r2
 80064e2:	33e8      	adds	r3, #232	; 0xe8
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	4413      	add	r3, r2
 80064f2:	33e4      	adds	r3, #228	; 0xe4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006500:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	f023 0320 	bic.w	r3, r3, #32
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	4313      	orrs	r3, r2
 8006512:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	2b20      	cmp	r3, #32
 800651a:	d003      	beq.n	8006524 <HRTIM_TimingUnitWaveform_Config+0x88>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d108      	bne.n	8006536 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	f043 0320 	orr.w	r3, r3, #32
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
 8006534:	e021      	b.n	800657a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d108      	bne.n	8006550 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	e014      	b.n	800657a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b04      	cmp	r3, #4
 8006556:	d108      	bne.n	800656a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
 8006568:	e007      	b.n	800657a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	f023 0320 	bic.w	r3, r3, #32
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006588:	4313      	orrs	r3, r2
 800658a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	4313      	orrs	r3, r2
 800659c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ac:	4313      	orrs	r3, r2
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	4313      	orrs	r3, r2
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d0:	4313      	orrs	r3, r2
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <HRTIM_TimingUnitWaveform_Config+0x154>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ec:	4313      	orrs	r3, r2
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006600:	d103      	bne.n	800660a <HRTIM_TimingUnitWaveform_Config+0x16e>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	4313      	orrs	r3, r2
 800661a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	4313      	orrs	r3, r2
 800662c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8006634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006640:	4313      	orrs	r3, r2
 8006642:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800664a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006660:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4313      	orrs	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006672:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	4313      	orrs	r3, r2
 800667c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006686:	d004      	beq.n	8006692 <HRTIM_TimingUnitWaveform_Config+0x1f6>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668c:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006690:	d103      	bne.n	800669a <HRTIM_TimingUnitWaveform_Config+0x1fe>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d108      	bne.n	80066ac <HRTIM_TimingUnitWaveform_Config+0x210>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80066a0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d850      	bhi.n	800676c <HRTIM_TimingUnitWaveform_Config+0x2d0>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <HRTIM_TimingUnitWaveform_Config+0x234>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066ff 	.word	0x080066ff
 80066d8:	08006715 	.word	0x08006715
 80066dc:	0800672b 	.word	0x0800672b
 80066e0:	08006741 	.word	0x08006741
 80066e4:	08006757 	.word	0x08006757
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61fb      	str	r3, [r7, #28]
      break;
 80066fc:	e037      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006704:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	61fb      	str	r3, [r7, #28]
      break;
 8006712:	e02c      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800671a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	4313      	orrs	r3, r2
 8006726:	61fb      	str	r3, [r7, #28]
      break;
 8006728:	e021      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006730:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	4313      	orrs	r3, r2
 800673c:	61fb      	str	r3, [r7, #28]
      break;
 800673e:	e016      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006746:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	015b      	lsls	r3, r3, #5
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	4313      	orrs	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]
      break;
 8006754:	e00b      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800675c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	019b      	lsls	r3, r3, #6
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	4313      	orrs	r3, r2
 8006768:	61fb      	str	r3, [r7, #28]
      break;
 800676a:	e000      	b.n	800676e <HRTIM_TimingUnitWaveform_Config+0x2d2>
    }

  default:
    break;
 800676c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	01db      	lsls	r3, r3, #7
 8006778:	4413      	add	r3, r2
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	4413      	add	r3, r2
 8006788:	33e8      	adds	r3, #232	; 0xe8
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	01db      	lsls	r3, r3, #7
 8006796:	4413      	add	r3, r2
 8006798:	33e4      	adds	r3, #228	; 0xe4
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	01db      	lsls	r3, r3, #7
 80067a6:	4413      	add	r3, r2
 80067a8:	33d4      	adds	r3, #212	; 0xd4
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80067b8:	bf00      	nop
 80067ba:	372c      	adds	r7, #44	; 0x2c
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	01db      	lsls	r3, r3, #7
 80067d8:	4413      	add	r3, r2
 80067da:	33ec      	adds	r3, #236	; 0xec
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0310 	bic.w	r3, r3, #16
 80067e6:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067fa:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800681e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d11a      	bne.n	8006868 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 0304 	bic.w	r3, r3, #4
 8006838:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 0302 	bic.w	r3, r3, #2
 800684a:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	01db      	lsls	r3, r3, #7
 8006870:	4413      	add	r3, r2
 8006872:	33ec      	adds	r3, #236	; 0xec
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	601a      	str	r2, [r3, #0]

}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006884:	b480      	push	{r7}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	33e4      	adds	r3, #228	; 0xe4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	01db      	lsls	r3, r3, #7
 80068ae:	4413      	add	r3, r2
 80068b0:	33b8      	adds	r3, #184	; 0xb8
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]

  switch (Output)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068bc:	f000 8088 	beq.w	80069d0 <HRTIM_OutputConfig+0x14c>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c6:	f200 8098 	bhi.w	80069fa <HRTIM_OutputConfig+0x176>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d0:	d06b      	beq.n	80069aa <HRTIM_OutputConfig+0x126>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d8:	f200 808f 	bhi.w	80069fa <HRTIM_OutputConfig+0x176>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e2:	d075      	beq.n	80069d0 <HRTIM_OutputConfig+0x14c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ea:	f200 8086 	bhi.w	80069fa <HRTIM_OutputConfig+0x176>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f4:	d059      	beq.n	80069aa <HRTIM_OutputConfig+0x126>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fc:	d87d      	bhi.n	80069fa <HRTIM_OutputConfig+0x176>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	d065      	beq.n	80069d0 <HRTIM_OutputConfig+0x14c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d877      	bhi.n	80069fa <HRTIM_OutputConfig+0x176>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b20      	cmp	r3, #32
 800690e:	d849      	bhi.n	80069a4 <HRTIM_OutputConfig+0x120>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d071      	beq.n	80069fa <HRTIM_OutputConfig+0x176>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3b01      	subs	r3, #1
 800691a:	2b1f      	cmp	r3, #31
 800691c:	d86d      	bhi.n	80069fa <HRTIM_OutputConfig+0x176>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <HRTIM_OutputConfig+0xa0>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	080069ab 	.word	0x080069ab
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069fb 	.word	0x080069fb
 8006930:	080069ab 	.word	0x080069ab
 8006934:	080069fb 	.word	0x080069fb
 8006938:	080069fb 	.word	0x080069fb
 800693c:	080069fb 	.word	0x080069fb
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069fb 	.word	0x080069fb
 8006948:	080069fb 	.word	0x080069fb
 800694c:	080069fb 	.word	0x080069fb
 8006950:	080069fb 	.word	0x080069fb
 8006954:	080069fb 	.word	0x080069fb
 8006958:	080069fb 	.word	0x080069fb
 800695c:	080069fb 	.word	0x080069fb
 8006960:	080069ab 	.word	0x080069ab
 8006964:	080069fb 	.word	0x080069fb
 8006968:	080069fb 	.word	0x080069fb
 800696c:	080069fb 	.word	0x080069fb
 8006970:	080069fb 	.word	0x080069fb
 8006974:	080069fb 	.word	0x080069fb
 8006978:	080069fb 	.word	0x080069fb
 800697c:	080069fb 	.word	0x080069fb
 8006980:	080069fb 	.word	0x080069fb
 8006984:	080069fb 	.word	0x080069fb
 8006988:	080069fb 	.word	0x080069fb
 800698c:	080069fb 	.word	0x080069fb
 8006990:	080069fb 	.word	0x080069fb
 8006994:	080069fb 	.word	0x080069fb
 8006998:	080069fb 	.word	0x080069fb
 800699c:	080069fb 	.word	0x080069fb
 80069a0:	080069d1 	.word	0x080069d1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d127      	bne.n	80069fa <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	01db      	lsls	r3, r3, #7
 80069b6:	440b      	add	r3, r1
 80069b8:	33bc      	adds	r3, #188	; 0xbc
 80069ba:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	01db      	lsls	r3, r3, #7
 80069c8:	440b      	add	r3, r1
 80069ca:	33c0      	adds	r3, #192	; 0xc0
 80069cc:	601a      	str	r2, [r3, #0]
      break;
 80069ce:	e015      	b.n	80069fc <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	01db      	lsls	r3, r3, #7
 80069dc:	440b      	add	r3, r1
 80069de:	33c4      	adds	r3, #196	; 0xc4
 80069e0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6819      	ldr	r1, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	01db      	lsls	r3, r3, #7
 80069ee:	440b      	add	r3, r1
 80069f0:	33c8      	adds	r3, #200	; 0xc8
 80069f2:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80069f4:	2310      	movs	r3, #16
 80069f6:	61bb      	str	r3, [r7, #24]
      break;
 80069f8:	e000      	b.n	80069fc <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 80069fa:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80069fc:	22fe      	movs	r2, #254	; 0xfe
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d111      	bne.n	8006a88 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10c      	bne.n	8006a88 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	4413      	add	r3, r2
 8006a92:	33e4      	adds	r3, #228	; 0xe4
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3724      	adds	r7, #36	; 0x24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d85e      	bhi.n	8006b72 <HRTIM_ForceRegistersUpdate+0xce>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HRTIM_ForceRegistersUpdate+0x18>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006b05 	.word	0x08006b05
 8006ac4:	08006b1b 	.word	0x08006b1b
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006b47 	.word	0x08006b47
 8006ad0:	08006b5d 	.word	0x08006b5d
 8006ad4:	08006ad9 	.word	0x08006ad9
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006aec:	e042      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0202 	orr.w	r2, r2, #2
 8006afe:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b02:	e037      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0204 	orr.w	r2, r2, #4
 8006b14:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b18:	e02c      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0208 	orr.w	r2, r2, #8
 8006b2a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b2e:	e021      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0210 	orr.w	r2, r2, #16
 8006b40:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b44:	e016      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0220 	orr.w	r2, r2, #32
 8006b56:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b5a:	e00b      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006b70:	e000      	b.n	8006b74 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8006b72:	bf00      	nop
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fa63 	bl	8006086 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fa5b 	bl	800609a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fa53 	bl	80060ae <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00c      	beq.n	8006c2c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fa4b 	bl	80060c2 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2210      	movs	r2, #16
 8006c46:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fa43 	bl	80060d6 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00c      	beq.n	8006c74 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fa3b 	bl	80060ea <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <HRTIM_HRTIM_ISR+0x118>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fa33 	bl	80060fe <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006cba:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <HRTIM_Master_ISR+0x62>
  {
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d010      	beq.n	8006d02 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ce8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fa08 	bl	8006112 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <HRTIM_Master_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d1e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff f9ff 	bl	8006126 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00c      	beq.n	8006d4c <HRTIM_Master_ISR+0xac>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006d44:	2106      	movs	r1, #6
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fa17 	bl	800617a <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HRTIM_Master_ISR+0xd0>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2202      	movs	r2, #2
 8006d66:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006d68:	2106      	movs	r1, #6
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fa10 	bl	8006190 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HRTIM_Master_ISR+0xf4>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006d8c:	2106      	movs	r1, #6
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fa09 	bl	80061a6 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HRTIM_Master_ISR+0x118>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2208      	movs	r2, #8
 8006dae:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006db0:	2106      	movs	r1, #6
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff fa02 	bl	80061bc <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HRTIM_Master_ISR+0x13c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006dd4:	2106      	movs	r1, #6
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff f9c4 	bl	8006164 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <HRTIM_Master_ISR+0x15e>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2220      	movs	r2, #32
 8006df6:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff f99e 	bl	800613a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00c      	beq.n	8006e22 <HRTIM_Master_ISR+0x182>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2240      	movs	r2, #64	; 0x40
 8006e18:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006e1a:	2106      	movs	r1, #6
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff f996 	bl	800614e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	01db      	lsls	r3, r3, #7
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	01db      	lsls	r3, r3, #7
 8006e4e:	4413      	add	r3, r2
 8006e50:	338c      	adds	r3, #140	; 0x8c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	01db      	lsls	r3, r3, #7
 8006e72:	4413      	add	r3, r2
 8006e74:	3388      	adds	r3, #136	; 0x88
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff f97c 	bl	800617a <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00b      	beq.n	8006eae <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	01db      	lsls	r3, r3, #7
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3388      	adds	r3, #136	; 0x88
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f971 	bl	8006190 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	01db      	lsls	r3, r3, #7
 8006eca:	4413      	add	r3, r2
 8006ecc:	3388      	adds	r3, #136	; 0x88
 8006ece:	2204      	movs	r2, #4
 8006ed0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff f966 	bl	80061a6 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d010      	beq.n	8006f06 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0308 	and.w	r3, r3, #8
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	01db      	lsls	r3, r3, #7
 8006ef6:	4413      	add	r3, r2
 8006ef8:	3388      	adds	r3, #136	; 0x88
 8006efa:	2208      	movs	r2, #8
 8006efc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff f95b 	bl	80061bc <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	01db      	lsls	r3, r3, #7
 8006f22:	4413      	add	r3, r2
 8006f24:	3388      	adds	r3, #136	; 0x88
 8006f26:	2210      	movs	r2, #16
 8006f28:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff f919 	bl	8006164 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d010      	beq.n	8006f5e <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	01db      	lsls	r3, r3, #7
 8006f4e:	4413      	add	r3, r2
 8006f50:	3388      	adds	r3, #136	; 0x88
 8006f52:	2240      	movs	r2, #64	; 0x40
 8006f54:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff f8f8 	bl	800614e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d010      	beq.n	8006f8a <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	01db      	lsls	r3, r3, #7
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3388      	adds	r3, #136	; 0x88
 8006f7e:	2280      	movs	r2, #128	; 0x80
 8006f80:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff f924 	bl	80061d2 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	01db      	lsls	r3, r3, #7
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3388      	adds	r3, #136	; 0x88
 8006faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fae:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff f918 	bl	80061e8 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00c      	beq.n	8006fe6 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	01db      	lsls	r3, r3, #7
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3388      	adds	r3, #136	; 0x88
 8006fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fdc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff f922 	bl	800622a <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d011      	beq.n	8007014 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	01db      	lsls	r3, r3, #7
 8007002:	4413      	add	r3, r2
 8007004:	3388      	adds	r3, #136	; 0x88
 8007006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800700a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff f916 	bl	8006240 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701a:	2b00      	cmp	r3, #0
 800701c:	d011      	beq.n	8007042 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00c      	beq.n	8007042 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	01db      	lsls	r3, r3, #7
 8007030:	4413      	add	r3, r2
 8007032:	3388      	adds	r3, #136	; 0x88
 8007034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007038:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff f90a 	bl	8006256 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d011      	beq.n	8007070 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	01db      	lsls	r3, r3, #7
 800705e:	4413      	add	r3, r2
 8007060:	3388      	adds	r3, #136	; 0x88
 8007062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007066:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff f8fe 	bl	800626c <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d011      	beq.n	800709e <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	01db      	lsls	r3, r3, #7
 800708c:	4413      	add	r3, r2
 800708e:	3388      	adds	r3, #136	; 0x88
 8007090:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007094:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff f8bb 	bl	8006214 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d011      	beq.n	80070cc <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	01db      	lsls	r3, r3, #7
 80070ba:	4413      	add	r3, r2
 80070bc:	3388      	adds	r3, #136	; 0x88
 80070be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070c2:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff f899 	bl	80061fe <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0bb      	b.n	8007262 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d101      	bne.n	80070fa <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e0b3      	b.n	8007262 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d101      	bne.n	800710a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e0ab      	b.n	8007262 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800710a:	4b58      	ldr	r3, [pc, #352]	; (800726c <HAL_OPAMP_Init+0x198>)
 800710c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710e:	4a57      	ldr	r2, [pc, #348]	; (800726c <HAL_OPAMP_Init+0x198>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	6613      	str	r3, [r2, #96]	; 0x60
 8007116:	4b55      	ldr	r3, [pc, #340]	; (800726c <HAL_OPAMP_Init+0x198>)
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f89c 	bl	8007274 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d003      	beq.n	800714c <HAL_OPAMP_Init+0x78>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b60      	cmp	r3, #96	; 0x60
 800714a:	d133      	bne.n	80071b4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f023 0110 	bic.w	r1, r3, #16
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b41      	ldr	r3, [pc, #260]	; (8007270 <HAL_OPAMP_Init+0x19c>)
 800716a:	4013      	ands	r3, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6851      	ldr	r1, [r2, #4]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6892      	ldr	r2, [r2, #8]
 8007174:	4311      	orrs	r1, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6912      	ldr	r2, [r2, #16]
 800717a:	430a      	orrs	r2, r1
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	7d09      	ldrb	r1, [r1, #20]
 8007180:	2901      	cmp	r1, #1
 8007182:	d102      	bne.n	800718a <HAL_OPAMP_Init+0xb6>
 8007184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007188:	e000      	b.n	800718c <HAL_OPAMP_Init+0xb8>
 800718a:	2100      	movs	r1, #0
 800718c:	4311      	orrs	r1, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007192:	4311      	orrs	r1, r2
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007198:	4311      	orrs	r1, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800719e:	04d2      	lsls	r2, r2, #19
 80071a0:	4311      	orrs	r1, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071a6:	0612      	lsls	r2, r2, #24
 80071a8:	4311      	orrs	r1, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	430b      	orrs	r3, r1
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e035      	b.n	8007220 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 0110 	bic.w	r1, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <HAL_OPAMP_Init+0x19c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6851      	ldr	r1, [r2, #4]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6892      	ldr	r2, [r2, #8]
 80071dc:	4311      	orrs	r1, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68d2      	ldr	r2, [r2, #12]
 80071e2:	4311      	orrs	r1, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6912      	ldr	r2, [r2, #16]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	7d09      	ldrb	r1, [r1, #20]
 80071ee:	2901      	cmp	r1, #1
 80071f0:	d102      	bne.n	80071f8 <HAL_OPAMP_Init+0x124>
 80071f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071f6:	e000      	b.n	80071fa <HAL_OPAMP_Init+0x126>
 80071f8:	2100      	movs	r1, #0
 80071fa:	4311      	orrs	r1, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007200:	4311      	orrs	r1, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007206:	4311      	orrs	r1, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800720c:	04d2      	lsls	r2, r2, #19
 800720e:	4311      	orrs	r1, r2
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007214:	0612      	lsls	r2, r2, #24
 8007216:	4311      	orrs	r1, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	430b      	orrs	r3, r1
 800721e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	2b00      	cmp	r3, #0
 8007228:	db10      	blt.n	800724c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000
 8007270:	e0003e11 	.word	0xe0003e11

08007274 <HAL_OPAMP_MspInit>:
  * @brief  Initialize the OPAMP MSP.
  * @param  hopamp OPAMP handle
  * @retval None
  */
__weak void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef *hopamp)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OPAMP_MspInit could be implemented in the user file
   */

  /* Example */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e01d      	b.n	80072dc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d102      	bne.n	80072b2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	e014      	b.n	80072dc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10c      	bne.n	80072d8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80072d6:	e001      	b.n	80072dc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3)
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp6)
#endif
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b092      	sub	sp, #72	; 0x48
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00e      	beq.n	800731c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
 8007310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_OPAMPEx_SelfCalibrateAll+0x32>
 8007316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <HAL_OPAMPEx_SelfCalibrateAll+0x38>
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
      || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f000 bda9 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b01      	cmp	r3, #1
 800732c:	d002      	beq.n	8007334 <HAL_OPAMPEx_SelfCalibrateAll+0x4a>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f000 bda0 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d002      	beq.n	8007346 <HAL_OPAMPEx_SelfCalibrateAll+0x5c>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f000 bd97 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b01      	cmp	r3, #1
 8007350:	d002      	beq.n	8007358 <HAL_OPAMPEx_SelfCalibrateAll+0x6e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f000 bd8e 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
  else if (hopamp4->State != HAL_OPAMP_STATE_READY)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d002      	beq.n	800736a <HAL_OPAMPEx_SelfCalibrateAll+0x80>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f000 bd85 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
  else if (hopamp5->State != HAL_OPAMP_STATE_READY)
 800736a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800736c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d002      	beq.n	800737c <HAL_OPAMPEx_SelfCalibrateAll+0x92>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f000 bd7c 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
  }
  else if (hopamp6->State != HAL_OPAMP_STATE_READY)
 800737c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b01      	cmp	r3, #1
 8007386:	d002      	beq.n	800738e <HAL_OPAMPEx_SelfCalibrateAll+0xa4>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f000 bd73 	b.w	8007e74 <HAL_OPAMPEx_SelfCalibrateAll+0xb8a>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0202 	orr.w	r2, r2, #2
 800739c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0202 	orr.w	r2, r2, #2
 80073ac:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0202 	orr.w	r2, r2, #2
 80073bc:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_FORCEVP);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0202 	orr.w	r2, r2, #2
 80073cc:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 80073ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0202 	orr.w	r2, r2, #2
 80073dc:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 80073de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0202 	orr.w	r2, r2, #2
 80073ec:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0210 	orr.w	r2, r2, #16
 80073fc:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0210 	orr.w	r2, r2, #16
 800740c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0210 	orr.w	r2, r2, #16
 800741c:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_USERTRIM);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0210 	orr.w	r2, r2, #16
 800742c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
 800742e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0210 	orr.w	r2, r2, #16
 800743c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
 800743e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0210 	orr.w	r2, r2, #16
 800744c:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800745c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800746c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747c:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_CALON);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800749c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
 800749e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ac:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80074bc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80074cc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80074dc:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80074ec:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80074fc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80074fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800750c:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0201 	orr.w	r2, r2, #1
 800753c:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0201 	orr.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800754e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800755e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 800756e:	2310      	movs	r3, #16
 8007570:	647b      	str	r3, [r7, #68]	; 0x44
    trimmingvaluen2 = 16UL;
 8007572:	2310      	movs	r3, #16
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
    trimmingvaluen3 = 16UL;
 8007576:	2310      	movs	r3, #16
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
 800757a:	2310      	movs	r3, #16
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen5 = 16UL;
 800757e:	2310      	movs	r3, #16
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen6 = 16UL;
 8007582:	2310      	movs	r3, #16
 8007584:	61fb      	str	r3, [r7, #28]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 8007586:	2308      	movs	r3, #8
 8007588:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 800758a:	e0a7      	b.n	80076dc <HAL_OPAMPEx_SelfCalibrateAll+0x3f2>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	061a      	lsls	r2, r3, #24
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80075ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ae:	061a      	lsls	r2, r3, #24
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	061a      	lsls	r2, r3, #24
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	061a      	lsls	r2, r3, #24
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80075e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	061a      	lsls	r2, r3, #24
 80075f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 80075fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	061a      	lsls	r2, r3, #24
 8007608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8007610:	2002      	movs	r0, #2
 8007612:	f7f9 fd93 	bl	800113c <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_OPAMPEx_SelfCalibrateAll+0x344>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 8007624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	647b      	str	r3, [r7, #68]	; 0x44
 800762c:	e003      	b.n	8007636 <HAL_OPAMPEx_SelfCalibrateAll+0x34c>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 800762e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <HAL_OPAMPEx_SelfCalibrateAll+0x364>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 8007644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800764c:	e003      	b.n	8007656 <HAL_OPAMPEx_SelfCalibrateAll+0x36c>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 800764e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 8007664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
 800766c:	e003      	b.n	8007676 <HAL_OPAMPEx_SelfCalibrateAll+0x38c>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 800766e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
      }

#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen4 += delta;
 8007684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800768c:	e003      	b.n	8007696 <HAL_OPAMPEx_SelfCalibrateAll+0x3ac>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen4 -= delta;
 800768e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen5 += delta;
 80076a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4413      	add	r3, r2
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
 80076ac:	e003      	b.n	80076b6 <HAL_OPAMPEx_SelfCalibrateAll+0x3cc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen5 -= delta;
 80076ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80076b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <HAL_OPAMPEx_SelfCalibrateAll+0x3e4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen6 += delta;
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4413      	add	r3, r2
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	e003      	b.n	80076d6 <HAL_OPAMPEx_SelfCalibrateAll+0x3ec>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f47f af54 	bne.w	800758c <HAL_OPAMPEx_SelfCalibrateAll+0x2a2>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80076ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f0:	061a      	lsls	r2, r3, #24
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007706:	061a      	lsls	r2, r3, #24
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	061a      	lsls	r2, r3, #24
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	061a      	lsls	r2, r3, #24
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	061a      	lsls	r2, r3, #24
 800774a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8007752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	061a      	lsls	r2, r3, #24
 8007760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8007768:	2002      	movs	r0, #2
 800776a:	f7f9 fce7 	bl	800113c <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <HAL_OPAMPEx_SelfCalibrateAll+0x4ae>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 800777c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800777e:	3301      	adds	r3, #1
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800778c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778e:	061a      	lsls	r2, r3, #24
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <HAL_OPAMPEx_SelfCalibrateAll+0x4d8>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	3301      	adds	r3, #1
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	061a      	lsls	r2, r3, #24
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00d      	beq.n	80077ec <HAL_OPAMPEx_SelfCalibrateAll+0x502>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	3301      	adds	r3, #1
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80077e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e2:	061a      	lsls	r2, r3, #24
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	601a      	str	r2, [r3, #0]
    }

#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <HAL_OPAMPEx_SelfCalibrateAll+0x52c>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen4++;
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	3301      	adds	r3, #1
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	061a      	lsls	r2, r3, #24
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00d      	beq.n	8007840 <HAL_OPAMPEx_SelfCalibrateAll+0x556>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen5++;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	3301      	adds	r3, #1
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 800782a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	061a      	lsls	r2, r3, #24
 8007838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <HAL_OPAMPEx_SelfCalibrateAll+0x580>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen6++;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8007854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	061a      	lsls	r2, r3, #24
 8007862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800787c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007890:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078a4:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078b8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80078ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078cc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80078ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078e0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 80078e2:	2310      	movs	r3, #16
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
    trimmingvaluep2 = 16UL;
 80078e6:	2310      	movs	r3, #16
 80078e8:	63bb      	str	r3, [r7, #56]	; 0x38
    trimmingvaluep3 = 16UL;
 80078ea:	2310      	movs	r3, #16
 80078ec:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluep4 = 16UL;
 80078ee:	2310      	movs	r3, #16
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep5 = 16UL;
 80078f2:	2310      	movs	r3, #16
 80078f4:	623b      	str	r3, [r7, #32]
    trimmingvaluep6 = 16UL;
 80078f6:	2310      	movs	r3, #16
 80078f8:	61bb      	str	r3, [r7, #24]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 80078fa:	2308      	movs	r3, #8
 80078fc:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80078fe:	e0a7      	b.n	8007a50 <HAL_OPAMPEx_SelfCalibrateAll+0x766>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	04da      	lsls	r2, r3, #19
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	04da      	lsls	r2, r3, #19
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	04da      	lsls	r2, r3, #19
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	04da      	lsls	r2, r3, #19
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8007958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	04da      	lsls	r2, r3, #19
 8007966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 800796e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	04da      	lsls	r2, r3, #19
 800797c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 8007984:	2002      	movs	r0, #2
 8007986:	f7f9 fbd9 	bl	800113c <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <HAL_OPAMPEx_SelfCalibrateAll+0x6b8>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 8007998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	4413      	add	r3, r2
 800799e:	643b      	str	r3, [r7, #64]	; 0x40
 80079a0:	e003      	b.n	80079aa <HAL_OPAMPEx_SelfCalibrateAll+0x6c0>
      }
      else
      {
        trimmingvaluep1 -= delta;
 80079a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d004      	beq.n	80079c2 <HAL_OPAMPEx_SelfCalibrateAll+0x6d8>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 80079b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	4413      	add	r3, r2
 80079be:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c0:	e003      	b.n	80079ca <HAL_OPAMPEx_SelfCalibrateAll+0x6e0>
      }
      else
      {
        trimmingvaluep2 -= delta;
 80079c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <HAL_OPAMPEx_SelfCalibrateAll+0x6f8>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4413      	add	r3, r2
 80079de:	633b      	str	r3, [r7, #48]	; 0x30
 80079e0:	e003      	b.n	80079ea <HAL_OPAMPEx_SelfCalibrateAll+0x700>
      }
      else
      {
        trimmingvaluep3 -= delta;
 80079e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30
      }

#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <HAL_OPAMPEx_SelfCalibrateAll+0x718>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep4 += delta;
 80079f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	4413      	add	r3, r2
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a00:	e003      	b.n	8007a0a <HAL_OPAMPEx_SelfCalibrateAll+0x720>
      }
      else
      {
        trimmingvaluep4 -= delta;
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <HAL_OPAMPEx_SelfCalibrateAll+0x738>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep5 += delta;
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	623b      	str	r3, [r7, #32]
 8007a20:	e003      	b.n	8007a2a <HAL_OPAMPEx_SelfCalibrateAll+0x740>
      }
      else
      {
        trimmingvaluep5 -= delta;
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <HAL_OPAMPEx_SelfCalibrateAll+0x758>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep6 += delta;
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e003      	b.n	8007a4a <HAL_OPAMPEx_SelfCalibrateAll+0x760>
      }
      else
      {
        trimmingvaluep6 -= delta;
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f47f af54 	bne.w	8007900 <HAL_OPAMPEx_SelfCalibrateAll+0x616>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a64:	04da      	lsls	r2, r3, #19
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	04da      	lsls	r2, r3, #19
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	04da      	lsls	r2, r3, #19
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	04da      	lsls	r2, r3, #19
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8007ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	04da      	lsls	r2, r3, #19
 8007abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8007ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	04da      	lsls	r2, r3, #19
 8007ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8007adc:	2002      	movs	r0, #2
 8007ade:	f7f9 fb2d 	bl	800113c <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00d      	beq.n	8007b0c <HAL_OPAMPEx_SelfCalibrateAll+0x822>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8007af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af2:	3301      	adds	r3, #1
 8007af4:	643b      	str	r3, [r7, #64]	; 0x40
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b02:	04da      	lsls	r2, r3, #19
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <HAL_OPAMPEx_SelfCalibrateAll+0x84c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	04da      	lsls	r2, r3, #19
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00d      	beq.n	8007b60 <HAL_OPAMPEx_SelfCalibrateAll+0x876>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	3301      	adds	r3, #1
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	04da      	lsls	r2, r3, #19
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]
    }

#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <HAL_OPAMPEx_SelfCalibrateAll+0x8a0>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep4++;
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	3301      	adds	r3, #1
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	04da      	lsls	r2, r3, #19
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <HAL_OPAMPEx_SelfCalibrateAll+0x8ca>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep5++;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8007b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	04da      	lsls	r2, r3, #19
 8007bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <HAL_OPAMPEx_SelfCalibrateAll+0x8f4>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep6++;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	04da      	lsls	r2, r3, #19
 8007bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bfc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c0c:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_CALON);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
 8007c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c2c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
 8007c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c3c:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0202 	bic.w	r2, r2, #2
 8007cac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0202 	bic.w	r2, r2, #2
 8007cbc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0202 	bic.w	r2, r2, #2
 8007ccc:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0202 	bic.w	r2, r2, #2
 8007cdc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0202 	bic.w	r2, r2, #2
 8007cec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8007cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0202 	bic.w	r2, r2, #2
 8007cfc:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timing) results in init structure. */
    /* Select user timing mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d02:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d08:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d0e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    hopamp4->Init.TrimmingValueN = trimmingvaluen4;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
 8007d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    hopamp4->Init.TrimmingValueP = trimmingvaluep4;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp5->Init.TrimmingValueP = trimmingvaluep5;
 8007d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
 8007d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timing mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2210      	movs	r2, #16
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2210      	movs	r2, #16
 8007d50:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2210      	movs	r2, #16
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d60:	2210      	movs	r2, #16
 8007d62:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8007d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d66:	2210      	movs	r2, #16
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d76:	061a      	lsls	r2, r3, #24
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8c:	061a      	lsls	r2, r3, #24
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	061a      	lsls	r2, r3, #24
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	061a      	lsls	r2, r3, #24
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	061a      	lsls	r2, r3, #24
 8007dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8007dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	061a      	lsls	r2, r3, #24
 8007de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	601a      	str	r2, [r3, #0]
#elif defined(STM32G491xx) || defined(STM32G4A1xx)
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfa:	04da      	lsls	r2, r3, #19
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	04da      	lsls	r2, r3, #19
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	04da      	lsls	r2, r3, #19
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	04da      	lsls	r2, r3, #19
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8007e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	04da      	lsls	r2, r3, #19
 8007e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8007e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	04da      	lsls	r2, r3, #19
 8007e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3748      	adds	r7, #72	; 0x48
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d141      	bne.n	8007f0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e8a:	4b4b      	ldr	r3, [pc, #300]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	d131      	bne.n	8007efc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e98:	4b47      	ldr	r3, [pc, #284]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e9e:	4a46      	ldr	r2, [pc, #280]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ea8:	4b43      	ldr	r3, [pc, #268]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007eb0:	4a41      	ldr	r2, [pc, #260]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007eb8:	4b40      	ldr	r3, [pc, #256]	; (8007fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2232      	movs	r2, #50	; 0x32
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
 8007ec2:	4a3f      	ldr	r2, [pc, #252]	; (8007fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	0c9b      	lsrs	r3, r3, #18
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ece:	e002      	b.n	8007ed6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ed6:	4b38      	ldr	r3, [pc, #224]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee2:	d102      	bne.n	8007eea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1f2      	bne.n	8007ed0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007eea:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef6:	d158      	bne.n	8007faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e057      	b.n	8007fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007efc:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f02:	4a2d      	ldr	r2, [pc, #180]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f0c:	e04d      	b.n	8007faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f14:	d141      	bne.n	8007f9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f16:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d131      	bne.n	8007f88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f24:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f2a:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f34:	4b20      	ldr	r3, [pc, #128]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f44:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2232      	movs	r2, #50	; 0x32
 8007f4a:	fb02 f303 	mul.w	r3, r2, r3
 8007f4e:	4a1c      	ldr	r2, [pc, #112]	; (8007fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f50:	fba2 2303 	umull	r2, r3, r2, r3
 8007f54:	0c9b      	lsrs	r3, r3, #18
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f5a:	e002      	b.n	8007f62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6e:	d102      	bne.n	8007f76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f2      	bne.n	8007f5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f76:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f82:	d112      	bne.n	8007faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e011      	b.n	8007fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f88:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8e:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f98:	e007      	b.n	8007faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fa2:	4a05      	ldr	r2, [pc, #20]	; (8007fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	40007000 	.word	0x40007000
 8007fbc:	2000004c 	.word	0x2000004c
 8007fc0:	431bde83 	.word	0x431bde83

08007fc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd2:	6093      	str	r3, [r2, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40007000 	.word	0x40007000

08007fe4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fea:	f7f9 f89b 	bl	8001124 <HAL_GetTick>
 8007fee:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007ff0:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a38      	ldr	r2, [pc, #224]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8007ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffa:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ffe:	f7f9 f891 	bl	8001124 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e05f      	b.n	80080d0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008010:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800801c:	4b2e      	ldr	r3, [pc, #184]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4a2d      	ldr	r2, [pc, #180]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8008022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008026:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008028:	f7f9 f87c 	bl	8001124 <HAL_GetTick>
 800802c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800802e:	4b2a      	ldr	r3, [pc, #168]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8008030:	2201      	movs	r2, #1
 8008032:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8008034:	e00a      	b.n	800804c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008036:	f7f9 f875 	bl	8001124 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f241 3288 	movw	r2, #5000	; 0x1388
 8008044:	4293      	cmp	r3, r2
 8008046:	d901      	bls.n	800804c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e041      	b.n	80080d0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800804c:	4b22      	ldr	r3, [pc, #136]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 030c 	and.w	r3, r3, #12
 8008054:	2b04      	cmp	r3, #4
 8008056:	d1ee      	bne.n	8008036 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8008058:	4b20      	ldr	r3, [pc, #128]	; (80080dc <HAL_RCC_DeInit+0xf8>)
 800805a:	4a21      	ldr	r2, [pc, #132]	; (80080e0 <HAL_RCC_DeInit+0xfc>)
 800805c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800805e:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <HAL_RCC_DeInit+0x100>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7f9 f812 	bl	800108c <HAL_InitTick>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e02e      	b.n	80080d0 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8008072:	4b19      	ldr	r3, [pc, #100]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 8008074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008078:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800807a:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 800807c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008080:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008082:	f7f9 f84f 	bl	8001124 <HAL_GetTick>
 8008086:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008088:	e008      	b.n	800809c <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800808a:	f7f9 f84b 	bl	8001124 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e019      	b.n	80080d0 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f0      	bne.n	800808a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 80080aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080ae:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 80080b8:	f04f 32ff 	mov.w	r2, #4294967295
 80080bc:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 80080c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080c4:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <HAL_RCC_DeInit+0xf4>)
 80080c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40021000 	.word	0x40021000
 80080dc:	2000004c 	.word	0x2000004c
 80080e0:	00f42400 	.word	0x00f42400
 80080e4:	20000000 	.word	0x20000000

080080e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e308      	b.n	800870c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d075      	beq.n	80081f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008106:	4ba3      	ldr	r3, [pc, #652]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
 800810e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008110:	4ba0      	ldr	r3, [pc, #640]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d102      	bne.n	8008126 <HAL_RCC_OscConfig+0x3e>
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b03      	cmp	r3, #3
 8008124:	d002      	beq.n	800812c <HAL_RCC_OscConfig+0x44>
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b08      	cmp	r3, #8
 800812a:	d10b      	bne.n	8008144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812c:	4b99      	ldr	r3, [pc, #612]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d05b      	beq.n	80081f0 <HAL_RCC_OscConfig+0x108>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d157      	bne.n	80081f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e2e3      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814c:	d106      	bne.n	800815c <HAL_RCC_OscConfig+0x74>
 800814e:	4b91      	ldr	r3, [pc, #580]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a90      	ldr	r2, [pc, #576]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e01d      	b.n	8008198 <HAL_RCC_OscConfig+0xb0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008164:	d10c      	bne.n	8008180 <HAL_RCC_OscConfig+0x98>
 8008166:	4b8b      	ldr	r3, [pc, #556]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a8a      	ldr	r2, [pc, #552]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800816c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	4b88      	ldr	r3, [pc, #544]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a87      	ldr	r2, [pc, #540]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e00b      	b.n	8008198 <HAL_RCC_OscConfig+0xb0>
 8008180:	4b84      	ldr	r3, [pc, #528]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a83      	ldr	r2, [pc, #524]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	4b81      	ldr	r3, [pc, #516]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a80      	ldr	r2, [pc, #512]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d013      	beq.n	80081c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7f8 ffc0 	bl	8001124 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081a8:	f7f8 ffbc 	bl	8001124 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b64      	cmp	r3, #100	; 0x64
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e2a8      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081ba:	4b76      	ldr	r3, [pc, #472]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0xc0>
 80081c6:	e014      	b.n	80081f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7f8 ffac 	bl	8001124 <HAL_GetTick>
 80081cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081d0:	f7f8 ffa8 	bl	8001124 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b64      	cmp	r3, #100	; 0x64
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e294      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80081e2:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0xe8>
 80081ee:	e000      	b.n	80081f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d075      	beq.n	80082ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081fe:	4b65      	ldr	r3, [pc, #404]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 030c 	and.w	r3, r3, #12
 8008206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008208:	4b62      	ldr	r3, [pc, #392]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0303 	and.w	r3, r3, #3
 8008210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b0c      	cmp	r3, #12
 8008216:	d102      	bne.n	800821e <HAL_RCC_OscConfig+0x136>
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d002      	beq.n	8008224 <HAL_RCC_OscConfig+0x13c>
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d11f      	bne.n	8008264 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008224:	4b5b      	ldr	r3, [pc, #364]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_RCC_OscConfig+0x154>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e267      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823c:	4b55      	ldr	r3, [pc, #340]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	061b      	lsls	r3, r3, #24
 800824a:	4952      	ldr	r1, [pc, #328]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800824c:	4313      	orrs	r3, r2
 800824e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008250:	4b51      	ldr	r3, [pc, #324]	; (8008398 <HAL_RCC_OscConfig+0x2b0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 ff19 	bl	800108c <HAL_InitTick>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d043      	beq.n	80082e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e253      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d023      	beq.n	80082b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a48      	ldr	r2, [pc, #288]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7f8 ff54 	bl	8001124 <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008280:	f7f8 ff50 	bl	8001124 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e23c      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008292:	4b40      	ldr	r3, [pc, #256]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f0      	beq.n	8008280 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829e:	4b3d      	ldr	r3, [pc, #244]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	061b      	lsls	r3, r3, #24
 80082ac:	4939      	ldr	r1, [pc, #228]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	604b      	str	r3, [r1, #4]
 80082b2:	e01a      	b.n	80082ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b4:	4b37      	ldr	r3, [pc, #220]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a36      	ldr	r2, [pc, #216]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7f8 ff30 	bl	8001124 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c8:	f7f8 ff2c 	bl	8001124 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e218      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082da:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1f0      	bne.n	80082c8 <HAL_RCC_OscConfig+0x1e0>
 80082e6:	e000      	b.n	80082ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d03c      	beq.n	8008370 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01c      	beq.n	8008338 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082fe:	4b25      	ldr	r3, [pc, #148]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008304:	4a23      	ldr	r2, [pc, #140]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830e:	f7f8 ff09 	bl	8001124 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008316:	f7f8 ff05 	bl	8001124 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e1f1      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0ef      	beq.n	8008316 <HAL_RCC_OscConfig+0x22e>
 8008336:	e01b      	b.n	8008370 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 800833a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800833e:	4a15      	ldr	r2, [pc, #84]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008348:	f7f8 feec 	bl	8001124 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008350:	f7f8 fee8 	bl	8001124 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e1d4      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ef      	bne.n	8008350 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80ab 	beq.w	80084d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800837e:	2300      	movs	r3, #0
 8008380:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008382:	4b04      	ldr	r3, [pc, #16]	; (8008394 <HAL_RCC_OscConfig+0x2ac>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_RCC_OscConfig+0x2b4>
 800838e:	2301      	movs	r3, #1
 8008390:	e005      	b.n	800839e <HAL_RCC_OscConfig+0x2b6>
 8008392:	bf00      	nop
 8008394:	40021000 	.word	0x40021000
 8008398:	20000000 	.word	0x20000000
 800839c:	2300      	movs	r3, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00d      	beq.n	80083be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083a2:	4baf      	ldr	r3, [pc, #700]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	4aae      	ldr	r2, [pc, #696]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	6593      	str	r3, [r2, #88]	; 0x58
 80083ae:	4bac      	ldr	r3, [pc, #688]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80083b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80083ba:	2301      	movs	r3, #1
 80083bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083be:	4ba9      	ldr	r3, [pc, #676]	; (8008664 <HAL_RCC_OscConfig+0x57c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d118      	bne.n	80083fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083ca:	4ba6      	ldr	r3, [pc, #664]	; (8008664 <HAL_RCC_OscConfig+0x57c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4aa5      	ldr	r2, [pc, #660]	; (8008664 <HAL_RCC_OscConfig+0x57c>)
 80083d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083d6:	f7f8 fea5 	bl	8001124 <HAL_GetTick>
 80083da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083dc:	e008      	b.n	80083f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083de:	f7f8 fea1 	bl	8001124 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d901      	bls.n	80083f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e18d      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083f0:	4b9c      	ldr	r3, [pc, #624]	; (8008664 <HAL_RCC_OscConfig+0x57c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f0      	beq.n	80083de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d108      	bne.n	8008416 <HAL_RCC_OscConfig+0x32e>
 8008404:	4b96      	ldr	r3, [pc, #600]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840a:	4a95      	ldr	r2, [pc, #596]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008414:	e024      	b.n	8008460 <HAL_RCC_OscConfig+0x378>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d110      	bne.n	8008440 <HAL_RCC_OscConfig+0x358>
 800841e:	4b90      	ldr	r3, [pc, #576]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008424:	4a8e      	ldr	r2, [pc, #568]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008426:	f043 0304 	orr.w	r3, r3, #4
 800842a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800842e:	4b8c      	ldr	r3, [pc, #560]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008434:	4a8a      	ldr	r2, [pc, #552]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800843e:	e00f      	b.n	8008460 <HAL_RCC_OscConfig+0x378>
 8008440:	4b87      	ldr	r3, [pc, #540]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008446:	4a86      	ldr	r2, [pc, #536]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008450:	4b83      	ldr	r3, [pc, #524]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	4a82      	ldr	r2, [pc, #520]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008458:	f023 0304 	bic.w	r3, r3, #4
 800845c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d016      	beq.n	8008496 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008468:	f7f8 fe5c 	bl	8001124 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800846e:	e00a      	b.n	8008486 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008470:	f7f8 fe58 	bl	8001124 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	f241 3288 	movw	r2, #5000	; 0x1388
 800847e:	4293      	cmp	r3, r2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e142      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008486:	4b76      	ldr	r3, [pc, #472]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0ed      	beq.n	8008470 <HAL_RCC_OscConfig+0x388>
 8008494:	e015      	b.n	80084c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008496:	f7f8 fe45 	bl	8001124 <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800849c:	e00a      	b.n	80084b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849e:	f7f8 fe41 	bl	8001124 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e12b      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084b4:	4b6a      	ldr	r3, [pc, #424]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1ed      	bne.n	800849e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084c2:	7ffb      	ldrb	r3, [r7, #31]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c8:	4b65      	ldr	r3, [pc, #404]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80084ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084cc:	4a64      	ldr	r2, [pc, #400]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80084ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d03c      	beq.n	800855a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d01c      	beq.n	8008522 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084e8:	4b5d      	ldr	r3, [pc, #372]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80084ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084ee:	4a5c      	ldr	r2, [pc, #368]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f8:	f7f8 fe14 	bl	8001124 <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008500:	f7f8 fe10 	bl	8001124 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0fc      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008512:	4b53      	ldr	r3, [pc, #332]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0ef      	beq.n	8008500 <HAL_RCC_OscConfig+0x418>
 8008520:	e01b      	b.n	800855a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008522:	4b4f      	ldr	r3, [pc, #316]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008528:	4a4d      	ldr	r2, [pc, #308]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008532:	f7f8 fdf7 	bl	8001124 <HAL_GetTick>
 8008536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008538:	e008      	b.n	800854c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800853a:	f7f8 fdf3 	bl	8001124 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e0df      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800854c:	4b44      	ldr	r3, [pc, #272]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800854e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1ef      	bne.n	800853a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80d3 	beq.w	800870a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008564:	4b3e      	ldr	r3, [pc, #248]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f003 030c 	and.w	r3, r3, #12
 800856c:	2b0c      	cmp	r3, #12
 800856e:	f000 808d 	beq.w	800868c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d15a      	bne.n	8008630 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800857a:	4b39      	ldr	r3, [pc, #228]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a38      	ldr	r2, [pc, #224]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008586:	f7f8 fdcd 	bl	8001124 <HAL_GetTick>
 800858a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800858c:	e008      	b.n	80085a0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858e:	f7f8 fdc9 	bl	8001124 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d901      	bls.n	80085a0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e0b5      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085a0:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f0      	bne.n	800858e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ac:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <HAL_RCC_OscConfig+0x580>)
 80085b2:	4013      	ands	r3, r2
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6a11      	ldr	r1, [r2, #32]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085bc:	3a01      	subs	r2, #1
 80085be:	0112      	lsls	r2, r2, #4
 80085c0:	4311      	orrs	r1, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80085c6:	0212      	lsls	r2, r2, #8
 80085c8:	4311      	orrs	r1, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085ce:	0852      	lsrs	r2, r2, #1
 80085d0:	3a01      	subs	r2, #1
 80085d2:	0552      	lsls	r2, r2, #21
 80085d4:	4311      	orrs	r1, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085da:	0852      	lsrs	r2, r2, #1
 80085dc:	3a01      	subs	r2, #1
 80085de:	0652      	lsls	r2, r2, #25
 80085e0:	4311      	orrs	r1, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085e6:	06d2      	lsls	r2, r2, #27
 80085e8:	430a      	orrs	r2, r1
 80085ea:	491d      	ldr	r1, [pc, #116]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1a      	ldr	r2, [pc, #104]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80085fc:	4b18      	ldr	r3, [pc, #96]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008606:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7f8 fd8c 	bl	8001124 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008610:	f7f8 fd88 	bl	8001124 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e074      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008622:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f0      	beq.n	8008610 <HAL_RCC_OscConfig+0x528>
 800862e:	e06c      	b.n	800870a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008630:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0a      	ldr	r2, [pc, #40]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800863a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800863c:	4b08      	ldr	r3, [pc, #32]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4a07      	ldr	r2, [pc, #28]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4a04      	ldr	r2, [pc, #16]	; (8008660 <HAL_RCC_OscConfig+0x578>)
 800864e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008656:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7f8 fd64 	bl	8001124 <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800865e:	e00e      	b.n	800867e <HAL_RCC_OscConfig+0x596>
 8008660:	40021000 	.word	0x40021000
 8008664:	40007000 	.word	0x40007000
 8008668:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800866c:	f7f8 fd5a 	bl	8001124 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e046      	b.n	800870c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <HAL_RCC_OscConfig+0x62c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0x584>
 800868a:	e03e      	b.n	800870a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e039      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008698:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <HAL_RCC_OscConfig+0x62c>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f003 0203 	and.w	r2, r3, #3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d12c      	bne.n	8008706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	3b01      	subs	r3, #1
 80086b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d123      	bne.n	8008706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d11b      	bne.n	8008706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d113      	bne.n	8008706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	3b01      	subs	r3, #1
 80086ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d109      	bne.n	8008706 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	085b      	lsrs	r3, r3, #1
 80086fe:	3b01      	subs	r3, #1
 8008700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008702:	429a      	cmp	r2, r3
 8008704:	d001      	beq.n	800870a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000

08008718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e11e      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008730:	4b91      	ldr	r3, [pc, #580]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d910      	bls.n	8008760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800873e:	4b8e      	ldr	r3, [pc, #568]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f023 020f 	bic.w	r2, r3, #15
 8008746:	498c      	ldr	r1, [pc, #560]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	4313      	orrs	r3, r2
 800874c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800874e:	4b8a      	ldr	r3, [pc, #552]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d001      	beq.n	8008760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e106      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d073      	beq.n	8008854 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d129      	bne.n	80087c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008774:	4b81      	ldr	r3, [pc, #516]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e0f4      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008784:	f000 f99c 	bl	8008ac0 <RCC_GetSysClockFreqFromPLLSource>
 8008788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4a7c      	ldr	r2, [pc, #496]	; (8008980 <HAL_RCC_ClockConfig+0x268>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d93f      	bls.n	8008812 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008792:	4b7a      	ldr	r3, [pc, #488]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d033      	beq.n	8008812 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d12f      	bne.n	8008812 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80087b2:	4b72      	ldr	r3, [pc, #456]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087ba:	4a70      	ldr	r2, [pc, #448]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80087bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80087c2:	2380      	movs	r3, #128	; 0x80
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e024      	b.n	8008812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d107      	bne.n	80087e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087d0:	4b6a      	ldr	r3, [pc, #424]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d109      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0c6      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087e0:	4b66      	ldr	r3, [pc, #408]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0be      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80087f0:	f000 f8ce 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4a61      	ldr	r2, [pc, #388]	; (8008980 <HAL_RCC_ClockConfig+0x268>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d909      	bls.n	8008812 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80087fe:	4b5f      	ldr	r3, [pc, #380]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008806:	4a5d      	ldr	r2, [pc, #372]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800880c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008812:	4b5a      	ldr	r3, [pc, #360]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f023 0203 	bic.w	r2, r3, #3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4957      	ldr	r1, [pc, #348]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008820:	4313      	orrs	r3, r2
 8008822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008824:	f7f8 fc7e 	bl	8001124 <HAL_GetTick>
 8008828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800882a:	e00a      	b.n	8008842 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800882c:	f7f8 fc7a 	bl	8001124 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f241 3288 	movw	r2, #5000	; 0x1388
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e095      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008842:	4b4e      	ldr	r3, [pc, #312]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 020c 	and.w	r2, r3, #12
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	429a      	cmp	r2, r3
 8008852:	d1eb      	bne.n	800882c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d023      	beq.n	80088a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800886c:	4b43      	ldr	r3, [pc, #268]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4a42      	ldr	r2, [pc, #264]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008876:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008884:	4b3d      	ldr	r3, [pc, #244]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800888c:	4a3b      	ldr	r2, [pc, #236]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 800888e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008894:	4b39      	ldr	r3, [pc, #228]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	4936      	ldr	r1, [pc, #216]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
 80088a6:	e008      	b.n	80088ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b80      	cmp	r3, #128	; 0x80
 80088ac:	d105      	bne.n	80088ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80088ae:	4b33      	ldr	r3, [pc, #204]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4a32      	ldr	r2, [pc, #200]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 80088b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d21d      	bcs.n	8008904 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c8:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f023 020f 	bic.w	r2, r3, #15
 80088d0:	4929      	ldr	r1, [pc, #164]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80088d8:	f7f8 fc24 	bl	8001124 <HAL_GetTick>
 80088dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088de:	e00a      	b.n	80088f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088e0:	f7f8 fc20 	bl	8001124 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e03b      	b.n	800896e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f6:	4b20      	ldr	r3, [pc, #128]	; (8008978 <HAL_RCC_ClockConfig+0x260>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d1ed      	bne.n	80088e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d008      	beq.n	8008922 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008910:	4b1a      	ldr	r3, [pc, #104]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	4917      	ldr	r1, [pc, #92]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 800891e:	4313      	orrs	r3, r2
 8008920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	490f      	ldr	r1, [pc, #60]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 800893e:	4313      	orrs	r3, r2
 8008940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008942:	f000 f825 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 8008946:	4602      	mov	r2, r0
 8008948:	4b0c      	ldr	r3, [pc, #48]	; (800897c <HAL_RCC_ClockConfig+0x264>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	091b      	lsrs	r3, r3, #4
 800894e:	f003 030f 	and.w	r3, r3, #15
 8008952:	490c      	ldr	r1, [pc, #48]	; (8008984 <HAL_RCC_ClockConfig+0x26c>)
 8008954:	5ccb      	ldrb	r3, [r1, r3]
 8008956:	f003 031f 	and.w	r3, r3, #31
 800895a:	fa22 f303 	lsr.w	r3, r2, r3
 800895e:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <HAL_RCC_ClockConfig+0x270>)
 8008960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <HAL_RCC_ClockConfig+0x274>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f7f8 fb90 	bl	800108c <HAL_InitTick>
 800896c:	4603      	mov	r3, r0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40022000 	.word	0x40022000
 800897c:	40021000 	.word	0x40021000
 8008980:	04c4b400 	.word	0x04c4b400
 8008984:	08015f94 	.word	0x08015f94
 8008988:	2000004c 	.word	0x2000004c
 800898c:	20000000 	.word	0x20000000

08008990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008996:	4b2c      	ldr	r3, [pc, #176]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 030c 	and.w	r3, r3, #12
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d102      	bne.n	80089a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089a2:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e047      	b.n	8008a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089a8:	4b27      	ldr	r3, [pc, #156]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 030c 	and.w	r3, r3, #12
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d102      	bne.n	80089ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089b4:	4b25      	ldr	r3, [pc, #148]	; (8008a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	e03e      	b.n	8008a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b0c      	cmp	r3, #12
 80089c4:	d136      	bne.n	8008a34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089d0:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	3301      	adds	r3, #1
 80089dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d10c      	bne.n	80089fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089e4:	4a19      	ldr	r2, [pc, #100]	; (8008a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089ee:	68d2      	ldr	r2, [r2, #12]
 80089f0:	0a12      	lsrs	r2, r2, #8
 80089f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	617b      	str	r3, [r7, #20]
      break;
 80089fc:	e00c      	b.n	8008a18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089fe:	4a13      	ldr	r2, [pc, #76]	; (8008a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a06:	4a10      	ldr	r2, [pc, #64]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a08:	68d2      	ldr	r2, [r2, #12]
 8008a0a:	0a12      	lsrs	r2, r2, #8
 8008a0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	617b      	str	r3, [r7, #20]
      break;
 8008a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	0e5b      	lsrs	r3, r3, #25
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	3301      	adds	r3, #1
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	e001      	b.n	8008a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a38:	693b      	ldr	r3, [r7, #16]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40021000 	.word	0x40021000
 8008a4c:	00f42400 	.word	0x00f42400

08008a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	2000004c 	.word	0x2000004c

08008a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a6c:	f7ff fff0 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	0a1b      	lsrs	r3, r3, #8
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4904      	ldr	r1, [pc, #16]	; (8008a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	08015fa4 	.word	0x08015fa4

08008a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a98:	f7ff ffda 	bl	8008a50 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	0adb      	lsrs	r3, r3, #11
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	; (8008abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	08015fa4 	.word	0x08015fa4

08008ac0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	3301      	adds	r3, #1
 8008adc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d10c      	bne.n	8008afe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ae4:	4a17      	ldr	r2, [pc, #92]	; (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aec:	4a14      	ldr	r2, [pc, #80]	; (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008aee:	68d2      	ldr	r2, [r2, #12]
 8008af0:	0a12      	lsrs	r2, r2, #8
 8008af2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008af6:	fb02 f303 	mul.w	r3, r2, r3
 8008afa:	617b      	str	r3, [r7, #20]
    break;
 8008afc:	e00c      	b.n	8008b18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008afe:	4a11      	ldr	r2, [pc, #68]	; (8008b44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b06:	4a0e      	ldr	r2, [pc, #56]	; (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b08:	68d2      	ldr	r2, [r2, #12]
 8008b0a:	0a12      	lsrs	r2, r2, #8
 8008b0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b10:	fb02 f303 	mul.w	r3, r2, r3
 8008b14:	617b      	str	r3, [r7, #20]
    break;
 8008b16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	0e5b      	lsrs	r3, r3, #25
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	3301      	adds	r3, #1
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008b32:	687b      	ldr	r3, [r7, #4]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	40021000 	.word	0x40021000
 8008b44:	00f42400 	.word	0x00f42400

08008b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b50:	2300      	movs	r3, #0
 8008b52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b54:	2300      	movs	r3, #0
 8008b56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 8098 	beq.w	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b66:	2300      	movs	r3, #0
 8008b68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b6a:	4b43      	ldr	r3, [pc, #268]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10d      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b76:	4b40      	ldr	r3, [pc, #256]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7a:	4a3f      	ldr	r2, [pc, #252]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b80:	6593      	str	r3, [r2, #88]	; 0x58
 8008b82:	4b3d      	ldr	r3, [pc, #244]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b8a:	60bb      	str	r3, [r7, #8]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b92:	4b3a      	ldr	r3, [pc, #232]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a39      	ldr	r2, [pc, #228]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b9e:	f7f8 fac1 	bl	8001124 <HAL_GetTick>
 8008ba2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba4:	e009      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ba6:	f7f8 fabd 	bl	8001124 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d902      	bls.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	74fb      	strb	r3, [r7, #19]
        break;
 8008bb8:	e005      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bba:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0ef      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008bc6:	7cfb      	ldrb	r3, [r7, #19]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d159      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bcc:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01e      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d019      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008be8:	4b23      	ldr	r3, [pc, #140]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bfa:	4a1f      	ldr	r2, [pc, #124]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c04:	4b1c      	ldr	r3, [pc, #112]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0a:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c14:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c26:	f7f8 fa7d 	bl	8001124 <HAL_GetTick>
 8008c2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c2c:	e00b      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2e:	f7f8 fa79 	bl	8001124 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d902      	bls.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	74fb      	strb	r3, [r7, #19]
            break;
 8008c44:	e006      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c46:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0ec      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008c54:	7cfb      	ldrb	r3, [r7, #19]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10b      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c5a:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c68:	4903      	ldr	r1, [pc, #12]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008c70:	e008      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c72:	7cfb      	ldrb	r3, [r7, #19]
 8008c74:	74bb      	strb	r3, [r7, #18]
 8008c76:	e005      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c80:	7cfb      	ldrb	r3, [r7, #19]
 8008c82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c84:	7c7b      	ldrb	r3, [r7, #17]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d105      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c8a:	4baf      	ldr	r3, [pc, #700]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8e:	4aae      	ldr	r2, [pc, #696]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ca2:	4ba9      	ldr	r3, [pc, #676]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca8:	f023 0203 	bic.w	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	49a5      	ldr	r1, [pc, #660]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cc4:	4ba0      	ldr	r3, [pc, #640]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	f023 020c 	bic.w	r2, r3, #12
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	499d      	ldr	r1, [pc, #628]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ce6:	4b98      	ldr	r3, [pc, #608]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	4994      	ldr	r1, [pc, #592]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d08:	4b8f      	ldr	r3, [pc, #572]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	498c      	ldr	r1, [pc, #560]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0310 	and.w	r3, r3, #16
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d2a:	4b87      	ldr	r3, [pc, #540]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	4983      	ldr	r1, [pc, #524]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d4c:	4b7e      	ldr	r3, [pc, #504]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	497b      	ldr	r1, [pc, #492]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d6e:	4b76      	ldr	r3, [pc, #472]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	4972      	ldr	r1, [pc, #456]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d90:	4b6d      	ldr	r3, [pc, #436]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	496a      	ldr	r1, [pc, #424]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008db2:	4b65      	ldr	r3, [pc, #404]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	4961      	ldr	r1, [pc, #388]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dd4:	4b5c      	ldr	r3, [pc, #368]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dda:	f023 0203 	bic.w	r2, r3, #3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	4959      	ldr	r1, [pc, #356]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008df6:	4b54      	ldr	r3, [pc, #336]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	4950      	ldr	r1, [pc, #320]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d015      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e18:	4b4b      	ldr	r3, [pc, #300]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	4948      	ldr	r1, [pc, #288]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e36:	d105      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e38:	4b43      	ldr	r3, [pc, #268]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	4a42      	ldr	r2, [pc, #264]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d015      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e50:	4b3d      	ldr	r3, [pc, #244]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	493a      	ldr	r1, [pc, #232]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e6e:	d105      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e70:	4b35      	ldr	r3, [pc, #212]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4a34      	ldr	r2, [pc, #208]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d015      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e88:	4b2f      	ldr	r3, [pc, #188]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	492c      	ldr	r1, [pc, #176]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ea6:	d105      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ea8:	4b27      	ldr	r3, [pc, #156]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d015      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ec0:	4b21      	ldr	r3, [pc, #132]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ece:	491e      	ldr	r1, [pc, #120]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ede:	d105      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d015      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ef8:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	4910      	ldr	r1, [pc, #64]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f16:	d105      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d018      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3e:	4902      	ldr	r1, [pc, #8]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008f46:	e001      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008f48:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f54:	d105      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f56:	4b21      	ldr	r3, [pc, #132]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	4a20      	ldr	r2, [pc, #128]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f60:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d015      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7c:	4917      	ldr	r1, [pc, #92]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d105      	bne.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f98:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d015      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb4:	4909      	ldr	r1, [pc, #36]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc4:	d105      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	4a04      	ldr	r2, [pc, #16]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fd0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008fd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	40021000 	.word	0x40021000

08008fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e042      	b.n	8009078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f83b 	bl	8009080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2224      	movs	r2, #36	; 0x24
 800900e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0201 	bic.w	r2, r2, #1
 8009020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f93c 	bl	80092a0 <UART_SetConfig>
 8009028:	4603      	mov	r3, r0
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e022      	b.n	8009078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fbfa 	bl	8009834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800904e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800905e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc81 	bl	8009978 <UART_CheckIdleState>
 8009076:	4603      	mov	r3, r0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08a      	sub	sp, #40	; 0x28
 8009098:	af02      	add	r7, sp, #8
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	4613      	mov	r3, r2
 80090a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090aa:	2b20      	cmp	r3, #32
 80090ac:	f040 8083 	bne.w	80091b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <HAL_UART_Transmit+0x28>
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e07b      	b.n	80091b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_UART_Transmit+0x3a>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e074      	b.n	80091b8 <HAL_UART_Transmit+0x124>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2221      	movs	r2, #33	; 0x21
 80090e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090e6:	f7f8 f81d 	bl	8001124 <HAL_GetTick>
 80090ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009104:	d108      	bne.n	8009118 <HAL_UART_Transmit+0x84>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d104      	bne.n	8009118 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	e003      	b.n	8009120 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800911c:	2300      	movs	r3, #0
 800911e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009128:	e02c      	b.n	8009184 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	2180      	movs	r1, #128	; 0x80
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fc6a 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e039      	b.n	80091b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009158:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	3302      	adds	r3, #2
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	e007      	b.n	8009172 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	3301      	adds	r3, #1
 8009170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1cc      	bne.n	800912a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2200      	movs	r2, #0
 8009198:	2140      	movs	r1, #64	; 0x40
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fc37 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e006      	b.n	80091b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e000      	b.n	80091b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80091b6:	2302      	movs	r3, #2
  }
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d131      	bne.n	800923c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_UART_Receive_DMA+0x24>
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e02a      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_UART_Receive_DMA+0x36>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e023      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a0f      	ldr	r2, [pc, #60]	; (8009248 <HAL_UART_Receive_DMA+0x88>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00e      	beq.n	800922c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d007      	beq.n	800922c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800922a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	461a      	mov	r2, r3
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fc6c 	bl	8009b10 <UART_Start_Receive_DMA>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40008000 	.word	0x40008000

0800924c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4bb1      	ldr	r3, [pc, #708]	; (8009590 <UART_SetConfig+0x2f0>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	69f9      	ldr	r1, [r7, #28]
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4aa6      	ldr	r2, [pc, #664]	; (8009594 <UART_SetConfig+0x2f4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	4313      	orrs	r3, r2
 8009306:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009312:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	69f9      	ldr	r1, [r7, #28]
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	f023 010f 	bic.w	r1, r3, #15
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a97      	ldr	r2, [pc, #604]	; (8009598 <UART_SetConfig+0x2f8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d120      	bne.n	8009382 <UART_SetConfig+0xe2>
 8009340:	4b96      	ldr	r3, [pc, #600]	; (800959c <UART_SetConfig+0x2fc>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b03      	cmp	r3, #3
 800934c:	d816      	bhi.n	800937c <UART_SetConfig+0xdc>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <UART_SetConfig+0xb4>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009365 	.word	0x08009365
 8009358:	08009371 	.word	0x08009371
 800935c:	0800936b 	.word	0x0800936b
 8009360:	08009377 	.word	0x08009377
 8009364:	2301      	movs	r3, #1
 8009366:	76fb      	strb	r3, [r7, #27]
 8009368:	e0e7      	b.n	800953a <UART_SetConfig+0x29a>
 800936a:	2302      	movs	r3, #2
 800936c:	76fb      	strb	r3, [r7, #27]
 800936e:	e0e4      	b.n	800953a <UART_SetConfig+0x29a>
 8009370:	2304      	movs	r3, #4
 8009372:	76fb      	strb	r3, [r7, #27]
 8009374:	e0e1      	b.n	800953a <UART_SetConfig+0x29a>
 8009376:	2308      	movs	r3, #8
 8009378:	76fb      	strb	r3, [r7, #27]
 800937a:	e0de      	b.n	800953a <UART_SetConfig+0x29a>
 800937c:	2310      	movs	r3, #16
 800937e:	76fb      	strb	r3, [r7, #27]
 8009380:	e0db      	b.n	800953a <UART_SetConfig+0x29a>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a86      	ldr	r2, [pc, #536]	; (80095a0 <UART_SetConfig+0x300>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d132      	bne.n	80093f2 <UART_SetConfig+0x152>
 800938c:	4b83      	ldr	r3, [pc, #524]	; (800959c <UART_SetConfig+0x2fc>)
 800938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009392:	f003 030c 	and.w	r3, r3, #12
 8009396:	2b0c      	cmp	r3, #12
 8009398:	d828      	bhi.n	80093ec <UART_SetConfig+0x14c>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x100>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093d5 	.word	0x080093d5
 80093a4:	080093ed 	.word	0x080093ed
 80093a8:	080093ed 	.word	0x080093ed
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093e1 	.word	0x080093e1
 80093b4:	080093ed 	.word	0x080093ed
 80093b8:	080093ed 	.word	0x080093ed
 80093bc:	080093ed 	.word	0x080093ed
 80093c0:	080093db 	.word	0x080093db
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093ed 	.word	0x080093ed
 80093d0:	080093e7 	.word	0x080093e7
 80093d4:	2300      	movs	r3, #0
 80093d6:	76fb      	strb	r3, [r7, #27]
 80093d8:	e0af      	b.n	800953a <UART_SetConfig+0x29a>
 80093da:	2302      	movs	r3, #2
 80093dc:	76fb      	strb	r3, [r7, #27]
 80093de:	e0ac      	b.n	800953a <UART_SetConfig+0x29a>
 80093e0:	2304      	movs	r3, #4
 80093e2:	76fb      	strb	r3, [r7, #27]
 80093e4:	e0a9      	b.n	800953a <UART_SetConfig+0x29a>
 80093e6:	2308      	movs	r3, #8
 80093e8:	76fb      	strb	r3, [r7, #27]
 80093ea:	e0a6      	b.n	800953a <UART_SetConfig+0x29a>
 80093ec:	2310      	movs	r3, #16
 80093ee:	76fb      	strb	r3, [r7, #27]
 80093f0:	e0a3      	b.n	800953a <UART_SetConfig+0x29a>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a6b      	ldr	r2, [pc, #428]	; (80095a4 <UART_SetConfig+0x304>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d120      	bne.n	800943e <UART_SetConfig+0x19e>
 80093fc:	4b67      	ldr	r3, [pc, #412]	; (800959c <UART_SetConfig+0x2fc>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009402:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009406:	2b30      	cmp	r3, #48	; 0x30
 8009408:	d013      	beq.n	8009432 <UART_SetConfig+0x192>
 800940a:	2b30      	cmp	r3, #48	; 0x30
 800940c:	d814      	bhi.n	8009438 <UART_SetConfig+0x198>
 800940e:	2b20      	cmp	r3, #32
 8009410:	d009      	beq.n	8009426 <UART_SetConfig+0x186>
 8009412:	2b20      	cmp	r3, #32
 8009414:	d810      	bhi.n	8009438 <UART_SetConfig+0x198>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <UART_SetConfig+0x180>
 800941a:	2b10      	cmp	r3, #16
 800941c:	d006      	beq.n	800942c <UART_SetConfig+0x18c>
 800941e:	e00b      	b.n	8009438 <UART_SetConfig+0x198>
 8009420:	2300      	movs	r3, #0
 8009422:	76fb      	strb	r3, [r7, #27]
 8009424:	e089      	b.n	800953a <UART_SetConfig+0x29a>
 8009426:	2302      	movs	r3, #2
 8009428:	76fb      	strb	r3, [r7, #27]
 800942a:	e086      	b.n	800953a <UART_SetConfig+0x29a>
 800942c:	2304      	movs	r3, #4
 800942e:	76fb      	strb	r3, [r7, #27]
 8009430:	e083      	b.n	800953a <UART_SetConfig+0x29a>
 8009432:	2308      	movs	r3, #8
 8009434:	76fb      	strb	r3, [r7, #27]
 8009436:	e080      	b.n	800953a <UART_SetConfig+0x29a>
 8009438:	2310      	movs	r3, #16
 800943a:	76fb      	strb	r3, [r7, #27]
 800943c:	e07d      	b.n	800953a <UART_SetConfig+0x29a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a59      	ldr	r2, [pc, #356]	; (80095a8 <UART_SetConfig+0x308>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d120      	bne.n	800948a <UART_SetConfig+0x1ea>
 8009448:	4b54      	ldr	r3, [pc, #336]	; (800959c <UART_SetConfig+0x2fc>)
 800944a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009452:	2bc0      	cmp	r3, #192	; 0xc0
 8009454:	d013      	beq.n	800947e <UART_SetConfig+0x1de>
 8009456:	2bc0      	cmp	r3, #192	; 0xc0
 8009458:	d814      	bhi.n	8009484 <UART_SetConfig+0x1e4>
 800945a:	2b80      	cmp	r3, #128	; 0x80
 800945c:	d009      	beq.n	8009472 <UART_SetConfig+0x1d2>
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	d810      	bhi.n	8009484 <UART_SetConfig+0x1e4>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <UART_SetConfig+0x1cc>
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d006      	beq.n	8009478 <UART_SetConfig+0x1d8>
 800946a:	e00b      	b.n	8009484 <UART_SetConfig+0x1e4>
 800946c:	2300      	movs	r3, #0
 800946e:	76fb      	strb	r3, [r7, #27]
 8009470:	e063      	b.n	800953a <UART_SetConfig+0x29a>
 8009472:	2302      	movs	r3, #2
 8009474:	76fb      	strb	r3, [r7, #27]
 8009476:	e060      	b.n	800953a <UART_SetConfig+0x29a>
 8009478:	2304      	movs	r3, #4
 800947a:	76fb      	strb	r3, [r7, #27]
 800947c:	e05d      	b.n	800953a <UART_SetConfig+0x29a>
 800947e:	2308      	movs	r3, #8
 8009480:	76fb      	strb	r3, [r7, #27]
 8009482:	e05a      	b.n	800953a <UART_SetConfig+0x29a>
 8009484:	2310      	movs	r3, #16
 8009486:	76fb      	strb	r3, [r7, #27]
 8009488:	e057      	b.n	800953a <UART_SetConfig+0x29a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a47      	ldr	r2, [pc, #284]	; (80095ac <UART_SetConfig+0x30c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d125      	bne.n	80094e0 <UART_SetConfig+0x240>
 8009494:	4b41      	ldr	r3, [pc, #260]	; (800959c <UART_SetConfig+0x2fc>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800949e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a2:	d017      	beq.n	80094d4 <UART_SetConfig+0x234>
 80094a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a8:	d817      	bhi.n	80094da <UART_SetConfig+0x23a>
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094ae:	d00b      	beq.n	80094c8 <UART_SetConfig+0x228>
 80094b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b4:	d811      	bhi.n	80094da <UART_SetConfig+0x23a>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <UART_SetConfig+0x222>
 80094ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094be:	d006      	beq.n	80094ce <UART_SetConfig+0x22e>
 80094c0:	e00b      	b.n	80094da <UART_SetConfig+0x23a>
 80094c2:	2300      	movs	r3, #0
 80094c4:	76fb      	strb	r3, [r7, #27]
 80094c6:	e038      	b.n	800953a <UART_SetConfig+0x29a>
 80094c8:	2302      	movs	r3, #2
 80094ca:	76fb      	strb	r3, [r7, #27]
 80094cc:	e035      	b.n	800953a <UART_SetConfig+0x29a>
 80094ce:	2304      	movs	r3, #4
 80094d0:	76fb      	strb	r3, [r7, #27]
 80094d2:	e032      	b.n	800953a <UART_SetConfig+0x29a>
 80094d4:	2308      	movs	r3, #8
 80094d6:	76fb      	strb	r3, [r7, #27]
 80094d8:	e02f      	b.n	800953a <UART_SetConfig+0x29a>
 80094da:	2310      	movs	r3, #16
 80094dc:	76fb      	strb	r3, [r7, #27]
 80094de:	e02c      	b.n	800953a <UART_SetConfig+0x29a>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a2b      	ldr	r2, [pc, #172]	; (8009594 <UART_SetConfig+0x2f4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d125      	bne.n	8009536 <UART_SetConfig+0x296>
 80094ea:	4b2c      	ldr	r3, [pc, #176]	; (800959c <UART_SetConfig+0x2fc>)
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094f8:	d017      	beq.n	800952a <UART_SetConfig+0x28a>
 80094fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094fe:	d817      	bhi.n	8009530 <UART_SetConfig+0x290>
 8009500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009504:	d00b      	beq.n	800951e <UART_SetConfig+0x27e>
 8009506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800950a:	d811      	bhi.n	8009530 <UART_SetConfig+0x290>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <UART_SetConfig+0x278>
 8009510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009514:	d006      	beq.n	8009524 <UART_SetConfig+0x284>
 8009516:	e00b      	b.n	8009530 <UART_SetConfig+0x290>
 8009518:	2300      	movs	r3, #0
 800951a:	76fb      	strb	r3, [r7, #27]
 800951c:	e00d      	b.n	800953a <UART_SetConfig+0x29a>
 800951e:	2302      	movs	r3, #2
 8009520:	76fb      	strb	r3, [r7, #27]
 8009522:	e00a      	b.n	800953a <UART_SetConfig+0x29a>
 8009524:	2304      	movs	r3, #4
 8009526:	76fb      	strb	r3, [r7, #27]
 8009528:	e007      	b.n	800953a <UART_SetConfig+0x29a>
 800952a:	2308      	movs	r3, #8
 800952c:	76fb      	strb	r3, [r7, #27]
 800952e:	e004      	b.n	800953a <UART_SetConfig+0x29a>
 8009530:	2310      	movs	r3, #16
 8009532:	76fb      	strb	r3, [r7, #27]
 8009534:	e001      	b.n	800953a <UART_SetConfig+0x29a>
 8009536:	2310      	movs	r3, #16
 8009538:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a15      	ldr	r2, [pc, #84]	; (8009594 <UART_SetConfig+0x2f4>)
 8009540:	4293      	cmp	r3, r2
 8009542:	f040 809f 	bne.w	8009684 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009546:	7efb      	ldrb	r3, [r7, #27]
 8009548:	2b08      	cmp	r3, #8
 800954a:	d837      	bhi.n	80095bc <UART_SetConfig+0x31c>
 800954c:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <UART_SetConfig+0x2b4>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	08009579 	.word	0x08009579
 8009558:	080095bd 	.word	0x080095bd
 800955c:	08009581 	.word	0x08009581
 8009560:	080095bd 	.word	0x080095bd
 8009564:	08009587 	.word	0x08009587
 8009568:	080095bd 	.word	0x080095bd
 800956c:	080095bd 	.word	0x080095bd
 8009570:	080095bd 	.word	0x080095bd
 8009574:	080095b5 	.word	0x080095b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009578:	f7ff fa76 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 800957c:	6178      	str	r0, [r7, #20]
        break;
 800957e:	e022      	b.n	80095c6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <UART_SetConfig+0x310>)
 8009582:	617b      	str	r3, [r7, #20]
        break;
 8009584:	e01f      	b.n	80095c6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009586:	f7ff fa03 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 800958a:	6178      	str	r0, [r7, #20]
        break;
 800958c:	e01b      	b.n	80095c6 <UART_SetConfig+0x326>
 800958e:	bf00      	nop
 8009590:	cfff69f3 	.word	0xcfff69f3
 8009594:	40008000 	.word	0x40008000
 8009598:	40013800 	.word	0x40013800
 800959c:	40021000 	.word	0x40021000
 80095a0:	40004400 	.word	0x40004400
 80095a4:	40004800 	.word	0x40004800
 80095a8:	40004c00 	.word	0x40004c00
 80095ac:	40005000 	.word	0x40005000
 80095b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095b8:	617b      	str	r3, [r7, #20]
        break;
 80095ba:	e004      	b.n	80095c6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	76bb      	strb	r3, [r7, #26]
        break;
 80095c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 811b 	beq.w	8009804 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	4a96      	ldr	r2, [pc, #600]	; (800982c <UART_SetConfig+0x58c>)
 80095d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095d8:	461a      	mov	r2, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4413      	add	r3, r2
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d305      	bcc.n	80095fe <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d902      	bls.n	8009604 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	76bb      	strb	r3, [r7, #26]
 8009602:	e0ff      	b.n	8009804 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4618      	mov	r0, r3
 8009608:	f04f 0100 	mov.w	r1, #0
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	4a86      	ldr	r2, [pc, #536]	; (800982c <UART_SetConfig+0x58c>)
 8009612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009616:	b29a      	uxth	r2, r3
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	f7f7 fb6c 	bl	8000cf8 <__aeabi_uldivmod>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4610      	mov	r0, r2
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	020b      	lsls	r3, r1, #8
 8009632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009636:	0202      	lsls	r2, r0, #8
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	6849      	ldr	r1, [r1, #4]
 800963c:	0849      	lsrs	r1, r1, #1
 800963e:	4608      	mov	r0, r1
 8009640:	f04f 0100 	mov.w	r1, #0
 8009644:	1814      	adds	r4, r2, r0
 8009646:	eb43 0501 	adc.w	r5, r3, r1
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	461a      	mov	r2, r3
 8009650:	f04f 0300 	mov.w	r3, #0
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 fb4e 	bl	8000cf8 <__aeabi_uldivmod>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4613      	mov	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800966a:	d308      	bcc.n	800967e <UART_SetConfig+0x3de>
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009672:	d204      	bcs.n	800967e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	60da      	str	r2, [r3, #12]
 800967c:	e0c2      	b.n	8009804 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	76bb      	strb	r3, [r7, #26]
 8009682:	e0bf      	b.n	8009804 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800968c:	d165      	bne.n	800975a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800968e:	7efb      	ldrb	r3, [r7, #27]
 8009690:	2b08      	cmp	r3, #8
 8009692:	d828      	bhi.n	80096e6 <UART_SetConfig+0x446>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <UART_SetConfig+0x3fc>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096c1 	.word	0x080096c1
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	080096e7 	.word	0x080096e7
 80096ac:	080096d7 	.word	0x080096d7
 80096b0:	080096e7 	.word	0x080096e7
 80096b4:	080096e7 	.word	0x080096e7
 80096b8:	080096e7 	.word	0x080096e7
 80096bc:	080096df 	.word	0x080096df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c0:	f7ff f9d2 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 80096c4:	6178      	str	r0, [r7, #20]
        break;
 80096c6:	e013      	b.n	80096f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096c8:	f7ff f9e4 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 80096cc:	6178      	str	r0, [r7, #20]
        break;
 80096ce:	e00f      	b.n	80096f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d0:	4b57      	ldr	r3, [pc, #348]	; (8009830 <UART_SetConfig+0x590>)
 80096d2:	617b      	str	r3, [r7, #20]
        break;
 80096d4:	e00c      	b.n	80096f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096d6:	f7ff f95b 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 80096da:	6178      	str	r0, [r7, #20]
        break;
 80096dc:	e008      	b.n	80096f0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e2:	617b      	str	r3, [r7, #20]
        break;
 80096e4:	e004      	b.n	80096f0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	76bb      	strb	r3, [r7, #26]
        break;
 80096ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8086 	beq.w	8009804 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	4a4b      	ldr	r2, [pc, #300]	; (800982c <UART_SetConfig+0x58c>)
 80096fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009702:	461a      	mov	r2, r3
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	fbb3 f3f2 	udiv	r3, r3, r2
 800970a:	005a      	lsls	r2, r3, #1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	085b      	lsrs	r3, r3, #1
 8009712:	441a      	add	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	fbb2 f3f3 	udiv	r3, r2, r3
 800971c:	b29b      	uxth	r3, r3
 800971e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	2b0f      	cmp	r3, #15
 8009724:	d916      	bls.n	8009754 <UART_SetConfig+0x4b4>
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800972c:	d212      	bcs.n	8009754 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	b29b      	uxth	r3, r3
 8009732:	f023 030f 	bic.w	r3, r3, #15
 8009736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	b29b      	uxth	r3, r3
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	b29a      	uxth	r2, r3
 8009744:	89fb      	ldrh	r3, [r7, #14]
 8009746:	4313      	orrs	r3, r2
 8009748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	89fa      	ldrh	r2, [r7, #14]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	e057      	b.n	8009804 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	76bb      	strb	r3, [r7, #26]
 8009758:	e054      	b.n	8009804 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800975a:	7efb      	ldrb	r3, [r7, #27]
 800975c:	2b08      	cmp	r3, #8
 800975e:	d828      	bhi.n	80097b2 <UART_SetConfig+0x512>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0x4c8>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	0800978d 	.word	0x0800978d
 800976c:	08009795 	.word	0x08009795
 8009770:	0800979d 	.word	0x0800979d
 8009774:	080097b3 	.word	0x080097b3
 8009778:	080097a3 	.word	0x080097a3
 800977c:	080097b3 	.word	0x080097b3
 8009780:	080097b3 	.word	0x080097b3
 8009784:	080097b3 	.word	0x080097b3
 8009788:	080097ab 	.word	0x080097ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800978c:	f7ff f96c 	bl	8008a68 <HAL_RCC_GetPCLK1Freq>
 8009790:	6178      	str	r0, [r7, #20]
        break;
 8009792:	e013      	b.n	80097bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009794:	f7ff f97e 	bl	8008a94 <HAL_RCC_GetPCLK2Freq>
 8009798:	6178      	str	r0, [r7, #20]
        break;
 800979a:	e00f      	b.n	80097bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <UART_SetConfig+0x590>)
 800979e:	617b      	str	r3, [r7, #20]
        break;
 80097a0:	e00c      	b.n	80097bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097a2:	f7ff f8f5 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 80097a6:	6178      	str	r0, [r7, #20]
        break;
 80097a8:	e008      	b.n	80097bc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ae:	617b      	str	r3, [r7, #20]
        break;
 80097b0:	e004      	b.n	80097bc <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	76bb      	strb	r3, [r7, #26]
        break;
 80097ba:	bf00      	nop
    }

    if (pclk != 0U)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d020      	beq.n	8009804 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	4a19      	ldr	r2, [pc, #100]	; (800982c <UART_SetConfig+0x58c>)
 80097c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097cc:	461a      	mov	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	441a      	add	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2b0f      	cmp	r3, #15
 80097ec:	d908      	bls.n	8009800 <UART_SetConfig+0x560>
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f4:	d204      	bcs.n	8009800 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e001      	b.n	8009804 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009820:	7ebb      	ldrb	r3, [r7, #26]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bdb0      	pop	{r4, r5, r7, pc}
 800982a:	bf00      	nop
 800982c:	08015d6c 	.word	0x08015d6c
 8009830:	00f42400 	.word	0x00f42400

08009834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01a      	beq.n	800994a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009932:	d10a      	bne.n	800994a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009988:	f7f7 fbcc 	bl	8001124 <HAL_GetTick>
 800998c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b08      	cmp	r3, #8
 800999a:	d10e      	bne.n	80099ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f82f 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e025      	b.n	8009a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d10e      	bne.n	80099e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f819 	bl	8009a0e <UART_WaitOnFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e00f      	b.n	8009a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	603b      	str	r3, [r7, #0]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a1e:	e062      	b.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d05e      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a28:	f7f7 fb7c 	bl	8001124 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d302      	bcc.n	8009a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d11d      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0201 	bic.w	r2, r2, #1
 8009a5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e045      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d02e      	beq.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a96:	d126      	bne.n	8009ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009aa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ab0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 0201 	bic.w	r2, r2, #1
 8009ac0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e00f      	b.n	8009b06 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4013      	ands	r3, r2
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d08d      	beq.n	8009a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2222      	movs	r2, #34	; 0x22
 8009b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d02c      	beq.n	8009b9e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b48:	4a25      	ldr	r2, [pc, #148]	; (8009be0 <UART_Start_Receive_DMA+0xd0>)
 8009b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b50:	4a24      	ldr	r2, [pc, #144]	; (8009be4 <UART_Start_Receive_DMA+0xd4>)
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b58:	4a23      	ldr	r2, [pc, #140]	; (8009be8 <UART_Start_Receive_DMA+0xd8>)
 8009b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b60:	2200      	movs	r2, #0
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3324      	adds	r3, #36	; 0x24
 8009b6e:	4619      	mov	r1, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b74:	461a      	mov	r2, r3
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	f7f9 fc40 	bl	80033fc <HAL_DMA_Start_IT>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00d      	beq.n	8009b9e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2210      	movs	r2, #16
 8009b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e01c      	b.n	8009bd8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bb4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689a      	ldr	r2, [r3, #8]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0201 	orr.w	r2, r2, #1
 8009bc4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009d27 	.word	0x08009d27
 8009be8:	08009d5f 	.word	0x08009d5f

08009bec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009c02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009c12:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c4e:	f023 0301 	bic.w	r3, r3, #1
 8009c52:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d107      	bne.n	8009c6c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0210 	bic.w	r2, r2, #16
 8009c6a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d12b      	bne.n	8009d00 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cbe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689a      	ldr	r2, [r3, #8]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cde:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d107      	bne.n	8009d00 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0210 	bic.w	r2, r2, #16
 8009cfe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d107      	bne.n	8009d18 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fab9 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d16:	e002      	b.n	8009d1e <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fa97 	bl	800924c <HAL_UART_RxCpltCallback>
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d109      	bne.n	8009d50 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4619      	mov	r1, r3
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff fa9d 	bl	8009288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d4e:	e002      	b.n	8009d56 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff fa85 	bl	8009260 <HAL_UART_RxHalfCpltCallback>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b086      	sub	sp, #24
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d86:	2b80      	cmp	r3, #128	; 0x80
 8009d88:	d109      	bne.n	8009d9e <UART_DMAError+0x40>
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b21      	cmp	r3, #33	; 0x21
 8009d8e:	d106      	bne.n	8009d9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009d98:	6978      	ldr	r0, [r7, #20]
 8009d9a:	f7ff ff27 	bl	8009bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da8:	2b40      	cmp	r3, #64	; 0x40
 8009daa:	d109      	bne.n	8009dc0 <UART_DMAError+0x62>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b22      	cmp	r3, #34	; 0x22
 8009db0:	d106      	bne.n	8009dc0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	f7ff ff34 	bl	8009c28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dc6:	f043 0210 	orr.w	r2, r3, #16
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	f7ff fa4f 	bl	8009274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd6:	bf00      	nop
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d101      	bne.n	8009df4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009df0:	2302      	movs	r3, #2
 8009df2:	e027      	b.n	8009e44 <HAL_UARTEx_DisableFifoMode+0x66>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2224      	movs	r2, #36	; 0x24
 8009e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e02d      	b.n	8009ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2224      	movs	r2, #36	; 0x24
 8009e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0201 	bic.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f84f 	bl	8009f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e02d      	b.n	8009f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2224      	movs	r2, #36	; 0x24
 8009ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f811 	bl	8009f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f68:	e031      	b.n	8009fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f6a:	2308      	movs	r3, #8
 8009f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f6e:	2308      	movs	r3, #8
 8009f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	0e5b      	lsrs	r3, r3, #25
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0307 	and.w	r3, r3, #7
 8009f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	0f5b      	lsrs	r3, r3, #29
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0307 	and.w	r3, r3, #7
 8009f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	7b3a      	ldrb	r2, [r7, #12]
 8009f96:	4911      	ldr	r1, [pc, #68]	; (8009fdc <UARTEx_SetNbDataToProcess+0x94>)
 8009f98:	5c8a      	ldrb	r2, [r1, r2]
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f9e:	7b3a      	ldrb	r2, [r7, #12]
 8009fa0:	490f      	ldr	r1, [pc, #60]	; (8009fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8009fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	7b7a      	ldrb	r2, [r7, #13]
 8009fb4:	4909      	ldr	r1, [pc, #36]	; (8009fdc <UARTEx_SetNbDataToProcess+0x94>)
 8009fb6:	5c8a      	ldrb	r2, [r1, r2]
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fbc:	7b7a      	ldrb	r2, [r7, #13]
 8009fbe:	4908      	ldr	r1, [pc, #32]	; (8009fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8009fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	08015d84 	.word	0x08015d84
 8009fe0:	08015d8c 	.word	0x08015d8c

08009fe4 <analog_init>:
ADC_HandleTypeDef hadc5;

extern ConverterPhase_t phase;


void analog_init() {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0

	//MSP init

	__HAL_RCC_ADC12_CLK_ENABLE();
 8009fea:	4bab      	ldr	r3, [pc, #684]	; (800a298 <analog_init+0x2b4>)
 8009fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fee:	4aaa      	ldr	r2, [pc, #680]	; (800a298 <analog_init+0x2b4>)
 8009ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ff6:	4ba8      	ldr	r3, [pc, #672]	; (800a298 <analog_init+0x2b4>)
 8009ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ffe:	60bb      	str	r3, [r7, #8]
 800a000:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC345_CLK_ENABLE();
 800a002:	4ba5      	ldr	r3, [pc, #660]	; (800a298 <analog_init+0x2b4>)
 800a004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a006:	4aa4      	ldr	r2, [pc, #656]	; (800a298 <analog_init+0x2b4>)
 800a008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a00c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a00e:	4ba2      	ldr	r3, [pc, #648]	; (800a298 <analog_init+0x2b4>)
 800a010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800a01a:	2200      	movs	r2, #0
 800a01c:	2100      	movs	r1, #0
 800a01e:	2012      	movs	r0, #18
 800a020:	f7f9 f90f 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800a024:	2012      	movs	r0, #18
 800a026:	f7f9 f926 	bl	8003276 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800a02a:	2200      	movs	r2, #0
 800a02c:	2100      	movs	r1, #0
 800a02e:	202f      	movs	r0, #47	; 0x2f
 800a030:	f7f9 f907 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800a034:	202f      	movs	r0, #47	; 0x2f
 800a036:	f7f9 f91e 	bl	8003276 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC4_IRQn, 1, 0);
 800a03a:	2200      	movs	r2, #0
 800a03c:	2101      	movs	r1, #1
 800a03e:	203d      	movs	r0, #61	; 0x3d
 800a040:	f7f9 f8ff 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800a044:	203d      	movs	r0, #61	; 0x3d
 800a046:	f7f9 f916 	bl	8003276 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC5_IRQn, 2, 0);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2102      	movs	r1, #2
 800a04e:	203e      	movs	r0, #62	; 0x3e
 800a050:	f7f9 f8f7 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800a054:	203e      	movs	r0, #62	; 0x3e
 800a056:	f7f9 f90e 	bl	8003276 <HAL_NVIC_EnableIRQ>

	//Initialize ADC's
	hadc1.Instance = ADC1;
 800a05a:	4b90      	ldr	r3, [pc, #576]	; (800a29c <analog_init+0x2b8>)
 800a05c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a060:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800a062:	4b8e      	ldr	r3, [pc, #568]	; (800a29c <analog_init+0x2b8>)
 800a064:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a068:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a06a:	4b8c      	ldr	r3, [pc, #560]	; (800a29c <analog_init+0x2b8>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a070:	4b8a      	ldr	r3, [pc, #552]	; (800a29c <analog_init+0x2b8>)
 800a072:	2200      	movs	r2, #0
 800a074:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800a076:	4b89      	ldr	r3, [pc, #548]	; (800a29c <analog_init+0x2b8>)
 800a078:	2200      	movs	r2, #0
 800a07a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a07c:	4b87      	ldr	r3, [pc, #540]	; (800a29c <analog_init+0x2b8>)
 800a07e:	2200      	movs	r2, #0
 800a080:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a082:	4b86      	ldr	r3, [pc, #536]	; (800a29c <analog_init+0x2b8>)
 800a084:	2204      	movs	r2, #4
 800a086:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800a088:	4b84      	ldr	r3, [pc, #528]	; (800a29c <analog_init+0x2b8>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800a08e:	4b83      	ldr	r3, [pc, #524]	; (800a29c <analog_init+0x2b8>)
 800a090:	2200      	movs	r2, #0
 800a092:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 800a094:	4b81      	ldr	r3, [pc, #516]	; (800a29c <analog_init+0x2b8>)
 800a096:	2201      	movs	r2, #1
 800a098:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a09a:	4b80      	ldr	r3, [pc, #512]	; (800a29c <analog_init+0x2b8>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800a0a2:	4b7e      	ldr	r3, [pc, #504]	; (800a29c <analog_init+0x2b8>)
 800a0a4:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800a0a8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a0aa:	4b7c      	ldr	r3, [pc, #496]	; (800a29c <analog_init+0x2b8>)
 800a0ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0b0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800a0b2:	4b7a      	ldr	r3, [pc, #488]	; (800a29c <analog_init+0x2b8>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a0ba:	4b78      	ldr	r3, [pc, #480]	; (800a29c <analog_init+0x2b8>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 800a0c0:	4b76      	ldr	r3, [pc, #472]	; (800a29c <analog_init+0x2b8>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hadc2.Instance = ADC2;
 800a0c8:	4b75      	ldr	r3, [pc, #468]	; (800a2a0 <analog_init+0x2bc>)
 800a0ca:	4a76      	ldr	r2, [pc, #472]	; (800a2a4 <analog_init+0x2c0>)
 800a0cc:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800a0ce:	4b74      	ldr	r3, [pc, #464]	; (800a2a0 <analog_init+0x2bc>)
 800a0d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a0d4:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a0d6:	4b72      	ldr	r3, [pc, #456]	; (800a2a0 <analog_init+0x2bc>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0dc:	4b70      	ldr	r3, [pc, #448]	; (800a2a0 <analog_init+0x2bc>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800a0e2:	4b6f      	ldr	r3, [pc, #444]	; (800a2a0 <analog_init+0x2bc>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a0e8:	4b6d      	ldr	r3, [pc, #436]	; (800a2a0 <analog_init+0x2bc>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a0ee:	4b6c      	ldr	r3, [pc, #432]	; (800a2a0 <analog_init+0x2bc>)
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800a0f4:	4b6a      	ldr	r3, [pc, #424]	; (800a2a0 <analog_init+0x2bc>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800a0fa:	4b69      	ldr	r3, [pc, #420]	; (800a2a0 <analog_init+0x2bc>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800a100:	4b67      	ldr	r3, [pc, #412]	; (800a2a0 <analog_init+0x2bc>)
 800a102:	2201      	movs	r2, #1
 800a104:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a106:	4b66      	ldr	r3, [pc, #408]	; (800a2a0 <analog_init+0x2bc>)
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800a10e:	4b64      	ldr	r3, [pc, #400]	; (800a2a0 <analog_init+0x2bc>)
 800a110:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800a114:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a116:	4b62      	ldr	r3, [pc, #392]	; (800a2a0 <analog_init+0x2bc>)
 800a118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a11c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800a11e:	4b60      	ldr	r3, [pc, #384]	; (800a2a0 <analog_init+0x2bc>)
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a126:	4b5e      	ldr	r3, [pc, #376]	; (800a2a0 <analog_init+0x2bc>)
 800a128:	2200      	movs	r2, #0
 800a12a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800a12c:	4b5c      	ldr	r3, [pc, #368]	; (800a2a0 <analog_init+0x2bc>)
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hadc3.Instance = ADC3;
 800a134:	4b5c      	ldr	r3, [pc, #368]	; (800a2a8 <analog_init+0x2c4>)
 800a136:	4a5d      	ldr	r2, [pc, #372]	; (800a2ac <analog_init+0x2c8>)
 800a138:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800a13a:	4b5b      	ldr	r3, [pc, #364]	; (800a2a8 <analog_init+0x2c4>)
 800a13c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a140:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a142:	4b59      	ldr	r3, [pc, #356]	; (800a2a8 <analog_init+0x2c4>)
 800a144:	2200      	movs	r2, #0
 800a146:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a148:	4b57      	ldr	r3, [pc, #348]	; (800a2a8 <analog_init+0x2c4>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	60da      	str	r2, [r3, #12]
	hadc3.Init.GainCompensation = 0;
 800a14e:	4b56      	ldr	r3, [pc, #344]	; (800a2a8 <analog_init+0x2c4>)
 800a150:	2200      	movs	r2, #0
 800a152:	611a      	str	r2, [r3, #16]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a154:	4b54      	ldr	r3, [pc, #336]	; (800a2a8 <analog_init+0x2c4>)
 800a156:	2200      	movs	r2, #0
 800a158:	615a      	str	r2, [r3, #20]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a15a:	4b53      	ldr	r3, [pc, #332]	; (800a2a8 <analog_init+0x2c4>)
 800a15c:	2204      	movs	r2, #4
 800a15e:	619a      	str	r2, [r3, #24]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 800a160:	4b51      	ldr	r3, [pc, #324]	; (800a2a8 <analog_init+0x2c4>)
 800a162:	2200      	movs	r2, #0
 800a164:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800a166:	4b50      	ldr	r3, [pc, #320]	; (800a2a8 <analog_init+0x2c4>)
 800a168:	2200      	movs	r2, #0
 800a16a:	775a      	strb	r2, [r3, #29]
	hadc3.Init.NbrOfConversion = 1;
 800a16c:	4b4e      	ldr	r3, [pc, #312]	; (800a2a8 <analog_init+0x2c4>)
 800a16e:	2201      	movs	r2, #1
 800a170:	621a      	str	r2, [r3, #32]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a172:	4b4d      	ldr	r3, [pc, #308]	; (800a2a8 <analog_init+0x2c4>)
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800a17a:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <analog_init+0x2c4>)
 800a17c:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800a180:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a182:	4b49      	ldr	r3, [pc, #292]	; (800a2a8 <analog_init+0x2c4>)
 800a184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a188:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800a18a:	4b47      	ldr	r3, [pc, #284]	; (800a2a8 <analog_init+0x2c4>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a192:	4b45      	ldr	r3, [pc, #276]	; (800a2a8 <analog_init+0x2c4>)
 800a194:	2200      	movs	r2, #0
 800a196:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.OversamplingMode = DISABLE;
 800a198:	4b43      	ldr	r3, [pc, #268]	; (800a2a8 <analog_init+0x2c4>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hadc4.Instance = ADC4;
 800a1a0:	4b43      	ldr	r3, [pc, #268]	; (800a2b0 <analog_init+0x2cc>)
 800a1a2:	4a44      	ldr	r2, [pc, #272]	; (800a2b4 <analog_init+0x2d0>)
 800a1a4:	601a      	str	r2, [r3, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800a1a6:	4b42      	ldr	r3, [pc, #264]	; (800a2b0 <analog_init+0x2cc>)
 800a1a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1ac:	605a      	str	r2, [r3, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800a1ae:	4b40      	ldr	r3, [pc, #256]	; (800a2b0 <analog_init+0x2cc>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	609a      	str	r2, [r3, #8]
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1b4:	4b3e      	ldr	r3, [pc, #248]	; (800a2b0 <analog_init+0x2cc>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	60da      	str	r2, [r3, #12]
	hadc4.Init.GainCompensation = 0;
 800a1ba:	4b3d      	ldr	r3, [pc, #244]	; (800a2b0 <analog_init+0x2cc>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	611a      	str	r2, [r3, #16]
	hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a1c0:	4b3b      	ldr	r3, [pc, #236]	; (800a2b0 <analog_init+0x2cc>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	615a      	str	r2, [r3, #20]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a1c6:	4b3a      	ldr	r3, [pc, #232]	; (800a2b0 <analog_init+0x2cc>)
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	619a      	str	r2, [r3, #24]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 800a1cc:	4b38      	ldr	r3, [pc, #224]	; (800a2b0 <analog_init+0x2cc>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	771a      	strb	r2, [r3, #28]
	hadc4.Init.ContinuousConvMode = DISABLE;
 800a1d2:	4b37      	ldr	r3, [pc, #220]	; (800a2b0 <analog_init+0x2cc>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	775a      	strb	r2, [r3, #29]
	hadc4.Init.NbrOfConversion = 1;
 800a1d8:	4b35      	ldr	r3, [pc, #212]	; (800a2b0 <analog_init+0x2cc>)
 800a1da:	2201      	movs	r2, #1
 800a1dc:	621a      	str	r2, [r3, #32]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 800a1de:	4b34      	ldr	r3, [pc, #208]	; (800a2b0 <analog_init+0x2cc>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800a1e6:	4b32      	ldr	r3, [pc, #200]	; (800a2b0 <analog_init+0x2cc>)
 800a1e8:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 800a1ec:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a1ee:	4b30      	ldr	r3, [pc, #192]	; (800a2b0 <analog_init+0x2cc>)
 800a1f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = DISABLE;
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	; (800a2b0 <analog_init+0x2cc>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a1fe:	4b2c      	ldr	r3, [pc, #176]	; (800a2b0 <analog_init+0x2cc>)
 800a200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a204:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 800a206:	4b2a      	ldr	r3, [pc, #168]	; (800a2b0 <analog_init+0x2cc>)
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hadc5.Instance = ADC5;
 800a20e:	4b2a      	ldr	r3, [pc, #168]	; (800a2b8 <analog_init+0x2d4>)
 800a210:	4a2a      	ldr	r2, [pc, #168]	; (800a2bc <analog_init+0x2d8>)
 800a212:	601a      	str	r2, [r3, #0]
	hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800a214:	4b28      	ldr	r3, [pc, #160]	; (800a2b8 <analog_init+0x2d4>)
 800a216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a21a:	605a      	str	r2, [r3, #4]
	hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800a21c:	4b26      	ldr	r3, [pc, #152]	; (800a2b8 <analog_init+0x2d4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
	hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a222:	4b25      	ldr	r3, [pc, #148]	; (800a2b8 <analog_init+0x2d4>)
 800a224:	2200      	movs	r2, #0
 800a226:	60da      	str	r2, [r3, #12]
	hadc5.Init.GainCompensation = 0;
 800a228:	4b23      	ldr	r3, [pc, #140]	; (800a2b8 <analog_init+0x2d4>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	611a      	str	r2, [r3, #16]
	hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a22e:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <analog_init+0x2d4>)
 800a230:	2201      	movs	r2, #1
 800a232:	615a      	str	r2, [r3, #20]
	hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a234:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <analog_init+0x2d4>)
 800a236:	2208      	movs	r2, #8
 800a238:	619a      	str	r2, [r3, #24]
	hadc5.Init.LowPowerAutoWait = DISABLE;
 800a23a:	4b1f      	ldr	r3, [pc, #124]	; (800a2b8 <analog_init+0x2d4>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	771a      	strb	r2, [r3, #28]
	hadc5.Init.ContinuousConvMode = ENABLE;
 800a240:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <analog_init+0x2d4>)
 800a242:	2201      	movs	r2, #1
 800a244:	775a      	strb	r2, [r3, #29]
	hadc5.Init.NbrOfConversion = 3;
 800a246:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <analog_init+0x2d4>)
 800a248:	2203      	movs	r2, #3
 800a24a:	621a      	str	r2, [r3, #32]
	hadc5.Init.DiscontinuousConvMode = DISABLE;
 800a24c:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <analog_init+0x2d4>)
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a254:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <analog_init+0x2d4>)
 800a256:	2200      	movs	r2, #0
 800a258:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <analog_init+0x2d4>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc5.Init.DMAContinuousRequests = ENABLE;
 800a260:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <analog_init+0x2d4>)
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <analog_init+0x2d4>)
 800a26a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a26e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc5.Init.OversamplingMode = ENABLE;
 800a270:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <analog_init+0x2d4>)
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <analog_init+0x2d4>)
 800a27a:	221c      	movs	r2, #28
 800a27c:	645a      	str	r2, [r3, #68]	; 0x44
	hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800a27e:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <analog_init+0x2d4>)
 800a280:	2280      	movs	r2, #128	; 0x80
 800a282:	649a      	str	r2, [r3, #72]	; 0x48
	hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <analog_init+0x2d4>)
 800a286:	2200      	movs	r2, #0
 800a288:	64da      	str	r2, [r3, #76]	; 0x4c
	hadc5.Init.Oversampling.OversamplingStopReset =
 800a28a:	4b0b      	ldr	r3, [pc, #44]	; (800a2b8 <analog_init+0x2d4>)
 800a28c:	f240 4201 	movw	r2, #1025	; 0x401
 800a290:	651a      	str	r2, [r3, #80]	; 0x50
			ADC_REGOVERSAMPLING_RESUMED_MODE;

	hdma_adc5.Instance = DMA1_Channel1;
 800a292:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <analog_init+0x2dc>)
 800a294:	e016      	b.n	800a2c4 <analog_init+0x2e0>
 800a296:	bf00      	nop
 800a298:	40021000 	.word	0x40021000
 800a29c:	20001e7c 	.word	0x20001e7c
 800a2a0:	20001d2c 	.word	0x20001d2c
 800a2a4:	50000100 	.word	0x50000100
 800a2a8:	20001f60 	.word	0x20001f60
 800a2ac:	50000400 	.word	0x50000400
 800a2b0:	20001fcc 	.word	0x20001fcc
 800a2b4:	50000500 	.word	0x50000500
 800a2b8:	20001d98 	.word	0x20001d98
 800a2bc:	50000600 	.word	0x50000600
 800a2c0:	20001e04 	.word	0x20001e04
 800a2c4:	4a2f      	ldr	r2, [pc, #188]	; (800a384 <analog_init+0x3a0>)
 800a2c6:	601a      	str	r2, [r3, #0]
	hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800a2c8:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <analog_init+0x3a4>)
 800a2ca:	2227      	movs	r2, #39	; 0x27
 800a2cc:	605a      	str	r2, [r3, #4]
	hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2ce:	4b2e      	ldr	r3, [pc, #184]	; (800a388 <analog_init+0x3a4>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	609a      	str	r2, [r3, #8]
	hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2d4:	4b2c      	ldr	r3, [pc, #176]	; (800a388 <analog_init+0x3a4>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	60da      	str	r2, [r3, #12]
	hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800a2da:	4b2b      	ldr	r3, [pc, #172]	; (800a388 <analog_init+0x3a4>)
 800a2dc:	2280      	movs	r2, #128	; 0x80
 800a2de:	611a      	str	r2, [r3, #16]
	hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a2e0:	4b29      	ldr	r3, [pc, #164]	; (800a388 <analog_init+0x3a4>)
 800a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2e6:	615a      	str	r2, [r3, #20]
	hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a2e8:	4b27      	ldr	r3, [pc, #156]	; (800a388 <analog_init+0x3a4>)
 800a2ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2ee:	619a      	str	r2, [r3, #24]
	hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800a2f0:	4b25      	ldr	r3, [pc, #148]	; (800a388 <analog_init+0x3a4>)
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	61da      	str	r2, [r3, #28]
	hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a2f6:	4b24      	ldr	r3, [pc, #144]	; (800a388 <analog_init+0x3a4>)
 800a2f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2fc:	621a      	str	r2, [r3, #32]

	ADC_MultiModeTypeDef multimode = { 0 };
 800a2fe:	f107 030c 	add.w	r3, r7, #12
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	605a      	str	r2, [r3, #4]
 800a308:	609a      	str	r2, [r3, #8]
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]

	HAL_DMA_Init(&hdma_adc5);
 800a30e:	481e      	ldr	r0, [pc, #120]	; (800a388 <analog_init+0x3a4>)
 800a310:	f7f8 ffcc 	bl	80032ac <HAL_DMA_Init>
	__HAL_LINKDMA(&hadc5, DMA_Handle, hdma_adc5);
 800a314:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <analog_init+0x3a8>)
 800a316:	4a1c      	ldr	r2, [pc, #112]	; (800a388 <analog_init+0x3a4>)
 800a318:	655a      	str	r2, [r3, #84]	; 0x54
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <analog_init+0x3a4>)
 800a31c:	4a1b      	ldr	r2, [pc, #108]	; (800a38c <analog_init+0x3a8>)
 800a31e:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_ADC_Init(&hadc1);
 800a320:	481b      	ldr	r0, [pc, #108]	; (800a390 <analog_init+0x3ac>)
 800a322:	f7f7 f9b9 	bl	8001698 <HAL_ADC_Init>
	HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 800a326:	f107 030c 	add.w	r3, r7, #12
 800a32a:	4619      	mov	r1, r3
 800a32c:	4818      	ldr	r0, [pc, #96]	; (800a390 <analog_init+0x3ac>)
 800a32e:	f7f8 fda5 	bl	8002e7c <HAL_ADCEx_MultiModeConfigChannel>
	HAL_ADC_Init(&hadc2);
 800a332:	4818      	ldr	r0, [pc, #96]	; (800a394 <analog_init+0x3b0>)
 800a334:	f7f7 f9b0 	bl	8001698 <HAL_ADC_Init>
	HAL_ADC_Init(&hadc3);
 800a338:	4817      	ldr	r0, [pc, #92]	; (800a398 <analog_init+0x3b4>)
 800a33a:	f7f7 f9ad 	bl	8001698 <HAL_ADC_Init>
	HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode);
 800a33e:	f107 030c 	add.w	r3, r7, #12
 800a342:	4619      	mov	r1, r3
 800a344:	4814      	ldr	r0, [pc, #80]	; (800a398 <analog_init+0x3b4>)
 800a346:	f7f8 fd99 	bl	8002e7c <HAL_ADCEx_MultiModeConfigChannel>
	HAL_ADC_Init(&hadc4);
 800a34a:	4814      	ldr	r0, [pc, #80]	; (800a39c <analog_init+0x3b8>)
 800a34c:	f7f7 f9a4 	bl	8001698 <HAL_ADC_Init>
	HAL_ADC_Init(&hadc5);
 800a350:	480e      	ldr	r0, [pc, #56]	; (800a38c <analog_init+0x3a8>)
 800a352:	f7f7 f9a1 	bl	8001698 <HAL_ADC_Init>

	//Initialize channels.
	hw_adc_init();
 800a356:	f005 fda7 	bl	800fea8 <hw_adc_init>


	HAL_ADC_Start_IT(&hadc2);
 800a35a:	480e      	ldr	r0, [pc, #56]	; (800a394 <analog_init+0x3b0>)
 800a35c:	f7f7 fb68 	bl	8001a30 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 800a360:	480b      	ldr	r0, [pc, #44]	; (800a390 <analog_init+0x3ac>)
 800a362:	f7f7 fb65 	bl	8001a30 <HAL_ADC_Start_IT>

	HAL_ADC_Start_IT(&hadc3);
 800a366:	480c      	ldr	r0, [pc, #48]	; (800a398 <analog_init+0x3b4>)
 800a368:	f7f7 fb62 	bl	8001a30 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc4);
 800a36c:	480b      	ldr	r0, [pc, #44]	; (800a39c <analog_init+0x3b8>)
 800a36e:	f7f7 fb5f 	bl	8001a30 <HAL_ADC_Start_IT>

	HAL_ADC_Start_DMA(&hadc5, adc5data, 6);
 800a372:	2206      	movs	r2, #6
 800a374:	490a      	ldr	r1, [pc, #40]	; (800a3a0 <analog_init+0x3bc>)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <analog_init+0x3a8>)
 800a378:	f7f7 fcb6 	bl	8001ce8 <HAL_ADC_Start_DMA>
	//HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc4, ADC_DIFFERENTIAL_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
}
 800a37c:	bf00      	nop
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	40020008 	.word	0x40020008
 800a388:	20001e04 	.word	0x20001e04
 800a38c:	20001d98 	.word	0x20001d98
 800a390:	20001e7c 	.word	0x20001e7c
 800a394:	20001d2c 	.word	0x20001d2c
 800a398:	20001f60 	.word	0x20001f60
 800a39c:	20001fcc 	.word	0x20001fcc
 800a3a0:	20001e64 	.word	0x20001e64

0800a3a4 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
	uint32_t tmp_isr = ADC1->ISR;
 800a3aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	60fb      	str	r3, [r7, #12]
	uint32_t tmp2_isr = ADC2->ISR;
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <ADC1_2_IRQHandler+0x58>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	60bb      	str	r3, [r7, #8]

	if (tmp2_isr & ADC_ISR_EOC) {
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f003 0304 	and.w	r3, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <ADC1_2_IRQHandler+0x30>
		//ADC 2 Data ready

		uint32_t raw = ADC2->DR;
 800a3c2:	4b0e      	ldr	r3, [pc, #56]	; (800a3fc <ADC1_2_IRQHandler+0x58>)
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	607b      	str	r3, [r7, #4]
		ADC2->ISR = ADC_ISR_EOC;
 800a3c8:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <ADC1_2_IRQHandler+0x58>)
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	601a      	str	r2, [r3, #0]
		control_convert_vhs(raw);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f002 fef8 	bl	800d1c4 <control_convert_vhs>
	}
	if (tmp_isr & ADC_ISR_EOC) {
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f003 0304 	and.w	r3, r3, #4
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <ADC1_2_IRQHandler+0x50>
		uint32_t raw = ADC1->DR;
 800a3de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	603b      	str	r3, [r7, #0]
		ADC1->ISR = ADC_ISR_EOC;
 800a3e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	601a      	str	r2, [r3, #0]
		control_convert_ihs(raw);
 800a3ee:	6838      	ldr	r0, [r7, #0]
 800a3f0:	f002 ffaa 	bl	800d348 <control_convert_ihs>
	}

}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	50000100 	.word	0x50000100

0800a400 <ADC3_IRQHandler>:

void ADC3_IRQHandler(void) {
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
	uint32_t tmp_isr = ADC3->ISR;
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <ADC3_IRQHandler+0x30>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]
	//uint32_t tmp_ier = ADC3->IER;

	if (tmp_isr & ADC_ISR_EOC) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	d008      	beq.n	800a428 <ADC3_IRQHandler+0x28>

		uint32_t raw = ADC3->DR;
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <ADC3_IRQHandler+0x30>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	603b      	str	r3, [r7, #0]
		ADC3->ISR = ADC_ISR_EOC;
 800a41c:	4b04      	ldr	r3, [pc, #16]	; (800a430 <ADC3_IRQHandler+0x30>)
 800a41e:	2204      	movs	r2, #4
 800a420:	601a      	str	r2, [r3, #0]
		control_convert_vls(raw);
 800a422:	6838      	ldr	r0, [r7, #0]
 800a424:	f002 fe74 	bl	800d110 <control_convert_vls>
	}
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	50000400 	.word	0x50000400

0800a434 <ADC4_IRQHandler>:

void ADC4_IRQHandler(void) {
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0

	uint32_t tmp_isr = ADC4->ISR;
 800a43a:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <ADC4_IRQHandler+0x3c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]
	uint32_t tmp_ier = ADC4->IER;
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <ADC4_IRQHandler+0x3c>)
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	60bb      	str	r3, [r7, #8]

	if (tmp_isr & ADC_ISR_EOC) {
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <ADC4_IRQHandler+0x34>
		uint32_t raw = ADC4->DR;
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <ADC4_IRQHandler+0x3c>)
 800a452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a454:	607b      	str	r3, [r7, #4]
		ADC4->ISR = ADC_ISR_EOC;
 800a456:	4b06      	ldr	r3, [pc, #24]	; (800a470 <ADC4_IRQHandler+0x3c>)
 800a458:	2204      	movs	r2, #4
 800a45a:	601a      	str	r2, [r3, #0]

		control_convert_iind(raw);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f002 ff07 	bl	800d270 <control_convert_iind>
		control_controlloop(&phase);
 800a462:	4804      	ldr	r0, [pc, #16]	; (800a474 <ADC4_IRQHandler+0x40>)
 800a464:	f002 f9cc 	bl	800c800 <control_controlloop>
	}

}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	50000500 	.word	0x50000500
 800a474:	20001ee8 	.word	0x20001ee8

0800a478 <ADC5_IRQHandler>:

void ADC5_IRQHandler(void) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0

	HAL_ADC_IRQHandler(&hadc5);
 800a47c:	4802      	ldr	r0, [pc, #8]	; (800a488 <ADC5_IRQHandler+0x10>)
 800a47e:	f7f7 fd01 	bl	8001e84 <HAL_ADC_IRQHandler>
}
 800a482:	bf00      	nop
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20001d98 	.word	0x20001d98

0800a48c <buffer_append_str>:

#include "buffer.h"
#include <math.h>
#include <stdbool.h>

void buffer_append_str(uint8_t* buffer, char* str, int len, int32_t *index){
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len; i++){
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	e00f      	b.n	800a4c0 <buffer_append_str+0x34>
		buffer[(*index)++] = str[i];
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	1c58      	adds	r0, r3, #1
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6008      	str	r0, [r1, #0]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	440b      	add	r3, r1
 800a4b6:	7812      	ldrb	r2, [r2, #0]
 800a4b8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++){
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	dbeb      	blt.n	800a4a0 <buffer_append_str+0x14>
	}
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <buffer_append_int8>:

void buffer_append_int8(uint8_t* buffer, int8_t number, int32_t *index) {
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	72fb      	strb	r3, [r7, #11]
	buffer[(*index)++] = number;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	1c59      	adds	r1, r3, #1
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	7afa      	ldrb	r2, [r7, #11]
 800a4f6:	701a      	strb	r2, [r3, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <buffer_append_uint8>:

void buffer_append_uint8(uint8_t* buffer, uint8_t number, int32_t *index) {
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	460b      	mov	r3, r1
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	72fb      	strb	r3, [r7, #11]
	buffer[(*index)++] = number;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6011      	str	r1, [r2, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	7afa      	ldrb	r2, [r7, #11]
 800a524:	701a      	strb	r2, [r3, #0]
}
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <buffer_append_int16>:

void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	460b      	mov	r3, r1
 800a53c:	607a      	str	r2, [r7, #4]
 800a53e:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 800a540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a544:	121b      	asrs	r3, r3, #8
 800a546:	b218      	sxth	r0, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	1c59      	adds	r1, r3, #1
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6011      	str	r1, [r2, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	b2c2      	uxtb	r2, r0
 800a55a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	1c59      	adds	r1, r3, #1
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6011      	str	r1, [r2, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	897a      	ldrh	r2, [r7, #10]
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]
}
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <buffer_append_uint16>:

void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
 800a57e:	b480      	push	{r7}
 800a580:	b085      	sub	sp, #20
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	460b      	mov	r3, r1
 800a588:	607a      	str	r2, [r7, #4]
 800a58a:	817b      	strh	r3, [r7, #10]
	buffer[(*index)++] = number >> 8;
 800a58c:	897b      	ldrh	r3, [r7, #10]
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	b298      	uxth	r0, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6011      	str	r1, [r2, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	b2c2      	uxtb	r2, r0
 800a5a4:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	1c59      	adds	r1, r3, #1
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6011      	str	r1, [r2, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	897a      	ldrh	r2, [r7, #10]
 800a5b8:	b2d2      	uxtb	r2, r2
 800a5ba:	701a      	strb	r2, [r3, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <buffer_append_uint32>:
	buffer[(*index)++] = number >> 16;
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	0e18      	lsrs	r0, r3, #24
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	1c59      	adds	r1, r3, #1
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	6011      	str	r1, [r2, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	b2c2      	uxtb	r2, r0
 800a5ea:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	0c18      	lsrs	r0, r3, #16
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	1c59      	adds	r1, r3, #1
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6011      	str	r1, [r2, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	b2c2      	uxtb	r2, r0
 800a602:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	0a18      	lsrs	r0, r3, #8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6011      	str	r1, [r2, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4413      	add	r3, r2
 800a618:	b2c2      	uxtb	r2, r0
 800a61a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	1c59      	adds	r1, r3, #1
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6011      	str	r1, [r2, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	701a      	strb	r2, [r3, #0]
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <buffer_append_float16>:

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	ed87 0a02 	vstr	s0, [r7, #8]
 800a64a:	edc7 0a01 	vstr	s1, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 800a650:	ed97 7a02 	vldr	s14, [r7, #8]
 800a654:	edd7 7a01 	vldr	s15, [r7, #4]
 800a658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a660:	ee17 3a90 	vmov	r3, s15
 800a664:	b21b      	sxth	r3, r3
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4619      	mov	r1, r3
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7ff ff61 	bl	800a532 <buffer_append_int16>
}
 800a670:	bf00      	nop
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <buffer_append_float32_auto>:
 * 8388608.0 is 2^23, which scales the result to fit within 23 bits if sig_abs < 1.0.
 *
 * This should be a relatively fast and efficient way to serialize
 * floating point numbers in a fully defined manner.
 */
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	; 0x28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	ed87 0a02 	vstr	s0, [r7, #8]
 800a684:	6079      	str	r1, [r7, #4]
	int e = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	617b      	str	r3, [r7, #20]
	float sig = frexpf(number, &e);
 800a68a:	f107 0314 	add.w	r3, r7, #20
 800a68e:	4618      	mov	r0, r3
 800a690:	ed97 0a02 	vldr	s0, [r7, #8]
 800a694:	f006 fbb4 	bl	8010e00 <frexpf>
 800a698:	ed87 0a07 	vstr	s0, [r7, #28]
	float sig_abs = fabsf(sig);
 800a69c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a6a0:	eef0 7ae7 	vabs.f32	s15, s15
 800a6a4:	edc7 7a06 	vstr	s15, [r7, #24]
	uint32_t sig_i = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (sig_abs >= 0.5f) {
 800a6ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800a6b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	db13      	blt.n	800a6e6 <buffer_append_float32_auto+0x6e>
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800a6be:	edd7 7a06 	vldr	s15, [r7, #24]
 800a6c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a6c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a720 <buffer_append_float32_auto+0xa8>
 800a6d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6da:	ee17 3a90 	vmov	r3, s15
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
		e += 126;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	337e      	adds	r3, #126	; 0x7e
 800a6e4:	617b      	str	r3, [r7, #20]
	}

	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	05db      	lsls	r3, r3, #23
 800a6ea:	f003 42ff 	and.w	r2, r3, #2139095040	; 0x7f800000
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	623b      	str	r3, [r7, #32]
	if (sig < 0) {
 800a6f8:	edd7 7a07 	vldr	s15, [r7, #28]
 800a6fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a704:	d503      	bpl.n	800a70e <buffer_append_float32_auto+0x96>
		//res |= 1 << 31;
		res |= 0x80000000;
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a70c:	623b      	str	r3, [r7, #32]
	}

	buffer_append_uint32(buffer, res, index);
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6a39      	ldr	r1, [r7, #32]
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff ff58 	bl	800a5c8 <buffer_append_uint32>
}
 800a718:	bf00      	nop
 800a71a:	3728      	adds	r7, #40	; 0x28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	4b000000 	.word	0x4b000000

0800a724 <buffer_get_int8>:

int8_t buffer_get_int8(const uint8_t *buffer, int32_t *index) {
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
	int8_t res =	((uint8_t) buffer[*index]);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	73fb      	strb	r3, [r7, #15]
	*index += 1;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	601a      	str	r2, [r3, #0]
	return res;
 800a746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <buffer_get_int16>:
	uint8_t res = 	((uint8_t) buffer[*index]);
	*index += 1;
	return res;
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3301      	adds	r3, #1
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	440b      	add	r3, r1
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800a77e:	4313      	orrs	r3, r2
 800a780:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	1c9a      	adds	r2, r3, #2
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]
	return res;
 800a78c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	440b      	add	r3, r1
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	b21b      	sxth	r3, r3
 800a7c8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	1c9a      	adds	r2, r3, #2
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	601a      	str	r2, [r3, #0]
	return res;
 800a7d4:	89fb      	ldrh	r3, [r7, #14]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <buffer_get_uint32>:
					((uint32_t) buffer[*index + 3]);
	*index += 4;
	return res;
}

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 800a7e2:	b480      	push	{r7}
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	440b      	add	r3, r1
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800a808:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3302      	adds	r3, #2
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	440b      	add	r3, r1
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800a818:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	6812      	ldr	r2, [r2, #0]
 800a81e:	3203      	adds	r2, #3
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	440a      	add	r2, r1
 800a824:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	601a      	str	r2, [r3, #0]
	return res;
 800a834:	68fb      	ldr	r3, [r7, #12]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <buffer_get_float16>:

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	ed87 0a02 	vstr	s0, [r7, #8]
 800a84e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff ff7f 	bl	800a756 <buffer_get_int16>
 800a858:	4603      	mov	r3, r0
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a862:	edd7 7a02 	vldr	s15, [r7, #8]
 800a866:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a86a:	eef0 7a66 	vmov.f32	s15, s13
}
 800a86e:	eeb0 0a67 	vmov.f32	s0, s15
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <buffer_get_float32_auto>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
    return (float)buffer_get_int32(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ffac 	bl	800a7e2 <buffer_get_uint32>
 800a88a:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	0ddb      	lsrs	r3, r3, #23
 800a890:	b2db      	uxtb	r3, r3
 800a892:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a89a:	613b      	str	r3, [r7, #16]
	//bool neg = res & (1 << 31);
	bool neg = res & (0x80000000);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	bf14      	ite	ne
 800a8a6:	2301      	movne	r3, #1
 800a8a8:	2300      	moveq	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
	

	float sig = 0.0;
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <buffer_get_float32_auto+0x46>
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d021      	beq.n	800a902 <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c8:	ee17 0a90 	vmov	r0, s15
 800a8cc:	f7f5 fe74 	bl	80005b8 <__aeabi_f2d>
 800a8d0:	f04f 0200 	mov.w	r2, #0
 800a8d4:	4b15      	ldr	r3, [pc, #84]	; (800a92c <buffer_get_float32_auto+0xb4>)
 800a8d6:	f7f5 fff1 	bl	80008bc <__aeabi_ddiv>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f04f 0200 	mov.w	r2, #0
 800a8e6:	4b12      	ldr	r3, [pc, #72]	; (800a930 <buffer_get_float32_auto+0xb8>)
 800a8e8:	f7f5 fd08 	bl	80002fc <__adddf3>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	f7f6 f9b0 	bl	8000c58 <__aeabi_d2f>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	61bb      	str	r3, [r7, #24]
		e -= 126;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	3b7e      	subs	r3, #126	; 0x7e
 800a900:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800a908:	edd7 7a06 	vldr	s15, [r7, #24]
 800a90c:	eef1 7a67 	vneg.f32	s15, s15
 800a910:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 800a914:	69f8      	ldr	r0, [r7, #28]
 800a916:	ed97 0a06 	vldr	s0, [r7, #24]
 800a91a:	f006 fa97 	bl	8010e4c <ldexpf>
 800a91e:	eef0 7a40 	vmov.f32	s15, s0
}
 800a922:	eeb0 0a67 	vmov.f32	s0, s15
 800a926:	3720      	adds	r7, #32
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	41700000 	.word	0x41700000
 800a930:	3fe00000 	.word	0x3fe00000

0800a934 <modGetCanGetID>:
uint8_t modCANRxBuffer[MODCAN_RXBUFFER_SIZE];

extern ConverterPhase_t phase;
extern ConverterMueasurements_t meter;

uint16_t modGetCanGetID() {
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
	uint16_t id = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	80fb      	strh	r3, [r7, #6]
	id |= (uint16_t) HAL_GPIO_ReadPin(ID0_GPIO_Port, ID0_Pin);
 800a93e:	2110      	movs	r1, #16
 800a940:	481c      	ldr	r0, [pc, #112]	; (800a9b4 <modGetCanGetID+0x80>)
 800a942:	f7fa fa2d 	bl	8004da0 <HAL_GPIO_ReadPin>
 800a946:	4603      	mov	r3, r0
 800a948:	b29a      	uxth	r2, r3
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	80fb      	strh	r3, [r7, #6]
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin) << 1);
 800a950:	2101      	movs	r1, #1
 800a952:	4819      	ldr	r0, [pc, #100]	; (800a9b8 <modGetCanGetID+0x84>)
 800a954:	f7fa fa24 	bl	8004da0 <HAL_GPIO_ReadPin>
 800a958:	4603      	mov	r3, r0
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	b29a      	uxth	r2, r3
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	4313      	orrs	r3, r2
 800a964:	80fb      	strh	r3, [r7, #6]
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin) << 2);
 800a966:	2102      	movs	r1, #2
 800a968:	4813      	ldr	r0, [pc, #76]	; (800a9b8 <modGetCanGetID+0x84>)
 800a96a:	f7fa fa19 	bl	8004da0 <HAL_GPIO_ReadPin>
 800a96e:	4603      	mov	r3, r0
 800a970:	b29b      	uxth	r3, r3
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	b29a      	uxth	r2, r3
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	4313      	orrs	r3, r2
 800a97a:	80fb      	strh	r3, [r7, #6]
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID3_GPIO_Port, ID3_Pin) << 3);
 800a97c:	2104      	movs	r1, #4
 800a97e:	480e      	ldr	r0, [pc, #56]	; (800a9b8 <modGetCanGetID+0x84>)
 800a980:	f7fa fa0e 	bl	8004da0 <HAL_GPIO_ReadPin>
 800a984:	4603      	mov	r3, r0
 800a986:	b29b      	uxth	r3, r3
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	4313      	orrs	r3, r2
 800a990:	80fb      	strh	r3, [r7, #6]
	id = (~id) & 0x0f;
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	43db      	mvns	r3, r3
 800a996:	b29b      	uxth	r3, r3
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	80fb      	strh	r3, [r7, #6]

	id += (cansettings->generalCanId);
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <modGetCanGetID+0x88>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	891a      	ldrh	r2, [r3, #8]
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	80fb      	strh	r3, [r7, #6]

	return id;
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	48000800 	.word	0x48000800
 800a9b8:	48000400 	.word	0x48000400
 800a9bc:	2000254c 	.word	0x2000254c

0800a9c0 <modCANinit>:
int rx_available = 0;

uint32_t lasttick;
uint32_t dt;

void modCANinit(modCanSettings_t *s) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b090      	sub	sp, #64	; 0x40
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	6078      	str	r0, [r7, #4]
	cansettings = s;
 800a9c8:	4a88      	ldr	r2, [pc, #544]	; (800abec <modCANinit+0x22c>)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6013      	str	r3, [r2, #0]
	//modCanSettingsLocal.GeneralCanId = 0;
	//modCanSettingsLocal.busSpeed = 500;
	//modCanSettingsLocal.samplepoint = 0.75;

	canid = modGetCanGetID();
 800a9ce:	f7ff ffb1 	bl	800a934 <modGetCanGetID>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b86      	ldr	r3, [pc, #536]	; (800abf0 <modCANinit+0x230>)
 800a9d8:	801a      	strh	r2, [r3, #0]

	int pre = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34
	int S1 = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	633b      	str	r3, [r7, #48]	; 0x30
	int S2 = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	int clockspeed = 170e3;	//kHz
 800a9e6:	4b83      	ldr	r3, [pc, #524]	; (800abf4 <modCANinit+0x234>)
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24

	if(cansettings->baudrate < 1){
 800a9ea:	4b80      	ldr	r3, [pc, #512]	; (800abec <modCANinit+0x22c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f340 80f7 	ble.w	800abe4 <modCANinit+0x224>
		return;
	}

	for (int i = 9; i < 25; i++) {
 800a9f6:	2309      	movs	r3, #9
 800a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9fa:	e04e      	b.n	800aa9a <modCANinit+0xda>
		pre = (int) round(clockspeed / (cansettings->baudrate * i));
 800a9fc:	4b7b      	ldr	r3, [pc, #492]	; (800abec <modCANinit+0x22c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa04:	fb02 f303 	mul.w	r3, r2, r3
 800aa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0a:	fb92 f3f3 	sdiv	r3, r2, r3
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7f5 fdc0 	bl	8000594 <__aeabi_i2d>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4610      	mov	r0, r2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f7f6 f8d4 	bl	8000bc8 <__aeabi_d2iz>
 800aa20:	4603      	mov	r3, r0
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34

		S1 = (int) round((cansettings->samplepoint * (float) i) - 1);
 800aa24:	4b71      	ldr	r3, [pc, #452]	; (800abec <modCANinit+0x22c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	ed93 7a01 	vldr	s14, [r3, #4]
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa42:	ee17 0a90 	vmov	r0, s15
 800aa46:	f7f5 fdb7 	bl	80005b8 <__aeabi_f2d>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	ec43 2b10 	vmov	d0, r2, r3
 800aa52:	f00a f8dd 	bl	8014c10 <round>
 800aa56:	ec53 2b10 	vmov	r2, r3, d0
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f7f6 f8b3 	bl	8000bc8 <__aeabi_d2iz>
 800aa62:	4603      	mov	r3, r0
 800aa64:	633b      	str	r3, [r7, #48]	; 0x30
		S2 = i - S1 - 1;
 800aa66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		int ActualBuspeed = clockspeed / ((S1 + S2 + 1) * pre);
 800aa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	4413      	add	r3, r2
 800aa76:	3301      	adds	r3, #1
 800aa78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa7a:	fb02 f303 	mul.w	r3, r2, r3
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	fb92 f3f3 	sdiv	r3, r2, r3
 800aa84:	623b      	str	r3, [r7, #32]

		if ((ActualBuspeed - cansettings->baudrate) < 1) {
 800aa86:	4b59      	ldr	r3, [pc, #356]	; (800abec <modCANinit+0x22c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a3a      	ldr	r2, [r7, #32]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dd06      	ble.n	800aaa2 <modCANinit+0xe2>
	for (int i = 9; i < 25; i++) {
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	3301      	adds	r3, #1
 800aa98:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	2b18      	cmp	r3, #24
 800aa9e:	ddad      	ble.n	800a9fc <modCANinit+0x3c>
 800aaa0:	e000      	b.n	800aaa4 <modCANinit+0xe4>
			break;
 800aaa2:	bf00      	nop
		}

	}

	hfdcan2.Instance = FDCAN2;
 800aaa4:	4b54      	ldr	r3, [pc, #336]	; (800abf8 <modCANinit+0x238>)
 800aaa6:	4a55      	ldr	r2, [pc, #340]	; (800abfc <modCANinit+0x23c>)
 800aaa8:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800aaaa:	4b53      	ldr	r3, [pc, #332]	; (800abf8 <modCANinit+0x238>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800aab0:	4b51      	ldr	r3, [pc, #324]	; (800abf8 <modCANinit+0x238>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800aab6:	4b50      	ldr	r3, [pc, #320]	; (800abf8 <modCANinit+0x238>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = ENABLE;
 800aabc:	4b4e      	ldr	r3, [pc, #312]	; (800abf8 <modCANinit+0x238>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 800aac2:	4b4d      	ldr	r3, [pc, #308]	; (800abf8 <modCANinit+0x238>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 800aac8:	4b4b      	ldr	r3, [pc, #300]	; (800abf8 <modCANinit+0x238>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = (uint32_t) pre;
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad0:	4a49      	ldr	r2, [pc, #292]	; (800abf8 <modCANinit+0x238>)
 800aad2:	6153      	str	r3, [r2, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 800aad4:	4b48      	ldr	r3, [pc, #288]	; (800abf8 <modCANinit+0x238>)
 800aad6:	2201      	movs	r2, #1
 800aad8:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = (uint32_t) S1;
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	4a46      	ldr	r2, [pc, #280]	; (800abf8 <modCANinit+0x238>)
 800aade:	61d3      	str	r3, [r2, #28]
	hfdcan2.Init.NominalTimeSeg2 = (uint32_t) S2;
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	4a45      	ldr	r2, [pc, #276]	; (800abf8 <modCANinit+0x238>)
 800aae4:	6213      	str	r3, [r2, #32]
	hfdcan2.Init.DataPrescaler = (uint32_t) pre;
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	4a43      	ldr	r2, [pc, #268]	; (800abf8 <modCANinit+0x238>)
 800aaea:	6253      	str	r3, [r2, #36]	; 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 800aaec:	4b42      	ldr	r3, [pc, #264]	; (800abf8 <modCANinit+0x238>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan2.Init.DataTimeSeg1 = (uint32_t) S1;
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	4a40      	ldr	r2, [pc, #256]	; (800abf8 <modCANinit+0x238>)
 800aaf6:	62d3      	str	r3, [r2, #44]	; 0x2c
	hfdcan2.Init.DataTimeSeg2 = (uint32_t) S2;
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	4a3f      	ldr	r2, [pc, #252]	; (800abf8 <modCANinit+0x238>)
 800aafc:	6313      	str	r3, [r2, #48]	; 0x30
	hfdcan2.Init.StdFiltersNbr = 1;
 800aafe:	4b3e      	ldr	r3, [pc, #248]	; (800abf8 <modCANinit+0x238>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan2.Init.ExtFiltersNbr = 1;
 800ab04:	4b3c      	ldr	r3, [pc, #240]	; (800abf8 <modCANinit+0x238>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800ab0a:	4b3b      	ldr	r3, [pc, #236]	; (800abf8 <modCANinit+0x238>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	63da      	str	r2, [r3, #60]	; 0x3c

	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 800ab10:	4839      	ldr	r0, [pc, #228]	; (800abf8 <modCANinit+0x238>)
 800ab12:	f7f8 fe3d 	bl	8003790 <HAL_FDCAN_Init>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <modCANinit+0x160>
		Error_Handler();
 800ab1c:	f003 fa06 	bl	800df2c <Error_Handler>
	}

	//GeneralCanId;
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = modCANGetCANID(canid, CAN_PACKET_FILL_RX_BUFFER);
 800ab30:	4b2f      	ldr	r3, [pc, #188]	; (800abf0 <modCANinit+0x230>)
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	2105      	movs	r1, #5
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 faea 	bl	800b110 <modCANGetCANID>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = modCANGetCANID(canid, CAN_PACKET_MSGCOUNT - 1);
 800ab40:	4b2b      	ldr	r3, [pc, #172]	; (800abf0 <modCANinit+0x230>)
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	2108      	movs	r1, #8
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fae2 	bl	800b110 <modCANGetCANID>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800ab50:	f107 0308 	add.w	r3, r7, #8
 800ab54:	4619      	mov	r1, r3
 800ab56:	4828      	ldr	r0, [pc, #160]	; (800abf8 <modCANinit+0x238>)
 800ab58:	f7f8 ff7e 	bl	8003a58 <HAL_FDCAN_ConfigFilter>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <modCANinit+0x1a6>
		Error_Handler();
 800ab62:	f003 f9e3 	bl	800df2c <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800ab66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab6a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800ab70:	2300      	movs	r3, #0
 800ab72:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = modCANGetCANEXID(canid,
 800ab78:	4b1d      	ldr	r3, [pc, #116]	; (800abf0 <modCANinit+0x230>)
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	2105      	movs	r1, #5
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fab4 	bl	800b0ec <modCANGetCANEXID>
 800ab84:	4603      	mov	r3, r0
 800ab86:	61bb      	str	r3, [r7, #24]
			CAN_PACKET_FILL_RX_BUFFER);
	sFilterConfig.FilterID2 = modCANGetCANEXID(canid, CAN_PACKET_MSGCOUNT - 1);
 800ab88:	4b19      	ldr	r3, [pc, #100]	; (800abf0 <modCANinit+0x230>)
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	2108      	movs	r1, #8
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 faac 	bl	800b0ec <modCANGetCANEXID>
 800ab94:	4603      	mov	r3, r0
 800ab96:	61fb      	str	r3, [r7, #28]

	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800ab98:	f107 0308 	add.w	r3, r7, #8
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4816      	ldr	r0, [pc, #88]	; (800abf8 <modCANinit+0x238>)
 800aba0:	f7f8 ff5a 	bl	8003a58 <HAL_FDCAN_ConfigFilter>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <modCANinit+0x1ee>
		Error_Handler();
 800abaa:	f003 f9bf 	bl	800df2c <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT,
 800abae:	2301      	movs	r3, #1
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	2301      	movs	r3, #1
 800abb4:	2202      	movs	r2, #2
 800abb6:	2102      	movs	r1, #2
 800abb8:	480f      	ldr	r0, [pc, #60]	; (800abf8 <modCANinit+0x238>)
 800abba:	f7f8 ffa7 	bl	8003b0c <HAL_FDCAN_ConfigGlobalFilter>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <modCANinit+0x208>
			FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK) {
		Error_Handler();
 800abc4:	f003 f9b2 	bl	800df2c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 800abc8:	2200      	movs	r2, #0
 800abca:	2101      	movs	r1, #1
 800abcc:	480a      	ldr	r0, [pc, #40]	; (800abf8 <modCANinit+0x238>)
 800abce:	f7f9 f945 	bl	8003e5c <HAL_FDCAN_ActivateNotification>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <modCANinit+0x21c>
			0) != HAL_OK) {
		Error_Handler();
 800abd8:	f003 f9a8 	bl	800df2c <Error_Handler>
	}

	HAL_FDCAN_Start(&hfdcan2);
 800abdc:	4806      	ldr	r0, [pc, #24]	; (800abf8 <modCANinit+0x238>)
 800abde:	f7f8 ffc6 	bl	8003b6e <HAL_FDCAN_Start>
 800abe2:	e000      	b.n	800abe6 <modCANinit+0x226>
		return;
 800abe4:	bf00      	nop

}
 800abe6:	3738      	adds	r7, #56	; 0x38
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	2000254c 	.word	0x2000254c
 800abf0:	2000059c 	.word	0x2000059c
 800abf4:	00029810 	.word	0x00029810
 800abf8:	200030d4 	.word	0x200030d4
 800abfc:	40006800 	.word	0x40006800

0800ac00 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs | FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
		while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0) > 0) {
 800ac0a:	e026      	b.n	800ac5a <HAL_FDCAN_RxFifo0Callback+0x5a>
			HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0,
					&(RXQue[rx_wr].rxmsg), (RXQue[rx_wr].data));
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
			HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0,
 800ac10:	4613      	mov	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	4413      	add	r3, r2
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800ac1a:	1899      	adds	r1, r3, r2
					&(RXQue[rx_wr].rxmsg), (RXQue[rx_wr].data));
 800ac1c:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	4413      	add	r3, r2
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	3328      	adds	r3, #40	; 0x28
 800ac2a:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800ac2c:	4413      	add	r3, r2
			HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0,
 800ac2e:	460a      	mov	r2, r1
 800ac30:	2140      	movs	r1, #64	; 0x40
 800ac32:	4812      	ldr	r0, [pc, #72]	; (800ac7c <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800ac34:	f7f9 f808 	bl	8003c48 <HAL_FDCAN_GetRxMessage>
			rx_wr++;
 800ac38:	4b0e      	ldr	r3, [pc, #56]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4a0d      	ldr	r2, [pc, #52]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac40:	6013      	str	r3, [r2, #0]
			rx_available++;
 800ac42:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	4a0d      	ldr	r2, [pc, #52]	; (800ac80 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800ac4a:	6013      	str	r3, [r2, #0]
			if (rx_wr >= MODCAN_TXBUFFER_SIZE) {
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b1f      	cmp	r3, #31
 800ac52:	dd02      	ble.n	800ac5a <HAL_FDCAN_RxFifo0Callback+0x5a>
				rx_wr = 0;
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
		while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0) > 0) {
 800ac5a:	2140      	movs	r1, #64	; 0x40
 800ac5c:	4807      	ldr	r0, [pc, #28]	; (800ac7c <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800ac5e:	f7f9 f8cd 	bl	8003dfc <HAL_FDCAN_GetRxFifoFillLevel>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1d1      	bne.n	800ac0c <HAL_FDCAN_RxFifo0Callback+0xc>
			}
		}
	}
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200005ac 	.word	0x200005ac
 800ac78:	20002ad4 	.word	0x20002ad4
 800ac7c:	200030d4 	.word	0x200030d4
 800ac80:	200005b4 	.word	0x200005b4

0800ac84 <modCanHandleRxMsg>:

void modCanHandleRxMsg(modCanRxQue_t *rxmsg) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08a      	sub	sp, #40	; 0x28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	CAN_PACKET_ID packetid = (CAN_PACKET_ID) rxmsg->rxmsg.Identifier & 0xf;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t destinaitonId;

	if (rxmsg->rxmsg.IdType == FDCAN_STANDARD_ID) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <modCanHandleRxMsg+0x2c>
		destinaitonId = (uint16_t) rxmsg->rxmsg.Identifier & 0x7F0;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800acac:	84fb      	strh	r3, [r7, #38]	; 0x26
 800acae:	e007      	b.n	800acc0 <modCanHandleRxMsg+0x3c>
	} else {
		destinaitonId = (uint16_t) (rxmsg->rxmsg.Identifier & 0x7F00) >> 8;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	121b      	asrs	r3, r3, #8
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbe:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	uint32_t DLC = rxmsg->rxmsg.DataLength >> 16;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	0c1b      	lsrs	r3, r3, #16
 800acc6:	623b      	str	r3, [r7, #32]
	if (DLC > 8)
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	2b08      	cmp	r3, #8
 800accc:	f200 80b7 	bhi.w	800ae3e <modCanHandleRxMsg+0x1ba>

	uint8_t commands_send;
	unsigned int rxbuf_len;
	uint16_t crc;

	if (destinaitonId == canid) {
 800acd0:	4b62      	ldr	r3, [pc, #392]	; (800ae5c <modCanHandleRxMsg+0x1d8>)
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800acd6:	429a      	cmp	r2, r3
 800acd8:	f040 80bc 	bne.w	800ae54 <modCanHandleRxMsg+0x1d0>
		int32_t ind = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
		switch (packetid) {
 800ace0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	f200 80ac 	bhi.w	800ae42 <modCanHandleRxMsg+0x1be>
 800acea:	a201      	add	r2, pc, #4	; (adr r2, 800acf0 <modCanHandleRxMsg+0x6c>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ae43 	.word	0x0800ae43
 800acf4:	0800ae43 	.word	0x0800ae43
 800acf8:	0800ae43 	.word	0x0800ae43
 800acfc:	0800ae43 	.word	0x0800ae43
 800ad00:	0800ae43 	.word	0x0800ae43
 800ad04:	0800ad15 	.word	0x0800ad15
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad7d 	.word	0x0800ad7d
 800ad10:	0800adf9 	.word	0x0800adf9
		case CAN_PACKET_Power:
		case CAN_PACKET_status:
			//These messages are send, not receifed.
			break;
		case CAN_PACKET_FILL_RX_BUFFER:
			if ((rxmsg->data[0] + DLC) < MODCAN_RXBUFFER_SIZE) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	4413      	add	r3, r2
 800ad20:	2bff      	cmp	r3, #255	; 0xff
 800ad22:	f200 8090 	bhi.w	800ae46 <modCanHandleRxMsg+0x1c2>
				memcpy(modCANRxBuffer + rxmsg->data[0], rxmsg->data + 1,
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	4b4c      	ldr	r3, [pc, #304]	; (800ae60 <modCanHandleRxMsg+0x1dc>)
 800ad30:	18d0      	adds	r0, r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	1c59      	adds	r1, r3, #1
						(DLC - 1) * sizeof(uint8_t));
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	3b01      	subs	r3, #1
				memcpy(modCANRxBuffer + rxmsg->data[0], rxmsg->data + 1,
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f005 f98f 	bl	8010060 <memcpy>
			}
			break;
 800ad42:	e080      	b.n	800ae46 <modCanHandleRxMsg+0x1c2>

		case CAN_PACKET_FILL_RX_BUFFER_LONG:
			rxbuf_ind = (unsigned int) rxmsg->data[0] << 8;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	60fb      	str	r3, [r7, #12]
			rxbuf_ind |= rxmsg->data[1];
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ad54:	461a      	mov	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]

			if (rxbuf_ind < RX_CAN_BUFFER_SIZE) {
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad62:	d272      	bcs.n	800ae4a <modCanHandleRxMsg+0x1c6>
				memcpy(modCANRxBuffer + rxbuf_ind, rxmsg->data + 2,
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4a3e      	ldr	r2, [pc, #248]	; (800ae60 <modCanHandleRxMsg+0x1dc>)
 800ad68:	1898      	adds	r0, r3, r2
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3328      	adds	r3, #40	; 0x28
 800ad6e:	1c99      	adds	r1, r3, #2
						(DLC - 2) * sizeof(uint8_t));
 800ad70:	6a3b      	ldr	r3, [r7, #32]
 800ad72:	3b02      	subs	r3, #2
				memcpy(modCANRxBuffer + rxbuf_ind, rxmsg->data + 2,
 800ad74:	461a      	mov	r2, r3
 800ad76:	f005 f973 	bl	8010060 <memcpy>
			}
			break;
 800ad7a:	e066      	b.n	800ae4a <modCanHandleRxMsg+0x1c6>

		case CAN_PACKET_PROCESS_RX_BUFFER:
			modCANRxBufferLastID = rxmsg->data[0];
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800ad82:	4b38      	ldr	r3, [pc, #224]	; (800ae64 <modCanHandleRxMsg+0x1e0>)
 800ad84:	701a      	strb	r2, [r3, #0]
			commands_send = rxmsg->data[1];
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ad8c:	76fb      	strb	r3, [r7, #27]
			rxbuf_len = (unsigned int) rxmsg->data[2] << 8;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	617b      	str	r3, [r7, #20]
			rxbuf_len |= (unsigned int) rxmsg->data[3];
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ad9e:	461a      	mov	r2, r3
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]
			crc = ((uint16_t) (rxmsg->data[4] << 8))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800adac:	b29b      	uxth	r3, r3
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	b29a      	uxth	r2, r3
					| (uint16_t) rxmsg->data[5];
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adb8:	b29b      	uxth	r3, r3
			crc = ((uint16_t) (rxmsg->data[4] << 8))
 800adba:	4313      	orrs	r3, r2
 800adbc:	827b      	strh	r3, [r7, #18]

			if (rxbuf_len > RX_CAN_BUFFER_SIZE) {
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adc4:	d843      	bhi.n	800ae4e <modCanHandleRxMsg+0x1ca>
				break;
			}
			if (libCRCCalcCRC16(modCANRxBuffer, rxbuf_len) == crc) {
 800adc6:	6979      	ldr	r1, [r7, #20]
 800adc8:	4825      	ldr	r0, [pc, #148]	; (800ae60 <modCanHandleRxMsg+0x1dc>)
 800adca:	f002 fc21 	bl	800d610 <libCRCCalcCRC16>
 800adce:	4603      	mov	r3, r0
 800add0:	461a      	mov	r2, r3
 800add2:	8a7b      	ldrh	r3, [r7, #18]
 800add4:	4293      	cmp	r3, r2
 800add6:	d13c      	bne.n	800ae52 <modCanHandleRxMsg+0x1ce>

				if (commands_send) {
 800add8:	7efb      	ldrb	r3, [r7, #27]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d004      	beq.n	800ade8 <modCanHandleRxMsg+0x164>
					modCommandsSendPacket(modCANRxBuffer, rxbuf_len);
 800adde:	6979      	ldr	r1, [r7, #20]
 800ade0:	481f      	ldr	r0, [pc, #124]	; (800ae60 <modCanHandleRxMsg+0x1dc>)
 800ade2:	f000 fbd3 	bl	800b58c <modCommandsSendPacket>
				} else {
					modCommandsSetSendFunction(modCANSendPacketWrapper);
					modCommandsProcessPacket(modCANRxBuffer, rxbuf_len);
				}
			}
			break;
 800ade6:	e034      	b.n	800ae52 <modCanHandleRxMsg+0x1ce>
					modCommandsSetSendFunction(modCANSendPacketWrapper);
 800ade8:	481f      	ldr	r0, [pc, #124]	; (800ae68 <modCanHandleRxMsg+0x1e4>)
 800adea:	f000 fbbf 	bl	800b56c <modCommandsSetSendFunction>
					modCommandsProcessPacket(modCANRxBuffer, rxbuf_len);
 800adee:	6979      	ldr	r1, [r7, #20]
 800adf0:	481b      	ldr	r0, [pc, #108]	; (800ae60 <modCanHandleRxMsg+0x1dc>)
 800adf2:	f000 fbdf 	bl	800b5b4 <modCommandsProcessPacket>
			break;
 800adf6:	e02c      	b.n	800ae52 <modCanHandleRxMsg+0x1ce>

		case CAN_PACKET_PROCESS_SHORT_BUFFER:
			modCANRxBufferLastID = rxmsg->data[0];
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800adfe:	4b19      	ldr	r3, [pc, #100]	; (800ae64 <modCanHandleRxMsg+0x1e0>)
 800ae00:	701a      	strb	r2, [r3, #0]
			commands_send = rxmsg->data[1];
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ae08:	76fb      	strb	r3, [r7, #27]

			if (commands_send) {
 800ae0a:	7efb      	ldrb	r3, [r7, #27]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d009      	beq.n	800ae24 <modCanHandleRxMsg+0x1a0>
				modCommandsSendPacket(rxmsg->data + 2, DLC - 2);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3328      	adds	r3, #40	; 0x28
 800ae14:	1c9a      	adds	r2, r3, #2
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	3b02      	subs	r3, #2
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f000 fbb5 	bl	800b58c <modCommandsSendPacket>
			} else {
				modCommandsSetSendFunction(modCANSendPacketWrapper);
				modCommandsProcessPacket(rxmsg->data + 2, DLC - 2);
			}
			break;
 800ae22:	e017      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
				modCommandsSetSendFunction(modCANSendPacketWrapper);
 800ae24:	4810      	ldr	r0, [pc, #64]	; (800ae68 <modCanHandleRxMsg+0x1e4>)
 800ae26:	f000 fba1 	bl	800b56c <modCommandsSetSendFunction>
				modCommandsProcessPacket(rxmsg->data + 2, DLC - 2);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3328      	adds	r3, #40	; 0x28
 800ae2e:	1c9a      	adds	r2, r3, #2
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	3b02      	subs	r3, #2
 800ae34:	4619      	mov	r1, r3
 800ae36:	4610      	mov	r0, r2
 800ae38:	f000 fbbc 	bl	800b5b4 <modCommandsProcessPacket>
			break;
 800ae3c:	e00a      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
		return;
 800ae3e:	bf00      	nop
 800ae40:	e008      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>

		default:
		case CAN_PACKET_MSGCOUNT:
			break;
 800ae42:	bf00      	nop
 800ae44:	e006      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
			break;
 800ae46:	bf00      	nop
 800ae48:	e004      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
			break;
 800ae4a:	bf00      	nop
 800ae4c:	e002      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
				break;
 800ae4e:	bf00      	nop
 800ae50:	e000      	b.n	800ae54 <modCanHandleRxMsg+0x1d0>
			break;
 800ae52:	bf00      	nop
		}
	}
}
 800ae54:	3728      	adds	r7, #40	; 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	2000059c 	.word	0x2000059c
 800ae60:	20002240 	.word	0x20002240
 800ae64:	20002544 	.word	0x20002544
 800ae68:	0800b4f5 	.word	0x0800b4f5

0800ae6c <modCANtask>:

void modCANtask(void) {
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af00      	add	r7, sp, #0
	if (HAL_FDCAN_GetError(&hfdcan2)) {
 800ae72:	488d      	ldr	r0, [pc, #564]	; (800b0a8 <modCANtask+0x23c>)
 800ae74:	f7f9 fa7a 	bl	800436c <HAL_FDCAN_GetError>

	}

	LED3_GPIO_Port->BRR = LED3_Pin;
 800ae78:	4b8c      	ldr	r3, [pc, #560]	; (800b0ac <modCANtask+0x240>)
 800ae7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7e:	629a      	str	r2, [r3, #40]	; 0x28

	uint32_t tnow = HAL_GetTick();
 800ae80:	f7f6 f950 	bl	8001124 <HAL_GetTick>
 800ae84:	6278      	str	r0, [r7, #36]	; 0x24
	dt = tnow - lasttick;
 800ae86:	4b8a      	ldr	r3, [pc, #552]	; (800b0b0 <modCANtask+0x244>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	4a89      	ldr	r2, [pc, #548]	; (800b0b4 <modCANtask+0x248>)
 800ae90:	6013      	str	r3, [r2, #0]
	lasttick = tnow;
 800ae92:	4a87      	ldr	r2, [pc, #540]	; (800b0b0 <modCANtask+0x244>)
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	6013      	str	r3, [r2, #0]

	if (tx_available) {
 800ae98:	4b87      	ldr	r3, [pc, #540]	; (800b0b8 <modCANtask+0x24c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d02e      	beq.n	800aefe <modCANtask+0x92>
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2)) {
 800aea0:	4881      	ldr	r0, [pc, #516]	; (800b0a8 <modCANtask+0x23c>)
 800aea2:	f7f8 ffc9 	bl	8003e38 <HAL_FDCAN_GetTxFifoFreeLevel>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d028      	beq.n	800aefe <modCANtask+0x92>
			LED3_GPIO_Port->BSRR = LED3_Pin;
 800aeac:	4b7f      	ldr	r3, [pc, #508]	; (800b0ac <modCANtask+0x240>)
 800aeae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb2:	619a      	str	r2, [r3, #24]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &(TXQue[tx_rd].txmsg),
 800aeb4:	4b81      	ldr	r3, [pc, #516]	; (800b0bc <modCANtask+0x250>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	222c      	movs	r2, #44	; 0x2c
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
 800aebe:	4a80      	ldr	r2, [pc, #512]	; (800b0c0 <modCANtask+0x254>)
 800aec0:	1899      	adds	r1, r3, r2
					TXQue[tx_rd].data);
 800aec2:	4b7e      	ldr	r3, [pc, #504]	; (800b0bc <modCANtask+0x250>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	222c      	movs	r2, #44	; 0x2c
 800aec8:	fb02 f303 	mul.w	r3, r2, r3
 800aecc:	3320      	adds	r3, #32
 800aece:	4a7c      	ldr	r2, [pc, #496]	; (800b0c0 <modCANtask+0x254>)
 800aed0:	4413      	add	r3, r2
 800aed2:	3304      	adds	r3, #4
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &(TXQue[tx_rd].txmsg),
 800aed4:	461a      	mov	r2, r3
 800aed6:	4874      	ldr	r0, [pc, #464]	; (800b0a8 <modCANtask+0x23c>)
 800aed8:	f7f8 fe71 	bl	8003bbe <HAL_FDCAN_AddMessageToTxFifoQ>
			tx_rd++;
 800aedc:	4b77      	ldr	r3, [pc, #476]	; (800b0bc <modCANtask+0x250>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3301      	adds	r3, #1
 800aee2:	4a76      	ldr	r2, [pc, #472]	; (800b0bc <modCANtask+0x250>)
 800aee4:	6013      	str	r3, [r2, #0]
			tx_available--;
 800aee6:	4b74      	ldr	r3, [pc, #464]	; (800b0b8 <modCANtask+0x24c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	4a72      	ldr	r2, [pc, #456]	; (800b0b8 <modCANtask+0x24c>)
 800aeee:	6013      	str	r3, [r2, #0]
			if (tx_rd >= MODCAN_TXBUFFER_SIZE) {
 800aef0:	4b72      	ldr	r3, [pc, #456]	; (800b0bc <modCANtask+0x250>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b1f      	cmp	r3, #31
 800aef6:	dd02      	ble.n	800aefe <modCANtask+0x92>
				tx_rd = 0;
 800aef8:	4b70      	ldr	r3, [pc, #448]	; (800b0bc <modCANtask+0x250>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (rx_available) {
 800aefe:	4b71      	ldr	r3, [pc, #452]	; (800b0c4 <modCANtask+0x258>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d023      	beq.n	800af4e <modCANtask+0xe2>
		do {
			LED3_GPIO_Port->BSRR = LED3_Pin;
 800af06:	4b69      	ldr	r3, [pc, #420]	; (800b0ac <modCANtask+0x240>)
 800af08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af0c:	619a      	str	r2, [r3, #24]
			modCanHandleRxMsg(&RXQue[rx_rd]);
 800af0e:	4b6e      	ldr	r3, [pc, #440]	; (800b0c8 <modCANtask+0x25c>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4613      	mov	r3, r2
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	4413      	add	r3, r2
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	4a6c      	ldr	r2, [pc, #432]	; (800b0cc <modCANtask+0x260>)
 800af1c:	4413      	add	r3, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff feb0 	bl	800ac84 <modCanHandleRxMsg>
			rx_rd++;
 800af24:	4b68      	ldr	r3, [pc, #416]	; (800b0c8 <modCANtask+0x25c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	4a67      	ldr	r2, [pc, #412]	; (800b0c8 <modCANtask+0x25c>)
 800af2c:	6013      	str	r3, [r2, #0]
			rx_available--;
 800af2e:	4b65      	ldr	r3, [pc, #404]	; (800b0c4 <modCANtask+0x258>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3b01      	subs	r3, #1
 800af34:	4a63      	ldr	r2, [pc, #396]	; (800b0c4 <modCANtask+0x258>)
 800af36:	6013      	str	r3, [r2, #0]
			if (rx_rd >= MODCAN_TXBUFFER_SIZE) {
 800af38:	4b63      	ldr	r3, [pc, #396]	; (800b0c8 <modCANtask+0x25c>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b1f      	cmp	r3, #31
 800af3e:	dd02      	ble.n	800af46 <modCANtask+0xda>
				rx_rd = 0;
 800af40:	4b61      	ldr	r3, [pc, #388]	; (800b0c8 <modCANtask+0x25c>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
			}
		} while (rx_available >= (MODCAN_TXBUFFER_SIZE - 10));
 800af46:	4b5f      	ldr	r3, [pc, #380]	; (800b0c4 <modCANtask+0x258>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b15      	cmp	r3, #21
 800af4c:	dcdb      	bgt.n	800af06 <modCANtask+0x9a>
	}

	if (modDelayTick1ms(&lasttick_canmsg_stat, 1000)) {
 800af4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800af52:	485f      	ldr	r0, [pc, #380]	; (800b0d0 <modCANtask+0x264>)
 800af54:	f002 fb8a 	bl	800d66c <modDelayTick1ms>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d04d      	beq.n	800affa <modCANtask+0x18e>
		uint8_t data[5];
		int32_t index = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	61bb      	str	r3, [r7, #24]

		buffer_append_uint8(data, (uint8_t) phase.mode, &index);
 800af62:	4b5c      	ldr	r3, [pc, #368]	; (800b0d4 <modCANtask+0x268>)
 800af64:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800af68:	f107 0218 	add.w	r2, r7, #24
 800af6c:	f107 031c 	add.w	r3, r7, #28
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff fac7 	bl	800a504 <buffer_append_uint8>
		buffer_append_uint8(data, (uint8_t) phase.fault, &index);
 800af76:	4b57      	ldr	r3, [pc, #348]	; (800b0d4 <modCANtask+0x268>)
 800af78:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800af7c:	f107 0218 	add.w	r2, r7, #24
 800af80:	f107 031c 	add.w	r3, r7, #28
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff fabd 	bl	800a504 <buffer_append_uint8>
		buffer_append_uint8(data, (uint8_t) phase.enabled, &index);
 800af8a:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <modCANtask+0x268>)
 800af8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af90:	4619      	mov	r1, r3
 800af92:	f107 0218 	add.w	r2, r7, #24
 800af96:	f107 031c 	add.w	r3, r7, #28
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fab2 	bl	800a504 <buffer_append_uint8>
		buffer_append_int8(data, (int8_t) meter.TemperatureAmbient, &index);
 800afa0:	4b4d      	ldr	r3, [pc, #308]	; (800b0d8 <modCANtask+0x26c>)
 800afa2:	edd3 7a05 	vldr	s15, [r3, #20]
 800afa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afaa:	edc7 7a01 	vstr	s15, [r7, #4]
 800afae:	793b      	ldrb	r3, [r7, #4]
 800afb0:	b259      	sxtb	r1, r3
 800afb2:	f107 0218 	add.w	r2, r7, #24
 800afb6:	f107 031c 	add.w	r3, r7, #28
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fa8b 	bl	800a4d6 <buffer_append_int8>
		buffer_append_int8(data, (int8_t) meter.TemperatureHeatsink, &index);
 800afc0:	4b45      	ldr	r3, [pc, #276]	; (800b0d8 <modCANtask+0x26c>)
 800afc2:	edd3 7a04 	vldr	s15, [r3, #16]
 800afc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afca:	edc7 7a01 	vstr	s15, [r7, #4]
 800afce:	793b      	ldrb	r3, [r7, #4]
 800afd0:	b259      	sxtb	r1, r3
 800afd2:	f107 0218 	add.w	r2, r7, #24
 800afd6:	f107 031c 	add.w	r3, r7, #28
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff fa7b 	bl	800a4d6 <buffer_append_int8>

		modCANTransmitStandardID(modCANGetCANID(canid, CAN_PACKET_status), data,
 800afe0:	4b3e      	ldr	r3, [pc, #248]	; (800b0dc <modCANtask+0x270>)
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	2101      	movs	r1, #1
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f892 	bl	800b110 <modCANGetCANID>
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	f107 031c 	add.w	r3, r7, #28
 800aff4:	4619      	mov	r1, r3
 800aff6:	f000 f89f 	bl	800b138 <modCANTransmitStandardID>
				(uint32_t) index);
	}

	//HAL_Delay(10);

	if (modDelayTick1ms(&lasttick_canmsg_power, 500)) {
 800affa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800affe:	4838      	ldr	r0, [pc, #224]	; (800b0e0 <modCANtask+0x274>)
 800b000:	f002 fb34 	bl	800d66c <modDelayTick1ms>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d04a      	beq.n	800b0a0 <modCANtask+0x234>
		uint8_t data[8];
		int32_t index = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]

		buffer_append_float16(data, meter.Vlow, 2.5e2f, &index);
 800b00e:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <modCANtask+0x26c>)
 800b010:	edd3 7a02 	vldr	s15, [r3, #8]
 800b014:	f107 020c 	add.w	r2, r7, #12
 800b018:	f107 0310 	add.w	r3, r7, #16
 800b01c:	4611      	mov	r1, r2
 800b01e:	eddf 0a31 	vldr	s1, [pc, #196]	; 800b0e4 <modCANtask+0x278>
 800b022:	eeb0 0a67 	vmov.f32	s0, s15
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fb09 	bl	800a63e <buffer_append_float16>
		buffer_append_float16(data, meter.Iind, 2.0e3f, &index);
 800b02c:	4b2a      	ldr	r3, [pc, #168]	; (800b0d8 <modCANtask+0x26c>)
 800b02e:	edd3 7a00 	vldr	s15, [r3]
 800b032:	f107 020c 	add.w	r2, r7, #12
 800b036:	f107 0310 	add.w	r3, r7, #16
 800b03a:	4611      	mov	r1, r2
 800b03c:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800b0e8 <modCANtask+0x27c>
 800b040:	eeb0 0a67 	vmov.f32	s0, s15
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fafa 	bl	800a63e <buffer_append_float16>
		buffer_append_float16(data, meter.Vhigh, 2.5e2f, &index);
 800b04a:	4b23      	ldr	r3, [pc, #140]	; (800b0d8 <modCANtask+0x26c>)
 800b04c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b050:	f107 020c 	add.w	r2, r7, #12
 800b054:	f107 0310 	add.w	r3, r7, #16
 800b058:	4611      	mov	r1, r2
 800b05a:	eddf 0a22 	vldr	s1, [pc, #136]	; 800b0e4 <modCANtask+0x278>
 800b05e:	eeb0 0a67 	vmov.f32	s0, s15
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff faeb 	bl	800a63e <buffer_append_float16>
		buffer_append_float16(data, meter.Ihigh, 2.0e3f, &index);
 800b068:	4b1b      	ldr	r3, [pc, #108]	; (800b0d8 <modCANtask+0x26c>)
 800b06a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b06e:	f107 020c 	add.w	r2, r7, #12
 800b072:	f107 0310 	add.w	r3, r7, #16
 800b076:	4611      	mov	r1, r2
 800b078:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b0e8 <modCANtask+0x27c>
 800b07c:	eeb0 0a67 	vmov.f32	s0, s15
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fadc 	bl	800a63e <buffer_append_float16>

		modCANTransmitStandardID(modCANGetCANID(canid, CAN_PACKET_Power), data,
 800b086:	4b15      	ldr	r3, [pc, #84]	; (800b0dc <modCANtask+0x270>)
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f83f 	bl	800b110 <modCANGetCANID>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	b2da      	uxtb	r2, r3
 800b096:	f107 0310 	add.w	r3, r7, #16
 800b09a:	4619      	mov	r1, r3
 800b09c:	f000 f84c 	bl	800b138 <modCANTransmitStandardID>
				(uint32_t) index);
	}
}
 800b0a0:	bf00      	nop
 800b0a2:	3728      	adds	r7, #40	; 0x28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200030d4 	.word	0x200030d4
 800b0ac:	48000400 	.word	0x48000400
 800b0b0:	2000203c 	.word	0x2000203c
 800b0b4:	20002550 	.word	0x20002550
 800b0b8:	200005a8 	.word	0x200005a8
 800b0bc:	200005a4 	.word	0x200005a4
 800b0c0:	20002554 	.word	0x20002554
 800b0c4:	200005b4 	.word	0x200005b4
 800b0c8:	200005b0 	.word	0x200005b0
 800b0cc:	20002ad4 	.word	0x20002ad4
 800b0d0:	20002340 	.word	0x20002340
 800b0d4:	20001ee8 	.word	0x20001ee8
 800b0d8:	200033dc 	.word	0x200033dc
 800b0dc:	2000059c 	.word	0x2000059c
 800b0e0:	20002548 	.word	0x20002548
 800b0e4:	437a0000 	.word	0x437a0000
 800b0e8:	44fa0000 	.word	0x44fa0000

0800b0ec <modCANGetCANEXID>:

uint32_t modCANGetCANEXID(uint32_t destinationID, CAN_PACKET_ID packetID) {
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
	 case CANIDStyleFoiler:
	 returnCANID = ((uint32_t) destinationID << 8) | ((uint32_t)packetID);
	 break;
	 }*/

	return ((destinationID << 8) & 0x7F00) | (packetID & 0x00FF);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	021b      	lsls	r3, r3, #8
 800b0fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b100:	78fb      	ldrb	r3, [r7, #3]
 800b102:	4313      	orrs	r3, r2
}
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <modCANGetCANID>:

uint32_t modCANGetCANID(uint32_t destinationID, CAN_PACKET_ID packetID) {
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
	 case CANIDStyleFoiler:
	 returnCANID = ((uint32_t) destinationID << 8) | ((uint32_t)packetID);
	 break;
	 }*/

	return ((destinationID << 4) & 0x7F0) | (packetID & 0x00F);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	4313      	orrs	r3, r2
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <modCANTransmitStandardID>:

void modCANTransmitStandardID(uint32_t id, uint8_t *data, uint8_t len) {
 800b138:	b5b0      	push	{r4, r5, r7, lr}
 800b13a:	b08e      	sub	sp, #56	; 0x38
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	4613      	mov	r3, r2
 800b144:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef txmsg;
	if (len > 8)
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d901      	bls.n	800b150 <modCANTransmitStandardID+0x18>
		len = 8;
 800b14c:	2308      	movs	r3, #8
 800b14e:	71fb      	strb	r3, [r7, #7]

	txmsg.TxFrameType = FDCAN_DATA_FRAME;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]
	txmsg.IdType = FDCAN_STANDARD_ID;
 800b154:	2300      	movs	r3, #0
 800b156:	61bb      	str	r3, [r7, #24]
	txmsg.MessageMarker = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	637b      	str	r3, [r7, #52]	; 0x34
	txmsg.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800b15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b160:	627b      	str	r3, [r7, #36]	; 0x24
	txmsg.FDFormat = FDCAN_FRAME_CLASSIC;
 800b162:	2300      	movs	r3, #0
 800b164:	62fb      	str	r3, [r7, #44]	; 0x2c
	txmsg.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b166:	2300      	movs	r3, #0
 800b168:	633b      	str	r3, [r7, #48]	; 0x30
	txmsg.BitRateSwitch = FDCAN_BRS_OFF;
 800b16a:	2300      	movs	r3, #0
 800b16c:	62bb      	str	r3, [r7, #40]	; 0x28
	txmsg.DataLength = (uint32_t) (len << 16);
 800b16e:	79fb      	ldrb	r3, [r7, #7]
 800b170:	041b      	lsls	r3, r3, #16
 800b172:	623b      	str	r3, [r7, #32]
	txmsg.Identifier = id;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	617b      	str	r3, [r7, #20]

	TXQue[tx_wr].txmsg = txmsg;
 800b178:	4b19      	ldr	r3, [pc, #100]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a19      	ldr	r2, [pc, #100]	; (800b1e4 <modCANTransmitStandardID+0xac>)
 800b17e:	212c      	movs	r1, #44	; 0x2c
 800b180:	fb01 f303 	mul.w	r3, r1, r3
 800b184:	4413      	add	r3, r2
 800b186:	461d      	mov	r5, r3
 800b188:	f107 0414 	add.w	r4, r7, #20
 800b18c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b18e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	602b      	str	r3, [r5, #0]
	memcpy(TXQue[tx_wr].data, data, sizeof(uint8_t) * len);
 800b198:	4b11      	ldr	r3, [pc, #68]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	222c      	movs	r2, #44	; 0x2c
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
 800b1a2:	3320      	adds	r3, #32
 800b1a4:	4a0f      	ldr	r2, [pc, #60]	; (800b1e4 <modCANTransmitStandardID+0xac>)
 800b1a6:	4413      	add	r3, r2
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	79fa      	ldrb	r2, [r7, #7]
 800b1ac:	68b9      	ldr	r1, [r7, #8]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f004 ff56 	bl	8010060 <memcpy>
	tx_wr++;
 800b1b4:	4b0a      	ldr	r3, [pc, #40]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	4a09      	ldr	r2, [pc, #36]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b1bc:	6013      	str	r3, [r2, #0]
	tx_available++;
 800b1be:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <modCANTransmitStandardID+0xb0>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <modCANTransmitStandardID+0xb0>)
 800b1c6:	6013      	str	r3, [r2, #0]
	if (tx_wr >= MODCAN_TXBUFFER_SIZE)
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b1f      	cmp	r3, #31
 800b1ce:	dd02      	ble.n	800b1d6 <modCANTransmitStandardID+0x9e>
		tx_wr = 0;
 800b1d0:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <modCANTransmitStandardID+0xa8>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
}
 800b1d6:	bf00      	nop
 800b1d8:	3738      	adds	r7, #56	; 0x38
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	200005a0 	.word	0x200005a0
 800b1e4:	20002554 	.word	0x20002554
 800b1e8:	200005a8 	.word	0x200005a8

0800b1ec <modCANTransmitExtID>:

void modCANTransmitExtID(uint32_t id, uint8_t *data, uint8_t len) {
 800b1ec:	b5b0      	push	{r4, r5, r7, lr}
 800b1ee:	b08e      	sub	sp, #56	; 0x38
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	71fb      	strb	r3, [r7, #7]
	FDCAN_TxHeaderTypeDef txmsg;

	if (len > 8)
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d901      	bls.n	800b204 <modCANTransmitExtID+0x18>
		len = 8;
 800b200:	2308      	movs	r3, #8
 800b202:	71fb      	strb	r3, [r7, #7]

	txmsg.TxFrameType = FDCAN_DATA_FRAME;
 800b204:	2300      	movs	r3, #0
 800b206:	61fb      	str	r3, [r7, #28]
	txmsg.IdType = FDCAN_EXTENDED_ID;
 800b208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b20c:	61bb      	str	r3, [r7, #24]
	txmsg.MessageMarker = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	637b      	str	r3, [r7, #52]	; 0x34
	txmsg.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800b212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
	txmsg.FDFormat = FDCAN_FRAME_CLASSIC;
 800b218:	2300      	movs	r3, #0
 800b21a:	62fb      	str	r3, [r7, #44]	; 0x2c
	txmsg.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b21c:	2300      	movs	r3, #0
 800b21e:	633b      	str	r3, [r7, #48]	; 0x30
	txmsg.BitRateSwitch = FDCAN_BRS_OFF;
 800b220:	2300      	movs	r3, #0
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28
	txmsg.DataLength = (uint32_t) (len << 16);
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	041b      	lsls	r3, r3, #16
 800b228:	623b      	str	r3, [r7, #32]
	txmsg.Identifier = id;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	617b      	str	r3, [r7, #20]

	TXQue[tx_wr].txmsg = txmsg;
 800b22e:	4b19      	ldr	r3, [pc, #100]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a19      	ldr	r2, [pc, #100]	; (800b298 <modCANTransmitExtID+0xac>)
 800b234:	212c      	movs	r1, #44	; 0x2c
 800b236:	fb01 f303 	mul.w	r3, r1, r3
 800b23a:	4413      	add	r3, r2
 800b23c:	461d      	mov	r5, r3
 800b23e:	f107 0414 	add.w	r4, r7, #20
 800b242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	602b      	str	r3, [r5, #0]
	memcpy(TXQue[tx_wr].data, data, sizeof(uint8_t) * len);
 800b24e:	4b11      	ldr	r3, [pc, #68]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	222c      	movs	r2, #44	; 0x2c
 800b254:	fb02 f303 	mul.w	r3, r2, r3
 800b258:	3320      	adds	r3, #32
 800b25a:	4a0f      	ldr	r2, [pc, #60]	; (800b298 <modCANTransmitExtID+0xac>)
 800b25c:	4413      	add	r3, r2
 800b25e:	3304      	adds	r3, #4
 800b260:	79fa      	ldrb	r2, [r7, #7]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	4618      	mov	r0, r3
 800b266:	f004 fefb 	bl	8010060 <memcpy>
	tx_wr++;
 800b26a:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	4a08      	ldr	r2, [pc, #32]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b272:	6013      	str	r3, [r2, #0]
	tx_available++;
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <modCANTransmitExtID+0xb0>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	4a08      	ldr	r2, [pc, #32]	; (800b29c <modCANTransmitExtID+0xb0>)
 800b27c:	6013      	str	r3, [r2, #0]
	if (tx_wr >= MODCAN_TXBUFFER_SIZE)
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b1f      	cmp	r3, #31
 800b284:	dd02      	ble.n	800b28c <modCANTransmitExtID+0xa0>
		tx_wr = 0;
 800b286:	4b03      	ldr	r3, [pc, #12]	; (800b294 <modCANTransmitExtID+0xa8>)
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
}
 800b28c:	bf00      	nop
 800b28e:	3738      	adds	r7, #56	; 0x38
 800b290:	46bd      	mov	sp, r7
 800b292:	bdb0      	pop	{r4, r5, r7, pc}
 800b294:	200005a0 	.word	0x200005a0
 800b298:	20002554 	.word	0x20002554
 800b29c:	200005a8 	.word	0x200005a8

0800b2a0 <modCANSendBuffer>:

void modCANSendBuffer(uint8_t controllerID, uint8_t *data, unsigned int len,
		bool send) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08e      	sub	sp, #56	; 0x38
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b06      	cmp	r3, #6
 800b2b8:	d82f      	bhi.n	800b31a <modCANSendBuffer+0x7a>
		uint32_t ind = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t) canid & 0xFF;
 800b2be:	4b8c      	ldr	r3, [pc, #560]	; (800b4f0 <modCANSendBuffer+0x250>)
 800b2c0:	8819      	ldrh	r1, [r3, #0]
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	61ba      	str	r2, [r7, #24]
 800b2c8:	b2ca      	uxtb	r2, r1
 800b2ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b2ce:	440b      	add	r3, r1
 800b2d0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	61ba      	str	r2, [r7, #24]
 800b2da:	7bba      	ldrb	r2, [r7, #14]
 800b2dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b2e0:	440b      	add	r3, r1
 800b2e2:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800b2e6:	f107 0210 	add.w	r2, r7, #16
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f004 feb4 	bl	8010060 <memcpy>
		ind += len;
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]
		modCANTransmitExtID(
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	2108      	movs	r1, #8
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fef1 	bl	800b0ec <modCANGetCANEXID>
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	f107 0310 	add.w	r3, r7, #16
 800b312:	4619      	mov	r1, r3
 800b314:	f7ff ff6a 	bl	800b1ec <modCANTransmitExtID>
		//modCANTransmitExtID(controllerID | ((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
		modCANTransmitExtID(
				modCANGetCANEXID(controllerID, CAN_PACKET_PROCESS_RX_BUFFER),
				send_buffer, (uint8_t) ind++);
	}
}
 800b318:	e0e6      	b.n	800b4e8 <modCANSendBuffer+0x248>
		unsigned int end_a = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0; i < len; i += 7) {
 800b31e:	2300      	movs	r3, #0
 800b320:	633b      	str	r3, [r7, #48]	; 0x30
 800b322:	e03f      	b.n	800b3a4 <modCANSendBuffer+0x104>
			if (i > 255) {
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	2bff      	cmp	r3, #255	; 0xff
 800b328:	d841      	bhi.n	800b3ae <modCANSendBuffer+0x10e>
			end_a = i + 7;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	3307      	adds	r3, #7
 800b32e:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800b330:	2307      	movs	r3, #7
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = (uint8_t) i;
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	3307      	adds	r3, #7
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	429a      	cmp	r2, r3
 800b344:	d30b      	bcc.n	800b35e <modCANSendBuffer+0xbe>
				memcpy(send_buffer + 1, data + i, send_len);
 800b346:	f107 0310 	add.w	r3, r7, #16
 800b34a:	3301      	adds	r3, #1
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b350:	4411      	add	r1, r2
 800b352:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b356:	4618      	mov	r0, r3
 800b358:	f004 fe82 	bl	8010060 <memcpy>
 800b35c:	e011      	b.n	800b382 <modCANSendBuffer+0xe2>
				send_len = (uint8_t) (len - i);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	b2da      	uxtb	r2, r3
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	b2db      	uxtb	r3, r3
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800b36c:	f107 0310 	add.w	r3, r7, #16
 800b370:	3301      	adds	r3, #1
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b376:	4411      	add	r1, r2
 800b378:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b37c:	4618      	mov	r0, r3
 800b37e:	f004 fe6f 	bl	8010060 <memcpy>
			modCANTransmitExtID(
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2105      	movs	r1, #5
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff feb0 	bl	800b0ec <modCANGetCANEXID>
 800b38c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b390:	3301      	adds	r3, #1
 800b392:	b2da      	uxtb	r2, r3
 800b394:	f107 0310 	add.w	r3, r7, #16
 800b398:	4619      	mov	r1, r3
 800b39a:	f7ff ff27 	bl	800b1ec <modCANTransmitExtID>
		for (unsigned int i = 0; i < len; i += 7) {
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d3bb      	bcc.n	800b324 <modCANSendBuffer+0x84>
 800b3ac:	e000      	b.n	800b3b0 <modCANSendBuffer+0x110>
				break;
 800b3ae:	bf00      	nop
		for (unsigned int i = end_a; i < len; i += 6) {
 800b3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b4:	e03d      	b.n	800b432 <modCANSendBuffer+0x192>
			uint8_t send_len = 6;
 800b3b6:	2306      	movs	r3, #6
 800b3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = (uint8_t) (i >> 8);
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	3306      	adds	r3, #6
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d30b      	bcc.n	800b3ec <modCANSendBuffer+0x14c>
				memcpy(send_buffer + 2, data + i, send_len);
 800b3d4:	f107 0310 	add.w	r3, r7, #16
 800b3d8:	3302      	adds	r3, #2
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3de:	4411      	add	r1, r2
 800b3e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f004 fe3b 	bl	8010060 <memcpy>
 800b3ea:	e011      	b.n	800b410 <modCANSendBuffer+0x170>
				send_len = (uint8_t) (len - i);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800b3fa:	f107 0310 	add.w	r3, r7, #16
 800b3fe:	3302      	adds	r3, #2
 800b400:	68b9      	ldr	r1, [r7, #8]
 800b402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b404:	4411      	add	r1, r2
 800b406:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b40a:	4618      	mov	r0, r3
 800b40c:	f004 fe28 	bl	8010060 <memcpy>
			modCANTransmitExtID(
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	2106      	movs	r1, #6
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fe69 	bl	800b0ec <modCANGetCANEXID>
 800b41a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b41e:	3302      	adds	r3, #2
 800b420:	b2da      	uxtb	r2, r3
 800b422:	f107 0310 	add.w	r3, r7, #16
 800b426:	4619      	mov	r1, r3
 800b428:	f7ff fee0 	bl	800b1ec <modCANTransmitExtID>
		for (unsigned int i = end_a; i < len; i += 6) {
 800b42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42e:	3306      	adds	r3, #6
 800b430:	62bb      	str	r3, [r7, #40]	; 0x28
 800b432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d3bd      	bcc.n	800b3b6 <modCANSendBuffer+0x116>
		uint32_t ind = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t) (canid >> 4);
 800b43e:	4b2c      	ldr	r3, [pc, #176]	; (800b4f0 <modCANSendBuffer+0x250>)
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	091b      	lsrs	r3, r3, #4
 800b444:	b299      	uxth	r1, r3
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	623a      	str	r2, [r7, #32]
 800b44c:	b2ca      	uxtb	r2, r1
 800b44e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b452:	440b      	add	r3, r1
 800b454:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	623a      	str	r2, [r7, #32]
 800b45e:	7bba      	ldrb	r2, [r7, #14]
 800b460:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b464:	440b      	add	r3, r1
 800b466:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t) (len >> 8);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	0a19      	lsrs	r1, r3, #8
 800b46e:	6a3b      	ldr	r3, [r7, #32]
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	623a      	str	r2, [r7, #32]
 800b474:	b2ca      	uxtb	r2, r1
 800b476:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b47a:	440b      	add	r3, r1
 800b47c:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	623a      	str	r2, [r7, #32]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	b2d2      	uxtb	r2, r2
 800b48a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b48e:	440b      	add	r3, r1
 800b490:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = libCRCCalcCRC16(data, len);
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	68b8      	ldr	r0, [r7, #8]
 800b498:	f002 f8ba 	bl	800d610 <libCRCCalcCRC16>
 800b49c:	4603      	mov	r3, r0
 800b49e:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t) (crc >> 8);
 800b4a0:	8bfb      	ldrh	r3, [r7, #30]
 800b4a2:	0a1b      	lsrs	r3, r3, #8
 800b4a4:	b299      	uxth	r1, r3
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	623a      	str	r2, [r7, #32]
 800b4ac:	b2ca      	uxtb	r2, r1
 800b4ae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b4b2:	440b      	add	r3, r1
 800b4b4:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t) (crc & 0xFF);
 800b4b8:	6a3b      	ldr	r3, [r7, #32]
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	623a      	str	r2, [r7, #32]
 800b4be:	8bfa      	ldrh	r2, [r7, #30]
 800b4c0:	b2d2      	uxtb	r2, r2
 800b4c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b4c6:	440b      	add	r3, r1
 800b4c8:	f803 2c28 	strb.w	r2, [r3, #-40]
		modCANTransmitExtID(
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	2107      	movs	r1, #7
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fe0b 	bl	800b0ec <modCANGetCANEXID>
				send_buffer, (uint8_t) ind++);
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	623a      	str	r2, [r7, #32]
		modCANTransmitExtID(
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	f107 0310 	add.w	r3, r7, #16
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	f7ff fe82 	bl	800b1ec <modCANTransmitExtID>
}
 800b4e8:	bf00      	nop
 800b4ea:	3738      	adds	r7, #56	; 0x38
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	2000059c 	.word	0x2000059c

0800b4f4 <modCANSendPacketWrapper>:

void modCANSendPacketWrapper(unsigned char *data, unsigned int length) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
	modCANSendBuffer(modCANRxBufferLastID, data, length, true);
 800b4fe:	4b05      	ldr	r3, [pc, #20]	; (800b514 <modCANSendPacketWrapper+0x20>)
 800b500:	7818      	ldrb	r0, [r3, #0]
 800b502:	2301      	movs	r3, #1
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	f7ff feca 	bl	800b2a0 <modCANSendBuffer>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20002544 	.word	0x20002544

0800b518 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0

	HAL_FDCAN_IRQHandler(&hfdcan2);
 800b51c:	4802      	ldr	r0, [pc, #8]	; (800b528 <FDCAN2_IT0_IRQHandler+0x10>)
 800b51e:	f7f8 fd83 	bl	8004028 <HAL_FDCAN_IRQHandler>

}
 800b522:	bf00      	nop
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200030d4 	.word	0x200030d4

0800b52c <FDCAN2_IT1_IRQHandler>:

void FDCAN2_IT1_IRQHandler(void) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0

	HAL_FDCAN_IRQHandler(&hfdcan2);
 800b530:	4802      	ldr	r0, [pc, #8]	; (800b53c <FDCAN2_IT1_IRQHandler+0x10>)
 800b532:	f7f8 fd79 	bl	8004028 <HAL_FDCAN_IRQHandler>

}
 800b536:	bf00      	nop
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200030d4 	.word	0x200030d4

0800b540 <__NVIC_SystemReset>:
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b544:	f3bf 8f4f 	dsb	sy
}
 800b548:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b54a:	4b06      	ldr	r3, [pc, #24]	; (800b564 <__NVIC_SystemReset+0x24>)
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b552:	4904      	ldr	r1, [pc, #16]	; (800b564 <__NVIC_SystemReset+0x24>)
 800b554:	4b04      	ldr	r3, [pc, #16]	; (800b568 <__NVIC_SystemReset+0x28>)
 800b556:	4313      	orrs	r3, r2
 800b558:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b55a:	f3bf 8f4f 	dsb	sy
}
 800b55e:	bf00      	nop
    __NOP();
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <__NVIC_SystemReset+0x20>
 800b564:	e000ed00 	.word	0xe000ed00
 800b568:	05fa0004 	.word	0x05fa0004

0800b56c <modCommandsSetSendFunction>:
	//modCommandsGeneralConfig = configPointer;
	//modCommandsGeneralState  = generalState;
	jumpBootloaderTrue = false;
}

void modCommandsSetSendFunction(void(*func)(unsigned char *data, unsigned int len)) {
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	modCommandsSendFunction = func;
 800b574:	4a04      	ldr	r2, [pc, #16]	; (800b588 <modCommandsSetSendFunction+0x1c>)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6013      	str	r3, [r2, #0]
}
 800b57a:	bf00      	nop
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	200009b8 	.word	0x200009b8

0800b58c <modCommandsSendPacket>:

void modCommandsSendPacket(unsigned char *data, unsigned int len) {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
	if (modCommandsSendFunction) {
 800b596:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <modCommandsSendPacket+0x24>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d004      	beq.n	800b5a8 <modCommandsSendPacket+0x1c>
		modCommandsSendFunction(data, len);
 800b59e:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <modCommandsSendPacket+0x24>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	4798      	blx	r3
	}
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	200009b8 	.word	0x200009b8

0800b5b4 <modCommandsProcessPacket>:
COMM_PACKET_ID last_packet_id;
void modCommandsProcessPacket(unsigned char *data, unsigned int len) {
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b08b      	sub	sp, #44	; 0x2c
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]

	if (!len) {
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 8760 	beq.w	800c486 <modCommandsProcessPacket+0xed2>
		return;
	}

	COMM_PACKET_ID packet_id;
	int32_t ind = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
	uint16_t flash_res;
	uint32_t new_app_offset;

	uint16_t calcrc;

	packet_id = (COMM_PACKET_ID) data[0];
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	last_packet_id =packet_id;
 800b5d2:	4ac3      	ldr	r2, [pc, #780]	; (800b8e0 <modCommandsProcessPacket+0x32c>)
 800b5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d8:	7013      	strb	r3, [r2, #0]
	data++;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	607b      	str	r3, [r7, #4]
	len--;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	603b      	str	r3, [r7, #0]

	float tempfloat;
	switch (packet_id) {
 800b5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ea:	2b69      	cmp	r3, #105	; 0x69
 800b5ec:	f200 8739 	bhi.w	800c462 <modCommandsProcessPacket+0xeae>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <modCommandsProcessPacket+0x44>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b7a1 	.word	0x0800b7a1
 800b5fc:	0800b817 	.word	0x0800b817
 800b600:	0800b82b 	.word	0x0800b82b
 800b604:	0800b87f 	.word	0x0800b87f
 800b608:	0800b8f9 	.word	0x0800b8f9
 800b60c:	0800c463 	.word	0x0800c463
 800b610:	0800c463 	.word	0x0800c463
 800b614:	0800c463 	.word	0x0800c463
 800b618:	0800c463 	.word	0x0800c463
 800b61c:	0800c463 	.word	0x0800c463
 800b620:	0800c463 	.word	0x0800c463
 800b624:	0800c463 	.word	0x0800c463
 800b628:	0800c463 	.word	0x0800c463
 800b62c:	0800b9eb 	.word	0x0800b9eb
 800b630:	0800bc31 	.word	0x0800bc31
 800b634:	0800bc31 	.word	0x0800bc31
 800b638:	0800c463 	.word	0x0800c463
 800b63c:	0800c463 	.word	0x0800c463
 800b640:	0800c463 	.word	0x0800c463
 800b644:	0800c463 	.word	0x0800c463
 800b648:	0800be55 	.word	0x0800be55
 800b64c:	0800c463 	.word	0x0800c463
 800b650:	0800c463 	.word	0x0800c463
 800b654:	0800c463 	.word	0x0800c463
 800b658:	0800c463 	.word	0x0800c463
 800b65c:	0800c463 	.word	0x0800c463
 800b660:	0800c463 	.word	0x0800c463
 800b664:	0800c463 	.word	0x0800c463
 800b668:	0800c463 	.word	0x0800c463
 800b66c:	0800be67 	.word	0x0800be67
 800b670:	0800c463 	.word	0x0800c463
 800b674:	0800c463 	.word	0x0800c463
 800b678:	0800c463 	.word	0x0800c463
 800b67c:	0800c463 	.word	0x0800c463
 800b680:	0800be6d 	.word	0x0800be6d
 800b684:	0800c463 	.word	0x0800c463
 800b688:	0800c463 	.word	0x0800c463
 800b68c:	0800c463 	.word	0x0800c463
 800b690:	0800c463 	.word	0x0800c463
 800b694:	0800c463 	.word	0x0800c463
 800b698:	0800c463 	.word	0x0800c463
 800b69c:	0800c463 	.word	0x0800c463
 800b6a0:	0800c463 	.word	0x0800c463
 800b6a4:	0800c463 	.word	0x0800c463
 800b6a8:	0800c463 	.word	0x0800c463
 800b6ac:	0800c463 	.word	0x0800c463
 800b6b0:	0800c463 	.word	0x0800c463
 800b6b4:	0800c463 	.word	0x0800c463
 800b6b8:	0800c463 	.word	0x0800c463
 800b6bc:	0800c463 	.word	0x0800c463
 800b6c0:	0800be81 	.word	0x0800be81
 800b6c4:	0800c463 	.word	0x0800c463
 800b6c8:	0800c463 	.word	0x0800c463
 800b6cc:	0800c463 	.word	0x0800c463
 800b6d0:	0800c463 	.word	0x0800c463
 800b6d4:	0800c463 	.word	0x0800c463
 800b6d8:	0800c463 	.word	0x0800c463
 800b6dc:	0800c463 	.word	0x0800c463
 800b6e0:	0800c463 	.word	0x0800c463
 800b6e4:	0800c463 	.word	0x0800c463
 800b6e8:	0800c463 	.word	0x0800c463
 800b6ec:	0800c463 	.word	0x0800c463
 800b6f0:	0800c463 	.word	0x0800c463
 800b6f4:	0800c463 	.word	0x0800c463
 800b6f8:	0800c463 	.word	0x0800c463
 800b6fc:	0800c463 	.word	0x0800c463
 800b700:	0800c463 	.word	0x0800c463
 800b704:	0800c463 	.word	0x0800c463
 800b708:	0800c463 	.word	0x0800c463
 800b70c:	0800c463 	.word	0x0800c463
 800b710:	0800c463 	.word	0x0800c463
 800b714:	0800c463 	.word	0x0800c463
 800b718:	0800c463 	.word	0x0800c463
 800b71c:	0800c463 	.word	0x0800c463
 800b720:	0800c463 	.word	0x0800c463
 800b724:	0800beb5 	.word	0x0800beb5
 800b728:	0800c169 	.word	0x0800c169
 800b72c:	0800c463 	.word	0x0800c463
 800b730:	0800c463 	.word	0x0800c463
 800b734:	0800c463 	.word	0x0800c463
 800b738:	0800c463 	.word	0x0800c463
 800b73c:	0800c463 	.word	0x0800c463
 800b740:	0800c463 	.word	0x0800c463
 800b744:	0800c463 	.word	0x0800c463
 800b748:	0800c463 	.word	0x0800c463
 800b74c:	0800c463 	.word	0x0800c463
 800b750:	0800c463 	.word	0x0800c463
 800b754:	0800c463 	.word	0x0800c463
 800b758:	0800c463 	.word	0x0800c463
 800b75c:	0800c463 	.word	0x0800c463
 800b760:	0800c463 	.word	0x0800c463
 800b764:	0800c463 	.word	0x0800c463
 800b768:	0800c463 	.word	0x0800c463
 800b76c:	0800c463 	.word	0x0800c463
 800b770:	0800c463 	.word	0x0800c463
 800b774:	0800c463 	.word	0x0800c463
 800b778:	0800c463 	.word	0x0800c463
 800b77c:	0800c463 	.word	0x0800c463
 800b780:	0800c463 	.word	0x0800c463
 800b784:	0800c463 	.word	0x0800c463
 800b788:	0800c3e7 	.word	0x0800c3e7
 800b78c:	0800c463 	.word	0x0800c463
 800b790:	0800c463 	.word	0x0800c463
 800b794:	0800c463 	.word	0x0800c463
 800b798:	0800c463 	.word	0x0800c463
 800b79c:	0800c435 	.word	0x0800c435
		case COMM_FW_VERSION:
			ind = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = COMM_FW_VERSION;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	60fa      	str	r2, [r7, #12]
 800b7aa:	4a4e      	ldr	r2, [pc, #312]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	54d1      	strb	r1, [r2, r3]
			modCommandsSendBuffer[ind++] = FW_VERSION_MAJOR;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	60fa      	str	r2, [r7, #12]
 800b7b6:	4a4b      	ldr	r2, [pc, #300]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	54d1      	strb	r1, [r2, r3]
			modCommandsSendBuffer[ind++] = FW_VERSION_MINOR;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	60fa      	str	r2, [r7, #12]
 800b7c2:	4a48      	ldr	r2, [pc, #288]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	54d1      	strb	r1, [r2, r3]
			strcpy((char*)(modCommandsSendBuffer + ind), acktiveConfig->calData.HardwareName);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b45      	ldr	r3, [pc, #276]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b7ce:	4413      	add	r3, r2
 800b7d0:	4a45      	ldr	r2, [pc, #276]	; (800b8e8 <modCommandsProcessPacket+0x334>)
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f005 fbf6 	bl	8010fc8 <strcpy>
			ind += strlen(acktiveConfig->calData.HardwareName) + 1;
 800b7dc:	4b42      	ldr	r3, [pc, #264]	; (800b8e8 <modCommandsProcessPacket+0x334>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f4 fd27 	bl	8000234 <strlen>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	60fb      	str	r3, [r7, #12]
			memcpy(modCommandsSendBuffer + ind, (void*) UID_BASE, 12);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4b3b      	ldr	r3, [pc, #236]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b7f6:	4413      	add	r3, r2
 800b7f8:	220c      	movs	r2, #12
 800b7fa:	493c      	ldr	r1, [pc, #240]	; (800b8ec <modCommandsProcessPacket+0x338>)
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f004 fc2f 	bl	8010060 <memcpy>
			ind += 12;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	330c      	adds	r3, #12
 800b806:	60fb      	str	r3, [r7, #12]

			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	4619      	mov	r1, r3
 800b80c:	4835      	ldr	r0, [pc, #212]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b80e:	f7ff febd 	bl	800b58c <modCommandsSendPacket>
			break;
 800b812:	f000 be29 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_JUMP_TO_BOOTLOADER:
			jumpBootloaderTrue = true;
 800b816:	4b36      	ldr	r3, [pc, #216]	; (800b8f0 <modCommandsProcessPacket+0x33c>)
 800b818:	2201      	movs	r2, #1
 800b81a:	701a      	strb	r2, [r3, #0]
			delaytick = HAL_GetTick();
 800b81c:	f7f5 fc82 	bl	8001124 <HAL_GetTick>
 800b820:	4603      	mov	r3, r0
 800b822:	4a34      	ldr	r2, [pc, #208]	; (800b8f4 <modCommandsProcessPacket+0x340>)
 800b824:	6013      	str	r3, [r2, #0]
			break;
 800b826:	f000 be1f 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_ERASE_NEW_APP:
			main_halt_risky();
 800b82a:	f002 fb75 	bl	800df18 <main_halt_risky>
			ind = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
			flash_res = modFlashEraseNewAppData(buffer_get_uint32(data, &ind));
 800b832:	f107 030c 	add.w	r3, r7, #12
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7fe ffd2 	bl	800a7e2 <buffer_get_uint32>
 800b83e:	4603      	mov	r3, r0
 800b840:	4618      	mov	r0, r3
 800b842:	f002 f865 	bl	800d910 <modFlashEraseNewAppData>
 800b846:	4603      	mov	r3, r0
 800b848:	827b      	strh	r3, [r7, #18]

			ind = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = COMM_ERASE_NEW_APP;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	60fa      	str	r2, [r7, #12]
 800b854:	4a23      	ldr	r2, [pc, #140]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b856:	2102      	movs	r1, #2
 800b858:	54d1      	strb	r1, [r2, r3]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? true : false;
 800b85a:	8a7b      	ldrh	r3, [r7, #18]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bf0c      	ite	eq
 800b860:	2301      	moveq	r3, #1
 800b862:	2300      	movne	r3, #0
 800b864:	b2d9      	uxtb	r1, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	60fa      	str	r2, [r7, #12]
 800b86c:	4a1d      	ldr	r2, [pc, #116]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b86e:	54d1      	strb	r1, [r2, r3]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4619      	mov	r1, r3
 800b874:	481b      	ldr	r0, [pc, #108]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b876:	f7ff fe89 	bl	800b58c <modCommandsSendPacket>
			break;
 800b87a:	f000 bdf5 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_WRITE_NEW_APP_DATA:
			ind = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
			new_app_offset = buffer_get_uint32(data, &ind);
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7fe ffaa 	bl	800a7e2 <buffer_get_uint32>
 800b88e:	6178      	str	r0, [r7, #20]
			flash_res = modFlashWriteNewAppData(new_app_offset, data + ind, len - ind);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	1899      	adds	r1, r3, r2
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	461a      	mov	r2, r3
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6978      	ldr	r0, [r7, #20]
 800b8a4:	f002 f890 	bl	800d9c8 <modFlashWriteNewAppData>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	827b      	strh	r3, [r7, #18]

			ind = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	60fa      	str	r2, [r7, #12]
 800b8b6:	4a0b      	ldr	r2, [pc, #44]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b8b8:	2103      	movs	r1, #3
 800b8ba:	54d1      	strb	r1, [r2, r3]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? 1 : 0;
 800b8bc:	8a7b      	ldrh	r3, [r7, #18]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bf0c      	ite	eq
 800b8c2:	2301      	moveq	r3, #1
 800b8c4:	2300      	movne	r3, #0
 800b8c6:	b2d9      	uxtb	r1, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	60fa      	str	r2, [r7, #12]
 800b8ce:	4a05      	ldr	r2, [pc, #20]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b8d0:	54d1      	strb	r1, [r2, r3]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4803      	ldr	r0, [pc, #12]	; (800b8e4 <modCommandsProcessPacket+0x330>)
 800b8d8:	f7ff fe58 	bl	800b58c <modCommandsSendPacket>
			break;
 800b8dc:	f000 bdc4 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
 800b8e0:	20003139 	.word	0x20003139
 800b8e4:	200005b8 	.word	0x200005b8
 800b8e8:	2000349c 	.word	0x2000349c
 800b8ec:	1fff7590 	.word	0x1fff7590
 800b8f0:	20003138 	.word	0x20003138
 800b8f4:	2000313c 	.word	0x2000313c
		case COMM_GET_VALUES:
			ind = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = COMM_GET_VALUES;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	60fa      	str	r2, [r7, #12]
 800b902:	4ac5      	ldr	r2, [pc, #788]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b904:	2104      	movs	r1, #4
 800b906:	54d1      	strb	r1, [r2, r3]
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Iind , &ind);
 800b908:	4bc4      	ldr	r3, [pc, #784]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b90a:	edd3 7a00 	vldr	s15, [r3]
 800b90e:	f107 030c 	add.w	r3, r7, #12
 800b912:	4619      	mov	r1, r3
 800b914:	eeb0 0a67 	vmov.f32	s0, s15
 800b918:	48bf      	ldr	r0, [pc, #764]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b91a:	f7fe fead 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Ihigh, &ind);
 800b91e:	4bbf      	ldr	r3, [pc, #764]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b920:	edd3 7a01 	vldr	s15, [r3, #4]
 800b924:	f107 030c 	add.w	r3, r7, #12
 800b928:	4619      	mov	r1, r3
 800b92a:	eeb0 0a67 	vmov.f32	s0, s15
 800b92e:	48ba      	ldr	r0, [pc, #744]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b930:	f7fe fea2 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Ilow, &ind);
 800b934:	4bb9      	ldr	r3, [pc, #740]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b936:	edd3 7a06 	vldr	s15, [r3, #24]
 800b93a:	f107 030c 	add.w	r3, r7, #12
 800b93e:	4619      	mov	r1, r3
 800b940:	eeb0 0a67 	vmov.f32	s0, s15
 800b944:	48b4      	ldr	r0, [pc, #720]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b946:	f7fe fe97 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Vlow, &ind);
 800b94a:	4bb4      	ldr	r3, [pc, #720]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b94c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	4619      	mov	r1, r3
 800b956:	eeb0 0a67 	vmov.f32	s0, s15
 800b95a:	48af      	ldr	r0, [pc, #700]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b95c:	f7fe fe8c 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Vhigh, &ind);
 800b960:	4bae      	ldr	r3, [pc, #696]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b962:	edd3 7a03 	vldr	s15, [r3, #12]
 800b966:	f107 030c 	add.w	r3, r7, #12
 800b96a:	4619      	mov	r1, r3
 800b96c:	eeb0 0a67 	vmov.f32	s0, s15
 800b970:	48a9      	ldr	r0, [pc, #676]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b972:	f7fe fe81 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.TemperatureAmbient, &ind);
 800b976:	4ba9      	ldr	r3, [pc, #676]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b978:	edd3 7a05 	vldr	s15, [r3, #20]
 800b97c:	f107 030c 	add.w	r3, r7, #12
 800b980:	4619      	mov	r1, r3
 800b982:	eeb0 0a67 	vmov.f32	s0, s15
 800b986:	48a4      	ldr	r0, [pc, #656]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b988:	f7fe fe76 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.TemperatureHeatsink, &ind);
 800b98c:	4ba3      	ldr	r3, [pc, #652]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b98e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b992:	f107 030c 	add.w	r3, r7, #12
 800b996:	4619      	mov	r1, r3
 800b998:	eeb0 0a67 	vmov.f32	s0, s15
 800b99c:	489e      	ldr	r0, [pc, #632]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b99e:	f7fe fe6b 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Eff, &ind);
 800b9a2:	4b9e      	ldr	r3, [pc, #632]	; (800bc1c <modCommandsProcessPacket+0x668>)
 800b9a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b9a8:	f107 030c 	add.w	r3, r7, #12
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b9b2:	4899      	ldr	r0, [pc, #612]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b9b4:	f7fe fe60 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_uint8(modCommandsSendBuffer, phase.mode,  &ind);
 800b9b8:	4b99      	ldr	r3, [pc, #612]	; (800bc20 <modCommandsProcessPacket+0x66c>)
 800b9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9be:	f107 020c 	add.w	r2, r7, #12
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4894      	ldr	r0, [pc, #592]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b9c6:	f7fe fd9d 	bl	800a504 <buffer_append_uint8>
			buffer_append_uint8(modCommandsSendBuffer, phase.fault,  &ind);
 800b9ca:	4b95      	ldr	r3, [pc, #596]	; (800bc20 <modCommandsProcessPacket+0x66c>)
 800b9cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b9d0:	f107 020c 	add.w	r2, r7, #12
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4890      	ldr	r0, [pc, #576]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b9d8:	f7fe fd94 	bl	800a504 <buffer_append_uint8>
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	488d      	ldr	r0, [pc, #564]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800b9e2:	f7ff fdd3 	bl	800b58c <modCommandsSendPacket>
			break;
 800b9e6:	f000 bd3f 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
		
		case COMM_SET_MCCONF:
			ind = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
			//Before writing the data, disable the outptut.
			main_halt_risky();
 800b9ee:	f002 fa93 	bl	800df18 <main_halt_risky>
			acktiveConfig->settings.HighSideVoltageLimitSoft    = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800b9f2:	f107 030c 	add.w	r3, r7, #12
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7fe ff3d 	bl	800a878 <buffer_get_float32_auto>
 800b9fe:	eef0 7a40 	vmov.f32	s15, s0
 800ba02:	4b88      	ldr	r3, [pc, #544]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bc28 <modCommandsProcessPacket+0x674>
 800ba0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba0e:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
			acktiveConfig->settings.LowSideVoltageLimitSoft     = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7fe ff2d 	bl	800a878 <buffer_get_float32_auto>
 800ba1e:	eef0 7a40 	vmov.f32	s15, s0
 800ba22:	4b80      	ldr	r3, [pc, #512]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800bc28 <modCommandsProcessPacket+0x674>
 800ba2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba2e:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
			acktiveConfig->settings.HighSideCurrentLimitSoft    = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800ba32:	f107 030c 	add.w	r3, r7, #12
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7fe ff1d 	bl	800a878 <buffer_get_float32_auto>
 800ba3e:	eef0 7a40 	vmov.f32	s15, s0
 800ba42:	4b78      	ldr	r3, [pc, #480]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800bc28 <modCommandsProcessPacket+0x674>
 800ba4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba4e:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
			acktiveConfig->settings.LowSideCurrentMaxLimitSoft  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800ba52:	f107 030c 	add.w	r3, r7, #12
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7fe ff0d 	bl	800a878 <buffer_get_float32_auto>
 800ba5e:	eef0 7a40 	vmov.f32	s15, s0
 800ba62:	4b70      	ldr	r3, [pc, #448]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800bc28 <modCommandsProcessPacket+0x674>
 800ba6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba6e:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
			acktiveConfig->settings.PhaseHighSideEnableCurrent  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800ba72:	f107 030c 	add.w	r3, r7, #12
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7fe fefd 	bl	800a878 <buffer_get_float32_auto>
 800ba7e:	eef0 7a40 	vmov.f32	s15, s0
 800ba82:	4b68      	ldr	r3, [pc, #416]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800bc28 <modCommandsProcessPacket+0x674>
 800ba8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba8e:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
			acktiveConfig->settings.LowSideCurrentMinLimitSoft  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	4619      	mov	r1, r3
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7fe feed 	bl	800a878 <buffer_get_float32_auto>
 800ba9e:	eef0 7a40 	vmov.f32	s15, s0
 800baa2:	4b60      	ldr	r3, [pc, #384]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800bc28 <modCommandsProcessPacket+0x674>
 800baaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baae:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124

			acktiveConfig->settings.outputEnable = buffer_get_int8(data,&ind);
 800bab2:	f107 030c 	add.w	r3, r7, #12
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7fe fe33 	bl	800a724 <buffer_get_int8>
 800babe:	4603      	mov	r3, r0
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b58      	ldr	r3, [pc, #352]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	bf14      	ite	ne
 800baca:	2201      	movne	r2, #1
 800bacc:	2200      	moveq	r2, #0
 800bace:	b2d2      	uxtb	r2, r2
 800bad0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			acktiveConfig->settings.meterfilterCoeficient = buffer_get_float32_auto(data,&ind);
 800bad4:	4b53      	ldr	r3, [pc, #332]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bad6:	681c      	ldr	r4, [r3, #0]
 800bad8:	f107 030c 	add.w	r3, r7, #12
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7fe feca 	bl	800a878 <buffer_get_float32_auto>
 800bae4:	eef0 7a40 	vmov.f32	s15, s0
 800bae8:	edc4 7a44 	vstr	s15, [r4, #272]	; 0x110
			acktiveConfig->mpptsettings.PO_Stepsize = buffer_get_float32_auto(data,&ind);
 800baec:	4b4d      	ldr	r3, [pc, #308]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800baee:	681c      	ldr	r4, [r3, #0]
 800baf0:	f107 030c 	add.w	r3, r7, #12
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7fe febe 	bl	800a878 <buffer_get_float32_auto>
 800bafc:	eef0 7a40 	vmov.f32	s15, s0
 800bb00:	edc4 7a4c 	vstr	s15, [r4, #304]	; 0x130
			acktiveConfig->mpptsettings.PO_Timestep = (uint32_t)buffer_get_uint16(data, &ind);
 800bb04:	f107 030c 	add.w	r3, r7, #12
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7fe fe46 	bl	800a79c <buffer_get_uint16>
 800bb10:	4603      	mov	r3, r0
 800bb12:	461a      	mov	r2, r3
 800bb14:	4b43      	ldr	r3, [pc, #268]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

			acktiveConfig->mpptsettings.PO_maxgradient = buffer_get_float32_auto(data,&ind);
 800bb1c:	4b41      	ldr	r3, [pc, #260]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb1e:	681c      	ldr	r4, [r3, #0]
 800bb20:	f107 030c 	add.w	r3, r7, #12
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fe fea6 	bl	800a878 <buffer_get_float32_auto>
 800bb2c:	eef0 7a40 	vmov.f32	s15, s0
 800bb30:	edc4 7a4e 	vstr	s15, [r4, #312]	; 0x138
			acktiveConfig->mpptsettings.jump_PowerThreshold = buffer_get_float32_auto(data,&ind);
 800bb34:	4b3b      	ldr	r3, [pc, #236]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb36:	681c      	ldr	r4, [r3, #0]
 800bb38:	f107 030c 	add.w	r3, r7, #12
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7fe fe9a 	bl	800a878 <buffer_get_float32_auto>
 800bb44:	eef0 7a40 	vmov.f32	s15, s0
 800bb48:	edc4 7a51 	vstr	s15, [r4, #324]	; 0x144
			acktiveConfig->mpptsettings.jump_RangeMax = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800bb4c:	f107 030c 	add.w	r3, r7, #12
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7fe fe90 	bl	800a878 <buffer_get_float32_auto>
 800bb58:	eef0 7a40 	vmov.f32	s15, s0
 800bb5c:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800bc28 <modCommandsProcessPacket+0x674>
 800bb64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb68:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
			acktiveConfig->mpptsettings.jump_RangeMin = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800bb6c:	f107 030c 	add.w	r3, r7, #12
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fe fe80 	bl	800a878 <buffer_get_float32_auto>
 800bb78:	eef0 7a40 	vmov.f32	s15, s0
 800bb7c:	4b29      	ldr	r3, [pc, #164]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bc28 <modCommandsProcessPacket+0x674>
 800bb84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb88:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140

			acktiveConfig->mpptsettings.jump_Rate 		= buffer_get_uint16(data, &ind);
 800bb8c:	f107 030c 	add.w	r3, r7, #12
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7fe fe02 	bl	800a79c <buffer_get_uint16>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4b21      	ldr	r3, [pc, #132]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			acktiveConfig->cansettings.baudrate			= buffer_get_uint16(data, &ind);
 800bba4:	f107 030c 	add.w	r3, r7, #12
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7fe fdf6 	bl	800a79c <buffer_get_uint16>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			acktiveConfig->cansettings.samplepoint		= buffer_get_float32_auto(data,&ind)/100.0;
 800bbbc:	f107 030c 	add.w	r3, r7, #12
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7fe fe58 	bl	800a878 <buffer_get_float32_auto>
 800bbc8:	eeb0 7a40 	vmov.f32	s14, s0
 800bbcc:	4b15      	ldr	r3, [pc, #84]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	eddf 6a16 	vldr	s13, [pc, #88]	; 800bc2c <modCommandsProcessPacket+0x678>
 800bbd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbd8:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
			acktiveConfig->cansettings.generalCanId		= buffer_get_uint16(data, &ind);
 800bbdc:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <modCommandsProcessPacket+0x670>)
 800bbde:	681c      	ldr	r4, [r3, #0]
 800bbe0:	f107 030c 	add.w	r3, r7, #12
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fe fdd8 	bl	800a79c <buffer_get_uint16>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f8a4 3154 	strh.w	r3, [r4, #340]	; 0x154

			ind = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = packet_id;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	60fa      	str	r2, [r7, #12]
 800bbfc:	4906      	ldr	r1, [pc, #24]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800bbfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc02:	54ca      	strb	r2, [r1, r3]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	4619      	mov	r1, r3
 800bc08:	4803      	ldr	r0, [pc, #12]	; (800bc18 <modCommandsProcessPacket+0x664>)
 800bc0a:	f7ff fcbf 	bl	800b58c <modCommandsSendPacket>
			main_init_after_config();
 800bc0e:	f002 f847 	bl	800dca0 <main_init_after_config>

			break;
 800bc12:	f000 bc29 	b.w	800c468 <modCommandsProcessPacket+0xeb4>
 800bc16:	bf00      	nop
 800bc18:	200005b8 	.word	0x200005b8
 800bc1c:	200033dc 	.word	0x200033dc
 800bc20:	20001ee8 	.word	0x20001ee8
 800bc24:	2000349c 	.word	0x2000349c
 800bc28:	447a0000 	.word	0x447a0000
 800bc2c:	42c80000 	.word	0x42c80000
		case COMM_GET_MCCONF:
		case COMM_GET_MCCONF_DEFAULT:
			if(packet_id == COMM_GET_MCCONF_DEFAULT){
 800bc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc34:	2b0f      	cmp	r3, #15
 800bc36:	d101      	bne.n	800bc3c <modCommandsProcessPacket+0x688>
				//modConfigLoadDefaultConfig(&modCommandsConfigStorage);
				//modCommandsToBeSendConfig = &modCommandsConfigStorage;
				modConfigLoadDefaultConfig();
 800bc38:	f000 fd14 	bl	800c664 <modConfigLoadDefaultConfig>
			}else{
				//modCommandsToBeSendConfig = modCommandsGeneralConfig;
			}
		
			ind = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = packet_id;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	60fa      	str	r2, [r7, #12]
 800bc46:	4997      	ldr	r1, [pc, #604]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bc48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc4c:	54ca      	strb	r2, [r1, r3]

			//settings
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.HighSideVoltageLimitSoft    ,&ind);
 800bc4e:	4b96      	ldr	r3, [pc, #600]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800bc56:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bc5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc5e:	f107 030c 	add.w	r3, r7, #12
 800bc62:	4619      	mov	r1, r3
 800bc64:	eeb0 0a67 	vmov.f32	s0, s15
 800bc68:	488e      	ldr	r0, [pc, #568]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bc6a:	f7fe fd05 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideVoltageLimitSoft     ,&ind);
 800bc6e:	4b8e      	ldr	r3, [pc, #568]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800bc76:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bc7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc7e:	f107 030c 	add.w	r3, r7, #12
 800bc82:	4619      	mov	r1, r3
 800bc84:	eeb0 0a67 	vmov.f32	s0, s15
 800bc88:	4886      	ldr	r0, [pc, #536]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bc8a:	f7fe fcf5 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.HighSideCurrentLimitSoft    ,&ind);
 800bc8e:	4b86      	ldr	r3, [pc, #536]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800bc96:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bc9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc9e:	f107 030c 	add.w	r3, r7, #12
 800bca2:	4619      	mov	r1, r3
 800bca4:	eeb0 0a67 	vmov.f32	s0, s15
 800bca8:	487e      	ldr	r0, [pc, #504]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bcaa:	f7fe fce5 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideCurrentMaxLimitSoft  ,&ind);
 800bcae:	4b7e      	ldr	r3, [pc, #504]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 800bcb6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bcba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcbe:	f107 030c 	add.w	r3, r7, #12
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	eeb0 0a67 	vmov.f32	s0, s15
 800bcc8:	4876      	ldr	r0, [pc, #472]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bcca:	f7fe fcd5 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.PhaseHighSideEnableCurrent ,&ind);
 800bcce:	4b76      	ldr	r3, [pc, #472]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800bcd6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bcda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcde:	f107 030c 	add.w	r3, r7, #12
 800bce2:	4619      	mov	r1, r3
 800bce4:	eeb0 0a67 	vmov.f32	s0, s15
 800bce8:	486e      	ldr	r0, [pc, #440]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bcea:	f7fe fcc5 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideCurrentMinLimitSoft ,&ind);
 800bcee:	4b6e      	ldr	r3, [pc, #440]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800bcf6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bcfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcfe:	f107 030c 	add.w	r3, r7, #12
 800bd02:	4619      	mov	r1, r3
 800bd04:	eeb0 0a67 	vmov.f32	s0, s15
 800bd08:	4866      	ldr	r0, [pc, #408]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd0a:	f7fe fcb5 	bl	800a678 <buffer_append_float32_auto>

			buffer_append_int8		(modCommandsSendBuffer,acktiveConfig->settings.outputEnable          	 ,&ind);
 800bd0e:	4b66      	ldr	r3, [pc, #408]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800bd16:	b25b      	sxtb	r3, r3
 800bd18:	f107 020c 	add.w	r2, r7, #12
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4861      	ldr	r0, [pc, #388]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd20:	f7fe fbd9 	bl	800a4d6 <buffer_append_int8>
			buffer_append_float32_auto(modCommandsSendBuffer,acktiveConfig->settings.meterfilterCoeficient           ,&ind);
 800bd24:	4b60      	ldr	r3, [pc, #384]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 800bd2c:	f107 030c 	add.w	r3, r7, #12
 800bd30:	4619      	mov	r1, r3
 800bd32:	eeb0 0a67 	vmov.f32	s0, s15
 800bd36:	485b      	ldr	r0, [pc, #364]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd38:	f7fe fc9e 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_Stepsize,&ind);
 800bd3c:	4b5a      	ldr	r3, [pc, #360]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	4619      	mov	r1, r3
 800bd4a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd4e:	4855      	ldr	r0, [pc, #340]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd50:	f7fe fc92 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_uint16	(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_Timestep, &ind);
 800bd54:	4b54      	ldr	r3, [pc, #336]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	f107 020c 	add.w	r2, r7, #12
 800bd62:	4619      	mov	r1, r3
 800bd64:	484f      	ldr	r0, [pc, #316]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd66:	f7fe fc0a 	bl	800a57e <buffer_append_uint16>

			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_maxgradient,&ind);
 800bd6a:	4b4f      	ldr	r3, [pc, #316]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	4619      	mov	r1, r3
 800bd78:	eeb0 0a67 	vmov.f32	s0, s15
 800bd7c:	4849      	ldr	r0, [pc, #292]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd7e:	f7fe fc7b 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.jump_PowerThreshold,&ind);
 800bd82:	4b49      	ldr	r3, [pc, #292]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800bd8a:	f107 030c 	add.w	r3, r7, #12
 800bd8e:	4619      	mov	r1, r3
 800bd90:	eeb0 0a67 	vmov.f32	s0, s15
 800bd94:	4843      	ldr	r0, [pc, #268]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bd96:	f7fe fc6f 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, 1.0e-3f*acktiveConfig->mpptsettings.jump_RangeMax,&ind);
 800bd9a:	4b43      	ldr	r3, [pc, #268]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800bda2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bda6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	4619      	mov	r1, r3
 800bdb0:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb4:	483b      	ldr	r0, [pc, #236]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bdb6:	f7fe fc5f 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, 1.0e-3f*acktiveConfig->mpptsettings.jump_RangeMin,&ind);
 800bdba:	4b3b      	ldr	r3, [pc, #236]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800bdc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800beac <modCommandsProcessPacket+0x8f8>
 800bdc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdca:	f107 030c 	add.w	r3, r7, #12
 800bdce:	4619      	mov	r1, r3
 800bdd0:	eeb0 0a67 	vmov.f32	s0, s15
 800bdd4:	4833      	ldr	r0, [pc, #204]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bdd6:	f7fe fc4f 	bl	800a678 <buffer_append_float32_auto>

			buffer_append_uint16(modCommandsSendBuffer, acktiveConfig->mpptsettings.jump_Rate,&ind);
 800bdda:	4b33      	ldr	r3, [pc, #204]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	f107 020c 	add.w	r2, r7, #12
 800bde8:	4619      	mov	r1, r3
 800bdea:	482e      	ldr	r0, [pc, #184]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800bdec:	f7fe fbc7 	bl	800a57e <buffer_append_uint16>
			buffer_append_uint16(modCommandsSendBuffer,  acktiveConfig->cansettings.baudrate,&ind);
 800bdf0:	4b2d      	ldr	r3, [pc, #180]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f107 020c 	add.w	r2, r7, #12
 800bdfe:	4619      	mov	r1, r3
 800be00:	4828      	ldr	r0, [pc, #160]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be02:	f7fe fbbc 	bl	800a57e <buffer_append_uint16>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->cansettings.samplepoint*100.0f, &ind);
 800be06:	4b28      	ldr	r3, [pc, #160]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800be0e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800beb0 <modCommandsProcessPacket+0x8fc>
 800be12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	4619      	mov	r1, r3
 800be1c:	eeb0 0a67 	vmov.f32	s0, s15
 800be20:	4820      	ldr	r0, [pc, #128]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be22:	f7fe fc29 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_uint16(modCommandsSendBuffer,  acktiveConfig->cansettings.generalCanId,&ind);
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <modCommandsProcessPacket+0x8f4>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800be2e:	f107 020c 	add.w	r2, r7, #12
 800be32:	4619      	mov	r1, r3
 800be34:	481b      	ldr	r0, [pc, #108]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be36:	f7fe fba2 	bl	800a57e <buffer_append_uint16>

			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4619      	mov	r1, r3
 800be3e:	4819      	ldr	r0, [pc, #100]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be40:	f7ff fba4 	bl	800b58c <modCommandsSendPacket>
			if(packet_id == COMM_GET_MCCONF_DEFAULT){
 800be44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be48:	2b0f      	cmp	r3, #15
 800be4a:	f040 830c 	bne.w	800c466 <modCommandsProcessPacket+0xeb2>
				main_init_after_config();
 800be4e:	f001 ff27 	bl	800dca0 <main_init_after_config>
			}
			break;
 800be52:	e308      	b.n	800c466 <modCommandsProcessPacket+0xeb2>
		case COMM_TERMINAL_CMD:
		  data[len] = '\0';
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
		  terminal_process_string((char*)data);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f003 fab2 	bl	800f3c8 <terminal_process_string>
			break;
 800be64:	e300      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_REBOOT:
			modCommandsJumpToMainApplication();
 800be66:	f000 fb47 	bl	800c4f8 <modCommandsJumpToMainApplication>
			break;
 800be6a:	e2fd      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_ALIVE:
			break;
		case COMM_FORWARD_CAN:
			modCANSendBuffer(data[0], data + 1, len - 1, false);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7818      	ldrb	r0, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	1c59      	adds	r1, r3, #1
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	1e5a      	subs	r2, r3, #1
 800be78:	2300      	movs	r3, #0
 800be7a:	f7ff fa11 	bl	800b2a0 <modCANSendBuffer>
			break;
 800be7e:	e2f3      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
		case COMM_STORE_MPPT_CONF:
			modConfigStoreConfig();
 800be80:	f000 fbb2 	bl	800c5e8 <modConfigStoreConfig>
			ind = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = packet_id;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	60fa      	str	r2, [r7, #12]
 800be8e:	4905      	ldr	r1, [pc, #20]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be94:	54ca      	strb	r2, [r1, r3]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4619      	mov	r1, r3
 800be9a:	4802      	ldr	r0, [pc, #8]	; (800bea4 <modCommandsProcessPacket+0x8f0>)
 800be9c:	f7ff fb76 	bl	800b58c <modCommandsSendPacket>
			break;
 800bea0:	e2e2      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
 800bea2:	bf00      	nop
 800bea4:	200005b8 	.word	0x200005b8
 800bea8:	2000349c 	.word	0x2000349c
 800beac:	3a83126f 	.word	0x3a83126f
 800beb0:	42c80000 	.word	0x42c80000

		case COMM_WRITE_CALDATA:
			main_halt_risky();
 800beb4:	f002 f830 	bl	800df18 <main_halt_risky>
			//buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwareName, 32
			//buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwhareVersionString, 8
			//buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.SerialString, 8
			ind = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
			memcpy(acktiveConfig->calData.HardwareName, data + ind, 32);
 800bebc:	4ba9      	ldr	r3, [pc, #676]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4618      	mov	r0, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	461a      	mov	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4413      	add	r3, r2
 800beca:	2220      	movs	r2, #32
 800becc:	4619      	mov	r1, r3
 800bece:	f004 f8c7 	bl	8010060 <memcpy>
			ind += 32;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3320      	adds	r3, #32
 800bed6:	60fb      	str	r3, [r7, #12]
			memcpy(acktiveConfig->calData.HardwhareVersionString, data + ind, 8);
 800bed8:	4ba2      	ldr	r3, [pc, #648]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f103 0020 	add.w	r0, r3, #32
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	461a      	mov	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4413      	add	r3, r2
 800bee8:	2208      	movs	r2, #8
 800beea:	4619      	mov	r1, r3
 800beec:	f004 f8b8 	bl	8010060 <memcpy>
			ind += 8;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3308      	adds	r3, #8
 800bef4:	60fb      	str	r3, [r7, #12]
			memcpy(acktiveConfig->calData.SerialString, data + ind, 8);
 800bef6:	4b9b      	ldr	r3, [pc, #620]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	461a      	mov	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4413      	add	r3, r2
 800bf06:	2208      	movs	r2, #8
 800bf08:	4619      	mov	r1, r3
 800bf0a:	f004 f8a9 	bl	8010060 <memcpy>
			ind += 8;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3308      	adds	r3, #8
 800bf12:	60fb      	str	r3, [r7, #12]
			acktiveConfig->calData.InputCurrentGain     = buffer_get_float32_auto(data, &ind);
 800bf14:	4b93      	ldr	r3, [pc, #588]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf16:	681c      	ldr	r4, [r3, #0]
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7fe fcaa 	bl	800a878 <buffer_get_float32_auto>
 800bf24:	eef0 7a40 	vmov.f32	s15, s0
 800bf28:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
			acktiveConfig->calData.InputCurrentOffset   = buffer_get_float32_auto(data, &ind);
 800bf2c:	4b8d      	ldr	r3, [pc, #564]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf2e:	681c      	ldr	r4, [r3, #0]
 800bf30:	f107 030c 	add.w	r3, r7, #12
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7fe fc9e 	bl	800a878 <buffer_get_float32_auto>
 800bf3c:	eef0 7a40 	vmov.f32	s15, s0
 800bf40:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
			acktiveConfig->calData.InputVoltageGain     = buffer_get_float32_auto(data, &ind);
 800bf44:	4b87      	ldr	r3, [pc, #540]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf46:	681c      	ldr	r4, [r3, #0]
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fe fc92 	bl	800a878 <buffer_get_float32_auto>
 800bf54:	eef0 7a40 	vmov.f32	s15, s0
 800bf58:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
			acktiveConfig->calData.InputVoltageOffset   = buffer_get_float32_auto(data, &ind);
 800bf5c:	4b81      	ldr	r3, [pc, #516]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf5e:	681c      	ldr	r4, [r3, #0]
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7fe fc86 	bl	800a878 <buffer_get_float32_auto>
 800bf6c:	eef0 7a40 	vmov.f32	s15, s0
 800bf70:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
			acktiveConfig->calData.OutputCurrentGain    = buffer_get_float32_auto(data, &ind);
 800bf74:	4b7b      	ldr	r3, [pc, #492]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf76:	681c      	ldr	r4, [r3, #0]
 800bf78:	f107 030c 	add.w	r3, r7, #12
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7fe fc7a 	bl	800a878 <buffer_get_float32_auto>
 800bf84:	eef0 7a40 	vmov.f32	s15, s0
 800bf88:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
			acktiveConfig->calData.OutputCurrentOffset  = buffer_get_float32_auto(data, &ind);
 800bf8c:	4b75      	ldr	r3, [pc, #468]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bf8e:	681c      	ldr	r4, [r3, #0]
 800bf90:	f107 030c 	add.w	r3, r7, #12
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7fe fc6e 	bl	800a878 <buffer_get_float32_auto>
 800bf9c:	eef0 7a40 	vmov.f32	s15, s0
 800bfa0:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
			acktiveConfig->calData.OutputVoltageGain    = buffer_get_float32_auto(data, &ind);
 800bfa4:	4b6f      	ldr	r3, [pc, #444]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bfa6:	681c      	ldr	r4, [r3, #0]
 800bfa8:	f107 030c 	add.w	r3, r7, #12
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7fe fc62 	bl	800a878 <buffer_get_float32_auto>
 800bfb4:	eef0 7a40 	vmov.f32	s15, s0
 800bfb8:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
			acktiveConfig->calData.OutputVoltageOffset  = buffer_get_float32_auto(data, &ind);
 800bfbc:	4b69      	ldr	r3, [pc, #420]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bfbe:	681c      	ldr	r4, [r3, #0]
 800bfc0:	f107 030c 	add.w	r3, r7, #12
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7fe fc56 	bl	800a878 <buffer_get_float32_auto>
 800bfcc:	eef0 7a40 	vmov.f32	s15, s0
 800bfd0:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
			acktiveConfig->calData.Temperature_B        = buffer_get_float32_auto(data, &ind);
 800bfd4:	4b63      	ldr	r3, [pc, #396]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bfd6:	681c      	ldr	r4, [r3, #0]
 800bfd8:	f107 030c 	add.w	r3, r7, #12
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fe fc4a 	bl	800a878 <buffer_get_float32_auto>
 800bfe4:	eef0 7a40 	vmov.f32	s15, s0
 800bfe8:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
			acktiveConfig->calData.Temperature_R        = buffer_get_float32_auto(data, &ind);
 800bfec:	4b5d      	ldr	r3, [pc, #372]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800bfee:	681c      	ldr	r4, [r3, #0]
 800bff0:	f107 030c 	add.w	r3, r7, #12
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7fe fc3e 	bl	800a878 <buffer_get_float32_auto>
 800bffc:	eef0 7a40 	vmov.f32	s15, s0
 800c000:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
			acktiveConfig->calData.Temperature_Ref      = buffer_get_float32_auto(data, &ind);
 800c004:	4b57      	ldr	r3, [pc, #348]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c006:	681c      	ldr	r4, [r3, #0]
 800c008:	f107 030c 	add.w	r3, r7, #12
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7fe fc32 	bl	800a878 <buffer_get_float32_auto>
 800c014:	eef0 7a40 	vmov.f32	s15, s0
 800c018:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
			acktiveConfig->calData.ADC_delay            = buffer_get_float32_auto(data, &ind);
 800c01c:	4b51      	ldr	r3, [pc, #324]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c01e:	681c      	ldr	r4, [r3, #0]
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe fc26 	bl	800a878 <buffer_get_float32_auto>
 800c02c:	eef0 7a40 	vmov.f32	s15, s0
 800c030:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
			acktiveConfig->calData.SwitchingFrequency   = buffer_get_float32_auto(data, &ind);
 800c034:	4b4b      	ldr	r3, [pc, #300]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c036:	681c      	ldr	r4, [r3, #0]
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7fe fc1a 	bl	800a878 <buffer_get_float32_auto>
 800c044:	eef0 7a40 	vmov.f32	s15, s0
 800c048:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
			acktiveConfig->calData.ControllerFrequency  = buffer_get_float32_auto(data, &ind);
 800c04c:	4b45      	ldr	r3, [pc, #276]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c04e:	681c      	ldr	r4, [r3, #0]
 800c050:	f107 030c 	add.w	r3, r7, #12
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7fe fc0e 	bl	800a878 <buffer_get_float32_auto>
 800c05c:	eef0 7a40 	vmov.f32	s15, s0
 800c060:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
			acktiveConfig->calData.DeadTimeRising       = buffer_get_float32_auto(data, &ind);
 800c064:	4b3f      	ldr	r3, [pc, #252]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c066:	681c      	ldr	r4, [r3, #0]
 800c068:	f107 030c 	add.w	r3, r7, #12
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7fe fc02 	bl	800a878 <buffer_get_float32_auto>
 800c074:	eef0 7a40 	vmov.f32	s15, s0
 800c078:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
			acktiveConfig->calData.DeadtimeFalling      = buffer_get_float32_auto(data, &ind);
 800c07c:	4b39      	ldr	r3, [pc, #228]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c07e:	681c      	ldr	r4, [r3, #0]
 800c080:	f107 030c 	add.w	r3, r7, #12
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7fe fbf6 	bl	800a878 <buffer_get_float32_auto>
 800c08c:	eef0 7a40 	vmov.f32	s15, s0
 800c090:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
			acktiveConfig->calData.L                    = buffer_get_float32_auto(data, &ind);
 800c094:	4b33      	ldr	r3, [pc, #204]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c096:	681c      	ldr	r4, [r3, #0]
 800c098:	f107 030c 	add.w	r3, r7, #12
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7fe fbea 	bl	800a878 <buffer_get_float32_auto>
 800c0a4:	eef0 7a40 	vmov.f32	s15, s0
 800c0a8:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
			acktiveConfig->calData.Clow                 = buffer_get_float32_auto(data, &ind);
 800c0ac:	4b2d      	ldr	r3, [pc, #180]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c0ae:	681c      	ldr	r4, [r3, #0]
 800c0b0:	f107 030c 	add.w	r3, r7, #12
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7fe fbde 	bl	800a878 <buffer_get_float32_auto>
 800c0bc:	eef0 7a40 	vmov.f32	s15, s0
 800c0c0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
			acktiveConfig->calData.Chigh                = buffer_get_float32_auto(data, &ind);
 800c0c4:	4b27      	ldr	r3, [pc, #156]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c0c6:	681c      	ldr	r4, [r3, #0]
 800c0c8:	f107 030c 	add.w	r3, r7, #12
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7fe fbd2 	bl	800a878 <buffer_get_float32_auto>
 800c0d4:	eef0 7a40 	vmov.f32	s15, s0
 800c0d8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
			acktiveConfig->calData.RLint                = buffer_get_float32_auto(data, &ind);
 800c0dc:	4b21      	ldr	r3, [pc, #132]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c0de:	681c      	ldr	r4, [r3, #0]
 800c0e0:	f107 030c 	add.w	r3, r7, #12
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fe fbc6 	bl	800a878 <buffer_get_float32_auto>
 800c0ec:	eef0 7a40 	vmov.f32	s15, s0
 800c0f0:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
			acktiveConfig->calData.Q                    = buffer_get_float32_auto(data, &ind);
 800c0f4:	4b1b      	ldr	r3, [pc, #108]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c0f6:	681c      	ldr	r4, [r3, #0]
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7fe fbba 	bl	800a878 <buffer_get_float32_auto>
 800c104:	eef0 7a40 	vmov.f32	s15, s0
 800c108:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
			acktiveConfig->calData.Klim                 = buffer_get_float32_auto(data, &ind);
 800c10c:	4b15      	ldr	r3, [pc, #84]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c10e:	681c      	ldr	r4, [r3, #0]
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fe fbae 	bl	800a878 <buffer_get_float32_auto>
 800c11c:	eef0 7a40 	vmov.f32	s15, s0
 800c120:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
			acktiveConfig->calData.calibrated           = buffer_get_int8(data, &ind);
 800c124:	f107 030c 	add.w	r3, r7, #12
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7fe fafa 	bl	800a724 <buffer_get_int8>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2a00      	cmp	r2, #0
 800c13a:	bf14      	ite	ne
 800c13c:	2201      	movne	r2, #1
 800c13e:	2200      	moveq	r2, #0
 800c140:	b2d2      	uxtb	r2, r2
 800c142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			acktiveConfig->calData.calcrc =  libCRCCalcCRC16((unsigned char *) &(acktiveConfig->calData), sizeof(CalibrationData_t) - sizeof(uint16_t) - 2);
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	4b05      	ldr	r3, [pc, #20]	; (800c164 <modCommandsProcessPacket+0xbb0>)
 800c14e:	681c      	ldr	r4, [r3, #0]
 800c150:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800c154:	4610      	mov	r0, r2
 800c156:	f001 fa5b 	bl	800d610 <libCRCCalcCRC16>
 800c15a:	4603      	mov	r3, r0
 800c15c:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
			break;
 800c160:	e182      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
 800c162:	bf00      	nop
 800c164:	2000349c 	.word	0x2000349c

		case COMM_READ_CALDATA:
			ind = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]
			modCommandsSendBuffer[ind++] = packet_id;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	60fa      	str	r2, [r7, #12]
 800c172:	49c7      	ldr	r1, [pc, #796]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c178:	54ca      	strb	r2, [r1, r3]

			//Information about the hardware
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwareName, 32, &ind); //char HardwareName[32];
 800c17a:	4bc6      	ldr	r3, [pc, #792]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4619      	mov	r1, r3
 800c180:	f107 030c 	add.w	r3, r7, #12
 800c184:	2220      	movs	r2, #32
 800c186:	48c2      	ldr	r0, [pc, #776]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c188:	f7fe f980 	bl	800a48c <buffer_append_str>
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwhareVersionString, 8, &ind); //char HardwhareVersionString[8];
 800c18c:	4bc1      	ldr	r3, [pc, #772]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f103 0120 	add.w	r1, r3, #32
 800c194:	f107 030c 	add.w	r3, r7, #12
 800c198:	2208      	movs	r2, #8
 800c19a:	48bd      	ldr	r0, [pc, #756]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c19c:	f7fe f976 	bl	800a48c <buffer_append_str>
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.SerialString, 8, &ind); //char SerialString[8];
 800c1a0:	4bbc      	ldr	r3, [pc, #752]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c1a8:	f107 030c 	add.w	r3, r7, #12
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	48b8      	ldr	r0, [pc, #736]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c1b0:	f7fe f96c 	bl	800a48c <buffer_append_str>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputCurrentGain, &ind);
 800c1b4:	4bb7      	ldr	r3, [pc, #732]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800c1bc:	f107 030c 	add.w	r3, r7, #12
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1c6:	48b2      	ldr	r0, [pc, #712]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c1c8:	f7fe fa56 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputCurrentOffset, &ind);
 800c1cc:	4bb1      	ldr	r3, [pc, #708]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c1d4:	f107 030c 	add.w	r3, r7, #12
 800c1d8:	4619      	mov	r1, r3
 800c1da:	eeb0 0a67 	vmov.f32	s0, s15
 800c1de:	48ac      	ldr	r0, [pc, #688]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c1e0:	f7fe fa4a 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputVoltageGain, &ind);
 800c1e4:	4bab      	ldr	r3, [pc, #684]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800c1ec:	f107 030c 	add.w	r3, r7, #12
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1f6:	48a6      	ldr	r0, [pc, #664]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c1f8:	f7fe fa3e 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputVoltageOffset, &ind);
 800c1fc:	4ba5      	ldr	r3, [pc, #660]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800c204:	f107 030c 	add.w	r3, r7, #12
 800c208:	4619      	mov	r1, r3
 800c20a:	eeb0 0a67 	vmov.f32	s0, s15
 800c20e:	48a0      	ldr	r0, [pc, #640]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c210:	f7fe fa32 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputCurrentGain, &ind);
 800c214:	4b9f      	ldr	r3, [pc, #636]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800c21c:	f107 030c 	add.w	r3, r7, #12
 800c220:	4619      	mov	r1, r3
 800c222:	eeb0 0a67 	vmov.f32	s0, s15
 800c226:	489a      	ldr	r0, [pc, #616]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c228:	f7fe fa26 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputCurrentOffset, &ind);
 800c22c:	4b99      	ldr	r3, [pc, #612]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800c234:	f107 030c 	add.w	r3, r7, #12
 800c238:	4619      	mov	r1, r3
 800c23a:	eeb0 0a67 	vmov.f32	s0, s15
 800c23e:	4894      	ldr	r0, [pc, #592]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c240:	f7fe fa1a 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputVoltageGain, &ind);
 800c244:	4b93      	ldr	r3, [pc, #588]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c24c:	f107 030c 	add.w	r3, r7, #12
 800c250:	4619      	mov	r1, r3
 800c252:	eeb0 0a67 	vmov.f32	s0, s15
 800c256:	488e      	ldr	r0, [pc, #568]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c258:	f7fe fa0e 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputVoltageOffset, &ind);
 800c25c:	4b8d      	ldr	r3, [pc, #564]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800c264:	f107 030c 	add.w	r3, r7, #12
 800c268:	4619      	mov	r1, r3
 800c26a:	eeb0 0a67 	vmov.f32	s0, s15
 800c26e:	4888      	ldr	r0, [pc, #544]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c270:	f7fe fa02 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_B, &ind);
 800c274:	4b87      	ldr	r3, [pc, #540]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800c27c:	f107 030c 	add.w	r3, r7, #12
 800c280:	4619      	mov	r1, r3
 800c282:	eeb0 0a67 	vmov.f32	s0, s15
 800c286:	4882      	ldr	r0, [pc, #520]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c288:	f7fe f9f6 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_R, &ind);
 800c28c:	4b81      	ldr	r3, [pc, #516]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	4619      	mov	r1, r3
 800c29a:	eeb0 0a67 	vmov.f32	s0, s15
 800c29e:	487c      	ldr	r0, [pc, #496]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c2a0:	f7fe f9ea 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_Ref, &ind);
 800c2a4:	4b7b      	ldr	r3, [pc, #492]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	eeb0 0a67 	vmov.f32	s0, s15
 800c2b6:	4876      	ldr	r0, [pc, #472]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c2b8:	f7fe f9de 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.ADC_delay, &ind);
 800c2bc:	4b75      	ldr	r3, [pc, #468]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800c2c4:	f107 030c 	add.w	r3, r7, #12
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c2ce:	4870      	ldr	r0, [pc, #448]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c2d0:	f7fe f9d2 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.SwitchingFrequency, &ind);
 800c2d4:	4b6f      	ldr	r3, [pc, #444]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800c2dc:	f107 030c 	add.w	r3, r7, #12
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c2e6:	486a      	ldr	r0, [pc, #424]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c2e8:	f7fe f9c6 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.ControllerFrequency, &ind);
 800c2ec:	4b69      	ldr	r3, [pc, #420]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c2fe:	4864      	ldr	r0, [pc, #400]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c300:	f7fe f9ba 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.DeadTimeRising, &ind);
 800c304:	4b63      	ldr	r3, [pc, #396]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	4619      	mov	r1, r3
 800c312:	eeb0 0a67 	vmov.f32	s0, s15
 800c316:	485e      	ldr	r0, [pc, #376]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c318:	f7fe f9ae 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.DeadtimeFalling, &ind);
 800c31c:	4b5d      	ldr	r3, [pc, #372]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c324:	f107 030c 	add.w	r3, r7, #12
 800c328:	4619      	mov	r1, r3
 800c32a:	eeb0 0a67 	vmov.f32	s0, s15
 800c32e:	4858      	ldr	r0, [pc, #352]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c330:	f7fe f9a2 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.L, &ind);
 800c334:	4b57      	ldr	r3, [pc, #348]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800c33c:	f107 030c 	add.w	r3, r7, #12
 800c340:	4619      	mov	r1, r3
 800c342:	eeb0 0a67 	vmov.f32	s0, s15
 800c346:	4852      	ldr	r0, [pc, #328]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c348:	f7fe f996 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Clow, &ind);
 800c34c:	4b51      	ldr	r3, [pc, #324]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800c354:	f107 030c 	add.w	r3, r7, #12
 800c358:	4619      	mov	r1, r3
 800c35a:	eeb0 0a67 	vmov.f32	s0, s15
 800c35e:	484c      	ldr	r0, [pc, #304]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c360:	f7fe f98a 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Chigh, &ind);
 800c364:	4b4b      	ldr	r3, [pc, #300]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800c36c:	f107 030c 	add.w	r3, r7, #12
 800c370:	4619      	mov	r1, r3
 800c372:	eeb0 0a67 	vmov.f32	s0, s15
 800c376:	4846      	ldr	r0, [pc, #280]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c378:	f7fe f97e 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.RLint, &ind);
 800c37c:	4b45      	ldr	r3, [pc, #276]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800c384:	f107 030c 	add.w	r3, r7, #12
 800c388:	4619      	mov	r1, r3
 800c38a:	eeb0 0a67 	vmov.f32	s0, s15
 800c38e:	4840      	ldr	r0, [pc, #256]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c390:	f7fe f972 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Q, &ind);
 800c394:	4b3f      	ldr	r3, [pc, #252]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800c39c:	f107 030c 	add.w	r3, r7, #12
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	eeb0 0a67 	vmov.f32	s0, s15
 800c3a6:	483a      	ldr	r0, [pc, #232]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c3a8:	f7fe f966 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Klim, &ind);
 800c3ac:	4b39      	ldr	r3, [pc, #228]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800c3b4:	f107 030c 	add.w	r3, r7, #12
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800c3be:	4834      	ldr	r0, [pc, #208]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c3c0:	f7fe f95a 	bl	800a678 <buffer_append_float32_auto>
			buffer_append_int8(modCommandsSendBuffer, acktiveConfig->calData.calibrated, &ind);
 800c3c4:	4b33      	ldr	r3, [pc, #204]	; (800c494 <modCommandsProcessPacket+0xee0>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3cc:	b25b      	sxtb	r3, r3
 800c3ce:	f107 020c 	add.w	r2, r7, #12
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	482e      	ldr	r0, [pc, #184]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c3d6:	f7fe f87e 	bl	800a4d6 <buffer_append_int8>

			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	482c      	ldr	r0, [pc, #176]	; (800c490 <modCommandsProcessPacket+0xedc>)
 800c3e0:	f7ff f8d4 	bl	800b58c <modCommandsSendPacket>
			//uint32_t reserved[32];
			//uint16_t calcrc; //Checksum
			break;
 800c3e4:	e040      	b.n	800c468 <modCommandsProcessPacket+0xeb4>


		case CONM_MPPT_GET_SWEEP:
			start = 1.0e3f*buffer_get_float16(data, 1.0e2f,&ind);
 800c3e6:	f107 030c 	add.w	r3, r7, #12
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800c498 <modCommandsProcessPacket+0xee4>
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7fe fa26 	bl	800a842 <buffer_get_float16>
 800c3f6:	eef0 7a40 	vmov.f32	s15, s0
 800c3fa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c49c <modCommandsProcessPacket+0xee8>
 800c3fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c402:	edc7 7a07 	vstr	s15, [r7, #28]
			end   = 1.0e3f*buffer_get_float16(data, 1.0e2f,&ind);
 800c406:	f107 030c 	add.w	r3, r7, #12
 800c40a:	4619      	mov	r1, r3
 800c40c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800c498 <modCommandsProcessPacket+0xee4>
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7fe fa16 	bl	800a842 <buffer_get_float16>
 800c416:	eef0 7a40 	vmov.f32	s15, s0
 800c41a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c49c <modCommandsProcessPacket+0xee8>
 800c41e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c422:	edc7 7a06 	vstr	s15, [r7, #24]
			modMpptStartSweep(start,end);
 800c426:	edd7 0a06 	vldr	s1, [r7, #24]
 800c42a:	ed97 0a07 	vldr	s0, [r7, #28]
 800c42e:	f001 ffad 	bl	800e38c <modMpptStartSweep>
			break;
 800c432:	e019      	b.n	800c468 <modCommandsProcessPacket+0xeb4>

		case CONM_MPPT_SetInputVoltage:
			tempfloat = 1000.0*buffer_get_float16(data, 1.0e2f,&ind);
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	4619      	mov	r1, r3
 800c43a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800c498 <modCommandsProcessPacket+0xee4>
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7fe f9ff 	bl	800a842 <buffer_get_float16>
 800c444:	eef0 7a40 	vmov.f32	s15, s0
 800c448:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800c49c <modCommandsProcessPacket+0xee8>
 800c44c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c450:	edc7 7a08 	vstr	s15, [r7, #32]
			modMpptSetMode(MpptMode_ConstantVoltage);
 800c454:	2001      	movs	r0, #1
 800c456:	f001 ffc7 	bl	800e3e8 <modMpptSetMode>
			control_set_setpoint(tempfloat);
 800c45a:	ed97 0a08 	vldr	s0, [r7, #32]
 800c45e:	f001 f875 	bl	800d54c <control_set_setpoint>
			//tempfloat = 1000.0*buffer_get_float16(data, 1.0e2f,&ind);
			//modConverterSetInputVoltage_dep(tempfloat);
			break;
			*/
		default:
			break;
 800c462:	bf00      	nop
 800c464:	e000      	b.n	800c468 <modCommandsProcessPacket+0xeb4>
			break;
 800c466:	bf00      	nop
	}
	
	if(modDelayTick1ms(&delaytick,1000) && jumpBootloaderTrue)
 800c468:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c46c:	480c      	ldr	r0, [pc, #48]	; (800c4a0 <modCommandsProcessPacket+0xeec>)
 800c46e:	f001 f8fd 	bl	800d66c <modDelayTick1ms>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d007      	beq.n	800c488 <modCommandsProcessPacket+0xed4>
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <modCommandsProcessPacket+0xef0>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <modCommandsProcessPacket+0xed4>
		modFlashJumpToBootloader();
 800c480:	f001 fb3a 	bl	800daf8 <modFlashJumpToBootloader>
 800c484:	e000      	b.n	800c488 <modCommandsProcessPacket+0xed4>
		return;
 800c486:	bf00      	nop
}
 800c488:	372c      	adds	r7, #44	; 0x2c
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd90      	pop	{r4, r7, pc}
 800c48e:	bf00      	nop
 800c490:	200005b8 	.word	0x200005b8
 800c494:	2000349c 	.word	0x2000349c
 800c498:	42c80000 	.word	0x42c80000
 800c49c:	447a0000 	.word	0x447a0000
 800c4a0:	2000313c 	.word	0x2000313c
 800c4a4:	20003138 	.word	0x20003138

0800c4a8 <modCommandsPrintf>:

void modCommandsPrintf(const char* format, ...) {
 800c4a8:	b40f      	push	{r0, r1, r2, r3}
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
	va_list arg;
	va_start (arg, format);
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	603b      	str	r3, [r7, #0]
	int len;
	static char print_buffer[255];

	print_buffer[0] = COMM_PRINT;
 800c4b6:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <modCommandsPrintf+0x48>)
 800c4b8:	2215      	movs	r2, #21
 800c4ba:	701a      	strb	r2, [r3, #0]
	len = vsnprintf(print_buffer+1, 254, format, arg);
 800c4bc:	480d      	ldr	r0, [pc, #52]	; (800c4f4 <modCommandsPrintf+0x4c>)
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	21fe      	movs	r1, #254	; 0xfe
 800c4c4:	f005 fcc2 	bl	8011e4c <vsniprintf>
 800c4c8:	6078      	str	r0, [r7, #4]
	va_end (arg);

	if(len > 0) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd08      	ble.n	800c4e2 <modCommandsPrintf+0x3a>
		modCommandsSendPacket((unsigned char*)print_buffer, (len<254)? len+1: 255);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2bfe      	cmp	r3, #254	; 0xfe
 800c4d4:	bfa8      	it	ge
 800c4d6:	23fe      	movge	r3, #254	; 0xfe
 800c4d8:	3301      	adds	r3, #1
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4804      	ldr	r0, [pc, #16]	; (800c4f0 <modCommandsPrintf+0x48>)
 800c4de:	f7ff f855 	bl	800b58c <modCommandsSendPacket>
	}
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4ec:	b004      	add	sp, #16
 800c4ee:	4770      	bx	lr
 800c4f0:	200009bc 	.word	0x200009bc
 800c4f4:	200009bd 	.word	0x200009bd

0800c4f8 <modCommandsJumpToMainApplication>:


void modCommandsJumpToMainApplication(void) {
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 800c4fc:	f7ff f820 	bl	800b540 <__NVIC_SystemReset>

0800c500 <modCommandsSendSweep>:
}

void modCommandsSendSweep(){
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	603b      	str	r3, [r7, #0]
	buffer_append_uint8(modCommandsSendBuffer, CONM_MPPT_GET_SWEEP,&ind);
 800c50a:	463b      	mov	r3, r7
 800c50c:	461a      	mov	r2, r3
 800c50e:	2164      	movs	r1, #100	; 0x64
 800c510:	481c      	ldr	r0, [pc, #112]	; (800c584 <modCommandsSendSweep+0x84>)
 800c512:	f7fd fff7 	bl	800a504 <buffer_append_uint8>
	buffer_append_uint8(modCommandsSendBuffer, (uint8_t) MPPT_SWEEP_SIZE,&ind);
 800c516:	463b      	mov	r3, r7
 800c518:	461a      	mov	r2, r3
 800c51a:	2180      	movs	r1, #128	; 0x80
 800c51c:	4819      	ldr	r0, [pc, #100]	; (800c584 <modCommandsSendSweep+0x84>)
 800c51e:	f7fd fff1 	bl	800a504 <buffer_append_uint8>
	for(int i =0; i < MPPT_SWEEP_SIZE; i++){
 800c522:	2300      	movs	r3, #0
 800c524:	607b      	str	r3, [r7, #4]
 800c526:	e020      	b.n	800c56a <modCommandsSendSweep+0x6a>
		buffer_append_float16(modCommandsSendBuffer, mppt_vs[i], 1.0e2f,&ind);
 800c528:	4a17      	ldr	r2, [pc, #92]	; (800c588 <modCommandsSendSweep+0x88>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	edd3 7a00 	vldr	s15, [r3]
 800c534:	463b      	mov	r3, r7
 800c536:	4619      	mov	r1, r3
 800c538:	eddf 0a14 	vldr	s1, [pc, #80]	; 800c58c <modCommandsSendSweep+0x8c>
 800c53c:	eeb0 0a67 	vmov.f32	s0, s15
 800c540:	4810      	ldr	r0, [pc, #64]	; (800c584 <modCommandsSendSweep+0x84>)
 800c542:	f7fe f87c 	bl	800a63e <buffer_append_float16>
		buffer_append_float16(modCommandsSendBuffer, mppt_is[i], 1.0e3f,&ind);
 800c546:	4a12      	ldr	r2, [pc, #72]	; (800c590 <modCommandsSendSweep+0x90>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	edd3 7a00 	vldr	s15, [r3]
 800c552:	463b      	mov	r3, r7
 800c554:	4619      	mov	r1, r3
 800c556:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800c594 <modCommandsSendSweep+0x94>
 800c55a:	eeb0 0a67 	vmov.f32	s0, s15
 800c55e:	4809      	ldr	r0, [pc, #36]	; (800c584 <modCommandsSendSweep+0x84>)
 800c560:	f7fe f86d 	bl	800a63e <buffer_append_float16>
	for(int i =0; i < MPPT_SWEEP_SIZE; i++){
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3301      	adds	r3, #1
 800c568:	607b      	str	r3, [r7, #4]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b7f      	cmp	r3, #127	; 0x7f
 800c56e:	dddb      	ble.n	800c528 <modCommandsSendSweep+0x28>
	}
	modCommandsSendPacket(modCommandsSendBuffer, ind);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	4803      	ldr	r0, [pc, #12]	; (800c584 <modCommandsSendSweep+0x84>)
 800c576:	f7ff f809 	bl	800b58c <modCommandsSendPacket>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	200005b8 	.word	0x200005b8
 800c588:	20002040 	.word	0x20002040
 800c58c:	42c80000 	.word	0x42c80000
 800c590:	20002344 	.word	0x20002344
 800c594:	447a0000 	.word	0x447a0000

0800c598 <modConfigInit>:
//Defined in harwhare definition file
extern modConfig_t defaultConvig;

modConfig_t config;

modConfig_t* modConfigInit(void) {
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	bool valid = eeprom_init();
 800c59e:	f001 f8c5 	bl	800d72c <eeprom_init>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	71fb      	strb	r3, [r7, #7]

	if(valid){
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00a      	beq.n	800c5c2 <modConfigInit+0x2a>
		config = storedConfig;
 800c5ac:	4a0c      	ldr	r2, [pc, #48]	; (800c5e0 <modConfigInit+0x48>)
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <modConfigInit+0x4c>)
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	f003 fd51 	bl	8010060 <memcpy>
		return &config;
 800c5be:	4b08      	ldr	r3, [pc, #32]	; (800c5e0 <modConfigInit+0x48>)
 800c5c0:	e00a      	b.n	800c5d8 <modConfigInit+0x40>
	}
	else{
		if(modConfigStoreAndLoadDefaultConfig() == false){
 800c5c2:	f000 f83d 	bl	800c640 <modConfigStoreAndLoadDefaultConfig>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	f083 0301 	eor.w	r3, r3, #1
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <modConfigInit+0x3e>
			return &config;
 800c5d2:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <modConfigInit+0x48>)
 800c5d4:	e000      	b.n	800c5d8 <modConfigInit+0x40>
		}
		else {
			return (modConfig_t*)0x0;
 800c5d6:	2300      	movs	r3, #0
		}
	}
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20003140 	.word	0x20003140
 800c5e4:	2001f800 	.word	0x2001f800

0800c5e8 <modConfigStoreConfig>:


bool modConfigStoreConfig(void) {
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
	storedConfig = config;
 800c5ec:	4a08      	ldr	r2, [pc, #32]	; (800c610 <modConfigStoreConfig+0x28>)
 800c5ee:	4b09      	ldr	r3, [pc, #36]	; (800c614 <modConfigStoreConfig+0x2c>)
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	f003 fd31 	bl	8010060 <memcpy>
  __ASM volatile ("isb 0xF":::"memory");
 800c5fe:	f3bf 8f6f 	isb	sy
}
 800c602:	bf00      	nop
	__ISB();
	eeprom_save();
 800c604:	f001 f900 	bl	800d808 <eeprom_save>
	return false;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	2001f800 	.word	0x2001f800
 800c614:	20003140 	.word	0x20003140

0800c618 <modConfigLoadConfig>:

//Load config from flash
bool modConfigLoadConfig() {
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
	eeprom_load();
 800c61c:	f001 f8e2 	bl	800d7e4 <eeprom_load>
	config = storedConfig;
 800c620:	4a05      	ldr	r2, [pc, #20]	; (800c638 <modConfigLoadConfig+0x20>)
 800c622:	4b06      	ldr	r3, [pc, #24]	; (800c63c <modConfigLoadConfig+0x24>)
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c62c:	461a      	mov	r2, r3
 800c62e:	f003 fd17 	bl	8010060 <memcpy>
	return true;
 800c632:	2301      	movs	r3, #1
}
 800c634:	4618      	mov	r0, r3
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20003140 	.word	0x20003140
 800c63c:	2001f800 	.word	0x2001f800

0800c640 <modConfigStoreAndLoadDefaultConfig>:
	main_halt_risky();
	config = *conf;
	main_init_after_config();
	return false;
}
bool modConfigStoreAndLoadDefaultConfig(void) {
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
	modConfigLoadDefaultConfig();
 800c644:	f000 f80e 	bl	800c664 <modConfigLoadDefaultConfig>
	return modConfigStoreConfig();
 800c648:	f7ff ffce 	bl	800c5e8 <modConfigStoreConfig>
 800c64c:	4603      	mov	r3, r0
};
 800c64e:	4618      	mov	r0, r3
 800c650:	bd80      	pop	{r7, pc}

0800c652 <modConfigStoreDefaultConfig>:

bool modConfigStoreDefaultConfig(void) {
 800c652:	b480      	push	{r7}
 800c654:	af00      	add	r7, sp, #0
	//modConfigStoreAndLoadDefaultConfig();
	return true;
 800c656:	2301      	movs	r3, #1
}
 800c658:	4618      	mov	r0, r3
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
	...

0800c664 <modConfigLoadDefaultConfig>:


void modConfigLoadDefaultConfig() {
 800c664:	b4b0      	push	{r4, r5, r7}
 800c666:	af00      	add	r7, sp, #0
	memcpy(&config.cansettings, &defaultConvig.cansettings, sizeof(modCanSettings_t));
 800c668:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <modConfigLoadDefaultConfig+0x50>)
 800c66a:	4a13      	ldr	r2, [pc, #76]	; (800c6b8 <modConfigLoadDefaultConfig+0x54>)
 800c66c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800c670:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
 800c674:	ca07      	ldmia	r2, {r0, r1, r2}
 800c676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&config.mpptsettings, &defaultConvig.mpptsettings, sizeof(modMPPTsettings_t));
 800c67a:	4a0e      	ldr	r2, [pc, #56]	; (800c6b4 <modConfigLoadDefaultConfig+0x50>)
 800c67c:	4b0e      	ldr	r3, [pc, #56]	; (800c6b8 <modConfigLoadDefaultConfig+0x54>)
 800c67e:	f502 7498 	add.w	r4, r2, #304	; 0x130
 800c682:	f503 7598 	add.w	r5, r3, #304	; 0x130
 800c686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c68a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c68e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&config.settings, &defaultConvig.settings, sizeof(ConverterSettings_t));
 800c692:	4a08      	ldr	r2, [pc, #32]	; (800c6b4 <modConfigLoadDefaultConfig+0x50>)
 800c694:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <modConfigLoadDefaultConfig+0x54>)
 800c696:	f502 7488 	add.w	r4, r2, #272	; 0x110
 800c69a:	f503 7588 	add.w	r5, r3, #272	; 0x110
 800c69e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c6a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c6aa:	bf00      	nop
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bcb0      	pop	{r4, r5, r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	20003140 	.word	0x20003140
 800c6b8:	20000250 	.word	0x20000250

0800c6bc <control_init>:
float ControllerR;
extern uint32_t adc5data[6];



void control_init(const ConverterSettings_t* s, const CalibrationData_t * c) {
 800c6bc:	b5b0      	push	{r4, r5, r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	//Check if settings are valid.
	if(control_check_parameters(s,c)){
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fbad 	bl	800ce28 <control_check_parameters>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <control_init+0x20>
		phase.fault = Converter_ConfigError;
 800c6d4:	4b43      	ldr	r3, [pc, #268]	; (800c7e4 <control_init+0x128>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	//Even though there is a config fault, push on anyway. Do not enable output.
	settings=*s;
 800c6dc:	4a42      	ldr	r2, [pc, #264]	; (800c7e8 <control_init+0x12c>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	461d      	mov	r5, r3
 800c6e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c6ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cal=*c;
 800c6f0:	4a3e      	ldr	r2, [pc, #248]	; (800c7ec <control_init+0x130>)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	f003 fcaf 	bl	8010060 <memcpy>

	phase.HSEpin  = PHSEN_Pin;
 800c702:	4b38      	ldr	r3, [pc, #224]	; (800c7e4 <control_init+0x128>)
 800c704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c708:	651a      	str	r2, [r3, #80]	; 0x50
	phase.HSEport = PHSEN_GPIO_Port;
 800c70a:	4b36      	ldr	r3, [pc, #216]	; (800c7e4 <control_init+0x128>)
 800c70c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c710:	64da      	str	r2, [r3, #76]	; 0x4c
	phase.PENpin  = PEN_Pin;
 800c712:	4b34      	ldr	r3, [pc, #208]	; (800c7e4 <control_init+0x128>)
 800c714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c718:	659a      	str	r2, [r3, #88]	; 0x58
	phase.PENport = PEN_GPIO_Port;
 800c71a:	4b32      	ldr	r3, [pc, #200]	; (800c7e4 <control_init+0x128>)
 800c71c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800c720:	655a      	str	r2, [r3, #84]	; 0x54
	phase.timerindex = HRTIM_TIMERINDEX_TIMER_B;
 800c722:	4b30      	ldr	r3, [pc, #192]	; (800c7e4 <control_init+0x128>)
 800c724:	2201      	movs	r2, #1
 800c726:	675a      	str	r2, [r3, #116]	; 0x74
	phase.LimLEDpin = LED1_Pin;
 800c728:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <control_init+0x128>)
 800c72a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c72e:	671a      	str	r2, [r3, #112]	; 0x70
	phase.LimLEDport= LED1_GPIO_Port;
 800c730:	4b2c      	ldr	r3, [pc, #176]	; (800c7e4 <control_init+0x128>)
 800c732:	4a2f      	ldr	r2, [pc, #188]	; (800c7f0 <control_init+0x134>)
 800c734:	66da      	str	r2, [r3, #108]	; 0x6c

	phase.Vsp = 10000;
 800c736:	4b2b      	ldr	r3, [pc, #172]	; (800c7e4 <control_init+0x128>)
 800c738:	4a2e      	ldr	r2, [pc, #184]	; (800c7f4 <control_init+0x138>)
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30
	phase.Vhighlim = settings.HighSideVoltageLimitSoft;
 800c73c:	4b2a      	ldr	r3, [pc, #168]	; (800c7e8 <control_init+0x12c>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4a28      	ldr	r2, [pc, #160]	; (800c7e4 <control_init+0x128>)
 800c742:	6353      	str	r3, [r2, #52]	; 0x34
	phase.Iindlim = settings.LowSideCurrentMaxLimitSoft;
 800c744:	4b28      	ldr	r3, [pc, #160]	; (800c7e8 <control_init+0x12c>)
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	4a26      	ldr	r2, [pc, #152]	; (800c7e4 <control_init+0x128>)
 800c74a:	6393      	str	r3, [r2, #56]	; 0x38
	phase.Ihighlim = settings.HighSideCurrentLimitSoft;
 800c74c:	4b26      	ldr	r3, [pc, #152]	; (800c7e8 <control_init+0x12c>)
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	4a24      	ldr	r2, [pc, #144]	; (800c7e4 <control_init+0x128>)
 800c752:	63d3      	str	r3, [r2, #60]	; 0x3c

	modConverterPWMOutputDisable();
 800c754:	f000 fc36 	bl	800cfc4 <modConverterPWMOutputDisable>

	pwm_init(cal.SwitchingFrequency, cal.ControllerFrequency, cal.DeadTimeRising, cal.DeadtimeFalling, cal.ADC_delay);
 800c758:	4b24      	ldr	r3, [pc, #144]	; (800c7ec <control_init+0x130>)
 800c75a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800c75e:	4b23      	ldr	r3, [pc, #140]	; (800c7ec <control_init+0x130>)
 800c760:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800c764:	4b21      	ldr	r3, [pc, #132]	; (800c7ec <control_init+0x130>)
 800c766:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800c76a:	4b20      	ldr	r3, [pc, #128]	; (800c7ec <control_init+0x130>)
 800c76c:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800c770:	4b1e      	ldr	r3, [pc, #120]	; (800c7ec <control_init+0x130>)
 800c772:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
 800c776:	eeb0 2a65 	vmov.f32	s4, s11
 800c77a:	eef0 1a46 	vmov.f32	s3, s12
 800c77e:	eeb0 1a66 	vmov.f32	s2, s13
 800c782:	eef0 0a47 	vmov.f32	s1, s14
 800c786:	eeb0 0a67 	vmov.f32	s0, s15
 800c78a:	f002 f979 	bl	800ea80 <pwm_init>

	analog_init();
 800c78e:	f7fd fc29 	bl	8009fe4 <analog_init>

	Ts = pwm_GetControllerPeriod();
 800c792:	f002 fcf1 	bl	800f178 <pwm_GetControllerPeriod>
 800c796:	eef0 7a40 	vmov.f32	s15, s0
 800c79a:	4b17      	ldr	r3, [pc, #92]	; (800c7f8 <control_init+0x13c>)
 800c79c:	edc3 7a00 	vstr	s15, [r3]
	ControllerR = sqrtf(cal.L/cal.Clow)/ cal.Q-cal.RLint;
 800c7a0:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <control_init+0x130>)
 800c7a2:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800c7a6:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <control_init+0x130>)
 800c7a8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800c7ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c7b0:	eeb0 0a66 	vmov.f32	s0, s13
 800c7b4:	f008 fbe6 	bl	8014f84 <sqrtf>
 800c7b8:	eef0 6a40 	vmov.f32	s13, s0
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <control_init+0x130>)
 800c7be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800c7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c6:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <control_init+0x130>)
 800c7c8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800c7cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <control_init+0x140>)
 800c7d2:	edc3 7a00 	vstr	s15, [r3]

	HAL_Delay(100);
 800c7d6:	2064      	movs	r0, #100	; 0x64
 800c7d8:	f7f4 fcb0 	bl	800113c <HAL_Delay>
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e4:	20001ee8 	.word	0x20001ee8
 800c7e8:	20003298 	.word	0x20003298
 800c7ec:	200032b8 	.word	0x200032b8
 800c7f0:	48000800 	.word	0x48000800
 800c7f4:	461c4000 	.word	0x461c4000
 800c7f8:	20000044 	.word	0x20000044
 800c7fc:	200033c8 	.word	0x200033c8

0800c800 <control_controlloop>:


void control_controlloop(ConverterPhase_t* p){
 800c800:	b580      	push	{r7, lr}
 800c802:	b08e      	sub	sp, #56	; 0x38
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]

	//Reset the mode variable.
	p->mode = PhaseMode_CIV;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//Calculate converter input and output currents
	p->Power = (p->Ihigh*p->Vhigh)*1.0e-6f;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	ed93 7a02 	vldr	s14, [r3, #8]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	edd3 7a01 	vldr	s15, [r3, #4]
 800c81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c820:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800caec <control_controlloop+0x2ec>
 800c824:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	edc3 7a08 	vstr	s15, [r3, #32]

	//Ipv observer
	float dvdt = (p->Vlow - p->Vlowm1) / (float)Ts;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	ed93 7a03 	vldr	s14, [r3, #12]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c83a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c83e:	4bac      	ldr	r3, [pc, #688]	; (800caf0 <control_controlloop+0x2f0>)
 800c840:	ed93 7a00 	vldr	s14, [r3]
 800c844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c848:	edc7 7a06 	vstr	s15, [r7, #24]

	p->Vlowm1 = p->Vlow;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	62da      	str	r2, [r3, #44]	; 0x2c
	float Ilowest = cal.Clow*dvdt + p->Iind;
 800c854:	4ba7      	ldr	r3, [pc, #668]	; (800caf4 <control_controlloop+0x2f4>)
 800c856:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800c85a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c85e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	edd3 7a00 	vldr	s15, [r3]
 800c868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c86c:	edc7 7a05 	vstr	s15, [r7, #20]
	EMA(p->Ilow, Ilowest, CURRENT_PV_FORGETING_FACTOR);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	edd3 7a04 	vldr	s15, [r3, #16]
 800c876:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800caf8 <control_controlloop+0x2f8>
 800c87a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c87e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c882:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800cafc <control_controlloop+0x2fc>
 800c886:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c88a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	edc3 7a04 	vstr	s15, [r3, #16]

	if(p->Power){
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	edd3 7a08 	vldr	s15, [r3, #32]
 800c89a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8a2:	d014      	beq.n	800c8ce <control_controlloop+0xce>
		p->eff = (p->Power)/(p->Ilow*p->Vlow*1.0e-6f);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	edd3 6a08 	vldr	s13, [r3, #32]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	ed93 7a04 	vldr	s14, [r3, #16]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	edd3 7a03 	vldr	s15, [r3, #12]
 800c8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ba:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800caec <control_controlloop+0x2ec>
 800c8be:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800c8cc:	e003      	b.n	800c8d6 <control_controlloop+0xd6>
	}else{
		p->eff = 0;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	625a      	str	r2, [r3, #36]	; 0x24
	}

	//These variables need to be set by the controller.
	float Vn = 0.0f;
 800c8d6:	f04f 0300 	mov.w	r3, #0
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34
	float Ilim = 0.0f;
 800c8dc:	f04f 0300 	mov.w	r3, #0
 800c8e0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef HW_TOPOLOGY_BOOST

	float Vnn = p->Vsp - (p->Ilow *(ControllerR+cal.RLint));
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	edd3 6a04 	vldr	s13, [r3, #16]
 800c8ee:	4b81      	ldr	r3, [pc, #516]	; (800caf4 <control_controlloop+0x2f4>)
 800c8f0:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800c8f4:	4b82      	ldr	r3, [pc, #520]	; (800cb00 <control_controlloop+0x300>)
 800c8f6:	edd3 7a00 	vldr	s15, [r3]
 800c8fa:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c8fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c902:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c906:	edc7 7a04 	vstr	s15, [r7, #16]

	Ilim = p->Iindlim;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c90e:	633b      	str	r3, [r7, #48]	; 0x30

	//Output voltage limit
	float Ioutlim = 0.8f * cal.Klim * cal.Chigh*(p->Vhighlim - p->Vhigh)/(Ts) + p->Ihigh;
 800c910:	4b78      	ldr	r3, [pc, #480]	; (800caf4 <control_controlloop+0x2f4>)
 800c912:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800c916:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800cb04 <control_controlloop+0x304>
 800c91a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c91e:	4b75      	ldr	r3, [pc, #468]	; (800caf4 <control_controlloop+0x2f4>)
 800c920:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800c924:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	edd3 7a01 	vldr	s15, [r3, #4]
 800c934:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c938:	ee67 6a27 	vmul.f32	s13, s14, s15
 800c93c:	4b6c      	ldr	r3, [pc, #432]	; (800caf0 <control_controlloop+0x2f0>)
 800c93e:	edd3 7a00 	vldr	s15, [r3]
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	edd3 7a02 	vldr	s15, [r3, #8]
 800c94c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c950:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	bool ioutlimited = false;
 800c954:	2300      	movs	r3, #0
 800c956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(Ioutlim > p->Ihighlim){
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800c960:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96c:	dd05      	ble.n	800c97a <control_controlloop+0x17a>
		Ioutlim =  p->Ihighlim;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
		ioutlimited=true;
 800c974:	2301      	movs	r3, #1
 800c976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	float Ilimmaxvout = Ioutlim/(1.0f-p->dutycycle);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800c980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c984:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c988:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c990:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//Limit the input current to hifgher than 0, to prefent current undershoot.

	if(Ilimmaxvout < 0.0){
 800c994:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	d502      	bpl.n	800c9a8 <control_controlloop+0x1a8>
		Ilimmaxvout = 0.0f;
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(Ilim > Ilimmaxvout){
 800c9a8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c9ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c9b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b8:	dd0e      	ble.n	800c9d8 <control_controlloop+0x1d8>
		Ilim = Ilimmaxvout;
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	633b      	str	r3, [r7, #48]	; 0x30
		if(ioutlimited){
 800c9be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <control_controlloop+0x1d0>
			p->mode = PhaseMode_COC;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2204      	movs	r2, #4
 800c9ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c9ce:	e003      	b.n	800c9d8 <control_controlloop+0x1d8>
		}else{
			p->mode = PhaseMode_COV;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}

	p->Ilimvout = Ilim / 1000.0f;
 800c9d8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c9dc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800cb08 <control_controlloop+0x308>
 800c9e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


	//Current limit
	//float Vnlimup = -p->Vlow - (settings.RLint * p->Iind) + ((settings.Klim * settings.L /Ts)*(settings.PhaseCurrentMin - p->Iind) );
	//float Vnlimlo = -p->Vlow - (settings.RLint * p->Iind) + ((settings.Klim * settings.L /Ts)*(Ilim - p->Iind) );
	float Vnlimup = +p->Vlow + (cal.RLint * p->Iind) - (cal.Klim*cal.L*(settings.LowSideCurrentMinLimitSoft - p->Iind)/Ts);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	ed93 7a03 	vldr	s14, [r3, #12]
 800c9f0:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <control_controlloop+0x2f4>)
 800c9f2:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	edd3 7a00 	vldr	s15, [r3]
 800c9fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca04:	4b3b      	ldr	r3, [pc, #236]	; (800caf4 <control_controlloop+0x2f4>)
 800ca06:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800ca0a:	4b3a      	ldr	r3, [pc, #232]	; (800caf4 <control_controlloop+0x2f4>)
 800ca0c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ca10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ca14:	4b3d      	ldr	r3, [pc, #244]	; (800cb0c <control_controlloop+0x30c>)
 800ca16:	ed93 6a05 	vldr	s12, [r3, #20]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	edd3 7a00 	vldr	s15, [r3]
 800ca20:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ca24:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ca28:	4b31      	ldr	r3, [pc, #196]	; (800caf0 <control_controlloop+0x2f0>)
 800ca2a:	edd3 6a00 	vldr	s13, [r3]
 800ca2e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ca32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca36:	edc7 7a03 	vstr	s15, [r7, #12]
	float Vnlimlo = +p->Vlow + (cal.RLint * p->Iind) - (cal.Klim*cal.L*(Ilim - p->Iind)/Ts );
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ca40:	4b2c      	ldr	r3, [pc, #176]	; (800caf4 <control_controlloop+0x2f4>)
 800ca42:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	edd3 7a00 	vldr	s15, [r3]
 800ca4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca54:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <control_controlloop+0x2f4>)
 800ca56:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800ca5a:	4b26      	ldr	r3, [pc, #152]	; (800caf4 <control_controlloop+0x2f4>)
 800ca5c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ca60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	edd3 7a00 	vldr	s15, [r3]
 800ca6a:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800ca6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ca72:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800ca76:	4b1e      	ldr	r3, [pc, #120]	; (800caf0 <control_controlloop+0x2f0>)
 800ca78:	edd3 6a00 	vldr	s13, [r3]
 800ca7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ca80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca84:	edc7 7a02 	vstr	s15, [r7, #8]


	Vn = Vnn + (p->Iind*ControllerR);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	ed93 7a00 	vldr	s14, [r3]
 800ca8e:	4b1c      	ldr	r3, [pc, #112]	; (800cb00 <control_controlloop+0x300>)
 800ca90:	edd3 7a00 	vldr	s15, [r3]
 800ca94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca98:	ed97 7a04 	vldr	s14, [r7, #16]
 800ca9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800caa0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	//Limit Vnn to limit phase current
	if(Vn > Vnlimup){
 800caa4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800caa8:	edd7 7a03 	vldr	s15, [r7, #12]
 800caac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab4:	dd05      	ble.n	800cac2 <control_controlloop+0x2c2>
		Vn = Vnlimup;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	637b      	str	r3, [r7, #52]	; 0x34
		p->mode = PhaseMode_MinInputCurrent;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2202      	movs	r2, #2
 800cabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if(Vn < Vnlimlo){
 800cac2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cac6:	edd7 7a02 	vldr	s15, [r7, #8]
 800caca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad2:	d51f      	bpl.n	800cb14 <control_controlloop+0x314>
		Vn = Vnlimlo;
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	637b      	str	r3, [r7, #52]	; 0x34
		if(p->mode == PhaseMode_CIV)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d121      	bne.n	800cb26 <control_controlloop+0x326>
			p->mode = PhaseMode_CIC;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800caea:	e01c      	b.n	800cb26 <control_controlloop+0x326>
 800caec:	358637bd 	.word	0x358637bd
 800caf0:	20000044 	.word	0x20000044
 800caf4:	200032b8 	.word	0x200032b8
 800caf8:	3f7d70a4 	.word	0x3f7d70a4
 800cafc:	3c23d700 	.word	0x3c23d700
 800cb00:	200033c8 	.word	0x200033c8
 800cb04:	3f4ccccd 	.word	0x3f4ccccd
 800cb08:	447a0000 	.word	0x447a0000
 800cb0c:	20003298 	.word	0x20003298
 800cb10:	3f7fbe77 	.word	0x3f7fbe77
	}else{
		if(p->mode != PhaseMode_MinInputCurrent)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d003      	beq.n	800cb26 <control_controlloop+0x326>
			p->mode = PhaseMode_CIV;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Vn = p->Vlow + (settings.RLint * p->Iind) - (settings.Klim*settings.L*(Isp - p->Iind)/Ts );

    //Ilim = Isp;
#endif

	float Dn = Vn / p->Vhigh;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	ed93 7a01 	vldr	s14, [r3, #4]
 800cb2c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800cb30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb34:	edc7 7a08 	vstr	s15, [r7, #32]

	if (Dn > 0.999f){
 800cb38:	edd7 7a08 	vldr	s15, [r7, #32]
 800cb3c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 800cb10 <control_controlloop+0x310>
 800cb40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb48:	dd01      	ble.n	800cb4e <control_controlloop+0x34e>
		Dn = 0.999f;
 800cb4a:	4bb1      	ldr	r3, [pc, #708]	; (800ce10 <control_controlloop+0x610>)
 800cb4c:	623b      	str	r3, [r7, #32]
	}
	if (Dn < 0.001f){
 800cb4e:	edd7 7a08 	vldr	s15, [r7, #32]
 800cb52:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800ce14 <control_controlloop+0x614>
 800cb56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5e:	d501      	bpl.n	800cb64 <control_controlloop+0x364>
		Dn = 0.001f;
 800cb60:	4bad      	ldr	r3, [pc, #692]	; (800ce18 <control_controlloop+0x618>)
 800cb62:	623b      	str	r3, [r7, #32]
	}

	p->dutycycle = 1.0f-Dn;
 800cb64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb68:	edd7 7a08 	vldr	s15, [r7, #32]
 800cb6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		//if(p->dutycycle < 0.15f)p->dutycycle = 0.15f; TODO TODO
	}

	//If the upper current limit is lower then the lower current limit, set the duty cycle to 0
	//This ensure full shutdown when the power level gets towards zero.
	bool disable_voutlim = false;
 800cb76:	2300      	movs	r3, #0
 800cb78:	77fb      	strb	r3, [r7, #31]
	if(fabsf(Ilim) < fabsf(settings.LowSideCurrentMinLimitSoft)){
 800cb7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cb7e:	eeb0 7ae7 	vabs.f32	s14, s15
 800cb82:	4ba6      	ldr	r3, [pc, #664]	; (800ce1c <control_controlloop+0x61c>)
 800cb84:	edd3 7a05 	vldr	s15, [r3, #20]
 800cb88:	eef0 7ae7 	vabs.f32	s15, s15
 800cb8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb94:	d50c      	bpl.n	800cbb0 <control_controlloop+0x3b0>
		p->HSEport->BRR = p->HSEpin;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cb9e:	629a      	str	r2, [r3, #40]	; 0x28
		p->PENport->BRR = p->PENpin;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cba8:	629a      	str	r2, [r3, #40]	; 0x28

		disable_voutlim = true;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	77fb      	strb	r3, [r7, #31]
 800cbae:	e009      	b.n	800cbc4 <control_controlloop+0x3c4>
		//modConverterPWMOutputDisable();
	}else{
		if(p->enabled){
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d004      	beq.n	800cbc4 <control_controlloop+0x3c4>
			p->PENport->BSRR = p->PENpin;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cbc2:	619a      	str	r2, [r3, #24]
		}

		//modConverterPWMOutputEnable();
	}

	if(p->fault != Converter_OK){
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <control_controlloop+0x3d4>
		modConverterPWMOutputDisable();
 800cbce:	f000 f9f9 	bl	800cfc4 <modConverterPWMOutputDisable>
 800cbd2:	e032      	b.n	800cc3a <control_controlloop+0x43a>
	}else{
		//Set PWM
#ifndef SIMULATION
#ifdef HSEN
		if(p->dutycycle < 0.01f){
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800cbda:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800ce20 <control_controlloop+0x620>
 800cbde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe6:	d505      	bpl.n	800cbf4 <control_controlloop+0x3f4>
			//Do not, ever put on the high side FET continuesly.
			//e.g. when the duty cycle is zero.
			p->HSEport->BRR = p->HSEpin;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cbf0:	629a      	str	r2, [r3, #40]	; 0x28
 800cbf2:	e01b      	b.n	800cc2c <control_controlloop+0x42c>
		}
#ifdef HW_TOPOLOGY_BOOST
		else if(p->Iind > settings.PhaseHighSideEnableCurrent){
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	ed93 7a00 	vldr	s14, [r3]
 800cbfa:	4b88      	ldr	r3, [pc, #544]	; (800ce1c <control_controlloop+0x61c>)
 800cbfc:	edd3 7a06 	vldr	s15, [r3, #24]
 800cc00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc08:	dd0b      	ble.n	800cc22 <control_controlloop+0x422>
			if(disable_voutlim == false){
 800cc0a:	7ffb      	ldrb	r3, [r7, #31]
 800cc0c:	f083 0301 	eor.w	r3, r3, #1
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <control_controlloop+0x42c>
				p->HSEport->BSRR = p->HSEpin;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cc1e:	619a      	str	r2, [r3, #24]
 800cc20:	e004      	b.n	800cc2c <control_controlloop+0x42c>
		else if(disable_voutlim == false){
			p->HSEport->BSRR = p->HSEpin;
		}
#endif
		else{
			p->HSEport->BRR = p->HSEpin;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cc2a:	629a      	str	r2, [r3, #40]	; 0x28
#else
		p->HSEport->BRR = p->HSEpin;
#endif
#endif

		pwm_setDuty(p->dutycycle);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800cc32:	eeb0 0a67 	vmov.f32	s0, s15
 800cc36:	f002 fa1f 	bl	800f078 <pwm_setDuty>

	}

	//Do Lower priorety duties now.
	EMA(meter.Iind, p->Iind*0.001f,settings.meterfilterCoeficient);
 800cc3a:	4b78      	ldr	r3, [pc, #480]	; (800ce1c <control_controlloop+0x61c>)
 800cc3c:	ed93 7a00 	vldr	s14, [r3]
 800cc40:	4b78      	ldr	r3, [pc, #480]	; (800ce24 <control_controlloop+0x624>)
 800cc42:	edd3 7a00 	vldr	s15, [r3]
 800cc46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc4a:	4b74      	ldr	r3, [pc, #464]	; (800ce1c <control_controlloop+0x61c>)
 800cc4c:	edd3 7a00 	vldr	s15, [r3]
 800cc50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	edd3 7a00 	vldr	s15, [r3]
 800cc5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc62:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800ce14 <control_controlloop+0x614>
 800cc66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc6e:	4b6d      	ldr	r3, [pc, #436]	; (800ce24 <control_controlloop+0x624>)
 800cc70:	edc3 7a00 	vstr	s15, [r3]
	EMA(meter.Ihigh, p->Ihigh*0.001f,settings.meterfilterCoeficient);
 800cc74:	4b69      	ldr	r3, [pc, #420]	; (800ce1c <control_controlloop+0x61c>)
 800cc76:	ed93 7a00 	vldr	s14, [r3]
 800cc7a:	4b6a      	ldr	r3, [pc, #424]	; (800ce24 <control_controlloop+0x624>)
 800cc7c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc84:	4b65      	ldr	r3, [pc, #404]	; (800ce1c <control_controlloop+0x61c>)
 800cc86:	edd3 7a00 	vldr	s15, [r3]
 800cc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc9c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800ce14 <control_controlloop+0x614>
 800cca0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cca8:	4b5e      	ldr	r3, [pc, #376]	; (800ce24 <control_controlloop+0x624>)
 800ccaa:	edc3 7a01 	vstr	s15, [r3, #4]
	EMA(meter.Ilow, p->Ilow*0.001f,settings.meterfilterCoeficient);
 800ccae:	4b5b      	ldr	r3, [pc, #364]	; (800ce1c <control_controlloop+0x61c>)
 800ccb0:	ed93 7a00 	vldr	s14, [r3]
 800ccb4:	4b5b      	ldr	r3, [pc, #364]	; (800ce24 <control_controlloop+0x624>)
 800ccb6:	edd3 7a06 	vldr	s15, [r3, #24]
 800ccba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccbe:	4b57      	ldr	r3, [pc, #348]	; (800ce1c <control_controlloop+0x61c>)
 800ccc0:	edd3 7a00 	vldr	s15, [r3]
 800ccc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccc8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	edd3 7a04 	vldr	s15, [r3, #16]
 800ccd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce14 <control_controlloop+0x614>
 800ccda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ccde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cce2:	4b50      	ldr	r3, [pc, #320]	; (800ce24 <control_controlloop+0x624>)
 800cce4:	edc3 7a06 	vstr	s15, [r3, #24]
	EMA(meter.Vlow, p->Vlow*0.001f,settings.meterfilterCoeficient);
 800cce8:	4b4c      	ldr	r3, [pc, #304]	; (800ce1c <control_controlloop+0x61c>)
 800ccea:	ed93 7a00 	vldr	s14, [r3]
 800ccee:	4b4d      	ldr	r3, [pc, #308]	; (800ce24 <control_controlloop+0x624>)
 800ccf0:	edd3 7a02 	vldr	s15, [r3, #8]
 800ccf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccf8:	4b48      	ldr	r3, [pc, #288]	; (800ce1c <control_controlloop+0x61c>)
 800ccfa:	edd3 7a00 	vldr	s15, [r3]
 800ccfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd10:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ce14 <control_controlloop+0x614>
 800cd14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd1c:	4b41      	ldr	r3, [pc, #260]	; (800ce24 <control_controlloop+0x624>)
 800cd1e:	edc3 7a02 	vstr	s15, [r3, #8]
	EMA(meter.Vhigh, p->Vhigh*0.001f,settings.meterfilterCoeficient);
 800cd22:	4b3e      	ldr	r3, [pc, #248]	; (800ce1c <control_controlloop+0x61c>)
 800cd24:	ed93 7a00 	vldr	s14, [r3]
 800cd28:	4b3e      	ldr	r3, [pc, #248]	; (800ce24 <control_controlloop+0x624>)
 800cd2a:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd32:	4b3a      	ldr	r3, [pc, #232]	; (800ce1c <control_controlloop+0x61c>)
 800cd34:	edd3 7a00 	vldr	s15, [r3]
 800cd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd4a:	eddf 6a32 	vldr	s13, [pc, #200]	; 800ce14 <control_controlloop+0x614>
 800cd4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd56:	4b33      	ldr	r3, [pc, #204]	; (800ce24 <control_controlloop+0x624>)
 800cd58:	edc3 7a03 	vstr	s15, [r3, #12]
	EMA(meter.Eff, p->eff,settings.meterfilterCoeficient);
 800cd5c:	4b2f      	ldr	r3, [pc, #188]	; (800ce1c <control_controlloop+0x61c>)
 800cd5e:	ed93 7a00 	vldr	s14, [r3]
 800cd62:	4b30      	ldr	r3, [pc, #192]	; (800ce24 <control_controlloop+0x624>)
 800cd64:	edd3 7a08 	vldr	s15, [r3, #32]
 800cd68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd6c:	4b2b      	ldr	r3, [pc, #172]	; (800ce1c <control_controlloop+0x61c>)
 800cd6e:	edd3 7a00 	vldr	s15, [r3]
 800cd72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cd80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd88:	4b26      	ldr	r3, [pc, #152]	; (800ce24 <control_controlloop+0x624>)
 800cd8a:	edc3 7a08 	vstr	s15, [r3, #32]
	EMA(meter.TemperatureAmbient, p->TemperatureAmbient,settings.meterfilterCoeficient);
 800cd8e:	4b23      	ldr	r3, [pc, #140]	; (800ce1c <control_controlloop+0x61c>)
 800cd90:	ed93 7a00 	vldr	s14, [r3]
 800cd94:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <control_controlloop+0x624>)
 800cd96:	edd3 7a05 	vldr	s15, [r3, #20]
 800cd9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <control_controlloop+0x61c>)
 800cda0:	edd3 7a00 	vldr	s15, [r3]
 800cda4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	edd3 7a05 	vldr	s15, [r3, #20]
 800cdb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdba:	4b1a      	ldr	r3, [pc, #104]	; (800ce24 <control_controlloop+0x624>)
 800cdbc:	edc3 7a05 	vstr	s15, [r3, #20]
	EMA(meter.TemperatureHeatsink, p->TemperatureHeatsink,settings.meterfilterCoeficient);
 800cdc0:	4b16      	ldr	r3, [pc, #88]	; (800ce1c <control_controlloop+0x61c>)
 800cdc2:	ed93 7a00 	vldr	s14, [r3]
 800cdc6:	4b17      	ldr	r3, [pc, #92]	; (800ce24 <control_controlloop+0x624>)
 800cdc8:	edd3 7a04 	vldr	s15, [r3, #16]
 800cdcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd0:	4b12      	ldr	r3, [pc, #72]	; (800ce1c <control_controlloop+0x61c>)
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdda:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	edd3 7a06 	vldr	s15, [r3, #24]
 800cde4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cde8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdec:	4b0d      	ldr	r3, [pc, #52]	; (800ce24 <control_controlloop+0x624>)
 800cdee:	edc3 7a04 	vstr	s15, [r3, #16]
	meter.Power = meter.Vhigh*meter.Ihigh;
 800cdf2:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <control_controlloop+0x624>)
 800cdf4:	ed93 7a03 	vldr	s14, [r3, #12]
 800cdf8:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <control_controlloop+0x624>)
 800cdfa:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce02:	4b08      	ldr	r3, [pc, #32]	; (800ce24 <control_controlloop+0x624>)
 800ce04:	edc3 7a07 	vstr	s15, [r3, #28]


#ifdef SIMULATION
	modTestingSimstep(&simstate, Ts,&phase);
#endif
}
 800ce08:	bf00      	nop
 800ce0a:	3738      	adds	r7, #56	; 0x38
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	3f7fbe77 	.word	0x3f7fbe77
 800ce14:	3a83126f 	.word	0x3a83126f
 800ce18:	3a83126f 	.word	0x3a83126f
 800ce1c:	20003298 	.word	0x20003298
 800ce20:	3c23d70a 	.word	0x3c23d70a
 800ce24:	200033dc 	.word	0x200033dc

0800ce28 <control_check_parameters>:

bool control_check_parameters(ConverterSettings_t* s, CalibrationData_t * c){
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
	bool error = false;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]

	//Check calibration CRC
	uint16_t crc = libCRCCalcCRC16((unsigned char *)c, sizeof(CalibrationData_t) - sizeof(uint16_t) - 2);
 800ce36:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f000 fbe8 	bl	800d610 <libCRCCalcCRC16>
 800ce40:	4603      	mov	r3, r0
 800ce42:	81bb      	strh	r3, [r7, #12]
	if (crc != c->calcrc){
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800ce4a:	89ba      	ldrh	r2, [r7, #12]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d001      	beq.n	800ce54 <control_check_parameters+0x2c>
		error = true;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
	}

	//Check Firmware hwname against stored HW name
	#ifndef SIMULATION // In simulation mode, this does not matter.
	if (strcmp(HW_NAME, c->HardwareName) != 0){
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	4619      	mov	r1, r3
 800ce58:	4848      	ldr	r0, [pc, #288]	; (800cf7c <control_check_parameters+0x154>)
 800ce5a:	f7f3 f9e1 	bl	8000220 <strcmp>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <control_check_parameters+0x40>
		error = true;
 800ce64:	2301      	movs	r3, #1
 800ce66:	73fb      	strb	r3, [r7, #15]
	//Check firmware verison with calibration compatibility


	//Check UUID with calibraiton id, t check if calibration is done for this hardware

	float fres = sqrtf(1/(2*pi*pi*c->L*c->Clow))*1.0e-3f;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800ce6e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800cf80 <control_check_parameters+0x158>
 800ce72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800ce7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce88:	eeb0 0a47 	vmov.f32	s0, s14
 800ce8c:	f008 f87a 	bl	8014f84 <sqrtf>
 800ce90:	eef0 7a40 	vmov.f32	s15, s0
 800ce94:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800cf84 <control_check_parameters+0x15c>
 800ce98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce9c:	edc7 7a02 	vstr	s15, [r7, #8]
	if(c->ControllerFrequency > 45.0f)error = true;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800cea6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cf88 <control_check_parameters+0x160>
 800ceaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb2:	dd01      	ble.n	800ceb8 <control_check_parameters+0x90>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	73fb      	strb	r3, [r7, #15]
	if(c->ControllerFrequency < (8*fres))error = true;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800cebe:	edd7 7a02 	vldr	s15, [r7, #8]
 800cec2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800cec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ceca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced2:	d501      	bpl.n	800ced8 <control_check_parameters+0xb0>
 800ced4:	2301      	movs	r3, #1
 800ced6:	73fb      	strb	r3, [r7, #15]
	if(c->SwitchingFrequency  < (5*fres))error = true;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800cede:	edd7 7a02 	vldr	s15, [r7, #8]
 800cee2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800cee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ceea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ceee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef2:	d501      	bpl.n	800cef8 <control_check_parameters+0xd0>
 800cef4:	2301      	movs	r3, #1
 800cef6:	73fb      	strb	r3, [r7, #15]
	//if(c->calibrated == false) error = true;
	if(c->Q > 2.0f)error = true;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800cefe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cf02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0a:	dd01      	ble.n	800cf10 <control_check_parameters+0xe8>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	73fb      	strb	r3, [r7, #15]

	//Check deadtime values
	if(c->DeadTimeRising  > 188.0)error = true;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800cf16:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cf8c <control_check_parameters+0x164>
 800cf1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf22:	dd01      	ble.n	800cf28 <control_check_parameters+0x100>
 800cf24:	2301      	movs	r3, #1
 800cf26:	73fb      	strb	r3, [r7, #15]
	if(c->DeadTimeRising  < 5)error = true;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800cf2e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800cf32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3a:	d501      	bpl.n	800cf40 <control_check_parameters+0x118>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	73fb      	strb	r3, [r7, #15]
	if(c->DeadtimeFalling > 188.0)error = true;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800cf46:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800cf8c <control_check_parameters+0x164>
 800cf4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	dd01      	ble.n	800cf58 <control_check_parameters+0x130>
 800cf54:	2301      	movs	r3, #1
 800cf56:	73fb      	strb	r3, [r7, #15]
	if(c->DeadtimeFalling < 5)error = true;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800cf5e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800cf62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6a:	d501      	bpl.n	800cf70 <control_check_parameters+0x148>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	73fb      	strb	r3, [r7, #15]


	return error;
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	080159c0 	.word	0x080159c0
 800cf80:	419de9e7 	.word	0x419de9e7
 800cf84:	3a83126f 	.word	0x3a83126f
 800cf88:	42340000 	.word	0x42340000
 800cf8c:	433c0000 	.word	0x433c0000

0800cf90 <control_disable>:

void control_disable(void){
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
	phase.HSEport->BRR = phase.HSEpin;
 800cf94:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <control_disable+0x30>)
 800cf96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf98:	4a09      	ldr	r2, [pc, #36]	; (800cfc0 <control_disable+0x30>)
 800cf9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cf9c:	629a      	str	r2, [r3, #40]	; 0x28
	phase.PENport->BRR = phase.PENpin;
 800cf9e:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <control_disable+0x30>)
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa2:	4a07      	ldr	r2, [pc, #28]	; (800cfc0 <control_disable+0x30>)
 800cfa4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cfa6:	629a      	str	r2, [r3, #40]	; 0x28
	phase.dutycycle = 0;
 800cfa8:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <control_disable+0x30>)
 800cfaa:	f04f 0200 	mov.w	r2, #0
 800cfae:	645a      	str	r2, [r3, #68]	; 0x44
	phase.enabled = false;
 800cfb0:	4b03      	ldr	r3, [pc, #12]	; (800cfc0 <control_disable+0x30>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pwm_disable();
 800cfb8:	f002 f8ca 	bl	800f150 <pwm_disable>
}
 800cfbc:	bf00      	nop
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20001ee8 	.word	0x20001ee8

0800cfc4 <modConverterPWMOutputDisable>:


inline void modConverterPWMOutputDisable(){
 800cfc4:	b480      	push	{r7}
 800cfc6:	af00      	add	r7, sp, #0
#ifndef SIMULATION
	phase.PENport->BRR = phase.PENpin;
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <modConverterPWMOutputDisable+0x30>)
 800cfca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfcc:	4a09      	ldr	r2, [pc, #36]	; (800cff4 <modConverterPWMOutputDisable+0x30>)
 800cfce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cfd0:	629a      	str	r2, [r3, #40]	; 0x28
	phase.HSEport->BRR = phase.HSEpin;
 800cfd2:	4b08      	ldr	r3, [pc, #32]	; (800cff4 <modConverterPWMOutputDisable+0x30>)
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd6:	4a07      	ldr	r2, [pc, #28]	; (800cff4 <modConverterPWMOutputDisable+0x30>)
 800cfd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cfda:	629a      	str	r2, [r3, #40]	; 0x28
	DREN_GPIO_Port->BRR = DREN_Pin;
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <modConverterPWMOutputDisable+0x34>)
 800cfde:	2210      	movs	r2, #16
 800cfe0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
	phase.enabled = false;
 800cfe2:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <modConverterPWMOutputDisable+0x30>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cfea:	bf00      	nop
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	20001ee8 	.word	0x20001ee8
 800cff8:	48000400 	.word	0x48000400

0800cffc <modConverterPWMOutputEnable>:

inline void modConverterPWMOutputEnable() {
 800cffc:	b580      	push	{r7, lr}
 800cffe:	af00      	add	r7, sp, #0
	if(settings.outputEnable){
 800d000:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <modConverterPWMOutputEnable+0x30>)
 800d002:	7f1b      	ldrb	r3, [r3, #28]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <modConverterPWMOutputEnable+0x26>
#ifndef SIMULATION
		phase.PENport->BSRR = phase.PENpin;
 800d008:	4b09      	ldr	r3, [pc, #36]	; (800d030 <modConverterPWMOutputEnable+0x34>)
 800d00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d00c:	4a08      	ldr	r2, [pc, #32]	; (800d030 <modConverterPWMOutputEnable+0x34>)
 800d00e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d010:	619a      	str	r2, [r3, #24]
		DREN_GPIO_Port->BSRR = DREN_Pin;
 800d012:	4b08      	ldr	r3, [pc, #32]	; (800d034 <modConverterPWMOutputEnable+0x38>)
 800d014:	2210      	movs	r2, #16
 800d016:	619a      	str	r2, [r3, #24]
#endif
		phase.enabled = true;
 800d018:	4b05      	ldr	r3, [pc, #20]	; (800d030 <modConverterPWMOutputEnable+0x34>)
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	}else{
		modConverterPWMOutputDisable();
	}
}
 800d020:	e001      	b.n	800d026 <modConverterPWMOutputEnable+0x2a>
		modConverterPWMOutputDisable();
 800d022:	f7ff ffcf 	bl	800cfc4 <modConverterPWMOutputDisable>
}
 800d026:	bf00      	nop
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20003298 	.word	0x20003298
 800d030:	20001ee8 	.word	0x20001ee8
 800d034:	48000400 	.word	0x48000400

0800d038 <convertTemperature>:

float convertTemperature(uint32_t data){
 800d038:	b580      	push	{r7, lr}
 800d03a:	ed2d 8b02 	vpush	{d8}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	float vt = ((float)data) * HW_ADCREF * 0.001f / ((float)(1<<16));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	ee07 3a90 	vmov	s15, r3
 800d04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d0f8 <convertTemperature+0xc0>
 800d052:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d056:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d0fc <convertTemperature+0xc4>
 800d05a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d05e:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d100 <convertTemperature+0xc8>
 800d062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d066:	edc7 7a05 	vstr	s15, [r7, #20]
	float i = ((3.24f-vt) / cal.Temperature_R);
 800d06a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d104 <convertTemperature+0xcc>
 800d06e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d072:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d076:	4b24      	ldr	r3, [pc, #144]	; (800d108 <convertTemperature+0xd0>)
 800d078:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800d07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d080:	edc7 7a04 	vstr	s15, [r7, #16]
	float r = vt / i;
 800d084:	edd7 6a05 	vldr	s13, [r7, #20]
 800d088:	ed97 7a04 	vldr	s14, [r7, #16]
 800d08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d090:	edc7 7a03 	vstr	s15, [r7, #12]


	float inverseKelvin = (1.0f / (cal.Temperature_Ref+273.16f)) + (logf(r / cal.Temperature_R))/cal.Temperature_B;
 800d094:	4b1c      	ldr	r3, [pc, #112]	; (800d108 <convertTemperature+0xd0>)
 800d096:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800d09a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d10c <convertTemperature+0xd4>
 800d09e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a6:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800d0aa:	4b17      	ldr	r3, [pc, #92]	; (800d108 <convertTemperature+0xd0>)
 800d0ac:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d0b0:	ed97 7a03 	vldr	s14, [r7, #12]
 800d0b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d0b8:	eeb0 0a66 	vmov.f32	s0, s13
 800d0bc:	f007 fe94 	bl	8014de8 <logf>
 800d0c0:	eef0 6a40 	vmov.f32	s13, s0
 800d0c4:	4b10      	ldr	r3, [pc, #64]	; (800d108 <convertTemperature+0xd0>)
 800d0c6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d0ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d0d2:	edc7 7a02 	vstr	s15, [r7, #8]

	return (1.0f / inverseKelvin) - 273.16f;
 800d0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0da:	ed97 7a02 	vldr	s14, [r7, #8]
 800d0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d10c <convertTemperature+0xd4>
 800d0e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
	return vt;
}
 800d0ea:	eeb0 0a67 	vmov.f32	s0, s15
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	ecbd 8b02 	vpop	{d8}
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	45354000 	.word	0x45354000
 800d0fc:	3a83126f 	.word	0x3a83126f
 800d100:	47800000 	.word	0x47800000
 800d104:	404f5c29 	.word	0x404f5c29
 800d108:	200032b8 	.word	0x200032b8
 800d10c:	4388947b 	.word	0x4388947b

0800d110 <control_convert_vls>:
	return (((float)rand()/(float)__RAND_MAX)-0.5f)*amp;
	//return 0.0f;
}


void control_convert_vls(uint32_t raw){
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
	float V = 0;
 800d118:	f04f 0300 	mov.w	r3, #0
 800d11c:	60fb      	str	r3, [r7, #12]

	#ifdef SIMULATION
	V = 1.0e3f*(simstate.Vlow + noise(0.05f));
	#else
	V = ((((float)raw) * cal.InputVoltageGain * HW_ADCREF) / (float)0x1000) + cal.InputVoltageOffset;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	ee07 3a90 	vmov	s15, r3
 800d124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d128:	4b1f      	ldr	r3, [pc, #124]	; (800d1a8 <control_convert_vls+0x98>)
 800d12a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800d12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d132:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d1ac <control_convert_vls+0x9c>
 800d136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d13a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800d1b0 <control_convert_vls+0xa0>
 800d13e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d142:	4b19      	ldr	r3, [pc, #100]	; (800d1a8 <control_convert_vls+0x98>)
 800d144:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d14c:	edc7 7a03 	vstr	s15, [r7, #12]
	#endif

	if(fabsf(V) > HW_LIMIT_LS_VOLTAGE_HARD){
 800d150:	edd7 7a03 	vldr	s15, [r7, #12]
 800d154:	eef0 7ae7 	vabs.f32	s15, s15
 800d158:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800d1b4 <control_convert_vls+0xa4>
 800d15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d164:	dd03      	ble.n	800d16e <control_convert_vls+0x5e>
		phase.fault = Converter_InputOverVolt;
 800d166:	4b14      	ldr	r3, [pc, #80]	; (800d1b8 <control_convert_vls+0xa8>)
 800d168:	2202      	movs	r2, #2
 800d16a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	phase.Vlowm1 = phase.Vlow;
 800d16e:	4b12      	ldr	r3, [pc, #72]	; (800d1b8 <control_convert_vls+0xa8>)
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	4a11      	ldr	r2, [pc, #68]	; (800d1b8 <control_convert_vls+0xa8>)
 800d174:	62d3      	str	r3, [r2, #44]	; 0x2c
	EMA(phase.Vlow, V , VOLTAGE_IN_FORGETING_FACTOR);
 800d176:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <control_convert_vls+0xa8>)
 800d178:	edd3 7a03 	vldr	s15, [r3, #12]
 800d17c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d1bc <control_convert_vls+0xac>
 800d180:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d184:	edd7 7a03 	vldr	s15, [r7, #12]
 800d188:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800d1c0 <control_convert_vls+0xb0>
 800d18c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d190:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d194:	4b08      	ldr	r3, [pc, #32]	; (800d1b8 <control_convert_vls+0xa8>)
 800d196:	edc3 7a03 	vstr	s15, [r3, #12]

	//modConverterIpvObserver(phase);
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	200032b8 	.word	0x200032b8
 800d1ac:	45354000 	.word	0x45354000
 800d1b0:	45800000 	.word	0x45800000
 800d1b4:	482fc800 	.word	0x482fc800
 800d1b8:	20001ee8 	.word	0x20001ee8
 800d1bc:	3f4ccccd 	.word	0x3f4ccccd
 800d1c0:	3e4ccccc 	.word	0x3e4ccccc

0800d1c4 <control_convert_vhs>:

void control_convert_vhs(uint32_t raw){
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	float V = 0.0;
 800d1cc:	f04f 0300 	mov.w	r3, #0
 800d1d0:	60fb      	str	r3, [r7, #12]
	#ifdef SIMULATION
	V = 1.0e3f*(simstate.Vhigh + noise(0.05f));
	#else
	V = ((((float)raw) * cal.OutputVoltageGain * HW_ADCREF) / (float)0x1000) + cal.OutputVoltageOffset;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	ee07 3a90 	vmov	s15, r3
 800d1d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d1dc:	4b1d      	ldr	r3, [pc, #116]	; (800d254 <control_convert_vhs+0x90>)
 800d1de:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d258 <control_convert_vhs+0x94>
 800d1ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1ee:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800d25c <control_convert_vhs+0x98>
 800d1f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d1f6:	4b17      	ldr	r3, [pc, #92]	; (800d254 <control_convert_vhs+0x90>)
 800d1f8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d200:	edc7 7a03 	vstr	s15, [r7, #12]
	#endif

	if(fabsf(V) > HW_LIMIT_HS_VOLTAGE_HARD){
 800d204:	edd7 7a03 	vldr	s15, [r7, #12]
 800d208:	eef0 7ae7 	vabs.f32	s15, s15
 800d20c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d260 <control_convert_vhs+0x9c>
 800d210:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d218:	dd03      	ble.n	800d222 <control_convert_vhs+0x5e>
		phase.fault = Converter_OutputOverVolt;
 800d21a:	4b12      	ldr	r3, [pc, #72]	; (800d264 <control_convert_vhs+0xa0>)
 800d21c:	2203      	movs	r2, #3
 800d21e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	EMA(phase.Vhigh, V , VOLTAGE_OUT_FORGETING_FACTOR);
 800d222:	4b10      	ldr	r3, [pc, #64]	; (800d264 <control_convert_vhs+0xa0>)
 800d224:	edd3 7a01 	vldr	s15, [r3, #4]
 800d228:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d268 <control_convert_vhs+0xa4>
 800d22c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d230:	edd7 7a03 	vldr	s15, [r7, #12]
 800d234:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800d26c <control_convert_vhs+0xa8>
 800d238:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <control_convert_vhs+0xa0>)
 800d242:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	200032b8 	.word	0x200032b8
 800d258:	45354000 	.word	0x45354000
 800d25c:	45800000 	.word	0x45800000
 800d260:	482fc800 	.word	0x482fc800
 800d264:	20001ee8 	.word	0x20001ee8
 800d268:	3f4ccccd 	.word	0x3f4ccccd
 800d26c:	3e4ccccc 	.word	0x3e4ccccc

0800d270 <control_convert_iind>:

void control_convert_iind(uint32_t raw){
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
	float I = 0.0;
 800d278:	f04f 0300 	mov.w	r3, #0
 800d27c:	60fb      	str	r3, [r7, #12]
	#ifdef SIMULATION
	I = 1.0e3f*(simstate.Iind + noise(0.05f));
	#else
	I = ((((float)raw-(float)0x800) * cal.InputCurrentGain *2.0f* HW_ADCREF) / (float)0x1000) + cal.InputCurrentOffset;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d288:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d324 <control_convert_iind+0xb4>
 800d28c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d290:	4b25      	ldr	r3, [pc, #148]	; (800d328 <control_convert_iind+0xb8>)
 800d292:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800d296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d29e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d32c <control_convert_iind+0xbc>
 800d2a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2a6:	eddf 6a22 	vldr	s13, [pc, #136]	; 800d330 <control_convert_iind+0xc0>
 800d2aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d2ae:	4b1e      	ldr	r3, [pc, #120]	; (800d328 <control_convert_iind+0xb8>)
 800d2b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800d2b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2b8:	edc7 7a03 	vstr	s15, [r7, #12]
	#endif

	if(I > HW_LIMIT_LS_CURRENT_HARD){
 800d2bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d334 <control_convert_iind+0xc4>
 800d2c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2cc:	dd04      	ble.n	800d2d8 <control_convert_iind+0x68>
		phase.fault = Converter_InputOverCurrent;
 800d2ce:	4b1a      	ldr	r3, [pc, #104]	; (800d338 <control_convert_iind+0xc8>)
 800d2d0:	2205      	movs	r2, #5
 800d2d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800d2d6:	e00c      	b.n	800d2f2 <control_convert_iind+0x82>
	}else if(I < -HW_LIMIT_LS_CURRENT_HARD){
 800d2d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d33c <control_convert_iind+0xcc>
 800d2e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e8:	d503      	bpl.n	800d2f2 <control_convert_iind+0x82>
		phase.fault = Converter_InputUnderCurrent;
 800d2ea:	4b13      	ldr	r3, [pc, #76]	; (800d338 <control_convert_iind+0xc8>)
 800d2ec:	2206      	movs	r2, #6
 800d2ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}


	EMA(phase.Iind,I, CURRENT_IN_FORGETING_FACTOR);
 800d2f2:	4b11      	ldr	r3, [pc, #68]	; (800d338 <control_convert_iind+0xc8>)
 800d2f4:	edd3 7a00 	vldr	s15, [r3]
 800d2f8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d340 <control_convert_iind+0xd0>
 800d2fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d300:	edd7 7a03 	vldr	s15, [r7, #12]
 800d304:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800d344 <control_convert_iind+0xd4>
 800d308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d310:	4b09      	ldr	r3, [pc, #36]	; (800d338 <control_convert_iind+0xc8>)
 800d312:	edc3 7a00 	vstr	s15, [r3]
}
 800d316:	bf00      	nop
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	45000000 	.word	0x45000000
 800d328:	200032b8 	.word	0x200032b8
 800d32c:	45354000 	.word	0x45354000
 800d330:	45800000 	.word	0x45800000
 800d334:	461c4000 	.word	0x461c4000
 800d338:	20001ee8 	.word	0x20001ee8
 800d33c:	c61c4000 	.word	0xc61c4000
 800d340:	3ecccccd 	.word	0x3ecccccd
 800d344:	3f19999a 	.word	0x3f19999a

0800d348 <control_convert_ihs>:

void control_convert_ihs(uint32_t raw){
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
	float I = 0.0f;
 800d350:	f04f 0300 	mov.w	r3, #0
 800d354:	60fb      	str	r3, [r7, #12]
	#ifdef SIMULATION
	I = 1.0e3f*(simstate.Ihigh + noise(0.05f));
	#else
	I = ( ((float)raw-(float)0x800) * cal.OutputCurrentGain *2.0f* (HW_ADCREF / (float)0x1000)) + cal.OutputCurrentOffset;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	ee07 3a90 	vmov	s15, r3
 800d35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d360:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d3d8 <control_convert_ihs+0x90>
 800d364:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d368:	4b1c      	ldr	r3, [pc, #112]	; (800d3dc <control_convert_ihs+0x94>)
 800d36a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d372:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d376:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d3e0 <control_convert_ihs+0x98>
 800d37a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d37e:	4b17      	ldr	r3, [pc, #92]	; (800d3dc <control_convert_ihs+0x94>)
 800d380:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800d384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d388:	edc7 7a03 	vstr	s15, [r7, #12]
	#endif
	if(I > HW_LIMIT_HS_CURRENT_HARD){
 800d38c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d390:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d3e4 <control_convert_ihs+0x9c>
 800d394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39c:	dd03      	ble.n	800d3a6 <control_convert_ihs+0x5e>
		phase.fault = Converter_OutputOverCurrent;
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <control_convert_ihs+0xa0>)
 800d3a0:	2204      	movs	r2, #4
 800d3a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	EMA(phase.Ihigh,I, CURRENT_IN_FORGETING_FACTOR);
 800d3a6:	4b10      	ldr	r3, [pc, #64]	; (800d3e8 <control_convert_ihs+0xa0>)
 800d3a8:	edd3 7a02 	vldr	s15, [r3, #8]
 800d3ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d3ec <control_convert_ihs+0xa4>
 800d3b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d3b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d3b8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800d3f0 <control_convert_ihs+0xa8>
 800d3bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3c4:	4b08      	ldr	r3, [pc, #32]	; (800d3e8 <control_convert_ihs+0xa0>)
 800d3c6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	45000000 	.word	0x45000000
 800d3dc:	200032b8 	.word	0x200032b8
 800d3e0:	3f354000 	.word	0x3f354000
 800d3e4:	461c4000 	.word	0x461c4000
 800d3e8:	20001ee8 	.word	0x20001ee8
 800d3ec:	3ecccccd 	.word	0x3ecccccd
 800d3f0:	3f19999a 	.word	0x3f19999a

0800d3f4 <convertAdc5>:

void convertAdc5(uint32_t* data){
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	ed2d 8b02 	vpush	{d8}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	EMA(phase.TemperatureMCU, __LL_ADC_CALC_TEMPERATURE((uint32_t)HW_ADCREF,data[0],LL_ADC_RESOLUTION_12B), TEMP_FORGETING_FACTOR);
 800d400:	4b32      	ldr	r3, [pc, #200]	; (800d4cc <convertAdc5+0xd8>)
 800d402:	edd3 7a07 	vldr	s15, [r3, #28]
 800d406:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d4d0 <convertAdc5+0xdc>
 800d40a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f640 3254 	movw	r2, #2900	; 0xb54
 800d416:	fb02 f303 	mul.w	r3, r2, r3
 800d41a:	4a2e      	ldr	r2, [pc, #184]	; (800d4d4 <convertAdc5+0xe0>)
 800d41c:	fba2 2303 	umull	r2, r3, r2, r3
 800d420:	099b      	lsrs	r3, r3, #6
 800d422:	461a      	mov	r2, r3
 800d424:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <convertAdc5+0xe4>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	1ad2      	subs	r2, r2, r3
 800d42a:	4613      	mov	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	011b      	lsls	r3, r3, #4
 800d432:	461a      	mov	r2, r3
 800d434:	4b29      	ldr	r3, [pc, #164]	; (800d4dc <convertAdc5+0xe8>)
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	4619      	mov	r1, r3
 800d43a:	4b27      	ldr	r3, [pc, #156]	; (800d4d8 <convertAdc5+0xe4>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	1acb      	subs	r3, r1, r3
 800d440:	fb92 f3f3 	sdiv	r3, r2, r3
 800d444:	331e      	adds	r3, #30
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d44e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d4e0 <convertAdc5+0xec>
 800d452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d45a:	4b1c      	ldr	r3, [pc, #112]	; (800d4cc <convertAdc5+0xd8>)
 800d45c:	edc3 7a07 	vstr	s15, [r3, #28]
	EMA(phase.TemperatureHeatsink, convertTemperature(data[1]), TEMP_FORGETING_FACTOR);
 800d460:	4b1a      	ldr	r3, [pc, #104]	; (800d4cc <convertAdc5+0xd8>)
 800d462:	edd3 7a06 	vldr	s15, [r3, #24]
 800d466:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d4d0 <convertAdc5+0xdc>
 800d46a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3304      	adds	r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff fddf 	bl	800d038 <convertTemperature>
 800d47a:	eef0 7a40 	vmov.f32	s15, s0
 800d47e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d4e0 <convertAdc5+0xec>
 800d482:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d486:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d48a:	4b10      	ldr	r3, [pc, #64]	; (800d4cc <convertAdc5+0xd8>)
 800d48c:	edc3 7a06 	vstr	s15, [r3, #24]
	EMA(phase.TemperatureAmbient, convertTemperature(data[2]), TEMP_FORGETING_FACTOR);
 800d490:	4b0e      	ldr	r3, [pc, #56]	; (800d4cc <convertAdc5+0xd8>)
 800d492:	edd3 7a05 	vldr	s15, [r3, #20]
 800d496:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d4d0 <convertAdc5+0xdc>
 800d49a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7ff fdc7 	bl	800d038 <convertTemperature>
 800d4aa:	eef0 7a40 	vmov.f32	s15, s0
 800d4ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d4e0 <convertAdc5+0xec>
 800d4b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4b6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d4ba:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <convertAdc5+0xd8>)
 800d4bc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	ecbd 8b02 	vpop	{d8}
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	20001ee8 	.word	0x20001ee8
 800d4d0:	3f666666 	.word	0x3f666666
 800d4d4:	057619f1 	.word	0x057619f1
 800d4d8:	1fff75a8 	.word	0x1fff75a8
 800d4dc:	1fff75ca 	.word	0x1fff75ca
 800d4e0:	3dccccd0 	.word	0x3dccccd0

0800d4e4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC5){
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a04      	ldr	r2, [pc, #16]	; (800d504 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d102      	bne.n	800d4fc <HAL_ADC_ConvHalfCpltCallback+0x18>
		convertAdc5(&adc5data[3]);
 800d4f6:	4804      	ldr	r0, [pc, #16]	; (800d508 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800d4f8:	f7ff ff7c 	bl	800d3f4 <convertAdc5>
	}
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	50000600 	.word	0x50000600
 800d508:	20001e70 	.word	0x20001e70

0800d50c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC5){
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a04      	ldr	r2, [pc, #16]	; (800d52c <HAL_ADC_ConvCpltCallback+0x20>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d102      	bne.n	800d524 <HAL_ADC_ConvCpltCallback+0x18>
		convertAdc5(&adc5data[0]);
 800d51e:	4804      	ldr	r0, [pc, #16]	; (800d530 <HAL_ADC_ConvCpltCallback+0x24>)
 800d520:	f7ff ff68 	bl	800d3f4 <convertAdc5>
	}
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	50000600 	.word	0x50000600
 800d530:	20001e64 	.word	0x20001e64

0800d534 <modConverterGetMode>:


PhaseMode_t modConverterGetMode(void){
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
	return phase.mode;
 800d538:	4b03      	ldr	r3, [pc, #12]	; (800d548 <modConverterGetMode+0x14>)
 800d53a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 800d53e:	4618      	mov	r0, r3
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	20001ee8 	.word	0x20001ee8

0800d54c <control_set_setpoint>:

PhaseFault_t modConverterGetFault(void){
	return phase.fault;
}

void control_set_setpoint(float v){
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	ed87 0a01 	vstr	s0, [r7, #4]
	if (!isnan(v)){
 800d556:	ed97 7a01 	vldr	s14, [r7, #4]
 800d55a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d55e:	eeb4 7a67 	vcmp.f32	s14, s15
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	d61a      	bvs.n	800d59e <control_set_setpoint+0x52>
#if defined HW_TOPOLOGY_BOOST
		if(v > settings.LowSideVoltageLimitSoft)v = settings.LowSideVoltageLimitSoft;
 800d568:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <control_set_setpoint+0x60>)
 800d56a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d56e:	ed97 7a01 	vldr	s14, [r7, #4]
 800d572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57a:	dd02      	ble.n	800d582 <control_set_setpoint+0x36>
 800d57c:	4b0b      	ldr	r3, [pc, #44]	; (800d5ac <control_set_setpoint+0x60>)
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	607b      	str	r3, [r7, #4]

#elif defined HW_TOPOLOGY_BUCK
		if(v > settings.HighSideVoltageLimitSoft)v = settings.HighSideVoltageLimitSoft;
#endif
		if(v < 6000.0f)v = 6000.0f;
 800d582:	edd7 7a01 	vldr	s15, [r7, #4]
 800d586:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d5b0 <control_set_setpoint+0x64>
 800d58a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d592:	d501      	bpl.n	800d598 <control_set_setpoint+0x4c>
 800d594:	4b07      	ldr	r3, [pc, #28]	; (800d5b4 <control_set_setpoint+0x68>)
 800d596:	607b      	str	r3, [r7, #4]
		phase.Vsp = v;
 800d598:	4a07      	ldr	r2, [pc, #28]	; (800d5b8 <control_set_setpoint+0x6c>)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
 800d59e:	bf00      	nop
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	20003298 	.word	0x20003298
 800d5b0:	45bb8000 	.word	0x45bb8000
 800d5b4:	45bb8000 	.word	0x45bb8000
 800d5b8:	20001ee8 	.word	0x20001ee8

0800d5bc <control_get_setpoint>:

float control_get_setpoint(){
 800d5bc:	b480      	push	{r7}
 800d5be:	af00      	add	r7, sp, #0
	return phase.Vsp;
 800d5c0:	4b04      	ldr	r3, [pc, #16]	; (800d5d4 <control_get_setpoint+0x18>)
 800d5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c4:	ee07 3a90 	vmov	s15, r3
}
 800d5c8:	eeb0 0a67 	vmov.f32	s0, s15
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	20001ee8 	.word	0x20001ee8

0800d5d8 <control_get_regulated_voltage>:

float control_get_regulated_voltage(){
 800d5d8:	b480      	push	{r7}
 800d5da:	af00      	add	r7, sp, #0
#if defined(HW_TOPOLOGY_BOOST)
	return meter.Vlow;
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <control_get_regulated_voltage+0x18>)
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	ee07 3a90 	vmov	s15, r3
#elif defined(HW_TOPOLOGY_BUCK)
	return meter.Vhigh;
#endif
}
 800d5e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	200033dc 	.word	0x200033dc

0800d5f4 <control_get_regulated_current>:

float control_get_regulated_current(){
 800d5f4:	b480      	push	{r7}
 800d5f6:	af00      	add	r7, sp, #0
#if defined(HW_TOPOLOGY_BOOST)
	return meter.Ilow;
 800d5f8:	4b04      	ldr	r3, [pc, #16]	; (800d60c <control_get_regulated_current+0x18>)
 800d5fa:	699b      	ldr	r3, [r3, #24]
 800d5fc:	ee07 3a90 	vmov	s15, r3
#elif defined(HW_TOPOLOGY_BUCK)
	return -meter.Ihigh;
#endif
}
 800d600:	eeb0 0a67 	vmov.f32	s0, s15
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	200033dc 	.word	0x200033dc

0800d610 <libCRCCalcCRC16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short libCRCCalcCRC16(unsigned char *buf, unsigned int len) {
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d61e:	2300      	movs	r3, #0
 800d620:	60fb      	str	r3, [r7, #12]
 800d622:	e016      	b.n	800d652 <libCRCCalcCRC16+0x42>
		cksum = libCRCLookupTable[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d624:	897b      	ldrh	r3, [r7, #10]
 800d626:	0a1b      	lsrs	r3, r3, #8
 800d628:	b29b      	uxth	r3, r3
 800d62a:	4619      	mov	r1, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	404b      	eors	r3, r1
 800d636:	b2db      	uxtb	r3, r3
 800d638:	4a0b      	ldr	r2, [pc, #44]	; (800d668 <libCRCCalcCRC16+0x58>)
 800d63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d63e:	b21a      	sxth	r2, r3
 800d640:	897b      	ldrh	r3, [r7, #10]
 800d642:	021b      	lsls	r3, r3, #8
 800d644:	b21b      	sxth	r3, r3
 800d646:	4053      	eors	r3, r2
 800d648:	b21b      	sxth	r3, r3
 800d64a:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	3301      	adds	r3, #1
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d3e4      	bcc.n	800d624 <libCRCCalcCRC16+0x14>
	}
	return cksum;
 800d65a:	897b      	ldrh	r3, [r7, #10]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	08015d94 	.word	0x08015d94

0800d66c <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 800d676:	f7f3 fd55 	bl	8001124 <HAL_GetTick>
 800d67a:	4602      	mov	r2, r0
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d806      	bhi.n	800d696 <modDelayTick1ms+0x2a>
	{
		*last = HAL_GetTick();
 800d688:	f7f3 fd4c 	bl	8001124 <HAL_GetTick>
 800d68c:	4602      	mov	r2, r0
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	601a      	str	r2, [r3, #0]
		return true;
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <modDelayTick1ms+0x2c>
	}

	return false;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <dma_init>:
#include "dma.h"

void dma_init(void) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800d6a6:	4b16      	ldr	r3, [pc, #88]	; (800d700 <dma_init+0x60>)
 800d6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6aa:	4a15      	ldr	r2, [pc, #84]	; (800d700 <dma_init+0x60>)
 800d6ac:	f043 0304 	orr.w	r3, r3, #4
 800d6b0:	6493      	str	r3, [r2, #72]	; 0x48
 800d6b2:	4b13      	ldr	r3, [pc, #76]	; (800d700 <dma_init+0x60>)
 800d6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6b6:	f003 0304 	and.w	r3, r3, #4
 800d6ba:	607b      	str	r3, [r7, #4]
 800d6bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800d6be:	4b10      	ldr	r3, [pc, #64]	; (800d700 <dma_init+0x60>)
 800d6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6c2:	4a0f      	ldr	r2, [pc, #60]	; (800d700 <dma_init+0x60>)
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	6493      	str	r3, [r2, #72]	; 0x48
 800d6ca:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <dma_init+0x60>)
 800d6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	2102      	movs	r1, #2
 800d6da:	200b      	movs	r0, #11
 800d6dc:	f7f5 fdb1 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800d6e0:	200b      	movs	r0, #11
 800d6e2:	f7f5 fdc8 	bl	8003276 <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2102      	movs	r1, #2
 800d6ea:	200c      	movs	r0, #12
 800d6ec:	f7f5 fda9 	bl	8003242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800d6f0:	200c      	movs	r0, #12
 800d6f2:	f7f5 fdc0 	bl	8003276 <HAL_NVIC_EnableIRQ>

}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	40021000 	.word	0x40021000

0800d704 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void) {
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc5);
 800d708:	4802      	ldr	r0, [pc, #8]	; (800d714 <DMA1_Channel1_IRQHandler+0x10>)
 800d70a:	f7f5 fef2 	bl	80034f2 <HAL_DMA_IRQHandler>
}
 800d70e:	bf00      	nop
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	20001e04 	.word	0x20001e04

0800d718 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void) {
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800d71c:	4802      	ldr	r0, [pc, #8]	; (800d728 <DMA1_Channel2_IRQHandler+0x10>)
 800d71e:	f7f5 fee8 	bl	80034f2 <HAL_DMA_IRQHandler>
}
 800d722:	bf00      	nop
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20001ccc 	.word	0x20001ccc

0800d72c <eeprom_init>:
//EEPROM_resp_t eeprom_endwrite();
//EEPROM_resp_t eeprom_startwrite();



bool eeprom_init() {
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
	__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE();
 800d732:	4b13      	ldr	r3, [pc, #76]	; (800d780 <eeprom_init+0x54>)
 800d734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d736:	4a12      	ldr	r2, [pc, #72]	; (800d780 <eeprom_init+0x54>)
 800d738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d73c:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Initialize RAM memory as FF to minimize flash writes and to set ram memory to known data.
	uint32_t* eeprom_ram = (uint32_t*) EEPROM_RAMSTART;
 800d73e:	4b11      	ldr	r3, [pc, #68]	; (800d784 <eeprom_init+0x58>)
 800d740:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < EEPROM_SIZE/sizeof(uint32_t); i++){
 800d742:	2300      	movs	r3, #0
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	e009      	b.n	800d75c <eeprom_init+0x30>
		eeprom_ram[i] = 0xFFFFFFFF;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	4413      	add	r3, r2
 800d750:	f04f 32ff 	mov.w	r2, #4294967295
 800d754:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < EEPROM_SIZE/sizeof(uint32_t); i++){
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3301      	adds	r3, #1
 800d75a:	607b      	str	r3, [r7, #4]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800d762:	d3f1      	bcc.n	800d748 <eeprom_init+0x1c>
	}

	if (eeprom_valid()) {
 800d764:	f000 f810 	bl	800d788 <eeprom_valid>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <eeprom_init+0x4a>
		eeprom_load();
 800d76e:	f000 f839 	bl	800d7e4 <eeprom_load>
		return true;
 800d772:	2301      	movs	r3, #1
 800d774:	e000      	b.n	800d778 <eeprom_init+0x4c>
	}
	return false;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	40021000 	.word	0x40021000
 800d784:	2001f800 	.word	0x2001f800

0800d788 <eeprom_valid>:

bool eeprom_valid() {
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
	uint16_t ccrc = libCRCCalcCRC16(eeprommem, EEPROM_SIZE / sizeof(uint8_t));
 800d78e:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800d792:	4811      	ldr	r0, [pc, #68]	; (800d7d8 <eeprom_valid+0x50>)
 800d794:	f7ff ff3c 	bl	800d610 <libCRCCalcCRC16>
 800d798:	4603      	mov	r3, r0
 800d79a:	80fb      	strh	r3, [r7, #6]
	if ((rom_state != EEPROM_Valid) || ((uint16_t)crc != ccrc)) {
 800d79c:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <eeprom_valid+0x54>)
 800d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a2:	a10b      	add	r1, pc, #44	; (adr r1, 800d7d0 <eeprom_valid+0x48>)
 800d7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7a8:	428b      	cmp	r3, r1
 800d7aa:	bf08      	it	eq
 800d7ac:	4282      	cmpeq	r2, r0
 800d7ae:	d106      	bne.n	800d7be <eeprom_valid+0x36>
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <eeprom_valid+0x58>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	b293      	uxth	r3, r2
 800d7b8:	88fa      	ldrh	r2, [r7, #6]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d001      	beq.n	800d7c2 <eeprom_valid+0x3a>
		//Current EEPROM is invalid.
		return false;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e000      	b.n	800d7c4 <eeprom_valid+0x3c>
	}
	return true;
 800d7c2:	2301      	movs	r3, #1
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	f3af 8000 	nop.w
 800d7d0:	abe02001 	.word	0xabe02001
 800d7d4:	00c0feeb 	.word	0x00c0feeb
 800d7d8:	0807b810 	.word	0x0807b810
 800d7dc:	0807b800 	.word	0x0807b800
 800d7e0:	0807b808 	.word	0x0807b808

0800d7e4 <eeprom_load>:

void eeprom_load() {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
	memcpy(EEPROM_RAMSTART, (const void*) eeprommem, EEPROM_SIZE);
 800d7e8:	4a05      	ldr	r2, [pc, #20]	; (800d800 <eeprom_load+0x1c>)
 800d7ea:	4b06      	ldr	r3, [pc, #24]	; (800d804 <eeprom_load+0x20>)
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f002 fc33 	bl	8010060 <memcpy>
}
 800d7fa:	bf00      	nop
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	2001f800 	.word	0x2001f800
 800d804:	0807b810 	.word	0x0807b810

0800d808 <eeprom_save>:

void eeprom_save() {
 800d808:	b580      	push	{r7, lr}
 800d80a:	b090      	sub	sp, #64	; 0x40
 800d80c:	af00      	add	r7, sp, #0
  __ASM volatile ("isb 0xF":::"memory");
 800d80e:	f3bf 8f6f 	isb	sy
}
 800d812:	bf00      	nop
	__ISB();

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 800d814:	f7f6 fef4 	bl	8004600 <HAL_FLASH_Unlock>
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t error = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]

	uint32_t page = (EROM_BASE - MAIN_BASE) / 0x800;
 800d822:	23f7      	movs	r3, #247	; 0xf7
 800d824:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t Bank = FLASH_BANK_1;
 800d826:	2301      	movs	r3, #1
 800d828:	63bb      	str	r3, [r7, #56]	; 0x38

	if (page >= 128){
 800d82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82c:	2b7f      	cmp	r3, #127	; 0x7f
 800d82e:	d904      	bls.n	800d83a <eeprom_save+0x32>
		page -= 128;
 800d830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d832:	3b80      	subs	r3, #128	; 0x80
 800d834:	63fb      	str	r3, [r7, #60]	; 0x3c
		Bank = FLASH_BANK_2;
 800d836:	2302      	movs	r3, #2
 800d838:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	// make sure that this structure matches the data-sheet of your chip
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 800d83a:	2300      	movs	r3, #0
 800d83c:	607b      	str	r3, [r7, #4]
 800d83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d840:	60bb      	str	r3, [r7, #8]
 800d842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	2301      	movs	r3, #1
 800d848:	613b      	str	r3, [r7, #16]
		.Page = page,
		.NbPages = 1
	};

	// clear all flags before you write it to flash
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 800d84a:	4b2b      	ldr	r3, [pc, #172]	; (800d8f8 <eeprom_save+0xf0>)
 800d84c:	22b3      	movs	r2, #179	; 0xb3
 800d84e:	611a      	str	r2, [r3, #16]

	if (status != HAL_OK)
 800d850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d854:	2b00      	cmp	r3, #0
 800d856:	d146      	bne.n	800d8e6 <eeprom_save+0xde>
		return;

	// perform the erase first
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 800d858:	f107 0214 	add.w	r2, r7, #20
 800d85c:	1d3b      	adds	r3, r7, #4
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f7f6 ffb9 	bl	80047d8 <HAL_FLASHEx_Erase>

	uint64_t* address = (uint64_t*) eeprommem;
 800d866:	4b25      	ldr	r3, [pc, #148]	; (800d8fc <eeprom_save+0xf4>)
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
	uint64_t* data = (uint64_t*) EEPROM_RAMSTART;
 800d86a:	4b25      	ldr	r3, [pc, #148]	; (800d900 <eeprom_save+0xf8>)
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint64_t ccrc = libCRCCalcCRC16(EEPROM_RAMSTART, EEPROM_SIZE / sizeof(uint8_t));
 800d86e:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800d872:	4823      	ldr	r0, [pc, #140]	; (800d900 <eeprom_save+0xf8>)
 800d874:	f7ff fecc 	bl	800d610 <libCRCCalcCRC16>
 800d878:	4603      	mov	r3, r0
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	f04f 0300 	mov.w	r3, #0
 800d880:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t val = EEPROM_Valid;
 800d884:	a31a      	add	r3, pc, #104	; (adr r3, 800d8f0 <eeprom_save+0xe8>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&crc, ccrc);
 800d88e:	491d      	ldr	r1, [pc, #116]	; (800d904 <eeprom_save+0xfc>)
 800d890:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d894:	2000      	movs	r0, #0
 800d896:	f7f6 fe5d 	bl	8004554 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&rom_state, val);
 800d89a:	491b      	ldr	r1, [pc, #108]	; (800d908 <eeprom_save+0x100>)
 800d89c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	f7f6 fe57 	bl	8004554 <HAL_FLASH_Program>

	int i = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
	do {
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)address, data[i++]);
 800d8aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	1c5a      	adds	r2, r3, #1
 800d8b0:	633a      	str	r2, [r7, #48]	; 0x30
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b6:	4413      	add	r3, r2
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	2000      	movs	r0, #0
 800d8be:	f7f6 fe49 	bl	8004554 <HAL_FLASH_Program>
		address += 1;
 800d8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	637b      	str	r3, [r7, #52]	; 0x34

		//wait for flash to be ready
		FLASH_WaitForLastOperation(10);
 800d8c8:	200a      	movs	r0, #10
 800d8ca:	f7f6 fed5 	bl	8004678 <FLASH_WaitForLastOperation>
	} while ((void*)address < (EEPROM_START_ADDRESS + EEPROM_SIZE));
 800d8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d0:	4a0e      	ldr	r2, [pc, #56]	; (800d90c <eeprom_save+0x104>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d9e9      	bls.n	800d8aa <eeprom_save+0xa2>

	//CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
	HAL_FLASH_Lock();
 800d8d6:	f7f6 feb5 	bl	8004644 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 800d8da:	2064      	movs	r0, #100	; 0x64
 800d8dc:	f7f6 fecc 	bl	8004678 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 800d8e0:	f7f6 fe8e 	bl	8004600 <HAL_FLASH_Unlock>

	return;
 800d8e4:	e000      	b.n	800d8e8 <eeprom_save+0xe0>
		return;
 800d8e6:	bf00      	nop
}
 800d8e8:	3740      	adds	r7, #64	; 0x40
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	abe02001 	.word	0xabe02001
 800d8f4:	00c0feeb 	.word	0x00c0feeb
 800d8f8:	40022000 	.word	0x40022000
 800d8fc:	0807b810 	.word	0x0807b810
 800d900:	2001f800 	.word	0x2001f800
 800d904:	0807b808 	.word	0x0807b808
 800d908:	0807b800 	.word	0x0807b800
 800d90c:	0807bfef 	.word	0x0807bfef

0800d910 <modFlashEraseNewAppData>:


#include "flash.h"


uint16_t modFlashEraseNewAppData(uint32_t new_app_size) {
 800d910:	b580      	push	{r7, lr}
 800d912:	b08c      	sub	sp, #48	; 0x30
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  __ASM volatile ("isb 0xF":::"memory");
 800d918:	f3bf 8f6f 	isb	sy
}
 800d91c:	bf00      	nop
	__ISB();

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 800d91e:	f7f6 fe6f 	bl	8004600 <HAL_FLASH_Unlock>
 800d922:	4603      	mov	r3, r0
 800d924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t error = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	61fb      	str	r3, [r7, #28]


	// clear all flags before you write it to flash
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 800d92c:	4b23      	ldr	r3, [pc, #140]	; (800d9bc <modFlashEraseNewAppData+0xac>)
 800d92e:	22b3      	movs	r2, #179	; 0xb3
 800d930:	611a      	str	r2, [r3, #16]

	if (status != HAL_OK)
 800d932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <modFlashEraseNewAppData+0x32>
		return status;
 800d93a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d93e:	b29b      	uxth	r3, r3
 800d940:	e037      	b.n	800d9b2 <modFlashEraseNewAppData+0xa2>

	for (uint32_t addres = APP_BASE; addres < EROM_BASE; addres += 0x800){
 800d942:	4b1f      	ldr	r3, [pc, #124]	; (800d9c0 <modFlashEraseNewAppData+0xb0>)
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d946:	e028      	b.n	800d99a <modFlashEraseNewAppData+0x8a>
		uint32_t page = (addres - MAIN_BASE) / 0x800;
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800d94e:	0adb      	lsrs	r3, r3, #11
 800d950:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t Bank = FLASH_BANK_1;
 800d952:	2301      	movs	r3, #1
 800d954:	627b      	str	r3, [r7, #36]	; 0x24

		if (page >= 128){
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	2b7f      	cmp	r3, #127	; 0x7f
 800d95a:	d904      	bls.n	800d966 <modFlashEraseNewAppData+0x56>
			page -= 128;
 800d95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95e:	3b80      	subs	r3, #128	; 0x80
 800d960:	62bb      	str	r3, [r7, #40]	; 0x28
			Bank = FLASH_BANK_2;
 800d962:	2302      	movs	r3, #2
 800d964:	627b      	str	r3, [r7, #36]	; 0x24
		}

		// make sure that this structure matches the data-sheet of your chip
		FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 800d966:	2300      	movs	r3, #0
 800d968:	60fb      	str	r3, [r7, #12]
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	613b      	str	r3, [r7, #16]
 800d96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	2301      	movs	r3, #1
 800d974:	61bb      	str	r3, [r7, #24]



		// perform the erase first

		HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 800d976:	f107 021c 	add.w	r2, r7, #28
 800d97a:	f107 030c 	add.w	r3, r7, #12
 800d97e:	4611      	mov	r1, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f7f6 ff29 	bl	80047d8 <HAL_FLASHEx_Erase>

		if (error != -1){
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98c:	d001      	beq.n	800d992 <modFlashEraseNewAppData+0x82>
			return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e00f      	b.n	800d9b2 <modFlashEraseNewAppData+0xa2>
	for (uint32_t addres = APP_BASE; addres < EROM_BASE; addres += 0x800){
 800d992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <modFlashEraseNewAppData+0xb4>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d3d2      	bcc.n	800d948 <modFlashEraseNewAppData+0x38>
		}
	}

	HAL_FLASH_Lock();
 800d9a2:	f7f6 fe4f 	bl	8004644 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 800d9a6:	2064      	movs	r0, #100	; 0x64
 800d9a8:	f7f6 fe66 	bl	8004678 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 800d9ac:	f7f6 fe28 	bl	8004600 <HAL_FLASH_Unlock>

	return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3730      	adds	r7, #48	; 0x30
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	40022000 	.word	0x40022000
 800d9c0:	0803d800 	.word	0x0803d800
 800d9c4:	0807b800 	.word	0x0807b800

0800d9c8 <modFlashWriteNewAppData>:


uint64_t* addr;
int written = 0;

uint16_t modFlashWriteNewAppData(uint32_t offset, uint8_t *data, uint32_t len) {
 800d9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9cc:	b08b      	sub	sp, #44	; 0x2c
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	60f8      	str	r0, [r7, #12]
 800d9d2:	60b9      	str	r1, [r7, #8]
 800d9d4:	607a      	str	r2, [r7, #4]
	uint16_t returnVal = HAL_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	827b      	strh	r3, [r7, #18]

	//Check if length and offset are aligned with and deviseble by blocks of 8 bytes.
	if ((offset % 8 != 0) || (len % 8 != 0)){
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f003 0307 	and.w	r3, r3, #7
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d104      	bne.n	800d9ee <modFlashWriteNewAppData+0x26>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <modFlashWriteNewAppData+0x2a>
		return HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e074      	b.n	800dadc <modFlashWriteNewAppData+0x114>
	}

	//Detect start of write
	if (offset == 0){
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d105      	bne.n	800da04 <modFlashWriteNewAppData+0x3c>
		addr = (uint64_t*)APP_BASE;
 800d9f8:	4b3b      	ldr	r3, [pc, #236]	; (800dae8 <modFlashWriteNewAppData+0x120>)
 800d9fa:	4a3c      	ldr	r2, [pc, #240]	; (800daec <modFlashWriteNewAppData+0x124>)
 800d9fc:	601a      	str	r2, [r3, #0]
		written = 0;
 800d9fe:	4b3c      	ldr	r3, [pc, #240]	; (800daf0 <modFlashWriteNewAppData+0x128>)
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
	}

	//Check for sequentiality of offset
	if ((offset + APP_BASE) != addr){
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800da0a:	f503 3376 	add.w	r3, r3, #251904	; 0x3d800
 800da0e:	461a      	mov	r2, r3
 800da10:	4b35      	ldr	r3, [pc, #212]	; (800dae8 <modFlashWriteNewAppData+0x120>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	429a      	cmp	r2, r3
 800da16:	d001      	beq.n	800da1c <modFlashWriteNewAppData+0x54>
		return HAL_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	e05f      	b.n	800dadc <modFlashWriteNewAppData+0x114>
	}

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 800da1c:	4b35      	ldr	r3, [pc, #212]	; (800daf4 <modFlashWriteNewAppData+0x12c>)
 800da1e:	22b3      	movs	r2, #179	; 0xb3
 800da20:	611a      	str	r2, [r3, #16]

	for (int i = 0; i < len; i += 8) {
 800da22:	2300      	movs	r3, #0
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
 800da26:	e04d      	b.n	800dac4 <modFlashWriteNewAppData+0xfc>
		uint64_t dword = 0;
 800da28:	f04f 0200 	mov.w	r2, #0
 800da2c:	f04f 0300 	mov.w	r3, #0
 800da30:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for (int j = 0; j < 8; j++){
 800da34:	2300      	movs	r3, #0
 800da36:	617b      	str	r3, [r7, #20]
 800da38:	e024      	b.n	800da84 <modFlashWriteNewAppData+0xbc>
			dword += ((uint64_t)data[i+j]) << j*8;
 800da3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	4413      	add	r3, r2
 800da40:	461a      	mov	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	4413      	add	r3, r2
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	f04f 0300 	mov.w	r3, #0
 800da4e:	6979      	ldr	r1, [r7, #20]
 800da50:	00c9      	lsls	r1, r1, #3
 800da52:	f1a1 0620 	sub.w	r6, r1, #32
 800da56:	f1c1 0020 	rsb	r0, r1, #32
 800da5a:	fa03 f501 	lsl.w	r5, r3, r1
 800da5e:	fa02 f606 	lsl.w	r6, r2, r6
 800da62:	4335      	orrs	r5, r6
 800da64:	fa22 f000 	lsr.w	r0, r2, r0
 800da68:	4305      	orrs	r5, r0
 800da6a:	fa02 f401 	lsl.w	r4, r2, r1
 800da6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da72:	eb12 0804 	adds.w	r8, r2, r4
 800da76:	eb43 0905 	adc.w	r9, r3, r5
 800da7a:	e9c7 8906 	strd	r8, r9, [r7, #24]
		for (int j = 0; j < 8; j++){
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	3301      	adds	r3, #1
 800da82:	617b      	str	r3, [r7, #20]
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b07      	cmp	r3, #7
 800da88:	ddd7      	ble.n	800da3a <modFlashWriteNewAppData+0x72>
		}
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)addr, dword) != HAL_OK){
 800da8a:	4b17      	ldr	r3, [pc, #92]	; (800dae8 <modFlashWriteNewAppData+0x120>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4619      	mov	r1, r3
 800da90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da94:	2000      	movs	r0, #0
 800da96:	f7f6 fd5d 	bl	8004554 <HAL_FLASH_Program>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <modFlashWriteNewAppData+0xdc>
			return HAL_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e01b      	b.n	800dadc <modFlashWriteNewAppData+0x114>
		}
		FLASH_WaitForLastOperation(10);
 800daa4:	200a      	movs	r0, #10
 800daa6:	f7f6 fde7 	bl	8004678 <FLASH_WaitForLastOperation>
		addr++;
 800daaa:	4b0f      	ldr	r3, [pc, #60]	; (800dae8 <modFlashWriteNewAppData+0x120>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3308      	adds	r3, #8
 800dab0:	4a0d      	ldr	r2, [pc, #52]	; (800dae8 <modFlashWriteNewAppData+0x120>)
 800dab2:	6013      	str	r3, [r2, #0]
		written += 8;
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <modFlashWriteNewAppData+0x128>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3308      	adds	r3, #8
 800daba:	4a0d      	ldr	r2, [pc, #52]	; (800daf0 <modFlashWriteNewAppData+0x128>)
 800dabc:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < len; i += 8) {
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	3308      	adds	r3, #8
 800dac2:	627b      	str	r3, [r7, #36]	; 0x24
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d8ad      	bhi.n	800da28 <modFlashWriteNewAppData+0x60>
	}

	//CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
	HAL_FLASH_Lock();
 800dacc:	f7f6 fdba 	bl	8004644 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 800dad0:	2064      	movs	r0, #100	; 0x64
 800dad2:	f7f6 fdd1 	bl	8004678 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 800dad6:	f7f6 fd93 	bl	8004600 <HAL_FLASH_Unlock>

	return HAL_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	372c      	adds	r7, #44	; 0x2c
 800dae0:	46bd      	mov	sp, r7
 800dae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae6:	bf00      	nop
 800dae8:	20003400 	.word	0x20003400
 800daec:	0803d800 	.word	0x0803d800
 800daf0:	20000abc 	.word	0x20000abc
 800daf4:	40022000 	.word	0x40022000

0800daf8 <modFlashJumpToBootloader>:

uint16_t modFlashCopyNewAppToMainApp(uint32_t offset, uint8_t *data, uint32_t len) {

}

void modFlashJumpToBootloader(void) {
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
	typedef void (*pFunction)(void);

	__HAL_RCC_USART2_FORCE_RESET();
 800dafe:	4b20      	ldr	r3, [pc, #128]	; (800db80 <modFlashJumpToBootloader+0x88>)
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	4a1f      	ldr	r2, [pc, #124]	; (800db80 <modFlashJumpToBootloader+0x88>)
 800db04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db08:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_Delay(5);
 800db0a:	2005      	movs	r0, #5
 800db0c:	f7f3 fb16 	bl	800113c <HAL_Delay>
	__HAL_RCC_USART2_RELEASE_RESET();
 800db10:	4b1b      	ldr	r3, [pc, #108]	; (800db80 <modFlashJumpToBootloader+0x88>)
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	4a1a      	ldr	r2, [pc, #104]	; (800db80 <modFlashJumpToBootloader+0x88>)
 800db16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800db1a:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_Delay(5);
 800db1c:	2005      	movs	r0, #5
 800db1e:	f7f3 fb0d 	bl	800113c <HAL_Delay>

	HAL_RCC_DeInit();
 800db22:	f7fa fa5f 	bl	8007fe4 <HAL_RCC_DeInit>

	pFunction jump_to_bootloader;

	// Variable that will be loaded with the start address of the application
	volatile uint32_t* jump_address;
	const volatile uint32_t* bootloader_address = (volatile uint32_t*)BOOT_BASE;
 800db26:	4b17      	ldr	r3, [pc, #92]	; (800db84 <modFlashJumpToBootloader+0x8c>)
 800db28:	613b      	str	r3, [r7, #16]

	// Get jump address from application vector table
	jump_address = (volatile uint32_t*) bootloader_address[1];
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3304      	adds	r3, #4
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60fb      	str	r3, [r7, #12]

	// Load this address into function pointer
	jump_to_bootloader = (pFunction) jump_address;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	60bb      	str	r3, [r7, #8]

	// Clear pending interrupts
	SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <modFlashJumpToBootloader+0x90>)
 800db38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800db3c:	605a      	str	r2, [r3, #4]

	// Disable all interrupts
	for(int i = 0;i < 8;i++) {
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]
 800db42:	e00c      	b.n	800db5e <modFlashJumpToBootloader+0x66>
		NVIC->ICER[i] = NVIC->IABR[i];
 800db44:	4a11      	ldr	r2, [pc, #68]	; (800db8c <modFlashJumpToBootloader+0x94>)
 800db46:	4911      	ldr	r1, [pc, #68]	; (800db8c <modFlashJumpToBootloader+0x94>)
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	3380      	adds	r3, #128	; 0x80
 800db4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	3320      	adds	r3, #32
 800db54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0;i < 8;i++) {
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	3301      	adds	r3, #1
 800db5c:	617b      	str	r3, [r7, #20]
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	2b07      	cmp	r3, #7
 800db62:	ddef      	ble.n	800db44 <modFlashJumpToBootloader+0x4c>
	}

	// Set stack pointer
	__set_MSP((uint32_t) (bootloader_address[0]));
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f383 8808 	msr	MSP, r3
}
 800db70:	bf00      	nop

	// Jump to the bootloader
	jump_to_bootloader();
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	4798      	blx	r3
}
 800db76:	bf00      	nop
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	40021000 	.word	0x40021000
 800db84:	0807c000 	.word	0x0807c000
 800db88:	e000ed00 	.word	0xe000ed00
 800db8c:	e000e100 	.word	0xe000e100

0800db90 <modEffectTask>:

bool effectBlinkState = false;
uint32_t effectBlinkLastTick;
uint32_t effectLastLimitTick;

void modEffectTask(){
 800db90:	b580      	push	{r7, lr}
 800db92:	af00      	add	r7, sp, #0
	if(modDelayTick1ms(&effectBlinkLastTick,500)){
 800db94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800db98:	483a      	ldr	r0, [pc, #232]	; (800dc84 <modEffectTask+0xf4>)
 800db9a:	f7ff fd67 	bl	800d66c <modDelayTick1ms>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00e      	beq.n	800dbc2 <modEffectTask+0x32>
		effectBlinkState = !effectBlinkState;
 800dba4:	4b38      	ldr	r3, [pc, #224]	; (800dc88 <modEffectTask+0xf8>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	bf14      	ite	ne
 800dbac:	2301      	movne	r3, #1
 800dbae:	2300      	moveq	r3, #0
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f083 0301 	eor.w	r3, r3, #1
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	4b32      	ldr	r3, [pc, #200]	; (800dc88 <modEffectTask+0xf8>)
 800dbc0:	701a      	strb	r2, [r3, #0]
	}

	if(modDelayTick1ms(&effectLastTick, 5)){
 800dbc2:	2105      	movs	r1, #5
 800dbc4:	4831      	ldr	r0, [pc, #196]	; (800dc8c <modEffectTask+0xfc>)
 800dbc6:	f7ff fd51 	bl	800d66c <modDelayTick1ms>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d056      	beq.n	800dc7e <modEffectTask+0xee>

		if(phase.fault != Converter_OK){
 800dbd0:	4b2f      	ldr	r3, [pc, #188]	; (800dc90 <modEffectTask+0x100>)
 800dbd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d015      	beq.n	800dc06 <modEffectTask+0x76>
			LED0_GPIO_Port->BRR = LED0_Pin;
 800dbda:	4b2e      	ldr	r3, [pc, #184]	; (800dc94 <modEffectTask+0x104>)
 800dbdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dbe0:	629a      	str	r2, [r3, #40]	; 0x28
			LED2_GPIO_Port->BRR = LED2_Pin;
 800dbe2:	4b2c      	ldr	r3, [pc, #176]	; (800dc94 <modEffectTask+0x104>)
 800dbe4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dbe8:	629a      	str	r2, [r3, #40]	; 0x28

			if(effectBlinkState){
 800dbea:	4b27      	ldr	r3, [pc, #156]	; (800dc88 <modEffectTask+0xf8>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <modEffectTask+0x6c>
				LED1_GPIO_Port->BSRR = LED1_Pin;
 800dbf2:	4b28      	ldr	r3, [pc, #160]	; (800dc94 <modEffectTask+0x104>)
 800dbf4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dbf8:	619a      	str	r2, [r3, #24]
					break;

			}
		}
	}
}
 800dbfa:	e041      	b.n	800dc80 <modEffectTask+0xf0>
				LED1_GPIO_Port->BRR = LED1_Pin;
 800dbfc:	4b25      	ldr	r3, [pc, #148]	; (800dc94 <modEffectTask+0x104>)
 800dbfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dc02:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dc04:	e03c      	b.n	800dc80 <modEffectTask+0xf0>
			if(phase.mode != PhaseMode_CIV){
 800dc06:	4b22      	ldr	r3, [pc, #136]	; (800dc90 <modEffectTask+0x100>)
 800dc08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d009      	beq.n	800dc24 <modEffectTask+0x94>
				LED1_GPIO_Port->BSRR = LED1_Pin;
 800dc10:	4b20      	ldr	r3, [pc, #128]	; (800dc94 <modEffectTask+0x104>)
 800dc12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dc16:	619a      	str	r2, [r3, #24]
				effectLastLimitTick = HAL_GetTick();
 800dc18:	f7f3 fa84 	bl	8001124 <HAL_GetTick>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	4a1e      	ldr	r2, [pc, #120]	; (800dc98 <modEffectTask+0x108>)
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	e00b      	b.n	800dc3c <modEffectTask+0xac>
				if(modDelayTick1ms(&effectLastLimitTick, 500)){
 800dc24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800dc28:	481b      	ldr	r0, [pc, #108]	; (800dc98 <modEffectTask+0x108>)
 800dc2a:	f7ff fd1f 	bl	800d66c <modDelayTick1ms>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d003      	beq.n	800dc3c <modEffectTask+0xac>
					LED1_GPIO_Port->BRR = LED1_Pin;
 800dc34:	4b17      	ldr	r3, [pc, #92]	; (800dc94 <modEffectTask+0x104>)
 800dc36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dc3a:	629a      	str	r2, [r3, #40]	; 0x28
			switch(MpptLastAckion){
 800dc3c:	4b17      	ldr	r3, [pc, #92]	; (800dc9c <modEffectTask+0x10c>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d00a      	beq.n	800dc5a <modEffectTask+0xca>
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d011      	beq.n	800dc6c <modEffectTask+0xdc>
					LED0_GPIO_Port->BRR = LED0_Pin;
 800dc48:	4b12      	ldr	r3, [pc, #72]	; (800dc94 <modEffectTask+0x104>)
 800dc4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dc4e:	629a      	str	r2, [r3, #40]	; 0x28
					LED2_GPIO_Port->BRR = LED2_Pin;
 800dc50:	4b10      	ldr	r3, [pc, #64]	; (800dc94 <modEffectTask+0x104>)
 800dc52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dc56:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800dc58:	e012      	b.n	800dc80 <modEffectTask+0xf0>
					LED0_GPIO_Port->BSRR = LED0_Pin;
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	; (800dc94 <modEffectTask+0x104>)
 800dc5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dc60:	619a      	str	r2, [r3, #24]
					LED2_GPIO_Port->BRR = LED2_Pin;
 800dc62:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <modEffectTask+0x104>)
 800dc64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dc68:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 800dc6a:	e009      	b.n	800dc80 <modEffectTask+0xf0>
					LED0_GPIO_Port->BRR = LED0_Pin;
 800dc6c:	4b09      	ldr	r3, [pc, #36]	; (800dc94 <modEffectTask+0x104>)
 800dc6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800dc72:	629a      	str	r2, [r3, #40]	; 0x28
					LED2_GPIO_Port->BSRR = LED2_Pin;
 800dc74:	4b07      	ldr	r3, [pc, #28]	; (800dc94 <modEffectTask+0x104>)
 800dc76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dc7a:	619a      	str	r2, [r3, #24]
					break;
 800dc7c:	e000      	b.n	800dc80 <modEffectTask+0xf0>
		}
 800dc7e:	bf00      	nop
}
 800dc80:	bf00      	nop
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	20003408 	.word	0x20003408
 800dc88:	20000ac4 	.word	0x20000ac4
 800dc8c:	20000ac0 	.word	0x20000ac0
 800dc90:	20001ee8 	.word	0x20001ee8
 800dc94:	48000800 	.word	0x48000800
 800dc98:	20003404 	.word	0x20003404
 800dc9c:	20002038 	.word	0x20002038

0800dca0 <main_init_after_config>:

extern ConverterPhase_t phase;
modConfig_t *acktiveConfig;

//(Re)Initialize all parts that require initialization based on configuration memory.
void main_init_after_config() {
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
	modCANinit(&acktiveConfig->cansettings);
 800dca4:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <main_init_after_config+0x38>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fc fe87 	bl	800a9c0 <modCANinit>
	control_init(&acktiveConfig->settings, &acktiveConfig->calData);
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <main_init_after_config+0x38>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800dcba:	4a07      	ldr	r2, [pc, #28]	; (800dcd8 <main_init_after_config+0x38>)
 800dcbc:	6812      	ldr	r2, [r2, #0]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe fcfb 	bl	800c6bc <control_init>
	modMPPTinit(&acktiveConfig->mpptsettings);
 800dcc6:	4b04      	ldr	r3, [pc, #16]	; (800dcd8 <main_init_after_config+0x38>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f000 f95e 	bl	800df90 <modMPPTinit>
}
 800dcd4:	bf00      	nop
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	2000349c 	.word	0x2000349c

0800dcdc <main>:

int main(void) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800dce2:	4b32      	ldr	r3, [pc, #200]	; (800ddac <main+0xd0>)
 800dce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dce6:	4a31      	ldr	r2, [pc, #196]	; (800ddac <main+0xd0>)
 800dce8:	f043 0304 	orr.w	r3, r3, #4
 800dcec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcee:	4b2f      	ldr	r3, [pc, #188]	; (800ddac <main+0xd0>)
 800dcf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcf2:	f003 0304 	and.w	r3, r3, #4
 800dcf6:	617b      	str	r3, [r7, #20]
 800dcf8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800dcfa:	4b2c      	ldr	r3, [pc, #176]	; (800ddac <main+0xd0>)
 800dcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcfe:	4a2b      	ldr	r2, [pc, #172]	; (800ddac <main+0xd0>)
 800dd00:	f043 0320 	orr.w	r3, r3, #32
 800dd04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd06:	4b29      	ldr	r3, [pc, #164]	; (800ddac <main+0xd0>)
 800dd08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd0a:	f003 0320 	and.w	r3, r3, #32
 800dd0e:	613b      	str	r3, [r7, #16]
 800dd10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800dd12:	4b26      	ldr	r3, [pc, #152]	; (800ddac <main+0xd0>)
 800dd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd16:	4a25      	ldr	r2, [pc, #148]	; (800ddac <main+0xd0>)
 800dd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd1e:	4b23      	ldr	r3, [pc, #140]	; (800ddac <main+0xd0>)
 800dd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800dd2a:	4b20      	ldr	r3, [pc, #128]	; (800ddac <main+0xd0>)
 800dd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd2e:	4a1f      	ldr	r2, [pc, #124]	; (800ddac <main+0xd0>)
 800dd30:	f043 0301 	orr.w	r3, r3, #1
 800dd34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd36:	4b1d      	ldr	r3, [pc, #116]	; (800ddac <main+0xd0>)
 800dd38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd3a:	f003 0301 	and.w	r3, r3, #1
 800dd3e:	60bb      	str	r3, [r7, #8]
 800dd40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dd42:	4b1a      	ldr	r3, [pc, #104]	; (800ddac <main+0xd0>)
 800dd44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd46:	4a19      	ldr	r2, [pc, #100]	; (800ddac <main+0xd0>)
 800dd48:	f043 0302 	orr.w	r3, r3, #2
 800dd4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dd4e:	4b17      	ldr	r3, [pc, #92]	; (800ddac <main+0xd0>)
 800dd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd52:	f003 0302 	and.w	r3, r3, #2
 800dd56:	607b      	str	r3, [r7, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]

	DBGMCU->APB2FZ |= DBGMCU_APB2FZ_DBG_HRTIM1_STOP;
 800dd5a:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <main+0xd4>)
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	4a14      	ldr	r2, [pc, #80]	; (800ddb0 <main+0xd4>)
 800dd60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd64:	6113      	str	r3, [r2, #16]
	HRTIM1->sCommonRegs.OENR = 0;
 800dd66:	4b13      	ldr	r3, [pc, #76]	; (800ddb4 <main+0xd8>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

	HAL_Init();
 800dd6e:	f7f3 f975 	bl	800105c <HAL_Init>

	system_clock_config();
 800dd72:	f000 f823 	bl	800ddbc <system_clock_config>
	dma_init();
 800dd76:	f7ff fc93 	bl	800d6a0 <dma_init>




	hw_io_init();
 800dd7a:	f001 ffeb 	bl	800fd54 <hw_io_init>

	acktiveConfig = modConfigInit();
 800dd7e:	f7fe fc0b 	bl	800c598 <modConfigInit>
 800dd82:	4603      	mov	r3, r0
 800dd84:	4a0c      	ldr	r2, [pc, #48]	; (800ddb8 <main+0xdc>)
 800dd86:	6013      	str	r3, [r2, #0]

	modUARTInit();
 800dd88:	f001 fe72 	bl	800fa70 <modUARTInit>
	modTestingInit();
 800dd8c:	f001 fdee 	bl	800f96c <modTestingInit>
	main_init_after_config();
 800dd90:	f7ff ff86 	bl	800dca0 <main_init_after_config>


	while (1) {
		modEffectTask();
 800dd94:	f7ff fefc 	bl	800db90 <modEffectTask>
		modMPPTtask();
 800dd98:	f000 f914 	bl	800dfc4 <modMPPTtask>
		modCANtask();
 800dd9c:	f7fd f866 	bl	800ae6c <modCANtask>

#ifdef HW_HAS_UART
		modUARTTask();
 800dda0:	f001 fee8 	bl	800fb74 <modUARTTask>
#endif

		modTestingTask();
 800dda4:	f001 fe22 	bl	800f9ec <modTestingTask>
		modEffectTask();
 800dda8:	e7f4      	b.n	800dd94 <main+0xb8>
 800ddaa:	bf00      	nop
 800ddac:	40021000 	.word	0x40021000
 800ddb0:	e0042000 	.word	0xe0042000
 800ddb4:	40016800 	.word	0x40016800
 800ddb8:	2000349c 	.word	0x2000349c

0800ddbc <system_clock_config>:
	}
}

void system_clock_config(void) {
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b0a8      	sub	sp, #160	; 0xa0
 800ddc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800ddc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ddc6:	2238      	movs	r2, #56	; 0x38
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f002 f956 	bl	801007c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800ddd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	609a      	str	r2, [r3, #8]
 800dddc:	60da      	str	r2, [r3, #12]
 800ddde:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800dde0:	463b      	mov	r3, r7
 800dde2:	2254      	movs	r2, #84	; 0x54
 800dde4:	2100      	movs	r1, #0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f002 f948 	bl	801007c <memset>

	// configure the main internal regulator output voltage
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800ddec:	2000      	movs	r0, #0
 800ddee:	f7fa f845 	bl	8007e7c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ddf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ddfa:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800de02:	2303      	movs	r3, #3
 800de04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800de08:	2304      	movs	r3, #4
 800de0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800de0e:	2355      	movs	r3, #85	; 0x55
 800de10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800de14:	2302      	movs	r3, #2
 800de16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800de1a:	2302      	movs	r3, #2
 800de1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800de20:	2302      	movs	r3, #2
 800de22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800de26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fa f95c 	bl	80080e8 <HAL_RCC_OscConfig>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <system_clock_config+0x7e>
		Error_Handler();
 800de36:	f000 f879 	bl	800df2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800de3a:	230f      	movs	r3, #15
 800de3c:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800de3e:	2303      	movs	r3, #3
 800de40:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800de42:	2300      	movs	r3, #0
 800de44:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800de46:	2300      	movs	r3, #0
 800de48:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800de4a:	2300      	movs	r3, #0
 800de4c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800de4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800de52:	2104      	movs	r1, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7fa fc5f 	bl	8008718 <HAL_RCC_ClockConfig>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <system_clock_config+0xa8>
		Error_Handler();
 800de60:	f000 f864 	bl	800df2c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 800de64:	4b0c      	ldr	r3, [pc, #48]	; (800de98 <system_clock_config+0xdc>)
 800de66:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_ADC345 | RCC_PERIPHCLK_FDCAN;
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800de68:	2300      	movs	r3, #0
 800de6a:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800de6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de70:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800de72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800de76:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800de78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de7c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800de7e:	463b      	mov	r3, r7
 800de80:	4618      	mov	r0, r3
 800de82:	f7fa fe61 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <system_clock_config+0xd4>
		Error_Handler();
 800de8c:	f000 f84e 	bl	800df2c <Error_Handler>
	}
}
 800de90:	bf00      	nop
 800de92:	37a0      	adds	r7, #160	; 0xa0
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	00019004 	.word	0x00019004

0800de9c <HAL_MspInit>:

void HAL_MspInit(void) {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800dea2:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <HAL_MspInit+0x78>)
 800dea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dea6:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <HAL_MspInit+0x78>)
 800dea8:	f043 0301 	orr.w	r3, r3, #1
 800deac:	6613      	str	r3, [r2, #96]	; 0x60
 800deae:	4b19      	ldr	r3, [pc, #100]	; (800df14 <HAL_MspInit+0x78>)
 800deb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	607b      	str	r3, [r7, #4]
 800deb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800deba:	4b16      	ldr	r3, [pc, #88]	; (800df14 <HAL_MspInit+0x78>)
 800debc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800debe:	4a15      	ldr	r2, [pc, #84]	; (800df14 <HAL_MspInit+0x78>)
 800dec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec4:	6593      	str	r3, [r2, #88]	; 0x58
 800dec6:	4b13      	ldr	r3, [pc, #76]	; (800df14 <HAL_MspInit+0x78>)
 800dec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	683b      	ldr	r3, [r7, #0]

	// System interrupt init
	// SVCall_IRQn interrupt configuration
	HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800ded2:	2200      	movs	r2, #0
 800ded4:	2102      	movs	r1, #2
 800ded6:	f06f 0004 	mvn.w	r0, #4
 800deda:	f7f5 f9b2 	bl	8003242 <HAL_NVIC_SetPriority>
	// DebugMonitor_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 800dede:	2200      	movs	r2, #0
 800dee0:	2102      	movs	r1, #2
 800dee2:	f06f 0003 	mvn.w	r0, #3
 800dee6:	f7f5 f9ac 	bl	8003242 <HAL_NVIC_SetPriority>
	// PendSV_IRQn interrupt configuration
	HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 800deea:	2200      	movs	r2, #0
 800deec:	2102      	movs	r1, #2
 800deee:	f06f 0001 	mvn.w	r0, #1
 800def2:	f7f5 f9a6 	bl	8003242 <HAL_NVIC_SetPriority>

	// Configure the internal voltage reference buffer voltage scale
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800def6:	2020      	movs	r0, #32
 800def8:	f7f3 f942 	bl	8001180 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

	// Enable the Internal Voltage Reference buffer
	HAL_SYSCFG_EnableVREFBUF();
 800defc:	f7f3 f968 	bl	80011d0 <HAL_SYSCFG_EnableVREFBUF>

	// Configure the internal voltage reference buffer high impedance mode
	HAL_SYSCFG_VREFBUF_HighImpedanceConfig(
 800df00:	2000      	movs	r0, #0
 800df02:	f7f3 f951 	bl	80011a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
	SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);

	// Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	HAL_PWREx_DisableUCPDDeadBattery();
 800df06:	f7fa f85d 	bl	8007fc4 <HAL_PWREx_DisableUCPDDeadBattery>
}
 800df0a:	bf00      	nop
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	40021000 	.word	0x40021000

0800df18 <main_halt_risky>:

bool main_halt_risky() {
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
	control_disable();
 800df1c:	f7ff f838 	bl	800cf90 <control_disable>
	HAL_Delay(100);
 800df20:	2064      	movs	r0, #100	; 0x64
 800df22:	f7f3 f90b 	bl	800113c <HAL_Delay>
	//OK
	return 0;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <Error_Handler>:

void Error_Handler(void) {
 800df2c:	b480      	push	{r7}
 800df2e:	af00      	add	r7, sp, #0
	while (1);
 800df30:	e7fe      	b.n	800df30 <Error_Handler+0x4>

0800df32 <NMI_Handler>:
}

void NMI_Handler(void) {
 800df32:	b480      	push	{r7}
 800df34:	af00      	add	r7, sp, #0

}
 800df36:	bf00      	nop
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <HardFault_Handler>:

void HardFault_Handler(void) {
 800df40:	b480      	push	{r7}
 800df42:	af00      	add	r7, sp, #0
	while (1) {
 800df44:	e7fe      	b.n	800df44 <HardFault_Handler+0x4>

0800df46 <MemManage_Handler>:

	}
}

void MemManage_Handler(void) {
 800df46:	b480      	push	{r7}
 800df48:	af00      	add	r7, sp, #0

	while (1) {
 800df4a:	e7fe      	b.n	800df4a <MemManage_Handler+0x4>

0800df4c <BusFault_Handler>:

	}
}

void BusFault_Handler(void) {
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0

	while (1) {
 800df50:	e7fe      	b.n	800df50 <BusFault_Handler+0x4>

0800df52 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void) {
 800df52:	b480      	push	{r7}
 800df54:	af00      	add	r7, sp, #0

	while (1) {
 800df56:	e7fe      	b.n	800df56 <UsageFault_Handler+0x4>

0800df58 <SVC_Handler>:

	}
}

void SVC_Handler(void) {
 800df58:	b480      	push	{r7}
 800df5a:	af00      	add	r7, sp, #0

}
 800df5c:	bf00      	nop
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 800df66:	b480      	push	{r7}
 800df68:	af00      	add	r7, sp, #0

}
 800df6a:	bf00      	nop
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <PendSV_Handler>:

void PendSV_Handler(void) {
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0

}
 800df78:	bf00      	nop
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <SysTick_Handler>:

void SysTick_Handler(void) {
 800df82:	b580      	push	{r7, lr}
 800df84:	af00      	add	r7, sp, #0

	HAL_IncTick();
 800df86:	f7f3 f8bb 	bl	8001100 <HAL_IncTick>

}
 800df8a:	bf00      	nop
 800df8c:	bd80      	pop	{r7, pc}
	...

0800df90 <modMPPTinit>:
//float min = 10.0f;
//int oscillationthreshold = 20;
//float maxgradient = 5.0f;
//float powerthreshold = 5.0f;

void modMPPTinit(modMPPTsettings_t *settings) {
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	modMpptsettings = settings;
 800df98:	4a07      	ldr	r2, [pc, #28]	; (800dfb8 <modMPPTinit+0x28>)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6013      	str	r3, [r2, #0]
	currentmode = MpptState_init;
 800df9e:	4b07      	ldr	r3, [pc, #28]	; (800dfbc <modMPPTinit+0x2c>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
	modConverterPWMOutputDisable();
 800dfa4:	f7ff f80e 	bl	800cfc4 <modConverterPWMOutputDisable>

	MpptLastAckion = MpptAcktionState_Init;
 800dfa8:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <modMPPTinit+0x30>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200034a8 	.word	0x200034a8
 800dfbc:	200034ac 	.word	0x200034ac
 800dfc0:	20002038 	.word	0x20002038

0800dfc4 <modMPPTtask>:


void modMPPTtask() {
 800dfc4:	b598      	push	{r3, r4, r7, lr}
 800dfc6:	af00      	add	r7, sp, #0
	if (modDelayTick1ms(&lastsweep, modMpptsettings->PO_Timestep)) {
 800dfc8:	4b3b      	ldr	r3, [pc, #236]	; (800e0b8 <modMPPTtask+0xf4>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	483a      	ldr	r0, [pc, #232]	; (800e0bc <modMPPTtask+0xf8>)
 800dfd2:	f7ff fb4b 	bl	800d66c <modDelayTick1ms>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d065      	beq.n	800e0a8 <modMPPTtask+0xe4>
		switch(currentmode){
 800dfdc:	4b38      	ldr	r3, [pc, #224]	; (800e0c0 <modMPPTtask+0xfc>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d863      	bhi.n	800e0ac <modMPPTtask+0xe8>
 800dfe4:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <modMPPTtask+0x28>)
 800dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfea:	bf00      	nop
 800dfec:	0800dffd 	.word	0x0800dffd
 800dff0:	0800e019 	.word	0x0800e019
 800dff4:	0800e01f 	.word	0x0800e01f
 800dff8:	0800e03b 	.word	0x0800e03b
		case MpptState_init:

			control_set_setpoint(control_get_regulated_voltage());
 800dffc:	f7ff faec 	bl	800d5d8 <control_get_regulated_voltage>
 800e000:	eef0 7a40 	vmov.f32	s15, s0
 800e004:	eeb0 0a67 	vmov.f32	s0, s15
 800e008:	f7ff faa0 	bl	800d54c <control_set_setpoint>
			currentmode = MpptState_PO;
 800e00c:	4b2c      	ldr	r3, [pc, #176]	; (800e0c0 <modMPPTtask+0xfc>)
 800e00e:	2201      	movs	r2, #1
 800e010:	701a      	strb	r2, [r3, #0]
			modConverterPWMOutputEnable();
 800e012:	f7fe fff3 	bl	800cffc <modConverterPWMOutputEnable>

			break;
 800e016:	e04c      	b.n	800e0b2 <modMPPTtask+0xee>
		case MpptState_PO:
			modMPPTPerturbAndObserve();
 800e018:	f000 f88e 	bl	800e138 <modMPPTPerturbAndObserve>
			//phase.Vsp = 10000;
			break;
 800e01c:	e049      	b.n	800e0b2 <modMPPTtask+0xee>
		case MpptState_SweepStart:
			mpptSweepIndex = 0;
 800e01e:	4b29      	ldr	r3, [pc, #164]	; (800e0c4 <modMPPTtask+0x100>)
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
			control_set_setpoint(mpptSweepSP);
 800e024:	4b28      	ldr	r3, [pc, #160]	; (800e0c8 <modMPPTtask+0x104>)
 800e026:	edd3 7a00 	vldr	s15, [r3]
 800e02a:	eeb0 0a67 	vmov.f32	s0, s15
 800e02e:	f7ff fa8d 	bl	800d54c <control_set_setpoint>
			currentmode = MpptState_Sweep;
 800e032:	4b23      	ldr	r3, [pc, #140]	; (800e0c0 <modMPPTtask+0xfc>)
 800e034:	2203      	movs	r2, #3
 800e036:	701a      	strb	r2, [r3, #0]
			break;
 800e038:	e03b      	b.n	800e0b2 <modMPPTtask+0xee>

		case MpptState_Sweep:
			mppt_is[mpptSweepIndex] = control_get_regulated_current();
 800e03a:	4b22      	ldr	r3, [pc, #136]	; (800e0c4 <modMPPTtask+0x100>)
 800e03c:	681c      	ldr	r4, [r3, #0]
 800e03e:	f7ff fad9 	bl	800d5f4 <control_get_regulated_current>
 800e042:	eef0 7a40 	vmov.f32	s15, s0
 800e046:	4a21      	ldr	r2, [pc, #132]	; (800e0cc <modMPPTtask+0x108>)
 800e048:	00a3      	lsls	r3, r4, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	edc3 7a00 	vstr	s15, [r3]
			mppt_vs[mpptSweepIndex] = control_get_regulated_voltage();
 800e050:	4b1c      	ldr	r3, [pc, #112]	; (800e0c4 <modMPPTtask+0x100>)
 800e052:	681c      	ldr	r4, [r3, #0]
 800e054:	f7ff fac0 	bl	800d5d8 <control_get_regulated_voltage>
 800e058:	eef0 7a40 	vmov.f32	s15, s0
 800e05c:	4a1c      	ldr	r2, [pc, #112]	; (800e0d0 <modMPPTtask+0x10c>)
 800e05e:	00a3      	lsls	r3, r4, #2
 800e060:	4413      	add	r3, r2
 800e062:	edc3 7a00 	vstr	s15, [r3]

			mpptSweepSP += mpptSweepStepsize;
 800e066:	4b18      	ldr	r3, [pc, #96]	; (800e0c8 <modMPPTtask+0x104>)
 800e068:	ed93 7a00 	vldr	s14, [r3]
 800e06c:	4b19      	ldr	r3, [pc, #100]	; (800e0d4 <modMPPTtask+0x110>)
 800e06e:	edd3 7a00 	vldr	s15, [r3]
 800e072:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e076:	4b14      	ldr	r3, [pc, #80]	; (800e0c8 <modMPPTtask+0x104>)
 800e078:	edc3 7a00 	vstr	s15, [r3]
			control_set_setpoint(mpptSweepSP);
 800e07c:	4b12      	ldr	r3, [pc, #72]	; (800e0c8 <modMPPTtask+0x104>)
 800e07e:	edd3 7a00 	vldr	s15, [r3]
 800e082:	eeb0 0a67 	vmov.f32	s0, s15
 800e086:	f7ff fa61 	bl	800d54c <control_set_setpoint>
			mpptSweepIndex++;
 800e08a:	4b0e      	ldr	r3, [pc, #56]	; (800e0c4 <modMPPTtask+0x100>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	3301      	adds	r3, #1
 800e090:	4a0c      	ldr	r2, [pc, #48]	; (800e0c4 <modMPPTtask+0x100>)
 800e092:	6013      	str	r3, [r2, #0]

			if(mpptSweepIndex >= MPPT_SWEEP_SIZE){
 800e094:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <modMPPTtask+0x100>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b7f      	cmp	r3, #127	; 0x7f
 800e09a:	dd09      	ble.n	800e0b0 <modMPPTtask+0xec>
				currentmode = MpptState_init;
 800e09c:	4b08      	ldr	r3, [pc, #32]	; (800e0c0 <modMPPTtask+0xfc>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
				modCommandsSendSweep();
 800e0a2:	f7fe fa2d 	bl	800c500 <modCommandsSendSweep>
			}

			break;
 800e0a6:	e003      	b.n	800e0b0 <modMPPTtask+0xec>
		case MpptState_ConstantVoltage:
		default:
			break;

		}
	}
 800e0a8:	bf00      	nop
 800e0aa:	e002      	b.n	800e0b2 <modMPPTtask+0xee>
			break;
 800e0ac:	bf00      	nop
 800e0ae:	e000      	b.n	800e0b2 <modMPPTtask+0xee>
			break;
 800e0b0:	bf00      	nop
}
 800e0b2:	bf00      	nop
 800e0b4:	bd98      	pop	{r3, r4, r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	200034a8 	.word	0x200034a8
 800e0bc:	200034a0 	.word	0x200034a0
 800e0c0:	200034ac 	.word	0x200034ac
 800e0c4:	20000ac8 	.word	0x20000ac8
 800e0c8:	200034b4 	.word	0x200034b4
 800e0cc:	20002344 	.word	0x20002344
 800e0d0:	20002040 	.word	0x20002040
 800e0d4:	20000048 	.word	0x20000048

0800e0d8 <randomf>:

float randomf(float min, float max){
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	ed87 0a01 	vstr	s0, [r7, #4]
 800e0e2:	edc7 0a00 	vstr	s1, [r7]
	float f = ((float)(rand()%(1<<12))) / ((float)(1<<12));
 800e0e6:	f002 fe4b 	bl	8010d80 <rand>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	425a      	negs	r2, r3
 800e0ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e0f2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800e0f6:	bf58      	it	pl
 800e0f8:	4253      	negpl	r3, r2
 800e0fa:	ee07 3a90 	vmov	s15, r3
 800e0fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e102:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800e134 <randomf+0x5c>
 800e106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e10a:	edc7 7a03 	vstr	s15, [r7, #12]
	return f*(max-min) + min;
 800e10e:	ed97 7a00 	vldr	s14, [r7]
 800e112:	edd7 7a01 	vldr	s15, [r7, #4]
 800e116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e11a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e11e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e122:	edd7 7a01 	vldr	s15, [r7, #4]
 800e126:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800e12a:	eeb0 0a67 	vmov.f32	s0, s15
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	45800000 	.word	0x45800000

0800e138 <modMPPTPerturbAndObserve>:

void modMPPTPerturbAndObserve(){
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08a      	sub	sp, #40	; 0x28
 800e13c:	af00      	add	r7, sp, #0
	float Vsp = control_get_setpoint();
 800e13e:	f7ff fa3d 	bl	800d5bc <control_get_setpoint>
 800e142:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	switch(modConverterGetMode()){
 800e146:	f7ff f9f5 	bl	800d534 <modConverterGetMode>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b05      	cmp	r3, #5
 800e14e:	d82d      	bhi.n	800e1ac <modMPPTPerturbAndObserve+0x74>
 800e150:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <modMPPTPerturbAndObserve+0x20>)
 800e152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e156:	bf00      	nop
 800e158:	0800e1ad 	.word	0x0800e1ad
 800e15c:	0800e18f 	.word	0x0800e18f
 800e160:	0800e171 	.word	0x0800e171
 800e164:	0800e367 	.word	0x0800e367
 800e168:	0800e367 	.word	0x0800e367
 800e16c:	0800e367 	.word	0x0800e367
	case PhaseMode_MinInputCurrent:
		Vsp -= modMpptsettings->PO_Stepsize;
 800e170:	4b7f      	ldr	r3, [pc, #508]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	edd3 7a00 	vldr	s15, [r3]
 800e178:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e17c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e180:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		control_set_setpoint(Vsp);
 800e184:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e188:	f7ff f9e0 	bl	800d54c <control_set_setpoint>
		return;
 800e18c:	e0ec      	b.n	800e368 <modMPPTPerturbAndObserve+0x230>
	case PhaseMode_CIC:
		Vsp += modMpptsettings->PO_Stepsize;
 800e18e:	4b78      	ldr	r3, [pc, #480]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	edd3 7a00 	vldr	s15, [r3]
 800e196:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e19e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		control_set_setpoint(Vsp);
 800e1a2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e1a6:	f7ff f9d1 	bl	800d54c <control_set_setpoint>
		return;
 800e1aa:	e0dd      	b.n	800e368 <modMPPTPerturbAndObserve+0x230>
	case PhaseMode_CIV:
		//Contineu to PO
		break;
	}

	float i = control_get_regulated_current();
 800e1ac:	f7ff fa22 	bl	800d5f4 <control_get_regulated_current>
 800e1b0:	ed87 0a06 	vstr	s0, [r7, #24]
	float v = control_get_regulated_voltage();
 800e1b4:	f7ff fa10 	bl	800d5d8 <control_get_regulated_voltage>
 800e1b8:	ed87 0a05 	vstr	s0, [r7, #20]
	float p = i*v;
 800e1bc:	ed97 7a06 	vldr	s14, [r7, #24]
 800e1c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c8:	edc7 7a04 	vstr	s15, [r7, #16]

	float dv = v - pv;
 800e1cc:	4b69      	ldr	r3, [pc, #420]	; (800e374 <modMPPTPerturbAndObserve+0x23c>)
 800e1ce:	edd3 7a00 	vldr	s15, [r3]
 800e1d2:	ed97 7a05 	vldr	s14, [r7, #20]
 800e1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1da:	edc7 7a03 	vstr	s15, [r7, #12]
	float dp = p - pp;
 800e1de:	4b66      	ldr	r3, [pc, #408]	; (800e378 <modMPPTPerturbAndObserve+0x240>)
 800e1e0:	edd3 7a00 	vldr	s15, [r3]
 800e1e4:	ed97 7a04 	vldr	s14, [r7, #16]
 800e1e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1ec:	edc7 7a02 	vstr	s15, [r7, #8]
	float jump = 0;
 800e1f0:	f04f 0300 	mov.w	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]

	float dpdv = 0;
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	623b      	str	r3, [r7, #32]
	if(dv != 0){
 800e1fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800e200:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e208:	d008      	beq.n	800e21c <modMPPTPerturbAndObserve+0xe4>
		dpdv = dp/dv;
 800e20a:	edd7 6a02 	vldr	s13, [r7, #8]
 800e20e:	ed97 7a03 	vldr	s14, [r7, #12]
 800e212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e216:	edc7 7a08 	vstr	s15, [r7, #32]
 800e21a:	e00d      	b.n	800e238 <modMPPTPerturbAndObserve+0x100>
	}
	else {
		//Stuck in some kind of limit
		Vsp -= modMpptsettings->PO_Stepsize;
 800e21c:	4b54      	ldr	r3, [pc, #336]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	edd3 7a00 	vldr	s15, [r3]
 800e224:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e22c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		control_set_setpoint(Vsp);
 800e230:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e234:	f7ff f98a 	bl	800d54c <control_set_setpoint>
	}

	//If the previous iteration was a random jump, check if the power did not decrease too much.
	if (justjumped){
 800e238:	4b50      	ldr	r3, [pc, #320]	; (800e37c <modMPPTPerturbAndObserve+0x244>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d015      	beq.n	800e26c <modMPPTPerturbAndObserve+0x134>
		justjumped = false;
 800e240:	4b4e      	ldr	r3, [pc, #312]	; (800e37c <modMPPTPerturbAndObserve+0x244>)
 800e242:	2200      	movs	r2, #0
 800e244:	701a      	strb	r2, [r3, #0]

		//Jump back if the power is not enough.
		if(p <  (pp - modMpptsettings->jump_PowerThreshold)){
 800e246:	4b4c      	ldr	r3, [pc, #304]	; (800e378 <modMPPTPerturbAndObserve+0x240>)
 800e248:	ed93 7a00 	vldr	s14, [r3]
 800e24c:	4b48      	ldr	r3, [pc, #288]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	edd3 7a05 	vldr	s15, [r3, #20]
 800e254:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e258:	ed97 7a04 	vldr	s14, [r7, #16]
 800e25c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e264:	d502      	bpl.n	800e26c <modMPPTPerturbAndObserve+0x134>
			Vsp = changedStepSize;
 800e266:	4b46      	ldr	r3, [pc, #280]	; (800e380 <modMPPTPerturbAndObserve+0x248>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	//Start P&O right away.
	//If oscillationthreshold is zero, do  not ever jump.
	if ((oscillationnumber > modMpptsettings->jump_Rate) && (modMpptsettings->jump_Rate != 0)){
 800e26c:	4b40      	ldr	r3, [pc, #256]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	4b44      	ldr	r3, [pc, #272]	; (800e384 <modMPPTPerturbAndObserve+0x24c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	429a      	cmp	r2, r3
 800e278:	da23      	bge.n	800e2c2 <modMPPTPerturbAndObserve+0x18a>
 800e27a:	4b3d      	ldr	r3, [pc, #244]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d01e      	beq.n	800e2c2 <modMPPTPerturbAndObserve+0x18a>
		changedStepSize  =  Vsp;
 800e284:	4a3e      	ldr	r2, [pc, #248]	; (800e380 <modMPPTPerturbAndObserve+0x248>)
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	6013      	str	r3, [r2, #0]
		//Deciding the jump points (THIS EQUATION is GENERALIZED)
		//jump = ((float)(rand()%((int)(0.7*(max-5))))) + ((max-5.0f)*0.3f);
		jump = randomf(modMpptsettings->jump_RangeMin, modMpptsettings->jump_RangeMax);
 800e28a:	4b39      	ldr	r3, [pc, #228]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	edd3 7a04 	vldr	s15, [r3, #16]
 800e292:	4b37      	ldr	r3, [pc, #220]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	ed93 7a03 	vldr	s14, [r3, #12]
 800e29a:	eef0 0a47 	vmov.f32	s1, s14
 800e29e:	eeb0 0a67 	vmov.f32	s0, s15
 800e2a2:	f7ff ff19 	bl	800e0d8 <randomf>
 800e2a6:	ed87 0a01 	vstr	s0, [r7, #4]

		//save the current positon, so we can jump back afterwards.
		changedStepSize  =  Vsp;
 800e2aa:	4a35      	ldr	r2, [pc, #212]	; (800e380 <modMPPTPerturbAndObserve+0x248>)
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	6013      	str	r3, [r2, #0]

		//Vsp = jump*1000.0f;
		Vsp = jump;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	627b      	str	r3, [r7, #36]	; 0x24

		oscillationnumber = 0;
 800e2b4:	4b33      	ldr	r3, [pc, #204]	; (800e384 <modMPPTPerturbAndObserve+0x24c>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	601a      	str	r2, [r3, #0]
		justjumped = true;
 800e2ba:	4b30      	ldr	r3, [pc, #192]	; (800e37c <modMPPTPerturbAndObserve+0x244>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	e041      	b.n	800e346 <modMPPTPerturbAndObserve+0x20e>
	}
	else {
		float stepsize;
		if(modMpptsettings->PO_maxgradient > 0.0f){
 800e2c2:	4b2b      	ldr	r3, [pc, #172]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	edd3 7a02 	vldr	s15, [r3, #8]
 800e2ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d2:	dd16      	ble.n	800e302 <modMPPTPerturbAndObserve+0x1ca>
			stepsize = modMpptsettings->PO_Stepsize * (1.0f+fabsf(dpdv/modMpptsettings->PO_maxgradient));
 800e2d4:	4b26      	ldr	r3, [pc, #152]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	ed93 7a00 	vldr	s14, [r3]
 800e2dc:	4b24      	ldr	r3, [pc, #144]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	edd3 6a02 	vldr	s13, [r3, #8]
 800e2e4:	ed97 6a08 	vldr	s12, [r7, #32]
 800e2e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e2ec:	eef0 7ae7 	vabs.f32	s15, s15
 800e2f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2fc:	edc7 7a07 	vstr	s15, [r7, #28]
 800e300:	e003      	b.n	800e30a <modMPPTPerturbAndObserve+0x1d2>
		}else{
			stepsize = modMpptsettings->PO_Stepsize;
 800e302:	4b1b      	ldr	r3, [pc, #108]	; (800e370 <modMPPTPerturbAndObserve+0x238>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	61fb      	str	r3, [r7, #28]
		}

		if(dpdv > 0){
 800e30a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e30e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e316:	dd0b      	ble.n	800e330 <modMPPTPerturbAndObserve+0x1f8>
			MpptLastAckion = MpptAcktionState_Up;
 800e318:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <modMPPTPerturbAndObserve+0x250>)
 800e31a:	2201      	movs	r2, #1
 800e31c:	701a      	strb	r2, [r3, #0]
			Vsp += stepsize;
 800e31e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e322:	edd7 7a07 	vldr	s15, [r7, #28]
 800e326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e32a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800e32e:	e00a      	b.n	800e346 <modMPPTPerturbAndObserve+0x20e>
		}else{
			MpptLastAckion = MpptAcktionState_down;
 800e330:	4b15      	ldr	r3, [pc, #84]	; (800e388 <modMPPTPerturbAndObserve+0x250>)
 800e332:	2202      	movs	r2, #2
 800e334:	701a      	strb	r2, [r3, #0]
			Vsp -= stepsize;
 800e336:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e33a:	edd7 7a07 	vldr	s15, [r7, #28]
 800e33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e342:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}

	}

	pv = v;
 800e346:	4a0b      	ldr	r2, [pc, #44]	; (800e374 <modMPPTPerturbAndObserve+0x23c>)
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	6013      	str	r3, [r2, #0]
	pp=p;
 800e34c:	4a0a      	ldr	r2, [pc, #40]	; (800e378 <modMPPTPerturbAndObserve+0x240>)
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	6013      	str	r3, [r2, #0]

	oscillationnumber ++;
 800e352:	4b0c      	ldr	r3, [pc, #48]	; (800e384 <modMPPTPerturbAndObserve+0x24c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3301      	adds	r3, #1
 800e358:	4a0a      	ldr	r2, [pc, #40]	; (800e384 <modMPPTPerturbAndObserve+0x24c>)
 800e35a:	6013      	str	r3, [r2, #0]
	control_set_setpoint(Vsp);
 800e35c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800e360:	f7ff f8f4 	bl	800d54c <control_set_setpoint>
 800e364:	e000      	b.n	800e368 <modMPPTPerturbAndObserve+0x230>
		return;
 800e366:	bf00      	nop
}
 800e368:	3728      	adds	r7, #40	; 0x28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	200034a8 	.word	0x200034a8
 800e374:	200034b8 	.word	0x200034b8
 800e378:	200034a4 	.word	0x200034a4
 800e37c:	20000ad4 	.word	0x20000ad4
 800e380:	20000ad0 	.word	0x20000ad0
 800e384:	20000acc 	.word	0x20000acc
 800e388:	20002038 	.word	0x20002038

0800e38c <modMpptStartSweep>:



void modMpptStartSweep(float start, float end){
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	ed87 0a01 	vstr	s0, [r7, #4]
 800e396:	edc7 0a00 	vstr	s1, [r7]
	mpptSweepStepsize = (end-start)/(MPPT_SWEEP_SIZE-1);
 800e39a:	ed97 7a00 	vldr	s14, [r7]
 800e39e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e3a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3a6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800e3d4 <modMpptStartSweep+0x48>
 800e3aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3ae:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <modMpptStartSweep+0x4c>)
 800e3b0:	edc3 7a00 	vstr	s15, [r3]
	mpptSweepSP = start;
 800e3b4:	4a09      	ldr	r2, [pc, #36]	; (800e3dc <modMpptStartSweep+0x50>)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6013      	str	r3, [r2, #0]
	currentmode = MpptState_SweepStart;
 800e3ba:	4b09      	ldr	r3, [pc, #36]	; (800e3e0 <modMpptStartSweep+0x54>)
 800e3bc:	2202      	movs	r2, #2
 800e3be:	701a      	strb	r2, [r3, #0]
	MpptLastAckion = MpptAcktionState_Init;
 800e3c0:	4b08      	ldr	r3, [pc, #32]	; (800e3e4 <modMpptStartSweep+0x58>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	701a      	strb	r2, [r3, #0]
}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	42fe0000 	.word	0x42fe0000
 800e3d8:	20000048 	.word	0x20000048
 800e3dc:	200034b4 	.word	0x200034b4
 800e3e0:	200034ac 	.word	0x200034ac
 800e3e4:	20002038 	.word	0x20002038

0800e3e8 <modMpptSetMode>:

void modMpptSetMode(modMPPTmode_t mode){
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d103      	bne.n	800e400 <modMpptSetMode+0x18>
	case MpptMode_ConstantVoltage:
		currentmode = MpptState_ConstantVoltage;
 800e3f8:	4b06      	ldr	r3, [pc, #24]	; (800e414 <modMpptSetMode+0x2c>)
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	701a      	strb	r2, [r3, #0]
		break;
 800e3fe:	e003      	b.n	800e408 <modMpptSetMode+0x20>
	default:
	case MpptMode_PO:
		currentmode = MpptState_init;
 800e400:	4b04      	ldr	r3, [pc, #16]	; (800e414 <modMpptSetMode+0x2c>)
 800e402:	2200      	movs	r2, #0
 800e404:	701a      	strb	r2, [r3, #0]
		break;
 800e406:	bf00      	nop
	}
}
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	200034ac 	.word	0x200034ac

0800e418 <libPacketInit>:
} PACKET_STATE_t;

static PACKET_STATE_t libPacketHandlerStates[PACKET_HANDLERS];

void libPacketInit(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
	libPacketHandlerStates[handler_num].send_func = s_func;
 800e424:	490c      	ldr	r1, [pc, #48]	; (800e458 <libPacketInit+0x40>)
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	4613      	mov	r3, r2
 800e42a:	019b      	lsls	r3, r3, #6
 800e42c:	4413      	add	r3, r2
 800e42e:	015b      	lsls	r3, r3, #5
 800e430:	440b      	add	r3, r1
 800e432:	3304      	adds	r3, #4
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	601a      	str	r2, [r3, #0]
	libPacketHandlerStates[handler_num].process_func = p_func;
 800e438:	4907      	ldr	r1, [pc, #28]	; (800e458 <libPacketInit+0x40>)
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4613      	mov	r3, r2
 800e43e:	019b      	lsls	r3, r3, #6
 800e440:	4413      	add	r3, r2
 800e442:	015b      	lsls	r3, r3, #5
 800e444:	440b      	add	r3, r1
 800e446:	3308      	adds	r3, #8
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	601a      	str	r2, [r3, #0]
}
 800e44c:	bf00      	nop
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr
 800e458:	20000ad8 	.word	0x20000ad8

0800e45c <libPacketSendPacket>:

void libPacketSendPacket(unsigned char *data, unsigned int len, int handler_num) {
 800e45c:	b590      	push	{r4, r7, lr}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
	if (len > PACKET_MAX_PL_LEN) {
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e46e:	f200 80c8 	bhi.w	800e602 <libPacketSendPacket+0x1a6>
		return;
	}

	int b_ind = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	617b      	str	r3, [r7, #20]

	if (len <= 256) {
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e47c:	d820      	bhi.n	800e4c0 <libPacketSendPacket+0x64>
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 2;
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	1c53      	adds	r3, r2, #1
 800e482:	617b      	str	r3, [r7, #20]
 800e484:	4861      	ldr	r0, [pc, #388]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e486:	6879      	ldr	r1, [r7, #4]
 800e488:	460b      	mov	r3, r1
 800e48a:	019b      	lsls	r3, r3, #6
 800e48c:	440b      	add	r3, r1
 800e48e:	015b      	lsls	r3, r3, #5
 800e490:	4403      	add	r3, r0
 800e492:	4413      	add	r3, r2
 800e494:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e498:	2202      	movs	r2, #2
 800e49a:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len;
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	1c53      	adds	r3, r2, #1
 800e4a0:	617b      	str	r3, [r7, #20]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	b2dc      	uxtb	r4, r3
 800e4a6:	4859      	ldr	r0, [pc, #356]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	019b      	lsls	r3, r3, #6
 800e4ae:	440b      	add	r3, r1
 800e4b0:	015b      	lsls	r3, r3, #5
 800e4b2:	4403      	add	r3, r0
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	701a      	strb	r2, [r3, #0]
 800e4be:	e031      	b.n	800e524 <libPacketSendPacket+0xc8>
	} else {
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800e4c0:	697a      	ldr	r2, [r7, #20]
 800e4c2:	1c53      	adds	r3, r2, #1
 800e4c4:	617b      	str	r3, [r7, #20]
 800e4c6:	4851      	ldr	r0, [pc, #324]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e4c8:	6879      	ldr	r1, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	019b      	lsls	r3, r3, #6
 800e4ce:	440b      	add	r3, r1
 800e4d0:	015b      	lsls	r3, r3, #5
 800e4d2:	4403      	add	r3, r0
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e4da:	2203      	movs	r2, #3
 800e4dc:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	0a19      	lsrs	r1, r3, #8
 800e4e2:	697a      	ldr	r2, [r7, #20]
 800e4e4:	1c53      	adds	r3, r2, #1
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	b2cc      	uxtb	r4, r1
 800e4ea:	4848      	ldr	r0, [pc, #288]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	019b      	lsls	r3, r3, #6
 800e4f2:	440b      	add	r3, r1
 800e4f4:	015b      	lsls	r3, r3, #5
 800e4f6:	4403      	add	r3, r0
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e4fe:	4622      	mov	r2, r4
 800e500:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 800e502:	697a      	ldr	r2, [r7, #20]
 800e504:	1c53      	adds	r3, r2, #1
 800e506:	617b      	str	r3, [r7, #20]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	b2dc      	uxtb	r4, r3
 800e50c:	483f      	ldr	r0, [pc, #252]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	019b      	lsls	r3, r3, #6
 800e514:	440b      	add	r3, r1
 800e516:	015b      	lsls	r3, r3, #5
 800e518:	4403      	add	r3, r0
 800e51a:	4413      	add	r3, r2
 800e51c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e520:	4622      	mov	r2, r4
 800e522:	701a      	strb	r2, [r3, #0]
	}

	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	4613      	mov	r3, r2
 800e528:	019b      	lsls	r3, r3, #6
 800e52a:	4413      	add	r3, r2
 800e52c:	015b      	lsls	r3, r3, #5
 800e52e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e532:	4a36      	ldr	r2, [pc, #216]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e534:	441a      	add	r2, r3
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	4413      	add	r3, r2
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	68f9      	ldr	r1, [r7, #12]
 800e53e:	4618      	mov	r0, r3
 800e540:	f001 fd8e 	bl	8010060 <memcpy>
	b_ind += len;
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	4413      	add	r3, r2
 800e54a:	617b      	str	r3, [r7, #20]

	unsigned short crc = libCRCCalcCRC16(data, len);
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f7ff f85e 	bl	800d610 <libCRCCalcCRC16>
 800e554:	4603      	mov	r3, r0
 800e556:	827b      	strh	r3, [r7, #18]
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 800e558:	8a7b      	ldrh	r3, [r7, #18]
 800e55a:	0a1b      	lsrs	r3, r3, #8
 800e55c:	b299      	uxth	r1, r3
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	1c53      	adds	r3, r2, #1
 800e562:	617b      	str	r3, [r7, #20]
 800e564:	b2cc      	uxtb	r4, r1
 800e566:	4829      	ldr	r0, [pc, #164]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	019b      	lsls	r3, r3, #6
 800e56e:	440b      	add	r3, r1
 800e570:	015b      	lsls	r3, r3, #5
 800e572:	4403      	add	r3, r0
 800e574:	4413      	add	r3, r2
 800e576:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e57a:	4622      	mov	r2, r4
 800e57c:	701a      	strb	r2, [r3, #0]
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	1c53      	adds	r3, r2, #1
 800e582:	617b      	str	r3, [r7, #20]
 800e584:	8a7b      	ldrh	r3, [r7, #18]
 800e586:	b2dc      	uxtb	r4, r3
 800e588:	4820      	ldr	r0, [pc, #128]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	019b      	lsls	r3, r3, #6
 800e590:	440b      	add	r3, r1
 800e592:	015b      	lsls	r3, r3, #5
 800e594:	4403      	add	r3, r0
 800e596:	4413      	add	r3, r2
 800e598:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e59c:	4622      	mov	r2, r4
 800e59e:	701a      	strb	r2, [r3, #0]
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	1c53      	adds	r3, r2, #1
 800e5a4:	617b      	str	r3, [r7, #20]
 800e5a6:	4819      	ldr	r0, [pc, #100]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	019b      	lsls	r3, r3, #6
 800e5ae:	440b      	add	r3, r1
 800e5b0:	015b      	lsls	r3, r3, #5
 800e5b2:	4403      	add	r3, r0
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e5ba:	2203      	movs	r2, #3
 800e5bc:	701a      	strb	r2, [r3, #0]

	if (libPacketHandlerStates[handler_num].send_func) {
 800e5be:	4913      	ldr	r1, [pc, #76]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	019b      	lsls	r3, r3, #6
 800e5c6:	4413      	add	r3, r2
 800e5c8:	015b      	lsls	r3, r3, #5
 800e5ca:	440b      	add	r3, r1
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d017      	beq.n	800e604 <libPacketSendPacket+0x1a8>
		libPacketHandlerStates[handler_num].send_func(libPacketHandlerStates[handler_num].tx_buffer, b_ind);
 800e5d4:	490d      	ldr	r1, [pc, #52]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	019b      	lsls	r3, r3, #6
 800e5dc:	4413      	add	r3, r2
 800e5de:	015b      	lsls	r3, r3, #5
 800e5e0:	440b      	add	r3, r1
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	681c      	ldr	r4, [r3, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	019b      	lsls	r3, r3, #6
 800e5ec:	4413      	add	r3, r2
 800e5ee:	015b      	lsls	r3, r3, #5
 800e5f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e5f4:	4a05      	ldr	r2, [pc, #20]	; (800e60c <libPacketSendPacket+0x1b0>)
 800e5f6:	4413      	add	r3, r2
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	47a0      	blx	r4
 800e600:	e000      	b.n	800e604 <libPacketSendPacket+0x1a8>
		return;
 800e602:	bf00      	nop
	}
}
 800e604:	371c      	adds	r7, #28
 800e606:	46bd      	mov	sp, r7
 800e608:	bd90      	pop	{r4, r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20000ad8 	.word	0x20000ad8

0800e610 <libPacketProcessByte>:
			libPacketHandlerStates[i].rx_state = 0;
		}
	}
}

void libPacketProcessByte(uint8_t rx_data, int handler_num) {
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	6039      	str	r1, [r7, #0]
 800e61a:	71fb      	strb	r3, [r7, #7]
	switch (libPacketHandlerStates[handler_num].rx_state) {
 800e61c:	49b4      	ldr	r1, [pc, #720]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e61e:	683a      	ldr	r2, [r7, #0]
 800e620:	4613      	mov	r3, r2
 800e622:	019b      	lsls	r3, r3, #6
 800e624:	4413      	add	r3, r2
 800e626:	015b      	lsls	r3, r3, #5
 800e628:	440b      	add	r3, r1
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	2b06      	cmp	r3, #6
 800e630:	f200 8216 	bhi.w	800ea60 <libPacketProcessByte+0x450>
 800e634:	a201      	add	r2, pc, #4	; (adr r2, 800e63c <libPacketProcessByte+0x2c>)
 800e636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63a:	bf00      	nop
 800e63c:	0800e659 	.word	0x0800e659
 800e640:	0800e749 	.word	0x0800e749
 800e644:	0800e79d 	.word	0x0800e79d
 800e648:	0800e847 	.word	0x0800e847
 800e64c:	0800e8f5 	.word	0x0800e8f5
 800e650:	0800e949 	.word	0x0800e949
 800e654:	0800e99d 	.word	0x0800e99d
	case 0:
		if (rx_data == 2) {
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d133      	bne.n	800e6c6 <libPacketProcessByte+0xb6>
			// 1 byte PL len
			libPacketHandlerStates[handler_num].rx_state += 2;
 800e65e:	49a4      	ldr	r1, [pc, #656]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	4613      	mov	r3, r2
 800e664:	019b      	lsls	r3, r3, #6
 800e666:	4413      	add	r3, r2
 800e668:	015b      	lsls	r3, r3, #5
 800e66a:	440b      	add	r3, r1
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	3302      	adds	r3, #2
 800e672:	b2d8      	uxtb	r0, r3
 800e674:	499e      	ldr	r1, [pc, #632]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	4613      	mov	r3, r2
 800e67a:	019b      	lsls	r3, r3, #6
 800e67c:	4413      	add	r3, r2
 800e67e:	015b      	lsls	r3, r3, #5
 800e680:	440b      	add	r3, r1
 800e682:	4602      	mov	r2, r0
 800e684:	701a      	strb	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e686:	499a      	ldr	r1, [pc, #616]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	4613      	mov	r3, r2
 800e68c:	019b      	lsls	r3, r3, #6
 800e68e:	4413      	add	r3, r2
 800e690:	015b      	lsls	r3, r3, #5
 800e692:	440b      	add	r3, r1
 800e694:	3301      	adds	r3, #1
 800e696:	2202      	movs	r2, #2
 800e698:	701a      	strb	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
 800e69a:	4995      	ldr	r1, [pc, #596]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	4613      	mov	r3, r2
 800e6a0:	019b      	lsls	r3, r3, #6
 800e6a2:	4413      	add	r3, r2
 800e6a4:	015b      	lsls	r3, r3, #5
 800e6a6:	440b      	add	r3, r1
 800e6a8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]
			libPacketHandlerStates[handler_num].payload_length = 0;
 800e6b0:	498f      	ldr	r1, [pc, #572]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	019b      	lsls	r3, r3, #6
 800e6b8:	4413      	add	r3, r2
 800e6ba:	015b      	lsls	r3, r3, #5
 800e6bc:	440b      	add	r3, r1
 800e6be:	330c      	adds	r3, #12
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
			libPacketHandlerStates[handler_num].payload_length = 0;
		} else {
			libPacketHandlerStates[handler_num].rx_state = 0;
		}
		break;
 800e6c4:	e1d6      	b.n	800ea74 <libPacketProcessByte+0x464>
		} else if (rx_data == 3) {
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d133      	bne.n	800e734 <libPacketProcessByte+0x124>
			libPacketHandlerStates[handler_num].rx_state++;
 800e6cc:	4988      	ldr	r1, [pc, #544]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	019b      	lsls	r3, r3, #6
 800e6d4:	4413      	add	r3, r2
 800e6d6:	015b      	lsls	r3, r3, #5
 800e6d8:	440b      	add	r3, r1
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	3301      	adds	r3, #1
 800e6e0:	b2d8      	uxtb	r0, r3
 800e6e2:	4983      	ldr	r1, [pc, #524]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	019b      	lsls	r3, r3, #6
 800e6ea:	4413      	add	r3, r2
 800e6ec:	015b      	lsls	r3, r3, #5
 800e6ee:	440b      	add	r3, r1
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	701a      	strb	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e6f4:	497e      	ldr	r1, [pc, #504]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	019b      	lsls	r3, r3, #6
 800e6fc:	4413      	add	r3, r2
 800e6fe:	015b      	lsls	r3, r3, #5
 800e700:	440b      	add	r3, r1
 800e702:	3301      	adds	r3, #1
 800e704:	2202      	movs	r2, #2
 800e706:	701a      	strb	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
 800e708:	4979      	ldr	r1, [pc, #484]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	4613      	mov	r3, r2
 800e70e:	019b      	lsls	r3, r3, #6
 800e710:	4413      	add	r3, r2
 800e712:	015b      	lsls	r3, r3, #5
 800e714:	440b      	add	r3, r1
 800e716:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]
			libPacketHandlerStates[handler_num].payload_length = 0;
 800e71e:	4974      	ldr	r1, [pc, #464]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	4613      	mov	r3, r2
 800e724:	019b      	lsls	r3, r3, #6
 800e726:	4413      	add	r3, r2
 800e728:	015b      	lsls	r3, r3, #5
 800e72a:	440b      	add	r3, r1
 800e72c:	330c      	adds	r3, #12
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
		break;
 800e732:	e19f      	b.n	800ea74 <libPacketProcessByte+0x464>
			libPacketHandlerStates[handler_num].rx_state = 0;
 800e734:	496e      	ldr	r1, [pc, #440]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	4613      	mov	r3, r2
 800e73a:	019b      	lsls	r3, r3, #6
 800e73c:	4413      	add	r3, r2
 800e73e:	015b      	lsls	r3, r3, #5
 800e740:	440b      	add	r3, r1
 800e742:	2200      	movs	r2, #0
 800e744:	701a      	strb	r2, [r3, #0]
		break;
 800e746:	e195      	b.n	800ea74 <libPacketProcessByte+0x464>

	case 1:
		libPacketHandlerStates[handler_num].payload_length = (unsigned int)rx_data << 8;
 800e748:	79fb      	ldrb	r3, [r7, #7]
 800e74a:	0219      	lsls	r1, r3, #8
 800e74c:	4868      	ldr	r0, [pc, #416]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	4613      	mov	r3, r2
 800e752:	019b      	lsls	r3, r3, #6
 800e754:	4413      	add	r3, r2
 800e756:	015b      	lsls	r3, r3, #5
 800e758:	4403      	add	r3, r0
 800e75a:	330c      	adds	r3, #12
 800e75c:	6019      	str	r1, [r3, #0]
		libPacketHandlerStates[handler_num].rx_state++;
 800e75e:	4964      	ldr	r1, [pc, #400]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	4613      	mov	r3, r2
 800e764:	019b      	lsls	r3, r3, #6
 800e766:	4413      	add	r3, r2
 800e768:	015b      	lsls	r3, r3, #5
 800e76a:	440b      	add	r3, r1
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	3301      	adds	r3, #1
 800e772:	b2d8      	uxtb	r0, r3
 800e774:	495e      	ldr	r1, [pc, #376]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	019b      	lsls	r3, r3, #6
 800e77c:	4413      	add	r3, r2
 800e77e:	015b      	lsls	r3, r3, #5
 800e780:	440b      	add	r3, r1
 800e782:	4602      	mov	r2, r0
 800e784:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e786:	495a      	ldr	r1, [pc, #360]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	4613      	mov	r3, r2
 800e78c:	019b      	lsls	r3, r3, #6
 800e78e:	4413      	add	r3, r2
 800e790:	015b      	lsls	r3, r3, #5
 800e792:	440b      	add	r3, r1
 800e794:	3301      	adds	r3, #1
 800e796:	2202      	movs	r2, #2
 800e798:	701a      	strb	r2, [r3, #0]
		break;
 800e79a:	e16b      	b.n	800ea74 <libPacketProcessByte+0x464>

	case 2:
		libPacketHandlerStates[handler_num].payload_length |= (unsigned int)rx_data;
 800e79c:	4954      	ldr	r1, [pc, #336]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	019b      	lsls	r3, r3, #6
 800e7a4:	4413      	add	r3, r2
 800e7a6:	015b      	lsls	r3, r3, #5
 800e7a8:	440b      	add	r3, r1
 800e7aa:	330c      	adds	r3, #12
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	79fb      	ldrb	r3, [r7, #7]
 800e7b0:	ea42 0103 	orr.w	r1, r2, r3
 800e7b4:	484e      	ldr	r0, [pc, #312]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	019b      	lsls	r3, r3, #6
 800e7bc:	4413      	add	r3, r2
 800e7be:	015b      	lsls	r3, r3, #5
 800e7c0:	4403      	add	r3, r0
 800e7c2:	330c      	adds	r3, #12
 800e7c4:	6019      	str	r1, [r3, #0]
		if (libPacketHandlerStates[handler_num].payload_length > 0 &&
 800e7c6:	494a      	ldr	r1, [pc, #296]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	019b      	lsls	r3, r3, #6
 800e7ce:	4413      	add	r3, r2
 800e7d0:	015b      	lsls	r3, r3, #5
 800e7d2:	440b      	add	r3, r1
 800e7d4:	330c      	adds	r3, #12
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d02a      	beq.n	800e832 <libPacketProcessByte+0x222>
				libPacketHandlerStates[handler_num].payload_length <= PACKET_MAX_PL_LEN) {
 800e7dc:	4944      	ldr	r1, [pc, #272]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	019b      	lsls	r3, r3, #6
 800e7e4:	4413      	add	r3, r2
 800e7e6:	015b      	lsls	r3, r3, #5
 800e7e8:	440b      	add	r3, r1
 800e7ea:	330c      	adds	r3, #12
 800e7ec:	681b      	ldr	r3, [r3, #0]
		if (libPacketHandlerStates[handler_num].payload_length > 0 &&
 800e7ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7f2:	d81e      	bhi.n	800e832 <libPacketProcessByte+0x222>
			libPacketHandlerStates[handler_num].rx_state++;
 800e7f4:	493e      	ldr	r1, [pc, #248]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	019b      	lsls	r3, r3, #6
 800e7fc:	4413      	add	r3, r2
 800e7fe:	015b      	lsls	r3, r3, #5
 800e800:	440b      	add	r3, r1
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	b2db      	uxtb	r3, r3
 800e806:	3301      	adds	r3, #1
 800e808:	b2d8      	uxtb	r0, r3
 800e80a:	4939      	ldr	r1, [pc, #228]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	4613      	mov	r3, r2
 800e810:	019b      	lsls	r3, r3, #6
 800e812:	4413      	add	r3, r2
 800e814:	015b      	lsls	r3, r3, #5
 800e816:	440b      	add	r3, r1
 800e818:	4602      	mov	r2, r0
 800e81a:	701a      	strb	r2, [r3, #0]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e81c:	4934      	ldr	r1, [pc, #208]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	4613      	mov	r3, r2
 800e822:	019b      	lsls	r3, r3, #6
 800e824:	4413      	add	r3, r2
 800e826:	015b      	lsls	r3, r3, #5
 800e828:	440b      	add	r3, r1
 800e82a:	3301      	adds	r3, #1
 800e82c:	2202      	movs	r2, #2
 800e82e:	701a      	strb	r2, [r3, #0]
		} else {
			libPacketHandlerStates[handler_num].rx_state = 0;
		}
		break;
 800e830:	e120      	b.n	800ea74 <libPacketProcessByte+0x464>
			libPacketHandlerStates[handler_num].rx_state = 0;
 800e832:	492f      	ldr	r1, [pc, #188]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e834:	683a      	ldr	r2, [r7, #0]
 800e836:	4613      	mov	r3, r2
 800e838:	019b      	lsls	r3, r3, #6
 800e83a:	4413      	add	r3, r2
 800e83c:	015b      	lsls	r3, r3, #5
 800e83e:	440b      	add	r3, r1
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
		break;
 800e844:	e116      	b.n	800ea74 <libPacketProcessByte+0x464>

	case 3:
		libPacketHandlerStates[handler_num].rx_buffer[libPacketHandlerStates[handler_num].rx_data_ptr++] = rx_data;
 800e846:	492a      	ldr	r1, [pc, #168]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	4613      	mov	r3, r2
 800e84c:	019b      	lsls	r3, r3, #6
 800e84e:	4413      	add	r3, r2
 800e850:	015b      	lsls	r3, r3, #5
 800e852:	440b      	add	r3, r1
 800e854:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	1c50      	adds	r0, r2, #1
 800e85c:	4c24      	ldr	r4, [pc, #144]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	460b      	mov	r3, r1
 800e862:	019b      	lsls	r3, r3, #6
 800e864:	440b      	add	r3, r1
 800e866:	015b      	lsls	r3, r3, #5
 800e868:	4423      	add	r3, r4
 800e86a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e86e:	6018      	str	r0, [r3, #0]
 800e870:	481f      	ldr	r0, [pc, #124]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	460b      	mov	r3, r1
 800e876:	019b      	lsls	r3, r3, #6
 800e878:	440b      	add	r3, r1
 800e87a:	015b      	lsls	r3, r3, #5
 800e87c:	4403      	add	r3, r0
 800e87e:	4413      	add	r3, r2
 800e880:	3310      	adds	r3, #16
 800e882:	79fa      	ldrb	r2, [r7, #7]
 800e884:	701a      	strb	r2, [r3, #0]
		if (libPacketHandlerStates[handler_num].rx_data_ptr == libPacketHandlerStates[handler_num].payload_length) {
 800e886:	491a      	ldr	r1, [pc, #104]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	4613      	mov	r3, r2
 800e88c:	019b      	lsls	r3, r3, #6
 800e88e:	4413      	add	r3, r2
 800e890:	015b      	lsls	r3, r3, #5
 800e892:	440b      	add	r3, r1
 800e894:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	4815      	ldr	r0, [pc, #84]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e89c:	683a      	ldr	r2, [r7, #0]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	019b      	lsls	r3, r3, #6
 800e8a2:	4413      	add	r3, r2
 800e8a4:	015b      	lsls	r3, r3, #5
 800e8a6:	4403      	add	r3, r0
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4299      	cmp	r1, r3
 800e8ae:	d113      	bne.n	800e8d8 <libPacketProcessByte+0x2c8>
			libPacketHandlerStates[handler_num].rx_state++;
 800e8b0:	490f      	ldr	r1, [pc, #60]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	019b      	lsls	r3, r3, #6
 800e8b8:	4413      	add	r3, r2
 800e8ba:	015b      	lsls	r3, r3, #5
 800e8bc:	440b      	add	r3, r1
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	b2d8      	uxtb	r0, r3
 800e8c6:	490a      	ldr	r1, [pc, #40]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	019b      	lsls	r3, r3, #6
 800e8ce:	4413      	add	r3, r2
 800e8d0:	015b      	lsls	r3, r3, #5
 800e8d2:	440b      	add	r3, r1
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	701a      	strb	r2, [r3, #0]
		}
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e8d8:	4905      	ldr	r1, [pc, #20]	; (800e8f0 <libPacketProcessByte+0x2e0>)
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	019b      	lsls	r3, r3, #6
 800e8e0:	4413      	add	r3, r2
 800e8e2:	015b      	lsls	r3, r3, #5
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	701a      	strb	r2, [r3, #0]
		break;
 800e8ec:	e0c2      	b.n	800ea74 <libPacketProcessByte+0x464>
 800e8ee:	bf00      	nop
 800e8f0:	20000ad8 	.word	0x20000ad8

	case 4:
		libPacketHandlerStates[handler_num].crc_high = rx_data;
 800e8f4:	4961      	ldr	r1, [pc, #388]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	019b      	lsls	r3, r3, #6
 800e8fc:	4413      	add	r3, r2
 800e8fe:	015b      	lsls	r3, r3, #5
 800e900:	440b      	add	r3, r1
 800e902:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 800e906:	79fa      	ldrb	r2, [r7, #7]
 800e908:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].rx_state++;
 800e90a:	495c      	ldr	r1, [pc, #368]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	4613      	mov	r3, r2
 800e910:	019b      	lsls	r3, r3, #6
 800e912:	4413      	add	r3, r2
 800e914:	015b      	lsls	r3, r3, #5
 800e916:	440b      	add	r3, r1
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	3301      	adds	r3, #1
 800e91e:	b2d8      	uxtb	r0, r3
 800e920:	4956      	ldr	r1, [pc, #344]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	4613      	mov	r3, r2
 800e926:	019b      	lsls	r3, r3, #6
 800e928:	4413      	add	r3, r2
 800e92a:	015b      	lsls	r3, r3, #5
 800e92c:	440b      	add	r3, r1
 800e92e:	4602      	mov	r2, r0
 800e930:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e932:	4952      	ldr	r1, [pc, #328]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	4613      	mov	r3, r2
 800e938:	019b      	lsls	r3, r3, #6
 800e93a:	4413      	add	r3, r2
 800e93c:	015b      	lsls	r3, r3, #5
 800e93e:	440b      	add	r3, r1
 800e940:	3301      	adds	r3, #1
 800e942:	2202      	movs	r2, #2
 800e944:	701a      	strb	r2, [r3, #0]
		break;
 800e946:	e095      	b.n	800ea74 <libPacketProcessByte+0x464>

	case 5:
		libPacketHandlerStates[handler_num].crc_low = rx_data;
 800e948:	494c      	ldr	r1, [pc, #304]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	4613      	mov	r3, r2
 800e94e:	019b      	lsls	r3, r3, #6
 800e950:	4413      	add	r3, r2
 800e952:	015b      	lsls	r3, r3, #5
 800e954:	440b      	add	r3, r1
 800e956:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800e95a:	79fa      	ldrb	r2, [r7, #7]
 800e95c:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].rx_state++;
 800e95e:	4947      	ldr	r1, [pc, #284]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	4613      	mov	r3, r2
 800e964:	019b      	lsls	r3, r3, #6
 800e966:	4413      	add	r3, r2
 800e968:	015b      	lsls	r3, r3, #5
 800e96a:	440b      	add	r3, r1
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	3301      	adds	r3, #1
 800e972:	b2d8      	uxtb	r0, r3
 800e974:	4941      	ldr	r1, [pc, #260]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	4613      	mov	r3, r2
 800e97a:	019b      	lsls	r3, r3, #6
 800e97c:	4413      	add	r3, r2
 800e97e:	015b      	lsls	r3, r3, #5
 800e980:	440b      	add	r3, r1
 800e982:	4602      	mov	r2, r0
 800e984:	701a      	strb	r2, [r3, #0]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800e986:	493d      	ldr	r1, [pc, #244]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	4613      	mov	r3, r2
 800e98c:	019b      	lsls	r3, r3, #6
 800e98e:	4413      	add	r3, r2
 800e990:	015b      	lsls	r3, r3, #5
 800e992:	440b      	add	r3, r1
 800e994:	3301      	adds	r3, #1
 800e996:	2202      	movs	r2, #2
 800e998:	701a      	strb	r2, [r3, #0]
		break;
 800e99a:	e06b      	b.n	800ea74 <libPacketProcessByte+0x464>

	case 6:
		if (rx_data == 3) {
 800e99c:	79fb      	ldrb	r3, [r7, #7]
 800e99e:	2b03      	cmp	r3, #3
 800e9a0:	d154      	bne.n	800ea4c <libPacketProcessByte+0x43c>
			if (libCRCCalcCRC16(libPacketHandlerStates[handler_num].rx_buffer, libPacketHandlerStates[handler_num].payload_length)
 800e9a2:	683a      	ldr	r2, [r7, #0]
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	019b      	lsls	r3, r3, #6
 800e9a8:	4413      	add	r3, r2
 800e9aa:	015b      	lsls	r3, r3, #5
 800e9ac:	3310      	adds	r3, #16
 800e9ae:	4a33      	ldr	r2, [pc, #204]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e9b0:	1898      	adds	r0, r3, r2
 800e9b2:	4932      	ldr	r1, [pc, #200]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	019b      	lsls	r3, r3, #6
 800e9ba:	4413      	add	r3, r2
 800e9bc:	015b      	lsls	r3, r3, #5
 800e9be:	440b      	add	r3, r1
 800e9c0:	330c      	adds	r3, #12
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	f7fe fe23 	bl	800d610 <libCRCCalcCRC16>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	461c      	mov	r4, r3
					== ((unsigned short)libPacketHandlerStates[handler_num].crc_high << 8
 800e9ce:	492b      	ldr	r1, [pc, #172]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	019b      	lsls	r3, r3, #6
 800e9d6:	4413      	add	r3, r2
 800e9d8:	015b      	lsls	r3, r3, #5
 800e9da:	440b      	add	r3, r1
 800e9dc:	f603 031d 	addw	r3, r3, #2077	; 0x81d
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	0219      	lsls	r1, r3, #8
							| (unsigned short)libPacketHandlerStates[handler_num].crc_low)) {
 800e9e4:	4825      	ldr	r0, [pc, #148]	; (800ea7c <libPacketProcessByte+0x46c>)
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	019b      	lsls	r3, r3, #6
 800e9ec:	4413      	add	r3, r2
 800e9ee:	015b      	lsls	r3, r3, #5
 800e9f0:	4403      	add	r3, r0
 800e9f2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	430b      	orrs	r3, r1
			if (libCRCCalcCRC16(libPacketHandlerStates[handler_num].rx_buffer, libPacketHandlerStates[handler_num].payload_length)
 800e9fa:	429c      	cmp	r4, r3
 800e9fc:	d126      	bne.n	800ea4c <libPacketProcessByte+0x43c>
				// Packet received!
				if (libPacketHandlerStates[handler_num].process_func) {
 800e9fe:	491f      	ldr	r1, [pc, #124]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	4613      	mov	r3, r2
 800ea04:	019b      	lsls	r3, r3, #6
 800ea06:	4413      	add	r3, r2
 800ea08:	015b      	lsls	r3, r3, #5
 800ea0a:	440b      	add	r3, r1
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01b      	beq.n	800ea4c <libPacketProcessByte+0x43c>
					libPacketHandlerStates[handler_num].process_func(libPacketHandlerStates[handler_num].rx_buffer,
 800ea14:	4919      	ldr	r1, [pc, #100]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	019b      	lsls	r3, r3, #6
 800ea1c:	4413      	add	r3, r2
 800ea1e:	015b      	lsls	r3, r3, #5
 800ea20:	440b      	add	r3, r1
 800ea22:	3308      	adds	r3, #8
 800ea24:	681c      	ldr	r4, [r3, #0]
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	019b      	lsls	r3, r3, #6
 800ea2c:	4413      	add	r3, r2
 800ea2e:	015b      	lsls	r3, r3, #5
 800ea30:	3310      	adds	r3, #16
 800ea32:	4a12      	ldr	r2, [pc, #72]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea34:	1898      	adds	r0, r3, r2
 800ea36:	4911      	ldr	r1, [pc, #68]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	019b      	lsls	r3, r3, #6
 800ea3e:	4413      	add	r3, r2
 800ea40:	015b      	lsls	r3, r3, #5
 800ea42:	440b      	add	r3, r1
 800ea44:	330c      	adds	r3, #12
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	47a0      	blx	r4
							libPacketHandlerStates[handler_num].payload_length);
				}
			}
		}
		libPacketHandlerStates[handler_num].rx_state = 0;
 800ea4c:	490b      	ldr	r1, [pc, #44]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	4613      	mov	r3, r2
 800ea52:	019b      	lsls	r3, r3, #6
 800ea54:	4413      	add	r3, r2
 800ea56:	015b      	lsls	r3, r3, #5
 800ea58:	440b      	add	r3, r1
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	701a      	strb	r2, [r3, #0]
		break;
 800ea5e:	e009      	b.n	800ea74 <libPacketProcessByte+0x464>

	default:
		libPacketHandlerStates[handler_num].rx_state = 0;
 800ea60:	4906      	ldr	r1, [pc, #24]	; (800ea7c <libPacketProcessByte+0x46c>)
 800ea62:	683a      	ldr	r2, [r7, #0]
 800ea64:	4613      	mov	r3, r2
 800ea66:	019b      	lsls	r3, r3, #6
 800ea68:	4413      	add	r3, r2
 800ea6a:	015b      	lsls	r3, r3, #5
 800ea6c:	440b      	add	r3, r1
 800ea6e:	2200      	movs	r2, #0
 800ea70:	701a      	strb	r2, [r3, #0]
		break;
 800ea72:	bf00      	nop
	}
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd90      	pop	{r4, r7, pc}
 800ea7c:	20000ad8 	.word	0x20000ad8

0800ea80 <pwm_init>:
float timebase; // Milliseconds per count
float triggerdelay;

HRTIM_HandleTypeDef hhrtim1;

void pwm_init(float switchingFrequency, float controllerFrequency, float tdr, float tdf, float adc_td) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b0c8      	sub	sp, #288	; 0x120
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	f107 0314 	add.w	r3, r7, #20
 800ea8a:	ed83 0a00 	vstr	s0, [r3]
 800ea8e:	f107 0310 	add.w	r3, r7, #16
 800ea92:	edc3 0a00 	vstr	s1, [r3]
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	ed83 1a00 	vstr	s2, [r3]
 800ea9e:	f107 0308 	add.w	r3, r7, #8
 800eaa2:	edc3 1a00 	vstr	s3, [r3]
 800eaa6:	1d3b      	adds	r3, r7, #4
 800eaa8:	ed83 2a00 	vstr	s4, [r3]
	triggerdelay = adc_td;
 800eaac:	4a26      	ldr	r2, [pc, #152]	; (800eb48 <pwm_init+0xc8>)
 800eaae:	1d3b      	adds	r3, r7, #4
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	6013      	str	r3, [r2, #0]
	uint32_t TIMER_MUL = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float mul;

	for (int i = 0; i < 8; i++) {
 800eaba:	2300      	movs	r3, #0
 800eabc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eac0:	e051      	b.n	800eb66 <pwm_init+0xe6>
		mul = roundf(powf(2.0f, 5.0f - (float) i));
 800eac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac6:	ee07 3a90 	vmov	s15, r3
 800eaca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eace:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800ead2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ead6:	eef0 0a67 	vmov.f32	s1, s15
 800eada:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800eade:	f006 f9b9 	bl	8014e54 <powf>
 800eae2:	eef0 7a40 	vmov.f32	s15, s0
 800eae6:	eeb0 0a67 	vmov.f32	s0, s15
 800eaea:	f006 f919 	bl	8014d20 <roundf>
 800eaee:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
		timebase = 1000.0f / (170.0e6f * mul);
 800eaf2:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800eaf6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800eb54 <pwm_init+0xd4>
 800eafa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eafe:	eddf 6a16 	vldr	s13, [pc, #88]	; 800eb58 <pwm_init+0xd8>
 800eb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb06:	4b11      	ldr	r3, [pc, #68]	; (800eb4c <pwm_init+0xcc>)
 800eb08:	edc3 7a00 	vstr	s15, [r3]
		float fmin = 1 / (0xFFFF * timebase);
 800eb0c:	4b0f      	ldr	r3, [pc, #60]	; (800eb4c <pwm_init+0xcc>)
 800eb0e:	edd3 7a00 	vldr	s15, [r3]
 800eb12:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800eb50 <pwm_init+0xd0>
 800eb16:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb22:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
		if (fmin < switchingFrequency) {
 800eb26:	f107 0314 	add.w	r3, r7, #20
 800eb2a:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 800eb2e:	edd3 7a00 	vldr	s15, [r3]
 800eb32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3a:	d50f      	bpl.n	800eb5c <pwm_init+0xdc>
			TIMER_MUL = (uint32_t) i;
 800eb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			break;
 800eb44:	e013      	b.n	800eb6e <pwm_init+0xee>
 800eb46:	bf00      	nop
 800eb48:	200035bc 	.word	0x200035bc
 800eb4c:	200035c0 	.word	0x200035c0
 800eb50:	477fff00 	.word	0x477fff00
 800eb54:	4d221fe8 	.word	0x4d221fe8
 800eb58:	447a0000 	.word	0x447a0000
	for (int i = 0; i < 8; i++) {
 800eb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb60:	3301      	adds	r3, #1
 800eb62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb6a:	2b07      	cmp	r3, #7
 800eb6c:	dda9      	ble.n	800eac2 <pwm_init+0x42>
		}
	}
	timebase = 1000.0f / (170.0e6f * mul); // Milliseconds per count
 800eb6e:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800eb72:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 800eb54 <pwm_init+0xd4>
 800eb76:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb7a:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 800eb58 <pwm_init+0xd8>
 800eb7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb82:	4bd9      	ldr	r3, [pc, #868]	; (800eee8 <pwm_init+0x468>)
 800eb84:	edc3 7a00 	vstr	s15, [r3]
	uint32_t period = (uint32_t) roundf(1.0f / (switchingFrequency * timebase));
 800eb88:	4bd7      	ldr	r3, [pc, #860]	; (800eee8 <pwm_init+0x468>)
 800eb8a:	ed93 7a00 	vldr	s14, [r3]
 800eb8e:	f107 0314 	add.w	r3, r7, #20
 800eb92:	edd3 7a00 	vldr	s15, [r3]
 800eb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eba2:	eeb0 0a47 	vmov.f32	s0, s14
 800eba6:	f006 f8bb 	bl	8014d20 <roundf>
 800ebaa:	eef0 7a40 	vmov.f32	s15, s0
 800ebae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebb2:	ee17 3a90 	vmov	r3, s15
 800ebb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	uint32_t dif = (uint32_t) ceilf(switchingFrequency / controllerFrequency)
 800ebba:	f107 0214 	add.w	r2, r7, #20
 800ebbe:	f107 0310 	add.w	r3, r7, #16
 800ebc2:	ed92 7a00 	vldr	s14, [r2]
 800ebc6:	edd3 7a00 	vldr	s15, [r3]
 800ebca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ebce:	eeb0 0a66 	vmov.f32	s0, s13
 800ebd2:	f006 f863 	bl	8014c9c <ceilf>
 800ebd6:	eef0 7a40 	vmov.f32	s15, s0
 800ebda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebde:	ee17 3a90 	vmov	r3, s15
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			- 1;
	if (dif > 0xF) {
 800ebe8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ebec:	2b0f      	cmp	r3, #15
 800ebee:	d902      	bls.n	800ebf6 <pwm_init+0x176>
		dif = 0xF;
 800ebf0:	230f      	movs	r3, #15
 800ebf2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		//Error_Handler();
	}

	//Calculate Controller sample period.
	ControllerPeriod = 1e-3f * ((float) dif + 1.0f) / switchingFrequency;
 800ebf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ebfa:	ee07 3a90 	vmov	s15, r3
 800ebfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec0a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800eeec <pwm_init+0x46c>
 800ec0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ec12:	f107 0314 	add.w	r3, r7, #20
 800ec16:	ed93 7a00 	vldr	s14, [r3]
 800ec1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec1e:	4bb4      	ldr	r3, [pc, #720]	; (800eef0 <pwm_init+0x470>)
 800ec20:	edc3 7a00 	vstr	s15, [r3]

	HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = { 0 };
 800ec24:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]
 800ec2c:	605a      	str	r2, [r3, #4]
	HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = { 0 };
 800ec2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	605a      	str	r2, [r3, #4]
 800ec38:	609a      	str	r2, [r3, #8]
 800ec3a:	60da      	str	r2, [r3, #12]
	HRTIM_TimerCfgTypeDef pTimerCfg = { 0 };
 800ec3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ec40:	2260      	movs	r2, #96	; 0x60
 800ec42:	2100      	movs	r1, #0
 800ec44:	4618      	mov	r0, r3
 800ec46:	f001 fa19 	bl	801007c <memset>
	HRTIM_TimerCtlTypeDef pTimerCtl = { 0 };
 800ec4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ec4e:	2200      	movs	r2, #0
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	605a      	str	r2, [r3, #4]
 800ec54:	609a      	str	r2, [r3, #8]
 800ec56:	60da      	str	r2, [r3, #12]
 800ec58:	611a      	str	r2, [r3, #16]
 800ec5a:	615a      	str	r2, [r3, #20]
 800ec5c:	619a      	str	r2, [r3, #24]
	HRTIM_CompareCfgTypeDef pCompareCfg = { 0 };
 800ec5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	605a      	str	r2, [r3, #4]
 800ec68:	609a      	str	r2, [r3, #8]
	HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = { 0 };
 800ec6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ec6e:	2224      	movs	r2, #36	; 0x24
 800ec70:	2100      	movs	r1, #0
 800ec72:	4618      	mov	r0, r3
 800ec74:	f001 fa02 	bl	801007c <memset>
	HRTIM_OutputCfgTypeDef pOutputCfg = { 0 };
 800ec78:	f107 031c 	add.w	r3, r7, #28
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	2320      	movs	r3, #32
 800ec80:	461a      	mov	r2, r3
 800ec82:	2100      	movs	r1, #0
 800ec84:	f001 f9fa 	bl	801007c <memset>


	__HAL_RCC_HRTIM1_CLK_ENABLE();
 800ec88:	4b9a      	ldr	r3, [pc, #616]	; (800eef4 <pwm_init+0x474>)
 800ec8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec8c:	4a99      	ldr	r2, [pc, #612]	; (800eef4 <pwm_init+0x474>)
 800ec8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec92:	6613      	str	r3, [r2, #96]	; 0x60
 800ec94:	4b97      	ldr	r3, [pc, #604]	; (800eef4 <pwm_init+0x474>)
 800ec96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec98:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800ec9c:	f107 0318 	add.w	r3, r7, #24
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	f107 0318 	add.w	r3, r7, #24
 800eca6:	681b      	ldr	r3, [r3, #0]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 1, 0);
 800eca8:	2200      	movs	r2, #0
 800ecaa:	2101      	movs	r1, #1
 800ecac:	2043      	movs	r0, #67	; 0x43
 800ecae:	f7f4 fac8 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 800ecb2:	2043      	movs	r0, #67	; 0x43
 800ecb4:	f7f4 fadf 	bl	8003276 <HAL_NVIC_EnableIRQ>


	hhrtim1.Instance = HRTIM1;
 800ecb8:	4b8f      	ldr	r3, [pc, #572]	; (800eef8 <pwm_init+0x478>)
 800ecba:	4a90      	ldr	r2, [pc, #576]	; (800eefc <pwm_init+0x47c>)
 800ecbc:	601a      	str	r2, [r3, #0]
	hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800ecbe:	4b8e      	ldr	r3, [pc, #568]	; (800eef8 <pwm_init+0x478>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	605a      	str	r2, [r3, #4]
	hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800ecc4:	4b8c      	ldr	r3, [pc, #560]	; (800eef8 <pwm_init+0x478>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	609a      	str	r2, [r3, #8]
	if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK) {
 800ecca:	488b      	ldr	r0, [pc, #556]	; (800eef8 <pwm_init+0x478>)
 800eccc:	f7f6 f898 	bl	8004e00 <HAL_HRTIM_Init>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <pwm_init+0x25a>
		Error_Handler();
 800ecd6:	f7ff f929 	bl	800df2c <Error_Handler>
	}
	if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3)
 800ecda:	210c      	movs	r1, #12
 800ecdc:	4886      	ldr	r0, [pc, #536]	; (800eef8 <pwm_init+0x478>)
 800ecde:	f7f6 f969 	bl	8004fb4 <HAL_HRTIM_DLLCalibrationStart>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d001      	beq.n	800ecec <pwm_init+0x26c>
			!= HAL_OK) {
		Error_Handler();
 800ece8:	f7ff f920 	bl	800df2c <Error_Handler>
	}
	if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 100) != HAL_OK) {
 800ecec:	2164      	movs	r1, #100	; 0x64
 800ecee:	4882      	ldr	r0, [pc, #520]	; (800eef8 <pwm_init+0x478>)
 800ecf0:	f7f6 f9b8 	bl	8005064 <HAL_HRTIM_PollForDLLCalibration>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d001      	beq.n	800ecfe <pwm_init+0x27e>
		Error_Handler();
 800ecfa:	f7ff f917 	bl	800df2c <Error_Handler>
	}

	pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	pADCTriggerCfg.Trigger = HW_HRTIM_ADCTRIGGER;
 800ed04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ed08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1,
 800ed0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800ed10:	461a      	mov	r2, r3
 800ed12:	2101      	movs	r1, #1
 800ed14:	4878      	ldr	r0, [pc, #480]	; (800eef8 <pwm_init+0x478>)
 800ed16:	f7f6 fa01 	bl	800511c <HAL_HRTIM_ADCTriggerConfig>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <pwm_init+0x2a4>
			&pADCTriggerCfg) != HAL_OK) {
		Error_Handler();
 800ed20:	f7ff f904 	bl	800df2c <Error_Handler>
	}

	if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, dif)
 800ed24:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ed28:	2101      	movs	r1, #1
 800ed2a:	4873      	ldr	r0, [pc, #460]	; (800eef8 <pwm_init+0x478>)
 800ed2c:	f7f6 fbe2 	bl	80054f4 <HAL_HRTIM_ADCPostScalerConfig>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d001      	beq.n	800ed3a <pwm_init+0x2ba>
			!= HAL_OK) {
		Error_Handler();
 800ed36:	f7ff f8f9 	bl	800df2c <Error_Handler>
	}
	pTimeBaseCfg.Period = period;
 800ed3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ed3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	pTimeBaseCfg.RepetitionCounter = 100;
 800ed42:	2364      	movs	r3, #100	; 0x64
 800ed44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	pTimeBaseCfg.PrescalerRatio = TIMER_MUL;
 800ed48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ed4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800ed50:	2308      	movs	r3, #8
 800ed52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER,
 800ed56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	2106      	movs	r1, #6
 800ed5e:	4866      	ldr	r0, [pc, #408]	; (800eef8 <pwm_init+0x478>)
 800ed60:	f7f6 f9b4 	bl	80050cc <HAL_HRTIM_TimeBaseConfig>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d001      	beq.n	800ed6e <pwm_init+0x2ee>
			&pTimeBaseCfg) != HAL_OK) {
		Error_Handler();
 800ed6a:	f7ff f8df 	bl	800df2c <Error_Handler>
	}
	pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 800ed6e:	2310      	movs	r3, #16
 800ed70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800ed74:	2300      	movs	r3, #0
 800ed76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pTimerCfg.DMASrcAddress = 0x0000;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	pTimerCfg.DMADstAddress = 0x0000;
 800ed80:	2300      	movs	r3, #0
 800ed82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	pTimerCfg.DMASize = 0x1;
 800ed86:	2301      	movs	r3, #1
 800ed88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 800ed92:	2300      	movs	r3, #0
 800ed94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800eda4:	2300      	movs	r3, #0
 800eda6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800edaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800edae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800edb2:	2300      	movs	r3, #0
 800edb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800edb8:	2300      	movs	r3, #0
 800edba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800edbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800edc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER,
 800edcc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800edd0:	461a      	mov	r2, r3
 800edd2:	2106      	movs	r1, #6
 800edd4:	4848      	ldr	r0, [pc, #288]	; (800eef8 <pwm_init+0x478>)
 800edd6:	f7f6 fcd7 	bl	8005788 <HAL_HRTIM_WaveformTimerConfig>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <pwm_init+0x364>
			&pTimerCfg) != HAL_OK) {
		Error_Handler();
 800ede0:	f7ff f8a4 	bl	800df2c <Error_Handler>
	}

	pTimeBaseCfg.Period = period;
 800ede4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ede8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	pTimeBaseCfg.RepetitionCounter = 0x00;
 800edec:	2300      	movs	r3, #0
 800edee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HW_TIMERINDEX,
 800edf2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800edf6:	461a      	mov	r2, r3
 800edf8:	2101      	movs	r1, #1
 800edfa:	483f      	ldr	r0, [pc, #252]	; (800eef8 <pwm_init+0x478>)
 800edfc:	f7f6 f966 	bl	80050cc <HAL_HRTIM_TimeBaseConfig>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <pwm_init+0x38a>
			&pTimeBaseCfg) != HAL_OK) {
		Error_Handler();
 800ee06:	f7ff f891 	bl	800df2c <Error_Handler>
	}
	pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	66fb      	str	r3, [r7, #108]	; 0x6c
	pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	673b      	str	r3, [r7, #112]	; 0x70
	pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 800ee12:	2300      	movs	r3, #0
 800ee14:	677b      	str	r3, [r7, #116]	; 0x74
	pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800ee16:	2300      	movs	r3, #0
 800ee18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HW_TIMERINDEX,
 800ee1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ee20:	461a      	mov	r2, r3
 800ee22:	2101      	movs	r1, #1
 800ee24:	4834      	ldr	r0, [pc, #208]	; (800eef8 <pwm_init+0x478>)
 800ee26:	f7f6 fd21 	bl	800586c <HAL_HRTIM_WaveformTimerControl>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <pwm_init+0x3b4>
			&pTimerCtl) != HAL_OK) {
		Error_Handler();
 800ee30:	f7ff f87c 	bl	800df2c <Error_Handler>
	}
	pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800ee34:	2300      	movs	r3, #0
 800ee36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800ee40:	2300      	movs	r3, #0
 800ee42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800ee46:	2300      	movs	r3, #0
 800ee48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800ee52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	pTimerCfg.DelayedProtectionMode =
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
	pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_B;
 800ee60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ee64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 800ee68:	2310      	movs	r3, #16
 800ee6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 800ee6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ee72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HW_TIMERINDEX,
 800ee76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	481e      	ldr	r0, [pc, #120]	; (800eef8 <pwm_init+0x478>)
 800ee80:	f7f6 fc82 	bl	8005788 <HAL_HRTIM_WaveformTimerConfig>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <pwm_init+0x40e>
			&pTimerCfg) != HAL_OK) {
		Error_Handler();
 800ee8a:	f7ff f84f 	bl	800df2c <Error_Handler>
	}

	pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	667b      	str	r3, [r7, #100]	; 0x64
	pCompareCfg.AutoDelayedTimeout = 0x0000;
 800ee92:	2300      	movs	r3, #0
 800ee94:	66bb      	str	r3, [r7, #104]	; 0x68

	pCompareCfg.CompareValue = 64;
 800ee96:	2340      	movs	r3, #64	; 0x40
 800ee98:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HW_TIMERINDEX, HRTIM_COMPAREUNIT_2, &pCompareCfg);
 800ee9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ee9e:	2202      	movs	r2, #2
 800eea0:	2101      	movs	r1, #1
 800eea2:	4815      	ldr	r0, [pc, #84]	; (800eef8 <pwm_init+0x478>)
 800eea4:	f7f6 fd96 	bl	80059d4 <HAL_HRTIM_WaveformCompareConfig>

	pCompareCfg.CompareValue = 32;
 800eea8:	2320      	movs	r3, #32
 800eeaa:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HW_TIMERINDEX,HRTIM_COMPAREUNIT_3, &pCompareCfg);
 800eeac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eeb0:	2204      	movs	r2, #4
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	4810      	ldr	r0, [pc, #64]	; (800eef8 <pwm_init+0x478>)
 800eeb6:	f7f6 fd8d 	bl	80059d4 <HAL_HRTIM_WaveformCompareConfig>


	pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 800eeba:	2300      	movs	r3, #0
 800eebc:	63fb      	str	r3, [r7, #60]	; 0x3c
	pDeadTimeCfg.RisingValue = 10;
 800eebe:	230a      	movs	r3, #10
 800eec0:	643b      	str	r3, [r7, #64]	; 0x40
	pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 800eec2:	2300      	movs	r3, #0
 800eec4:	647b      	str	r3, [r7, #68]	; 0x44
	pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800eec6:	2300      	movs	r3, #0
 800eec8:	64bb      	str	r3, [r7, #72]	; 0x48
	pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 800eeca:	2300      	movs	r3, #0
 800eecc:	64fb      	str	r3, [r7, #76]	; 0x4c
	pDeadTimeCfg.FallingValue = 10;
 800eece:	230a      	movs	r3, #10
 800eed0:	653b      	str	r3, [r7, #80]	; 0x50
	pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 800eed2:	2300      	movs	r3, #0
 800eed4:	657b      	str	r3, [r7, #84]	; 0x54
	pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800eed6:	2300      	movs	r3, #0
 800eed8:	65bb      	str	r3, [r7, #88]	; 0x58
	pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 800eeda:	2300      	movs	r3, #0
 800eedc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HW_TIMERINDEX,
 800eede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eee2:	461a      	mov	r2, r3
 800eee4:	e00c      	b.n	800ef00 <pwm_init+0x480>
 800eee6:	bf00      	nop
 800eee8:	200035c0 	.word	0x200035c0
 800eeec:	3a83126f 	.word	0x3a83126f
 800eef0:	200035b8 	.word	0x200035b8
 800eef4:	40021000 	.word	0x40021000
 800eef8:	200034bc 	.word	0x200034bc
 800eefc:	40016800 	.word	0x40016800
 800ef00:	2101      	movs	r1, #1
 800ef02:	485b      	ldr	r0, [pc, #364]	; (800f070 <pwm_init+0x5f0>)
 800ef04:	f7f6 fce6 	bl	80058d4 <HAL_HRTIM_DeadTimeConfig>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <pwm_init+0x492>
			&pDeadTimeCfg) != HAL_OK) {
		Error_Handler();
 800ef0e:	f7ff f80d 	bl	800df2c <Error_Handler>
	}

	pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800ef12:	f107 031c 	add.w	r3, r7, #28
 800ef16:	2200      	movs	r2, #0
 800ef18:	601a      	str	r2, [r3, #0]
	pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800ef1a:	f107 031c 	add.w	r3, r7, #28
 800ef1e:	2204      	movs	r2, #4
 800ef20:	605a      	str	r2, [r3, #4]
	pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800ef22:	f107 031c 	add.w	r3, r7, #28
 800ef26:	2210      	movs	r2, #16
 800ef28:	609a      	str	r2, [r3, #8]
	pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800ef2a:	f107 031c 	add.w	r3, r7, #28
 800ef2e:	2200      	movs	r2, #0
 800ef30:	60da      	str	r2, [r3, #12]
	pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800ef32:	f107 031c 	add.w	r3, r7, #28
 800ef36:	2200      	movs	r2, #0
 800ef38:	611a      	str	r2, [r3, #16]
	pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800ef3a:	f107 031c 	add.w	r3, r7, #28
 800ef3e:	2200      	movs	r2, #0
 800ef40:	615a      	str	r2, [r3, #20]
	pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800ef42:	f107 031c 	add.w	r3, r7, #28
 800ef46:	2200      	movs	r2, #0
 800ef48:	619a      	str	r2, [r3, #24]
	pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800ef4a:	f107 031c 	add.w	r3, r7, #28
 800ef4e:	2200      	movs	r2, #0
 800ef50:	61da      	str	r2, [r3, #28]
	if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HW_TIMERINDEX,
 800ef52:	f107 031c 	add.w	r3, r7, #28
 800ef56:	2204      	movs	r2, #4
 800ef58:	2101      	movs	r1, #1
 800ef5a:	4845      	ldr	r0, [pc, #276]	; (800f070 <pwm_init+0x5f0>)
 800ef5c:	f7f6 fea8 	bl	8005cb0 <HAL_HRTIM_WaveformOutputConfig>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <pwm_init+0x4ea>
			HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK) {
		Error_Handler();
 800ef66:	f7fe ffe1 	bl	800df2c <Error_Handler>
	}
	pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800ef6a:	f107 031c 	add.w	r3, r7, #28
 800ef6e:	2200      	movs	r2, #0
 800ef70:	605a      	str	r2, [r3, #4]
	pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800ef72:	f107 031c 	add.w	r3, r7, #28
 800ef76:	2200      	movs	r2, #0
 800ef78:	609a      	str	r2, [r3, #8]
	if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HW_TIMERINDEX,
 800ef7a:	f107 031c 	add.w	r3, r7, #28
 800ef7e:	2208      	movs	r2, #8
 800ef80:	2101      	movs	r1, #1
 800ef82:	483b      	ldr	r0, [pc, #236]	; (800f070 <pwm_init+0x5f0>)
 800ef84:	f7f6 fe94 	bl	8005cb0 <HAL_HRTIM_WaveformOutputConfig>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <pwm_init+0x512>
			HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK) {
		Error_Handler();
 800ef8e:	f7fe ffcd 	bl	800df2c <Error_Handler>
	}

	uint32_t dtri = (uint32_t) round((tdr * (0.170 * 8)));
 800ef92:	f107 030c 	add.w	r3, r7, #12
 800ef96:	6818      	ldr	r0, [r3, #0]
 800ef98:	f7f1 fb0e 	bl	80005b8 <__aeabi_f2d>
 800ef9c:	a332      	add	r3, pc, #200	; (adr r3, 800f068 <pwm_init+0x5e8>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	f7f1 fb61 	bl	8000668 <__aeabi_dmul>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	ec43 2b17 	vmov	d7, r2, r3
 800efae:	eeb0 0a47 	vmov.f32	s0, s14
 800efb2:	eef0 0a67 	vmov.f32	s1, s15
 800efb6:	f005 fe2b 	bl	8014c10 <round>
 800efba:	ec53 2b10 	vmov	r2, r3, d0
 800efbe:	4610      	mov	r0, r2
 800efc0:	4619      	mov	r1, r3
 800efc2:	f7f1 fe29 	bl	8000c18 <__aeabi_d2uiz>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t dtfi = (uint32_t) round((tdf * (0.170 * 8)));
 800efcc:	f107 0308 	add.w	r3, r7, #8
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f7f1 faf1 	bl	80005b8 <__aeabi_f2d>
 800efd6:	a324      	add	r3, pc, #144	; (adr r3, 800f068 <pwm_init+0x5e8>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 fb44 	bl	8000668 <__aeabi_dmul>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	ec43 2b17 	vmov	d7, r2, r3
 800efe8:	eeb0 0a47 	vmov.f32	s0, s14
 800efec:	eef0 0a67 	vmov.f32	s1, s15
 800eff0:	f005 fe0e 	bl	8014c10 <round>
 800eff4:	ec53 2b10 	vmov	r2, r3, d0
 800eff8:	4610      	mov	r0, r2
 800effa:	4619      	mov	r1, r3
 800effc:	f7f1 fe0c 	bl	8000c18 <__aeabi_d2uiz>
 800f000:	4603      	mov	r3, r0
 800f002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	if(dtri > 0xff){
 800f006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f00a:	2bff      	cmp	r3, #255	; 0xff
 800f00c:	d902      	bls.n	800f014 <pwm_init+0x594>
		dtri = 0xff;
 800f00e:	23ff      	movs	r3, #255	; 0xff
 800f010:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	}
	if(dtfi > 0xff){
 800f014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f018:	2bff      	cmp	r3, #255	; 0xff
 800f01a:	d902      	bls.n	800f022 <pwm_init+0x5a2>
		dtfi = 0xff;
 800f01c:	23ff      	movs	r3, #255	; 0xff
 800f01e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	}

	HRTIM1->sTimerxRegs[HW_TIMERINDEX].DTxR |= (dtri & 0xff) | ((dtfi&0xff) << 16);
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <pwm_init+0x5f4>)
 800f024:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800f028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f02c:	b2d9      	uxtb	r1, r3
 800f02e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f032:	041b      	lsls	r3, r3, #16
 800f034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f038:	430b      	orrs	r3, r1
 800f03a:	490e      	ldr	r1, [pc, #56]	; (800f074 <pwm_init+0x5f4>)
 800f03c:	4313      	orrs	r3, r2
 800f03e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	HAL_HRTIM_WaveformCounterStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER);
 800f042:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f046:	480a      	ldr	r0, [pc, #40]	; (800f070 <pwm_init+0x5f0>)
 800f048:	f7f6 ff14 	bl	8005e74 <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 800f04c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800f050:	4807      	ldr	r0, [pc, #28]	; (800f070 <pwm_init+0x5f0>)
 800f052:	f7f6 feb8 	bl	8005dc6 <HAL_HRTIM_WaveformCountStart>
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TB1|HRTIM_OUTPUT_TB2);
 800f056:	210c      	movs	r1, #12
 800f058:	4805      	ldr	r0, [pc, #20]	; (800f070 <pwm_init+0x5f0>)
 800f05a:	f7f6 fe5a 	bl	8005d12 <HAL_HRTIM_WaveformOutputStart>
}
 800f05e:	bf00      	nop
 800f060:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	5c28f5c3 	.word	0x5c28f5c3
 800f06c:	3ff5c28f 	.word	0x3ff5c28f
 800f070:	200034bc 	.word	0x200034bc
 800f074:	40016800 	.word	0x40016800

0800f078 <pwm_setDuty>:

void pwm_setDuty(float duty) {
 800f078:	b590      	push	{r4, r7, lr}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t cmpval1;
	uint32_t per = HRTIM1->sTimerxRegs[1].PERxR;
 800f082:	4b2f      	ldr	r3, [pc, #188]	; (800f140 <pwm_setDuty+0xc8>)
 800f084:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f088:	60fb      	str	r3, [r7, #12]
	cmpval1 = (uint32_t) roundf((float) per * duty);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	ee07 3a90 	vmov	s15, r3
 800f090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f094:	edd7 7a01 	vldr	s15, [r7, #4]
 800f098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f09c:	eeb0 0a67 	vmov.f32	s0, s15
 800f0a0:	f005 fe3e 	bl	8014d20 <roundf>
 800f0a4:	eef0 7a40 	vmov.f32	s15, s0
 800f0a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ac:	ee17 3a90 	vmov	r3, s15
 800f0b0:	617b      	str	r3, [r7, #20]
	uint32_t adccmp = ((cmpval1 / 2) + (int32_t) roundf((((triggerdelay) / 1000.0f) / timebase))) % per;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	085c      	lsrs	r4, r3, #1
 800f0b6:	4b23      	ldr	r3, [pc, #140]	; (800f144 <pwm_setDuty+0xcc>)
 800f0b8:	edd3 7a00 	vldr	s15, [r3]
 800f0bc:	eddf 6a22 	vldr	s13, [pc, #136]	; 800f148 <pwm_setDuty+0xd0>
 800f0c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f0c4:	4b21      	ldr	r3, [pc, #132]	; (800f14c <pwm_setDuty+0xd4>)
 800f0c6:	edd3 7a00 	vldr	s15, [r3]
 800f0ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0ce:	eeb0 0a66 	vmov.f32	s0, s13
 800f0d2:	f005 fe25 	bl	8014d20 <roundf>
 800f0d6:	eef0 7a40 	vmov.f32	s15, s0
 800f0da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0de:	ee17 3a90 	vmov	r3, s15
 800f0e2:	4423      	add	r3, r4
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0ea:	68f9      	ldr	r1, [r7, #12]
 800f0ec:	fb01 f202 	mul.w	r2, r1, r2
 800f0f0:	1a9b      	subs	r3, r3, r2
 800f0f2:	613b      	str	r3, [r7, #16]

	//Make sure the AC values operate within their limits.
	if (cmpval1 < 64)
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	2b3f      	cmp	r3, #63	; 0x3f
 800f0f8:	d801      	bhi.n	800f0fe <pwm_setDuty+0x86>
		cmpval1 = 64;
 800f0fa:	2340      	movs	r3, #64	; 0x40
 800f0fc:	617b      	str	r3, [r7, #20]
	if (cmpval1 > (per - 64))
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3b40      	subs	r3, #64	; 0x40
 800f102:	697a      	ldr	r2, [r7, #20]
 800f104:	429a      	cmp	r2, r3
 800f106:	d902      	bls.n	800f10e <pwm_setDuty+0x96>
		cmpval1 = (per - 64);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	3b40      	subs	r3, #64	; 0x40
 800f10c:	617b      	str	r3, [r7, #20]

	if (adccmp < 64)
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	2b3f      	cmp	r3, #63	; 0x3f
 800f112:	d801      	bhi.n	800f118 <pwm_setDuty+0xa0>
		adccmp = 64;
 800f114:	2340      	movs	r3, #64	; 0x40
 800f116:	613b      	str	r3, [r7, #16]
	if (adccmp > (per - 64))
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3b40      	subs	r3, #64	; 0x40
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d902      	bls.n	800f128 <pwm_setDuty+0xb0>
		adccmp = (per - 64);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3b40      	subs	r3, #64	; 0x40
 800f126:	613b      	str	r3, [r7, #16]

	HRTIM1->sTimerxRegs[HW_TIMERINDEX].CMP2xR = cmpval1;
 800f128:	4a05      	ldr	r2, [pc, #20]	; (800f140 <pwm_setDuty+0xc8>)
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	HRTIM1->sTimerxRegs[HW_TIMERINDEX].CMP3xR = adccmp;
 800f130:	4a03      	ldr	r2, [pc, #12]	; (800f140 <pwm_setDuty+0xc8>)
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 800f138:	bf00      	nop
 800f13a:	371c      	adds	r7, #28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd90      	pop	{r4, r7, pc}
 800f140:	40016800 	.word	0x40016800
 800f144:	200035bc 	.word	0x200035bc
 800f148:	447a0000 	.word	0x447a0000
 800f14c:	200035c0 	.word	0x200035c0

0800f150 <pwm_disable>:

inline void pwm_disable() {
 800f150:	b580      	push	{r7, lr}
 800f152:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim1, HRTIM_TIMERID_MASTER);
 800f154:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800f158:	4806      	ldr	r0, [pc, #24]	; (800f174 <pwm_disable+0x24>)
 800f15a:	f7f6 fefb 	bl	8005f54 <HAL_HRTIM_WaveformCountStop_IT>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 800f15e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800f162:	4804      	ldr	r0, [pc, #16]	; (800f174 <pwm_disable+0x24>)
 800f164:	f7f6 fe5a 	bl	8005e1c <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2);
 800f168:	210c      	movs	r1, #12
 800f16a:	4802      	ldr	r0, [pc, #8]	; (800f174 <pwm_disable+0x24>)
 800f16c:	f7f6 fdfe 	bl	8005d6c <HAL_HRTIM_WaveformOutputStop>

}
 800f170:	bf00      	nop
 800f172:	bd80      	pop	{r7, pc}
 800f174:	200034bc 	.word	0x200034bc

0800f178 <pwm_GetControllerPeriod>:

float pwm_GetControllerPeriod() {
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
	return ControllerPeriod;
 800f17c:	4b04      	ldr	r3, [pc, #16]	; (800f190 <pwm_GetControllerPeriod+0x18>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	ee07 3a90 	vmov	s15, r3
}
 800f184:	eeb0 0a67 	vmov.f32	s0, s15
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr
 800f190:	200035b8 	.word	0x200035b8

0800f194 <HRTIM1_Master_IRQHandler>:

void HRTIM1_Master_IRQHandler(void){
 800f194:	b580      	push	{r7, lr}
 800f196:	af00      	add	r7, sp, #0
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 800f198:	2106      	movs	r1, #6
 800f19a:	4802      	ldr	r0, [pc, #8]	; (800f1a4 <HRTIM1_Master_IRQHandler+0x10>)
 800f19c:	f7f6 ff58 	bl	8006050 <HAL_HRTIM_IRQHandler>
}
 800f1a0:	bf00      	nop
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	200034bc 	.word	0x200034bc

0800f1a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f1a8:	480d      	ldr	r0, [pc, #52]	; (800f1e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800f1aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f1ac:	480d      	ldr	r0, [pc, #52]	; (800f1e4 <LoopForever+0x6>)
  ldr r1, =_edata
 800f1ae:	490e      	ldr	r1, [pc, #56]	; (800f1e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f1b0:	4a0e      	ldr	r2, [pc, #56]	; (800f1ec <LoopForever+0xe>)
  movs r3, #0
 800f1b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800f1b4:	e002      	b.n	800f1bc <LoopCopyDataInit>

0800f1b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f1b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f1b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f1ba:	3304      	adds	r3, #4

0800f1bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f1bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f1be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f1c0:	d3f9      	bcc.n	800f1b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f1c2:	4a0b      	ldr	r2, [pc, #44]	; (800f1f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f1c4:	4c0b      	ldr	r4, [pc, #44]	; (800f1f4 <LoopForever+0x16>)
  movs r3, #0
 800f1c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f1c8:	e001      	b.n	800f1ce <LoopFillZerobss>

0800f1ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f1ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f1cc:	3204      	adds	r2, #4

0800f1ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f1ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f1d0:	d3fb      	bcc.n	800f1ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800f1d2:	f000 f8cd 	bl	800f370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f1d6:	f000 ff1f 	bl	8010018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f1da:	f7fe fd7f 	bl	800dcdc <main>

0800f1de <LoopForever>:

LoopForever:
    b LoopForever
 800f1de:	e7fe      	b.n	800f1de <LoopForever>
  ldr   r0, =_estack
 800f1e0:	2001f800 	.word	0x2001f800
  ldr r0, =_sdata
 800f1e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f1e8:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 800f1ec:	08016560 	.word	0x08016560
  ldr r2, =_sbss
 800f1f0:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 800f1f4:	20003870 	.word	0x20003870

0800f1f8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f1f8:	e7fe      	b.n	800f1f8 <COMP1_2_3_IRQHandler>

0800f1fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	af00      	add	r7, sp, #0
	return 1;
 800f1fe:	2301      	movs	r3, #1
}
 800f200:	4618      	mov	r0, r3
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <_kill>:

int _kill(int pid, int sig)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f214:	f000 fefa 	bl	801000c <__errno>
 800f218:	4603      	mov	r3, r0
 800f21a:	2216      	movs	r2, #22
 800f21c:	601a      	str	r2, [r3, #0]
	return -1;
 800f21e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f222:	4618      	mov	r0, r3
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <_exit>:

void _exit (int status)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f232:	f04f 31ff 	mov.w	r1, #4294967295
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ffe7 	bl	800f20a <_kill>
	while (1) {}		/* Make sure we hang here */
 800f23c:	e7fe      	b.n	800f23c <_exit+0x12>

0800f23e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b086      	sub	sp, #24
 800f242:	af00      	add	r7, sp, #0
 800f244:	60f8      	str	r0, [r7, #12]
 800f246:	60b9      	str	r1, [r7, #8]
 800f248:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f24a:	2300      	movs	r3, #0
 800f24c:	617b      	str	r3, [r7, #20]
 800f24e:	e00a      	b.n	800f266 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f250:	f3af 8000 	nop.w
 800f254:	4601      	mov	r1, r0
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	60ba      	str	r2, [r7, #8]
 800f25c:	b2ca      	uxtb	r2, r1
 800f25e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	3301      	adds	r3, #1
 800f264:	617b      	str	r3, [r7, #20]
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	dbf0      	blt.n	800f250 <_read+0x12>
	}

return len;
 800f26e:	687b      	ldr	r3, [r7, #4]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f284:	2300      	movs	r3, #0
 800f286:	617b      	str	r3, [r7, #20]
 800f288:	e009      	b.n	800f29e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	60ba      	str	r2, [r7, #8]
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	3301      	adds	r3, #1
 800f29c:	617b      	str	r3, [r7, #20]
 800f29e:	697a      	ldr	r2, [r7, #20]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	dbf1      	blt.n	800f28a <_write+0x12>
	}
	return len;
 800f2a6:	687b      	ldr	r3, [r7, #4]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <_close>:

int _close(int file)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
	return -1;
 800f2b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2d8:	605a      	str	r2, [r3, #4]
	return 0;
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <_isatty>:

int _isatty(int file)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
	return 1;
 800f2f0:	2301      	movs	r3, #1
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f2fe:	b480      	push	{r7}
 800f300:	b085      	sub	sp, #20
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
	return 0;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f320:	4b11      	ldr	r3, [pc, #68]	; (800f368 <_sbrk+0x50>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d102      	bne.n	800f32e <_sbrk+0x16>
		heap_end = &end;
 800f328:	4b0f      	ldr	r3, [pc, #60]	; (800f368 <_sbrk+0x50>)
 800f32a:	4a10      	ldr	r2, [pc, #64]	; (800f36c <_sbrk+0x54>)
 800f32c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800f32e:	4b0e      	ldr	r3, [pc, #56]	; (800f368 <_sbrk+0x50>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800f334:	4b0c      	ldr	r3, [pc, #48]	; (800f368 <_sbrk+0x50>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4413      	add	r3, r2
 800f33c:	466a      	mov	r2, sp
 800f33e:	4293      	cmp	r3, r2
 800f340:	d907      	bls.n	800f352 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800f342:	f000 fe63 	bl	801000c <__errno>
 800f346:	4603      	mov	r3, r0
 800f348:	220c      	movs	r2, #12
 800f34a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e006      	b.n	800f360 <_sbrk+0x48>
	}

	heap_end += incr;
 800f352:	4b05      	ldr	r3, [pc, #20]	; (800f368 <_sbrk+0x50>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4413      	add	r3, r2
 800f35a:	4a03      	ldr	r2, [pc, #12]	; (800f368 <_sbrk+0x50>)
 800f35c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f35e:	68fb      	ldr	r3, [r7, #12]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	20001b18 	.word	0x20001b18
 800f36c:	20003870 	.word	0x20003870

0800f370 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800f370:	b480      	push	{r7}
 800f372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f374:	4b08      	ldr	r3, [pc, #32]	; (800f398 <SystemInit+0x28>)
 800f376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f37a:	4a07      	ldr	r2, [pc, #28]	; (800f398 <SystemInit+0x28>)
 800f37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f384:	4b04      	ldr	r3, [pc, #16]	; (800f398 <SystemInit+0x28>)
 800f386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f38a:	609a      	str	r2, [r3, #8]
#endif
}
 800f38c:	bf00      	nop
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	e000ed00 	.word	0xe000ed00

0800f39c <__NVIC_SystemReset>:
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f3a0:	f3bf 8f4f 	dsb	sy
}
 800f3a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f3a6:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <__NVIC_SystemReset+0x24>)
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f3ae:	4904      	ldr	r1, [pc, #16]	; (800f3c0 <__NVIC_SystemReset+0x24>)
 800f3b0:	4b04      	ldr	r3, [pc, #16]	; (800f3c4 <__NVIC_SystemReset+0x28>)
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f3b6:	f3bf 8f4f 	dsb	sy
}
 800f3ba:	bf00      	nop
    __NOP();
 800f3bc:	bf00      	nop
 800f3be:	e7fd      	b.n	800f3bc <__NVIC_SystemReset+0x20>
 800f3c0:	e000ed00 	.word	0xe000ed00
 800f3c4:	05fa0004 	.word	0x05fa0004

0800f3c8 <terminal_process_string>:
// Private variables
static terminal_callback_struct callbacks[CALLBACK_LEN];
static int callback_write = 0;


void terminal_process_string(char *str) {
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b0c8      	sub	sp, #288	; 0x120
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	1d3b      	adds	r3, r7, #4
 800f3d0:	6018      	str	r0, [r3, #0]
	enum { kMaxArgs = 64 };
	int argc = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 800f3d8:	1d3b      	adds	r3, r7, #4
 800f3da:	49bb      	ldr	r1, [pc, #748]	; (800f6c8 <terminal_process_string+0x300>)
 800f3dc:	6818      	ldr	r0, [r3, #0]
 800f3de:	f002 fc27 	bl	8011c30 <strtok>
 800f3e2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while (p2 && argc < kMaxArgs) {
 800f3e6:	e010      	b.n	800f40a <terminal_process_string+0x42>
		argv[argc++] = p2;
 800f3e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800f3f2:	f107 020c 	add.w	r2, r7, #12
 800f3f6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f3fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		p2 = strtok(0, " ");
 800f3fe:	49b2      	ldr	r1, [pc, #712]	; (800f6c8 <terminal_process_string+0x300>)
 800f400:	2000      	movs	r0, #0
 800f402:	f002 fc15 	bl	8011c30 <strtok>
 800f406:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while (p2 && argc < kMaxArgs) {
 800f40a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <terminal_process_string+0x52>
 800f412:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f416:	2b3f      	cmp	r3, #63	; 0x3f
 800f418:	dde6      	ble.n	800f3e8 <terminal_process_string+0x20>
	}

	if (argc == 0) {
 800f41a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d103      	bne.n	800f42a <terminal_process_string+0x62>
		modCommandsPrintf("No command received\n");
 800f422:	48aa      	ldr	r0, [pc, #680]	; (800f6cc <terminal_process_string+0x304>)
 800f424:	f7fd f840 	bl	800c4a8 <modCommandsPrintf>
 800f428:	e1ee      	b.n	800f808 <terminal_process_string+0x440>
		return;
	}

	if (strcmp(argv[0], "ping") == 0) {
 800f42a:	f107 030c 	add.w	r3, r7, #12
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	49a7      	ldr	r1, [pc, #668]	; (800f6d0 <terminal_process_string+0x308>)
 800f432:	4618      	mov	r0, r3
 800f434:	f7f0 fef4 	bl	8000220 <strcmp>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d103      	bne.n	800f446 <terminal_process_string+0x7e>
		modCommandsPrintf("pong\n");
 800f43e:	48a5      	ldr	r0, [pc, #660]	; (800f6d4 <terminal_process_string+0x30c>)
 800f440:	f7fd f832 	bl	800c4a8 <modCommandsPrintf>
 800f444:	e1e0      	b.n	800f808 <terminal_process_string+0x440>
	} else if (strcmp(argv[0], "status") == 0) {
 800f446:	f107 030c 	add.w	r3, r7, #12
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	49a2      	ldr	r1, [pc, #648]	; (800f6d8 <terminal_process_string+0x310>)
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f0 fee6 	bl	8000220 <strcmp>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d103      	bne.n	800f462 <terminal_process_string+0x9a>
		modCommandsPrintf("-----BMS Status-----");
 800f45a:	48a0      	ldr	r0, [pc, #640]	; (800f6dc <terminal_process_string+0x314>)
 800f45c:	f7fd f824 	bl	800c4a8 <modCommandsPrintf>
 800f460:	e1d2      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "sens") == 0) {		
 800f462:	f107 030c 	add.w	r3, r7, #12
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	499d      	ldr	r1, [pc, #628]	; (800f6e0 <terminal_process_string+0x318>)
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f0 fed8 	bl	8000220 <strcmp>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d13f      	bne.n	800f4f6 <terminal_process_string+0x12e>
		modCommandsPrintf("-----       Sensors         -----");
 800f476:	489b      	ldr	r0, [pc, #620]	; (800f6e4 <terminal_process_string+0x31c>)
 800f478:	f7fd f816 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf("Input Current:	%5.3f A", meter.Iind *1e-3);
 800f47c:	4b9a      	ldr	r3, [pc, #616]	; (800f6e8 <terminal_process_string+0x320>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4618      	mov	r0, r3
 800f482:	f7f1 f899 	bl	80005b8 <__aeabi_f2d>
 800f486:	a38e      	add	r3, pc, #568	; (adr r3, 800f6c0 <terminal_process_string+0x2f8>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	f7f1 f8ec 	bl	8000668 <__aeabi_dmul>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	4895      	ldr	r0, [pc, #596]	; (800f6ec <terminal_process_string+0x324>)
 800f496:	f7fd f807 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf("Output Current:	%5.3f A", meter.Ihigh *1e-3);
 800f49a:	4b93      	ldr	r3, [pc, #588]	; (800f6e8 <terminal_process_string+0x320>)
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7f1 f88a 	bl	80005b8 <__aeabi_f2d>
 800f4a4:	a386      	add	r3, pc, #536	; (adr r3, 800f6c0 <terminal_process_string+0x2f8>)
 800f4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4aa:	f7f1 f8dd 	bl	8000668 <__aeabi_dmul>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	488f      	ldr	r0, [pc, #572]	; (800f6f0 <terminal_process_string+0x328>)
 800f4b4:	f7fc fff8 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf("Input Voltage:	%5.3f V", meter.Vlow *1e-3);
 800f4b8:	4b8b      	ldr	r3, [pc, #556]	; (800f6e8 <terminal_process_string+0x320>)
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7f1 f87b 	bl	80005b8 <__aeabi_f2d>
 800f4c2:	a37f      	add	r3, pc, #508	; (adr r3, 800f6c0 <terminal_process_string+0x2f8>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f7f1 f8ce 	bl	8000668 <__aeabi_dmul>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4888      	ldr	r0, [pc, #544]	; (800f6f4 <terminal_process_string+0x32c>)
 800f4d2:	f7fc ffe9 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf("Output Voltage:	%5.3f V", meter.Vhigh *1e-3);
 800f4d6:	4b84      	ldr	r3, [pc, #528]	; (800f6e8 <terminal_process_string+0x320>)
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f1 f86c 	bl	80005b8 <__aeabi_f2d>
 800f4e0:	a377      	add	r3, pc, #476	; (adr r3, 800f6c0 <terminal_process_string+0x2f8>)
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	f7f1 f8bf 	bl	8000668 <__aeabi_dmul>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	4882      	ldr	r0, [pc, #520]	; (800f6f8 <terminal_process_string+0x330>)
 800f4f0:	f7fc ffda 	bl	800c4a8 <modCommandsPrintf>
 800f4f4:	e188      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "config") == 0) {
 800f4f6:	f107 030c 	add.w	r3, r7, #12
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	497f      	ldr	r1, [pc, #508]	; (800f6fc <terminal_process_string+0x334>)
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f0 fe8e 	bl	8000220 <strcmp>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d103      	bne.n	800f512 <terminal_process_string+0x14a>
		modCommandsPrintf("---   MPPT Configuration   ---");
 800f50a:	487d      	ldr	r0, [pc, #500]	; (800f700 <terminal_process_string+0x338>)
 800f50c:	f7fc ffcc 	bl	800c4a8 <modCommandsPrintf>
 800f510:	e17a      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "config_default") == 0) {
 800f512:	f107 030c 	add.w	r3, r7, #12
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	497a      	ldr	r1, [pc, #488]	; (800f704 <terminal_process_string+0x33c>)
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f0 fe80 	bl	8000220 <strcmp>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d112      	bne.n	800f54c <terminal_process_string+0x184>
		modCommandsPrintf("--Restoring default config--");
 800f526:	4878      	ldr	r0, [pc, #480]	; (800f708 <terminal_process_string+0x340>)
 800f528:	f7fc ffbe 	bl	800c4a8 <modCommandsPrintf>
		if(modConfigStoreDefaultConfig())
 800f52c:	f7fd f891 	bl	800c652 <modConfigStoreDefaultConfig>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <terminal_process_string+0x176>
			modCommandsPrintf("Succesfully restored config, new config wil be used on powercycle (or use config_read to apply it now).");
 800f536:	4875      	ldr	r0, [pc, #468]	; (800f70c <terminal_process_string+0x344>)
 800f538:	f7fc ffb6 	bl	800c4a8 <modCommandsPrintf>
 800f53c:	e002      	b.n	800f544 <terminal_process_string+0x17c>
		else
			modCommandsPrintf("Error restored config.");
 800f53e:	4874      	ldr	r0, [pc, #464]	; (800f710 <terminal_process_string+0x348>)
 800f540:	f7fc ffb2 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf(" ");
 800f544:	4860      	ldr	r0, [pc, #384]	; (800f6c8 <terminal_process_string+0x300>)
 800f546:	f7fc ffaf 	bl	800c4a8 <modCommandsPrintf>
 800f54a:	e15d      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "config_write") == 0) {
 800f54c:	f107 030c 	add.w	r3, r7, #12
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4970      	ldr	r1, [pc, #448]	; (800f714 <terminal_process_string+0x34c>)
 800f554:	4618      	mov	r0, r3
 800f556:	f7f0 fe63 	bl	8000220 <strcmp>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d112      	bne.n	800f586 <terminal_process_string+0x1be>
		modCommandsPrintf("---    Writing config    ---");
 800f560:	486d      	ldr	r0, [pc, #436]	; (800f718 <terminal_process_string+0x350>)
 800f562:	f7fc ffa1 	bl	800c4a8 <modCommandsPrintf>
		if(modConfigStoreConfig())
 800f566:	f7fd f83f 	bl	800c5e8 <modConfigStoreConfig>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d003      	beq.n	800f578 <terminal_process_string+0x1b0>
			modCommandsPrintf("Succesfully written config.");
 800f570:	486a      	ldr	r0, [pc, #424]	; (800f71c <terminal_process_string+0x354>)
 800f572:	f7fc ff99 	bl	800c4a8 <modCommandsPrintf>
 800f576:	e002      	b.n	800f57e <terminal_process_string+0x1b6>
		else
			modCommandsPrintf("Error writing config.");
 800f578:	4869      	ldr	r0, [pc, #420]	; (800f720 <terminal_process_string+0x358>)
 800f57a:	f7fc ff95 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf(" ");
 800f57e:	4852      	ldr	r0, [pc, #328]	; (800f6c8 <terminal_process_string+0x300>)
 800f580:	f7fc ff92 	bl	800c4a8 <modCommandsPrintf>
 800f584:	e140      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "config_read") == 0) {
 800f586:	f107 030c 	add.w	r3, r7, #12
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4965      	ldr	r1, [pc, #404]	; (800f724 <terminal_process_string+0x35c>)
 800f58e:	4618      	mov	r0, r3
 800f590:	f7f0 fe46 	bl	8000220 <strcmp>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d112      	bne.n	800f5c0 <terminal_process_string+0x1f8>
		modCommandsPrintf("---    Reading config    ---");
 800f59a:	4863      	ldr	r0, [pc, #396]	; (800f728 <terminal_process_string+0x360>)
 800f59c:	f7fc ff84 	bl	800c4a8 <modCommandsPrintf>
		if(modConfigLoadConfig())
 800f5a0:	f7fd f83a 	bl	800c618 <modConfigLoadConfig>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d003      	beq.n	800f5b2 <terminal_process_string+0x1ea>
			modCommandsPrintf("Succesfully read config.");
 800f5aa:	4860      	ldr	r0, [pc, #384]	; (800f72c <terminal_process_string+0x364>)
 800f5ac:	f7fc ff7c 	bl	800c4a8 <modCommandsPrintf>
 800f5b0:	e002      	b.n	800f5b8 <terminal_process_string+0x1f0>
		else
			modCommandsPrintf("Error reading config.");
 800f5b2:	485f      	ldr	r0, [pc, #380]	; (800f730 <terminal_process_string+0x368>)
 800f5b4:	f7fc ff78 	bl	800c4a8 <modCommandsPrintf>
		modCommandsPrintf(" ");
 800f5b8:	4843      	ldr	r0, [pc, #268]	; (800f6c8 <terminal_process_string+0x300>)
 800f5ba:	f7fc ff75 	bl	800c4a8 <modCommandsPrintf>
 800f5be:	e123      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "hwinfo") == 0) {
 800f5c0:	f107 030c 	add.w	r3, r7, #12
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	495b      	ldr	r1, [pc, #364]	; (800f734 <terminal_process_string+0x36c>)
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7f0 fe29 	bl	8000220 <strcmp>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d103      	bne.n	800f5dc <terminal_process_string+0x214>
		modCommandsPrintf("-------    BMS Info   -------");		
 800f5d4:	4858      	ldr	r0, [pc, #352]	; (800f738 <terminal_process_string+0x370>)
 800f5d6:	f7fc ff67 	bl	800c4a8 <modCommandsPrintf>
 800f5da:	e115      	b.n	800f808 <terminal_process_string+0x440>
		
	} else if (strcmp(argv[0], "reboot") == 0) {
 800f5dc:	f107 030c 	add.w	r3, r7, #12
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4956      	ldr	r1, [pc, #344]	; (800f73c <terminal_process_string+0x374>)
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7f0 fe1b 	bl	8000220 <strcmp>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <terminal_process_string+0x232>
		modCommandsPrintf("------  Rebooting BMS  ------");
 800f5f0:	4853      	ldr	r0, [pc, #332]	; (800f740 <terminal_process_string+0x378>)
 800f5f2:	f7fc ff59 	bl	800c4a8 <modCommandsPrintf>
		NVIC_SystemReset();
 800f5f6:	f7ff fed1 	bl	800f39c <__NVIC_SystemReset>
		
	} else if (strcmp(argv[0], "bootloader_erase") == 0) {
 800f5fa:	f107 030c 	add.w	r3, r7, #12
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4950      	ldr	r1, [pc, #320]	; (800f744 <terminal_process_string+0x37c>)
 800f602:	4618      	mov	r0, r3
 800f604:	f7f0 fe0c 	bl	8000220 <strcmp>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f000 80fc 	beq.w	800f808 <terminal_process_string+0x440>
		//if(modFlashEraseNewAppData(0x00002000) == HAL_OK)
		//	modCommandsPrintf("--Erase done.");
		//else
		//	modCommandsPrintf("--Erase error.");
		
	} else if (strcmp(argv[0], "bootloader_jump") == 0) {
 800f610:	f107 030c 	add.w	r3, r7, #12
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	494c      	ldr	r1, [pc, #304]	; (800f748 <terminal_process_string+0x380>)
 800f618:	4618      	mov	r0, r3
 800f61a:	f7f0 fe01 	bl	8000220 <strcmp>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80f1 	beq.w	800f808 <terminal_process_string+0x440>
		//modFlashJumpToBootloader();
		
	} else if (strcmp(argv[0], "help") == 0) {
 800f626:	f107 030c 	add.w	r3, r7, #12
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4947      	ldr	r1, [pc, #284]	; (800f74c <terminal_process_string+0x384>)
 800f62e:	4618      	mov	r0, r3
 800f630:	f7f0 fdf6 	bl	8000220 <strcmp>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	f040 80a5 	bne.w	800f786 <terminal_process_string+0x3be>
		modCommandsPrintf("------- Start of help -------");
 800f63c:	4844      	ldr	r0, [pc, #272]	; (800f750 <terminal_process_string+0x388>)
 800f63e:	f7fc ff33 	bl	800c4a8 <modCommandsPrintf>
		//TODO Write help message

		for (int i = 0;i < callback_write;i++) {
 800f642:	2300      	movs	r3, #0
 800f644:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f648:	e092      	b.n	800f770 <terminal_process_string+0x3a8>
			if (callbacks[i].arg_names) {
 800f64a:	4a42      	ldr	r2, [pc, #264]	; (800f754 <terminal_process_string+0x38c>)
 800f64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	4413      	add	r3, r2
 800f654:	3308      	adds	r3, #8
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d011      	beq.n	800f680 <terminal_process_string+0x2b8>
				modCommandsPrintf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 800f65c:	4a3d      	ldr	r2, [pc, #244]	; (800f754 <terminal_process_string+0x38c>)
 800f65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f662:	011b      	lsls	r3, r3, #4
 800f664:	4413      	add	r3, r2
 800f666:	6819      	ldr	r1, [r3, #0]
 800f668:	4a3a      	ldr	r2, [pc, #232]	; (800f754 <terminal_process_string+0x38c>)
 800f66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f66e:	011b      	lsls	r3, r3, #4
 800f670:	4413      	add	r3, r2
 800f672:	3308      	adds	r3, #8
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	4837      	ldr	r0, [pc, #220]	; (800f758 <terminal_process_string+0x390>)
 800f67a:	f7fc ff15 	bl	800c4a8 <modCommandsPrintf>
 800f67e:	e008      	b.n	800f692 <terminal_process_string+0x2ca>
			} else {
				modCommandsPrintf(callbacks[i].command);
 800f680:	4a34      	ldr	r2, [pc, #208]	; (800f754 <terminal_process_string+0x38c>)
 800f682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	4413      	add	r3, r2
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fc ff0b 	bl	800c4a8 <modCommandsPrintf>
			}

			if (callbacks[i].help) {
 800f692:	4a30      	ldr	r2, [pc, #192]	; (800f754 <terminal_process_string+0x38c>)
 800f694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	4413      	add	r3, r2
 800f69c:	3304      	adds	r3, #4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d05d      	beq.n	800f760 <terminal_process_string+0x398>
				modCommandsPrintf("  %s", callbacks[i].help);
 800f6a4:	4a2b      	ldr	r2, [pc, #172]	; (800f754 <terminal_process_string+0x38c>)
 800f6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	4413      	add	r3, r2
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	4829      	ldr	r0, [pc, #164]	; (800f75c <terminal_process_string+0x394>)
 800f6b6:	f7fc fef7 	bl	800c4a8 <modCommandsPrintf>
 800f6ba:	e054      	b.n	800f766 <terminal_process_string+0x39e>
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800f6c4:	3f50624d 	.word	0x3f50624d
 800f6c8:	080159cc 	.word	0x080159cc
 800f6cc:	080159d0 	.word	0x080159d0
 800f6d0:	080159e8 	.word	0x080159e8
 800f6d4:	080159f0 	.word	0x080159f0
 800f6d8:	080159f8 	.word	0x080159f8
 800f6dc:	08015a00 	.word	0x08015a00
 800f6e0:	08015a18 	.word	0x08015a18
 800f6e4:	08015a20 	.word	0x08015a20
 800f6e8:	200033dc 	.word	0x200033dc
 800f6ec:	08015a44 	.word	0x08015a44
 800f6f0:	08015a5c 	.word	0x08015a5c
 800f6f4:	08015a74 	.word	0x08015a74
 800f6f8:	08015a8c 	.word	0x08015a8c
 800f6fc:	08015aa4 	.word	0x08015aa4
 800f700:	08015aac 	.word	0x08015aac
 800f704:	08015acc 	.word	0x08015acc
 800f708:	08015adc 	.word	0x08015adc
 800f70c:	08015afc 	.word	0x08015afc
 800f710:	08015b64 	.word	0x08015b64
 800f714:	08015b7c 	.word	0x08015b7c
 800f718:	08015b8c 	.word	0x08015b8c
 800f71c:	08015bac 	.word	0x08015bac
 800f720:	08015bc8 	.word	0x08015bc8
 800f724:	08015be0 	.word	0x08015be0
 800f728:	08015bec 	.word	0x08015bec
 800f72c:	08015c0c 	.word	0x08015c0c
 800f730:	08015c28 	.word	0x08015c28
 800f734:	08015c40 	.word	0x08015c40
 800f738:	08015c48 	.word	0x08015c48
 800f73c:	08015c68 	.word	0x08015c68
 800f740:	08015c70 	.word	0x08015c70
 800f744:	08015c90 	.word	0x08015c90
 800f748:	08015ca4 	.word	0x08015ca4
 800f74c:	08015cb4 	.word	0x08015cb4
 800f750:	08015cbc 	.word	0x08015cbc
 800f754:	20001b1c 	.word	0x20001b1c
 800f758:	08015cdc 	.word	0x08015cdc
 800f75c:	08015ce4 	.word	0x08015ce4
			} else {
				modCommandsPrintf("  There is no help available for this command.");
 800f760:	482b      	ldr	r0, [pc, #172]	; (800f810 <terminal_process_string+0x448>)
 800f762:	f7fc fea1 	bl	800c4a8 <modCommandsPrintf>
		for (int i = 0;i < callback_write;i++) {
 800f766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f76a:	3301      	adds	r3, #1
 800f76c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f770:	4b28      	ldr	r3, [pc, #160]	; (800f814 <terminal_process_string+0x44c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f778:	429a      	cmp	r2, r3
 800f77a:	f6ff af66 	blt.w	800f64a <terminal_process_string+0x282>
			}
		}

		modCommandsPrintf(" ");
 800f77e:	4826      	ldr	r0, [pc, #152]	; (800f818 <terminal_process_string+0x450>)
 800f780:	f7fc fe92 	bl	800c4a8 <modCommandsPrintf>
 800f784:	e040      	b.n	800f808 <terminal_process_string+0x440>
	} else {
		bool found = false;
 800f786:	2300      	movs	r3, #0
 800f788:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		for (int i = 0;i < callback_write;i++) {
 800f78c:	2300      	movs	r3, #0
 800f78e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f792:	e025      	b.n	800f7e0 <terminal_process_string+0x418>
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 800f794:	f107 030c 	add.w	r3, r7, #12
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4920      	ldr	r1, [pc, #128]	; (800f81c <terminal_process_string+0x454>)
 800f79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7a0:	011b      	lsls	r3, r3, #4
 800f7a2:	440b      	add	r3, r1
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	f7f0 fd39 	bl	8000220 <strcmp>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d110      	bne.n	800f7d6 <terminal_process_string+0x40e>
				callbacks[i].cbf(argc, (const char**)argv);
 800f7b4:	4a19      	ldr	r2, [pc, #100]	; (800f81c <terminal_process_string+0x454>)
 800f7b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7ba:	011b      	lsls	r3, r3, #4
 800f7bc:	4413      	add	r3, r2
 800f7be:	330c      	adds	r3, #12
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f107 020c 	add.w	r2, r7, #12
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f7cc:	4798      	blx	r3
				found = true;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				break;
 800f7d4:	e00a      	b.n	800f7ec <terminal_process_string+0x424>
		for (int i = 0;i < callback_write;i++) {
 800f7d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f7da:	3301      	adds	r3, #1
 800f7dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <terminal_process_string+0x44c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	dbd3      	blt.n	800f794 <terminal_process_string+0x3cc>
			}
		}

		if (!found) {
 800f7ec:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800f7f0:	f083 0301 	eor.w	r3, r3, #1
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d006      	beq.n	800f808 <terminal_process_string+0x440>
			modCommandsPrintf("Invalid command: %s\n type help to list all available commands\n", argv[0]);
 800f7fa:	f107 030c 	add.w	r3, r7, #12
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4619      	mov	r1, r3
 800f802:	4807      	ldr	r0, [pc, #28]	; (800f820 <terminal_process_string+0x458>)
 800f804:	f7fc fe50 	bl	800c4a8 <modCommandsPrintf>
		}
	}
}
 800f808:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	08015cec 	.word	0x08015cec
 800f814:	20001cac 	.word	0x20001cac
 800f818:	080159cc 	.word	0x080159cc
 800f81c:	20001b1c 	.word	0x20001b1c
 800f820:	08015d1c 	.word	0x08015d1c

0800f824 <modTestingPVInit>:
extern ConverterSettings_t settings;
extern CalibrationData_t cal;

bool curvestate;

void modTestingPVInit(modTestingSolarCell_t* cell, float Vmp, float Voc, float Imp, float Isc, float A){
 800f824:	b580      	push	{r7, lr}
 800f826:	ed2d 8b02 	vpush	{d8}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6178      	str	r0, [r7, #20]
 800f830:	ed87 0a04 	vstr	s0, [r7, #16]
 800f834:	edc7 0a03 	vstr	s1, [r7, #12]
 800f838:	ed87 1a02 	vstr	s2, [r7, #8]
 800f83c:	edc7 1a01 	vstr	s3, [r7, #4]
 800f840:	ed87 2a00 	vstr	s4, [r7]
	Imp = Imp * A / 1000.0f;
 800f844:	ed97 7a02 	vldr	s14, [r7, #8]
 800f848:	edd7 7a00 	vldr	s15, [r7]
 800f84c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f850:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800f8fc <modTestingPVInit+0xd8>
 800f854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f858:	edc7 7a02 	vstr	s15, [r7, #8]
	Isc = Isc * A / 1000.0f;
 800f85c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f860:	edd7 7a00 	vldr	s15, [r7]
 800f864:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f868:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f8fc <modTestingPVInit+0xd8>
 800f86c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f870:	edc7 7a01 	vstr	s15, [r7, #4]

	cell->Isc = Isc;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	609a      	str	r2, [r3, #8]
	cell->Voc = Voc;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	60da      	str	r2, [r3, #12]
	cell->C2 = (Vmp-Voc)/logf(1- (Imp/Isc));
 800f880:	ed97 7a04 	vldr	s14, [r7, #16]
 800f884:	edd7 7a03 	vldr	s15, [r7, #12]
 800f888:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f88c:	edd7 6a02 	vldr	s13, [r7, #8]
 800f890:	ed97 7a01 	vldr	s14, [r7, #4]
 800f894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f89c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f8a4:	f005 faa0 	bl	8014de8 <logf>
 800f8a8:	eeb0 7a40 	vmov.f32	s14, s0
 800f8ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	edc3 7a01 	vstr	s15, [r3, #4]
	cell->C1 = (Isc-Imp)/expf((Vmp-Voc)/cell->C2);
 800f8b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800f8ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800f8be:	ee37 8a67 	vsub.f32	s16, s14, s15
 800f8c2:	ed97 7a04 	vldr	s14, [r7, #16]
 800f8c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800f8ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f8d8:	eeb0 0a66 	vmov.f32	s0, s13
 800f8dc:	f005 fa46 	bl	8014d6c <expf>
 800f8e0:	eeb0 7a40 	vmov.f32	s14, s0
 800f8e4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	edc3 7a00 	vstr	s15, [r3]
}
 800f8ee:	bf00      	nop
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	ecbd 8b02 	vpop	{d8}
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	447a0000 	.word	0x447a0000

0800f900 <getMpp>:

float getMpp(float* IVc){
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
	float mpp = 0.0f;
 800f908:	f04f 0300 	mov.w	r3, #0
 800f90c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IVC_SIZE; i++){
 800f90e:	2300      	movs	r3, #0
 800f910:	613b      	str	r3, [r7, #16]
 800f912:	e01e      	b.n	800f952 <getMpp+0x52>
		float p = IVc[i*2]*IVc[i*2+1];
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	00db      	lsls	r3, r3, #3
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	4413      	add	r3, r2
 800f91c:	ed93 7a00 	vldr	s14, [r3]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	00db      	lsls	r3, r3, #3
 800f924:	3304      	adds	r3, #4
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	4413      	add	r3, r2
 800f92a:	edd3 7a00 	vldr	s15, [r3]
 800f92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f932:	edc7 7a03 	vstr	s15, [r7, #12]
		if(p > mpp)mpp=p;
 800f936:	ed97 7a03 	vldr	s14, [r7, #12]
 800f93a:	edd7 7a05 	vldr	s15, [r7, #20]
 800f93e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f946:	dd01      	ble.n	800f94c <getMpp+0x4c>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IVC_SIZE; i++){
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	3301      	adds	r3, #1
 800f950:	613b      	str	r3, [r7, #16]
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	2b1f      	cmp	r3, #31
 800f956:	dddd      	ble.n	800f914 <getMpp+0x14>
	}
	return mpp;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	ee07 3a90 	vmov	s15, r3
}
 800f95e:	eeb0 0a67 	vmov.f32	s0, s15
 800f962:	371c      	adds	r7, #28
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <modTestingInit>:

void modTestingInit(){
 800f96c:	b580      	push	{r7, lr}
 800f96e:	af00      	add	r7, sp, #0

#if defined(HW_TOPOLOGY_BOOST)
#define Vbat 42.0f
	modTestingPVInit(&cell, 40*0.649f, 40*0.742f, 1.3f, 1.5f, 1000);
 800f970:	ed9f 2a13 	vldr	s4, [pc, #76]	; 800f9c0 <modTestingInit+0x54>
 800f974:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800f978:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800f9c4 <modTestingInit+0x58>
 800f97c:	eddf 0a12 	vldr	s1, [pc, #72]	; 800f9c8 <modTestingInit+0x5c>
 800f980:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800f9cc <modTestingInit+0x60>
 800f984:	4812      	ldr	r0, [pc, #72]	; (800f9d0 <modTestingInit+0x64>)
 800f986:	f7ff ff4d 	bl	800f824 <modTestingPVInit>
	simstate.Vlow=30.0f;
 800f98a:	4b12      	ldr	r3, [pc, #72]	; (800f9d4 <modTestingInit+0x68>)
 800f98c:	4a12      	ldr	r2, [pc, #72]	; (800f9d8 <modTestingInit+0x6c>)
 800f98e:	601a      	str	r2, [r3, #0]
	simstate.Vhigh=Vbat;
 800f990:	4b10      	ldr	r3, [pc, #64]	; (800f9d4 <modTestingInit+0x68>)
 800f992:	4a12      	ldr	r2, [pc, #72]	; (800f9dc <modTestingInit+0x70>)
 800f994:	605a      	str	r2, [r3, #4]
	modTestingPVInit(&cell, 70*0.649f, 70*0.742f, 1.3f, 1.5f, 1000);
	simstate.Vlow=Vbat;
	simstate.Vhigh=60.0f;
#endif

	simstate.Iind = 0;
 800f996:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <modTestingInit+0x68>)
 800f998:	f04f 0200 	mov.w	r2, #0
 800f99c:	609a      	str	r2, [r3, #8]
	simstate.Ihigh = 0;
 800f99e:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <modTestingInit+0x68>)
 800f9a0:	f04f 0200 	mov.w	r2, #0
 800f9a4:	60da      	str	r2, [r3, #12]
	cvic = (float*)IVc2;
 800f9a6:	4b0e      	ldr	r3, [pc, #56]	; (800f9e0 <modTestingInit+0x74>)
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <modTestingInit+0x78>)
 800f9aa:	601a      	str	r2, [r3, #0]
	mpp = getMpp( (float*)IVc2 );
 800f9ac:	480d      	ldr	r0, [pc, #52]	; (800f9e4 <modTestingInit+0x78>)
 800f9ae:	f7ff ffa7 	bl	800f900 <getMpp>
 800f9b2:	eef0 7a40 	vmov.f32	s15, s0
 800f9b6:	4b0c      	ldr	r3, [pc, #48]	; (800f9e8 <modTestingInit+0x7c>)
 800f9b8:	edc3 7a00 	vstr	s15, [r3]
}
 800f9bc:	bf00      	nop
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	447a0000 	.word	0x447a0000
 800f9c4:	3fa66666 	.word	0x3fa66666
 800f9c8:	41ed70a4 	.word	0x41ed70a4
 800f9cc:	41cfae14 	.word	0x41cfae14
 800f9d0:	200035d0 	.word	0x200035d0
 800f9d4:	200033cc 	.word	0x200033cc
 800f9d8:	41f00000 	.word	0x41f00000
 800f9dc:	42280000 	.word	0x42280000
 800f9e0:	200035c8 	.word	0x200035c8
 800f9e4:	20000150 	.word	0x20000150
 800f9e8:	200035c4 	.word	0x200035c4

0800f9ec <modTestingTask>:



void modTestingTask(){
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	af00      	add	r7, sp, #0
	if(modDelayTick1ms(&lastTestTick, 1000)){
 800f9f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f9f4:	4818      	ldr	r0, [pc, #96]	; (800fa58 <modTestingTask+0x6c>)
 800f9f6:	f7fd fe39 	bl	800d66c <modDelayTick1ms>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d029      	beq.n	800fa54 <modTestingTask+0x68>
		curvestate = !curvestate;
 800fa00:	4b16      	ldr	r3, [pc, #88]	; (800fa5c <modTestingTask+0x70>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf14      	ite	ne
 800fa08:	2301      	movne	r3, #1
 800fa0a:	2300      	moveq	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	f083 0301 	eor.w	r3, r3, #1
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	b2da      	uxtb	r2, r3
 800fa1a:	4b10      	ldr	r3, [pc, #64]	; (800fa5c <modTestingTask+0x70>)
 800fa1c:	701a      	strb	r2, [r3, #0]
		if(curvestate){
 800fa1e:	4b0f      	ldr	r3, [pc, #60]	; (800fa5c <modTestingTask+0x70>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00b      	beq.n	800fa3e <modTestingTask+0x52>
			mpp = getMpp((float*)IVc2);
 800fa26:	480e      	ldr	r0, [pc, #56]	; (800fa60 <modTestingTask+0x74>)
 800fa28:	f7ff ff6a 	bl	800f900 <getMpp>
 800fa2c:	eef0 7a40 	vmov.f32	s15, s0
 800fa30:	4b0c      	ldr	r3, [pc, #48]	; (800fa64 <modTestingTask+0x78>)
 800fa32:	edc3 7a00 	vstr	s15, [r3]

			cvic = (float*)IVc2;
 800fa36:	4b0c      	ldr	r3, [pc, #48]	; (800fa68 <modTestingTask+0x7c>)
 800fa38:	4a09      	ldr	r2, [pc, #36]	; (800fa60 <modTestingTask+0x74>)
 800fa3a:	601a      	str	r2, [r3, #0]
		}else{
			mpp = getMpp((float*)IVc1);
			cvic = (float*)IVc1;
		}
	}
}
 800fa3c:	e00a      	b.n	800fa54 <modTestingTask+0x68>
			mpp = getMpp((float*)IVc1);
 800fa3e:	480b      	ldr	r0, [pc, #44]	; (800fa6c <modTestingTask+0x80>)
 800fa40:	f7ff ff5e 	bl	800f900 <getMpp>
 800fa44:	eef0 7a40 	vmov.f32	s15, s0
 800fa48:	4b06      	ldr	r3, [pc, #24]	; (800fa64 <modTestingTask+0x78>)
 800fa4a:	edc3 7a00 	vstr	s15, [r3]
			cvic = (float*)IVc1;
 800fa4e:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <modTestingTask+0x7c>)
 800fa50:	4a06      	ldr	r2, [pc, #24]	; (800fa6c <modTestingTask+0x80>)
 800fa52:	601a      	str	r2, [r3, #0]
}
 800fa54:	bf00      	nop
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20001cb0 	.word	0x20001cb0
 800fa5c:	200035e0 	.word	0x200035e0
 800fa60:	20000150 	.word	0x20000150
 800fa64:	200035c4 	.word	0x200035c4
 800fa68:	200035c8 	.word	0x200035c8
 800fa6c:	20000050 	.word	0x20000050

0800fa70 <modUARTInit>:
uint32_t lastnewline = 0;
bool HasOverflown = false;

UART_HandleTypeDef huart3;

void modUARTInit(void) {
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0

    __HAL_RCC_USART3_CLK_ENABLE();
 800fa76:	4b37      	ldr	r3, [pc, #220]	; (800fb54 <modUARTInit+0xe4>)
 800fa78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa7a:	4a36      	ldr	r2, [pc, #216]	; (800fb54 <modUARTInit+0xe4>)
 800fa7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa80:	6593      	str	r3, [r2, #88]	; 0x58
 800fa82:	4b34      	ldr	r3, [pc, #208]	; (800fb54 <modUARTInit+0xe4>)
 800fa84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa8a:	607b      	str	r3, [r7, #4]
 800fa8c:	687b      	ldr	r3, [r7, #4]

	huart3.Instance = USART3;
 800fa8e:	4b32      	ldr	r3, [pc, #200]	; (800fb58 <modUARTInit+0xe8>)
 800fa90:	4a32      	ldr	r2, [pc, #200]	; (800fb5c <modUARTInit+0xec>)
 800fa92:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800fa94:	4b30      	ldr	r3, [pc, #192]	; (800fb58 <modUARTInit+0xe8>)
 800fa96:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800fa9a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800fa9c:	4b2e      	ldr	r3, [pc, #184]	; (800fb58 <modUARTInit+0xe8>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800faa2:	4b2d      	ldr	r3, [pc, #180]	; (800fb58 <modUARTInit+0xe8>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800faa8:	4b2b      	ldr	r3, [pc, #172]	; (800fb58 <modUARTInit+0xe8>)
 800faaa:	2200      	movs	r2, #0
 800faac:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800faae:	4b2a      	ldr	r3, [pc, #168]	; (800fb58 <modUARTInit+0xe8>)
 800fab0:	220c      	movs	r2, #12
 800fab2:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fab4:	4b28      	ldr	r3, [pc, #160]	; (800fb58 <modUARTInit+0xe8>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800faba:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <modUARTInit+0xe8>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <modUARTInit+0xe8>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fac6:	4b24      	ldr	r3, [pc, #144]	; (800fb58 <modUARTInit+0xe8>)
 800fac8:	2200      	movs	r2, #0
 800faca:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800facc:	4b22      	ldr	r3, [pc, #136]	; (800fb58 <modUARTInit+0xe8>)
 800face:	2200      	movs	r2, #0
 800fad0:	629a      	str	r2, [r3, #40]	; 0x28

	hdma_usart3_rx.Instance = DMA1_Channel2;
 800fad2:	4b23      	ldr	r3, [pc, #140]	; (800fb60 <modUARTInit+0xf0>)
 800fad4:	4a23      	ldr	r2, [pc, #140]	; (800fb64 <modUARTInit+0xf4>)
 800fad6:	601a      	str	r2, [r3, #0]
	hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800fad8:	4b21      	ldr	r3, [pc, #132]	; (800fb60 <modUARTInit+0xf0>)
 800fada:	221c      	movs	r2, #28
 800fadc:	605a      	str	r2, [r3, #4]
	hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fade:	4b20      	ldr	r3, [pc, #128]	; (800fb60 <modUARTInit+0xf0>)
 800fae0:	2200      	movs	r2, #0
 800fae2:	609a      	str	r2, [r3, #8]
	hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fae4:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <modUARTInit+0xf0>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	60da      	str	r2, [r3, #12]
	hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800faea:	4b1d      	ldr	r3, [pc, #116]	; (800fb60 <modUARTInit+0xf0>)
 800faec:	2280      	movs	r2, #128	; 0x80
 800faee:	611a      	str	r2, [r3, #16]
	hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800faf0:	4b1b      	ldr	r3, [pc, #108]	; (800fb60 <modUARTInit+0xf0>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	615a      	str	r2, [r3, #20]
	hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800faf6:	4b1a      	ldr	r3, [pc, #104]	; (800fb60 <modUARTInit+0xf0>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	619a      	str	r2, [r3, #24]
	hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800fafc:	4b18      	ldr	r3, [pc, #96]	; (800fb60 <modUARTInit+0xf0>)
 800fafe:	2220      	movs	r2, #32
 800fb00:	61da      	str	r2, [r3, #28]
	hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800fb02:	4b17      	ldr	r3, [pc, #92]	; (800fb60 <modUARTInit+0xf0>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	621a      	str	r2, [r3, #32]

	HAL_DMA_Init(&hdma_usart3_rx);
 800fb08:	4815      	ldr	r0, [pc, #84]	; (800fb60 <modUARTInit+0xf0>)
 800fb0a:	f7f3 fbcf 	bl	80032ac <HAL_DMA_Init>
	__HAL_LINKDMA(&huart3,hdmarx,hdma_usart3_rx);
 800fb0e:	4b12      	ldr	r3, [pc, #72]	; (800fb58 <modUARTInit+0xe8>)
 800fb10:	4a13      	ldr	r2, [pc, #76]	; (800fb60 <modUARTInit+0xf0>)
 800fb12:	67da      	str	r2, [r3, #124]	; 0x7c
 800fb14:	4b12      	ldr	r3, [pc, #72]	; (800fb60 <modUARTInit+0xf0>)
 800fb16:	4a10      	ldr	r2, [pc, #64]	; (800fb58 <modUARTInit+0xe8>)
 800fb18:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Init(&huart3);
 800fb1a:	480f      	ldr	r0, [pc, #60]	; (800fb58 <modUARTInit+0xe8>)
 800fb1c:	f7f9 fa60 	bl	8008fe0 <HAL_UART_Init>
	HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8);
 800fb20:	2100      	movs	r1, #0
 800fb22:	480d      	ldr	r0, [pc, #52]	; (800fb58 <modUARTInit+0xe8>)
 800fb24:	f7fa f994 	bl	8009e50 <HAL_UARTEx_SetTxFifoThreshold>
	HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8);
 800fb28:	2100      	movs	r1, #0
 800fb2a:	480b      	ldr	r0, [pc, #44]	; (800fb58 <modUARTInit+0xe8>)
 800fb2c:	f7fa f9ce 	bl	8009ecc <HAL_UARTEx_SetRxFifoThreshold>
	HAL_UARTEx_DisableFifoMode(&huart3);
 800fb30:	4809      	ldr	r0, [pc, #36]	; (800fb58 <modUARTInit+0xe8>)
 800fb32:	f7fa f954 	bl	8009dde <HAL_UARTEx_DisableFifoMode>

	HAL_UART_Receive_DMA(&huart3, rxBuffer, RX_BUFFER_SIZE);
 800fb36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb3a:	490b      	ldr	r1, [pc, #44]	; (800fb68 <modUARTInit+0xf8>)
 800fb3c:	4806      	ldr	r0, [pc, #24]	; (800fb58 <modUARTInit+0xe8>)
 800fb3e:	f7f9 fb3f 	bl	80091c0 <HAL_UART_Receive_DMA>
	libPacketInit(modUARTSendPacket, modUARTProcessPacket, PACKET_HANDLER_UART);																				// Configure the UART driver
 800fb42:	2201      	movs	r2, #1
 800fb44:	4909      	ldr	r1, [pc, #36]	; (800fb6c <modUARTInit+0xfc>)
 800fb46:	480a      	ldr	r0, [pc, #40]	; (800fb70 <modUARTInit+0x100>)
 800fb48:	f7fe fc66 	bl	800e418 <libPacketInit>
}
 800fb4c:	bf00      	nop
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	40021000 	.word	0x40021000
 800fb58:	2000340c 	.word	0x2000340c
 800fb5c:	40004800 	.word	0x40004800
 800fb60:	20001ccc 	.word	0x20001ccc
 800fb64:	4002001c 	.word	0x4002001c
 800fb68:	200035e8 	.word	0x200035e8
 800fb6c:	0800fc59 	.word	0x0800fc59
 800fb70:	0800fc7d 	.word	0x0800fc7d

0800fb74 <modUARTTask>:

void modUARTTask(void) {
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
	uint32_t n_wr_pointer = RX_BUFFER_SIZE - DMA1_Channel2->CNDTR;
 800fb7a:	4b2b      	ldr	r3, [pc, #172]	; (800fc28 <modUARTTask+0xb4>)
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800fb82:	603b      	str	r3, [r7, #0]
	uint32_t new = 0;
 800fb84:	2300      	movs	r3, #0
 800fb86:	60fb      	str	r3, [r7, #12]
	if(n_wr_pointer == wr_pointer){
 800fb88:	4b28      	ldr	r3, [pc, #160]	; (800fc2c <modUARTTask+0xb8>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d045      	beq.n	800fc1e <modUARTTask+0xaa>
		//No new character received. return for speed.
		return;
	}

	if(n_wr_pointer < wr_pointer){
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <modUARTTask+0xb8>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	683a      	ldr	r2, [r7, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d20a      	bcs.n	800fbb2 <modUARTTask+0x3e>
		//Buffer went round
		new = n_wr_pointer + (RX_BUFFER_SIZE - wr_pointer);
 800fb9c:	4b23      	ldr	r3, [pc, #140]	; (800fc2c <modUARTTask+0xb8>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fba8:	60fb      	str	r3, [r7, #12]
		HasOverflown = true;
 800fbaa:	4b21      	ldr	r3, [pc, #132]	; (800fc30 <modUARTTask+0xbc>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	701a      	strb	r2, [r3, #0]
 800fbb0:	e004      	b.n	800fbbc <modUARTTask+0x48>

	}
	else{
		new = n_wr_pointer - wr_pointer;
 800fbb2:	4b1e      	ldr	r3, [pc, #120]	; (800fc2c <modUARTTask+0xb8>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	60fb      	str	r3, [r7, #12]
	}
	available += new;
 800fbbc:	4b1d      	ldr	r3, [pc, #116]	; (800fc34 <modUARTTask+0xc0>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	4a1b      	ldr	r2, [pc, #108]	; (800fc34 <modUARTTask+0xc0>)
 800fbc6:	6013      	str	r3, [r2, #0]

	if(available > RX_BUFFER_SIZE){
 800fbc8:	4b1a      	ldr	r3, [pc, #104]	; (800fc34 <modUARTTask+0xc0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbd0:	d903      	bls.n	800fbda <modUARTTask+0x66>
		available = RX_BUFFER_SIZE;
 800fbd2:	4b18      	ldr	r3, [pc, #96]	; (800fc34 <modUARTTask+0xc0>)
 800fbd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbd8:	601a      	str	r2, [r3, #0]
		//Overflow has occurred!
	}

	//Process incoming chars
	for(int i = 0; i < new; i++){
 800fbda:	2300      	movs	r3, #0
 800fbdc:	60bb      	str	r3, [r7, #8]
 800fbde:	e016      	b.n	800fc0e <modUARTTask+0x9a>
		uint32_t index = wr_pointer + i;
 800fbe0:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <modUARTTask+0xb8>)
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	607b      	str	r3, [r7, #4]
		if (index >= RX_BUFFER_SIZE){
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2bff      	cmp	r3, #255	; 0xff
 800fbee:	d903      	bls.n	800fbf8 <modUARTTask+0x84>
			index -= RX_BUFFER_SIZE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800fbf6:	607b      	str	r3, [r7, #4]
		}
		libPacketProcessByte(rxBuffer[index],PACKET_HANDLER_UART);
 800fbf8:	4a0f      	ldr	r2, [pc, #60]	; (800fc38 <modUARTTask+0xc4>)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2101      	movs	r1, #1
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fe fd04 	bl	800e610 <libPacketProcessByte>
	for(int i = 0; i < new; i++){
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	60bb      	str	r3, [r7, #8]
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d8e4      	bhi.n	800fbe0 <modUARTTask+0x6c>

	}
	wr_pointer = n_wr_pointer;
 800fc16:	4a05      	ldr	r2, [pc, #20]	; (800fc2c <modUARTTask+0xb8>)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	e000      	b.n	800fc20 <modUARTTask+0xac>
		return;
 800fc1e:	bf00      	nop
}
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	4002001c 	.word	0x4002001c
 800fc2c:	20001cb4 	.word	0x20001cb4
 800fc30:	20001cbc 	.word	0x20001cbc
 800fc34:	20001cb8 	.word	0x20001cb8
 800fc38:	200035e8 	.word	0x200035e8

0800fc3c <modUARTSendPacketWrapper>:


void modUARTSendPacketWrapper(unsigned char *data, unsigned int len) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
	libPacketSendPacket(data, len, PACKET_HANDLER_UART);
 800fc46:	2201      	movs	r2, #1
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fe fc06 	bl	800e45c <libPacketSendPacket>
}
 800fc50:	bf00      	nop
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <modUARTProcessPacket>:

void modUARTProcessPacket(unsigned char *data, unsigned int len) {
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
	modCommandsSetSendFunction(modUARTSendPacketWrapper);
 800fc62:	4805      	ldr	r0, [pc, #20]	; (800fc78 <modUARTProcessPacket+0x20>)
 800fc64:	f7fb fc82 	bl	800b56c <modCommandsSetSendFunction>
	modCommandsProcessPacket(data, len);
 800fc68:	6839      	ldr	r1, [r7, #0]
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f7fb fca2 	bl	800b5b4 <modCommandsProcessPacket>
}
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	0800fc3d 	.word	0x0800fc3d

0800fc7c <modUARTSendPacket>:

void modUARTSendPacket(unsigned char *data, unsigned int len) {
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, data, len, 100);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	2364      	movs	r3, #100	; 0x64
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	4803      	ldr	r0, [pc, #12]	; (800fc9c <modUARTSendPacket+0x20>)
 800fc90:	f7f9 fa00 	bl	8009094 <HAL_UART_Transmit>
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	2000340c 	.word	0x2000340c

0800fca0 <hw_setio_output>:

#include "hardware.h"

void hw_setio_output(GPIO_TypeDef * port, uint32_t pin){
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b088      	sub	sp, #32
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800fcb6:	f107 030c 	add.w	r3, r7, #12
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7f4 feed 	bl	8004a9c <HAL_GPIO_Init>
}
 800fcc2:	bf00      	nop
 800fcc4:	3720      	adds	r7, #32
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <hw_setio_input>:

void hw_setio_input(GPIO_TypeDef * port, uint32_t pin, uint32_t pull){
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b08a      	sub	sp, #40	; 0x28
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	60f8      	str	r0, [r7, #12]
 800fcd2:	60b9      	str	r1, [r7, #8]
 800fcd4:	607a      	str	r2, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = pull;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800fce2:	f107 0314 	add.w	r3, r7, #20
 800fce6:	4619      	mov	r1, r3
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7f4 fed7 	bl	8004a9c <HAL_GPIO_Init>
}
 800fcee:	bf00      	nop
 800fcf0:	3728      	adds	r7, #40	; 0x28
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}

0800fcf6 <hw_setio_af>:

void hw_setio_af(GPIO_TypeDef * port, uint32_t pin, uint32_t af){
 800fcf6:	b580      	push	{r7, lr}
 800fcf8:	b08a      	sub	sp, #40	; 0x28
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	60f8      	str	r0, [r7, #12]
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd06:	2302      	movs	r3, #2
 800fd08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd0e:	2303      	movs	r3, #3
 800fd10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = af;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800fd16:	f107 0314 	add.w	r3, r7, #20
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f7f4 febd 	bl	8004a9c <HAL_GPIO_Init>
}
 800fd22:	bf00      	nop
 800fd24:	3728      	adds	r7, #40	; 0x28
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <hw_setio_analog>:

void hw_setio_analog(GPIO_TypeDef * port, uint32_t pin){
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b088      	sub	sp, #32
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
 800fd32:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = IHS__Pin|IHS_A3_Pin;
 800fd34:	230c      	movs	r3, #12
 800fd36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fd38:	2303      	movs	r3, #3
 800fd3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800fd40:	f107 030c 	add.w	r3, r7, #12
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7f4 fea8 	bl	8004a9c <HAL_GPIO_Init>
}
 800fd4c:	bf00      	nop
 800fd4e:	3720      	adds	r7, #32
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <hw_io_init>:
				56,//uint16_t generalCanId;
		},
};


void hw_io_init(){
 800fd54:	b580      	push	{r7, lr}
 800fd56:	af00      	add	r7, sp, #0

	//PWM
	hw_setio_af(GPIOA, P2_PWM_LS_Pin, GPIO_AF13_HRTIM1);
 800fd58:	220d      	movs	r2, #13
 800fd5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fd5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fd62:	f7ff ffc8 	bl	800fcf6 <hw_setio_af>
	hw_setio_af(GPIOA, P2_EN_HS_Pin,  GPIO_AF13_HRTIM1);
 800fd66:	220d      	movs	r2, #13
 800fd68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fd6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fd70:	f7ff ffc1 	bl	800fcf6 <hw_setio_af>

	//UART
	hw_setio_af(GPIOC, GPIO_PIN_10, GPIO_AF7_USART3);
 800fd74:	2207      	movs	r2, #7
 800fd76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fd7a:	4848      	ldr	r0, [pc, #288]	; (800fe9c <hw_io_init+0x148>)
 800fd7c:	f7ff ffbb 	bl	800fcf6 <hw_setio_af>
	hw_setio_af(GPIOC, GPIO_PIN_11, GPIO_AF7_USART3);
 800fd80:	2207      	movs	r2, #7
 800fd82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fd86:	4845      	ldr	r0, [pc, #276]	; (800fe9c <hw_io_init+0x148>)
 800fd88:	f7ff ffb5 	bl	800fcf6 <hw_setio_af>

	HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800fd92:	4842      	ldr	r0, [pc, #264]	; (800fe9c <hw_io_init+0x148>)
 800fd94:	f7f5 f81c 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PHSEN_Pin|PEN_Pin, GPIO_PIN_RESET);
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800fd9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fda2:	f7f5 f815 	bl	8004dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DREN_Pin|LED3_Pin, GPIO_PIN_RESET);
 800fda6:	2200      	movs	r2, #0
 800fda8:	f44f 7104 	mov.w	r1, #528	; 0x210
 800fdac:	483c      	ldr	r0, [pc, #240]	; (800fea0 <hw_io_init+0x14c>)
 800fdae:	f7f5 f80f 	bl	8004dd0 <HAL_GPIO_WritePin>

	hw_setio_output(LED0_GPIO_Port, LED0_Pin);
 800fdb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdb6:	4839      	ldr	r0, [pc, #228]	; (800fe9c <hw_io_init+0x148>)
 800fdb8:	f7ff ff72 	bl	800fca0 <hw_setio_output>
	hw_setio_output(LED1_GPIO_Port, LED1_Pin);
 800fdbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fdc0:	4836      	ldr	r0, [pc, #216]	; (800fe9c <hw_io_init+0x148>)
 800fdc2:	f7ff ff6d 	bl	800fca0 <hw_setio_output>
	hw_setio_output(LED2_GPIO_Port, LED2_Pin);
 800fdc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fdca:	4834      	ldr	r0, [pc, #208]	; (800fe9c <hw_io_init+0x148>)
 800fdcc:	f7ff ff68 	bl	800fca0 <hw_setio_output>
	hw_setio_output(LED3_GPIO_Port, LED3_Pin);
 800fdd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fdd4:	4832      	ldr	r0, [pc, #200]	; (800fea0 <hw_io_init+0x14c>)
 800fdd6:	f7ff ff63 	bl	800fca0 <hw_setio_output>
	hw_setio_output(PHSEN_GPIO_Port, PHSEN_Pin);
 800fdda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fdde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fde2:	f7ff ff5d 	bl	800fca0 <hw_setio_output>
	hw_setio_output(PEN_GPIO_Port,PEN_Pin);
 800fde6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fdee:	f7ff ff57 	bl	800fca0 <hw_setio_output>
	hw_setio_output(DREN_GPIO_Port, DREN_Pin);
 800fdf2:	2110      	movs	r1, #16
 800fdf4:	482a      	ldr	r0, [pc, #168]	; (800fea0 <hw_io_init+0x14c>)
 800fdf6:	f7ff ff53 	bl	800fca0 <hw_setio_output>

	hw_setio_input(ID0_GPIO_Port, ID0_Pin, GPIO_PULLUP);
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	2110      	movs	r1, #16
 800fdfe:	4827      	ldr	r0, [pc, #156]	; (800fe9c <hw_io_init+0x148>)
 800fe00:	f7ff ff63 	bl	800fcca <hw_setio_input>
	hw_setio_input(ID1_GPIO_Port, ID1_Pin, GPIO_PULLUP);
 800fe04:	2201      	movs	r2, #1
 800fe06:	2101      	movs	r1, #1
 800fe08:	4825      	ldr	r0, [pc, #148]	; (800fea0 <hw_io_init+0x14c>)
 800fe0a:	f7ff ff5e 	bl	800fcca <hw_setio_input>
	hw_setio_input(ID2_GPIO_Port, ID2_Pin, GPIO_PULLUP);
 800fe0e:	2201      	movs	r2, #1
 800fe10:	2102      	movs	r1, #2
 800fe12:	4823      	ldr	r0, [pc, #140]	; (800fea0 <hw_io_init+0x14c>)
 800fe14:	f7ff ff59 	bl	800fcca <hw_setio_input>
	hw_setio_input(ID3_GPIO_Port, ID3_Pin, GPIO_PULLUP);
 800fe18:	2201      	movs	r2, #1
 800fe1a:	2104      	movs	r1, #4
 800fe1c:	4820      	ldr	r0, [pc, #128]	; (800fea0 <hw_io_init+0x14c>)
 800fe1e:	f7ff ff54 	bl	800fcca <hw_setio_input>

	hw_setio_input(VDRVPG_GPIO_Port, VDRVPG_Pin, GPIO_PULLUP);
 800fe22:	2201      	movs	r2, #1
 800fe24:	2180      	movs	r1, #128	; 0x80
 800fe26:	481e      	ldr	r0, [pc, #120]	; (800fea0 <hw_io_init+0x14c>)
 800fe28:	f7ff ff4f 	bl	800fcca <hw_setio_input>
	hw_setio_input(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PULLUP);
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe32:	481b      	ldr	r0, [pc, #108]	; (800fea0 <hw_io_init+0x14c>)
 800fe34:	f7ff ff49 	bl	800fcca <hw_setio_input>
	hw_setio_input(RST_GPIO_Port, RST_Pin, GPIO_NOPULL);
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fe3e:	4819      	ldr	r0, [pc, #100]	; (800fea4 <hw_io_init+0x150>)
 800fe40:	f7ff ff43 	bl	800fcca <hw_setio_input>

	hw_setio_analog(IHS__GPIO_Port, IHS__Pin);
 800fe44:	2104      	movs	r1, #4
 800fe46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe4a:	f7ff ff6e 	bl	800fd2a <hw_setio_analog>
	hw_setio_analog(IHS_A3_GPIO_Port, IHS_A3_Pin);
 800fe4e:	2108      	movs	r1, #8
 800fe50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe54:	f7ff ff69 	bl	800fd2a <hw_setio_analog>

	hw_setio_analog(ILS__GPIO_Port, ILS__Pin);
 800fe58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fe5c:	4810      	ldr	r0, [pc, #64]	; (800fea0 <hw_io_init+0x14c>)
 800fe5e:	f7ff ff64 	bl	800fd2a <hw_setio_analog>
	hw_setio_analog(ILS_B15_GPIO_Port, ILS_B15_Pin);
 800fe62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fe66:	480e      	ldr	r0, [pc, #56]	; (800fea0 <hw_io_init+0x14c>)
 800fe68:	f7ff ff5f 	bl	800fd2a <hw_setio_analog>

	hw_setio_analog(Tamb_GPIO_Port, Tamb_Pin);
 800fe6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe74:	f7ff ff59 	bl	800fd2a <hw_setio_analog>
	hw_setio_analog(Tsink_GPIO_Port, Tsink_Pin);
 800fe78:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe80:	f7ff ff53 	bl	800fd2a <hw_setio_analog>

	hw_setio_analog(VHS_GPIO_Port, VHS_Pin);
 800fe84:	2180      	movs	r1, #128	; 0x80
 800fe86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe8a:	f7ff ff4e 	bl	800fd2a <hw_setio_analog>
	hw_setio_analog(VLS_GPIO_Port, VLS_Pin);
 800fe8e:	2102      	movs	r1, #2
 800fe90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fe94:	f7ff ff49 	bl	800fd2a <hw_setio_analog>
}
 800fe98:	bf00      	nop
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	48000800 	.word	0x48000800
 800fea0:	48000400 	.word	0x48000400
 800fea4:	48001800 	.word	0x48001800

0800fea8 <hw_adc_init>:

void hw_adc_init(){
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b08a      	sub	sp, #40	; 0x28
 800feac:	af02      	add	r7, sp, #8
	//Init opamps
	hopamp3.Instance = OPAMP3;
 800feae:	4b47      	ldr	r3, [pc, #284]	; (800ffcc <hw_adc_init+0x124>)
 800feb0:	4a47      	ldr	r2, [pc, #284]	; (800ffd0 <hw_adc_init+0x128>)
 800feb2:	601a      	str	r2, [r3, #0]
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800feb4:	4b45      	ldr	r3, [pc, #276]	; (800ffcc <hw_adc_init+0x124>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	605a      	str	r2, [r3, #4]
	hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800feba:	4b44      	ldr	r3, [pc, #272]	; (800ffcc <hw_adc_init+0x124>)
 800febc:	2260      	movs	r2, #96	; 0x60
 800febe:	609a      	str	r2, [r3, #8]
	hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800fec0:	4b42      	ldr	r3, [pc, #264]	; (800ffcc <hw_adc_init+0x124>)
 800fec2:	2208      	movs	r2, #8
 800fec4:	611a      	str	r2, [r3, #16]
	hopamp3.Init.InternalOutput = ENABLE;
 800fec6:	4b41      	ldr	r3, [pc, #260]	; (800ffcc <hw_adc_init+0x124>)
 800fec8:	2201      	movs	r2, #1
 800feca:	751a      	strb	r2, [r3, #20]
	hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800fecc:	4b3f      	ldr	r3, [pc, #252]	; (800ffcc <hw_adc_init+0x124>)
 800fece:	2200      	movs	r2, #0
 800fed0:	619a      	str	r2, [r3, #24]
	hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800fed2:	4b3e      	ldr	r3, [pc, #248]	; (800ffcc <hw_adc_init+0x124>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_OPAMP_Init(&hopamp3);
 800fed8:	483c      	ldr	r0, [pc, #240]	; (800ffcc <hw_adc_init+0x124>)
 800feda:	f7f7 f8fb 	bl	80070d4 <HAL_OPAMP_Init>

	hopamp2.Instance = OPAMP2;
 800fede:	4b3d      	ldr	r3, [pc, #244]	; (800ffd4 <hw_adc_init+0x12c>)
 800fee0:	4a3d      	ldr	r2, [pc, #244]	; (800ffd8 <hw_adc_init+0x130>)
 800fee2:	601a      	str	r2, [r3, #0]
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800fee4:	4b3b      	ldr	r3, [pc, #236]	; (800ffd4 <hw_adc_init+0x12c>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	605a      	str	r2, [r3, #4]
	hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800feea:	4b3a      	ldr	r3, [pc, #232]	; (800ffd4 <hw_adc_init+0x12c>)
 800feec:	2260      	movs	r2, #96	; 0x60
 800feee:	609a      	str	r2, [r3, #8]
	hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800fef0:	4b38      	ldr	r3, [pc, #224]	; (800ffd4 <hw_adc_init+0x12c>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	611a      	str	r2, [r3, #16]
	hopamp2.Init.InternalOutput = ENABLE;
 800fef6:	4b37      	ldr	r3, [pc, #220]	; (800ffd4 <hw_adc_init+0x12c>)
 800fef8:	2201      	movs	r2, #1
 800fefa:	751a      	strb	r2, [r3, #20]
	hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800fefc:	4b35      	ldr	r3, [pc, #212]	; (800ffd4 <hw_adc_init+0x12c>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	619a      	str	r2, [r3, #24]
	hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800ff02:	4b34      	ldr	r3, [pc, #208]	; (800ffd4 <hw_adc_init+0x12c>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_OPAMP_Init(&hopamp2);
 800ff08:	4832      	ldr	r0, [pc, #200]	; (800ffd4 <hw_adc_init+0x12c>)
 800ff0a:	f7f7 f8e3 	bl	80070d4 <HAL_OPAMP_Init>


	HAL_OPAMP_Start(&hopamp2);
 800ff0e:	4831      	ldr	r0, [pc, #196]	; (800ffd4 <hw_adc_init+0x12c>)
 800ff10:	f7f7 f9ba 	bl	8007288 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800ff14:	482d      	ldr	r0, [pc, #180]	; (800ffcc <hw_adc_init+0x124>)
 800ff16:	f7f7 f9b7 	bl	8007288 <HAL_OPAMP_Start>
	HAL_OPAMPEx_SelfCalibrateAll(&hopamp2, &hopamp3, &hopamp3, &hopamp3, &hopamp3, &hopamp3);
 800ff1a:	4b2c      	ldr	r3, [pc, #176]	; (800ffcc <hw_adc_init+0x124>)
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	4b2b      	ldr	r3, [pc, #172]	; (800ffcc <hw_adc_init+0x124>)
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4b2a      	ldr	r3, [pc, #168]	; (800ffcc <hw_adc_init+0x124>)
 800ff24:	4a29      	ldr	r2, [pc, #164]	; (800ffcc <hw_adc_init+0x124>)
 800ff26:	4929      	ldr	r1, [pc, #164]	; (800ffcc <hw_adc_init+0x124>)
 800ff28:	482a      	ldr	r0, [pc, #168]	; (800ffd4 <hw_adc_init+0x12c>)
 800ff2a:	f7f7 f9de 	bl	80072ea <HAL_OPAMPEx_SelfCalibrateAll>

	ADC_ChannelConfTypeDef sConfig = {0};
 800ff2e:	463b      	mov	r3, r7
 800ff30:	2220      	movs	r2, #32
 800ff32:	2100      	movs	r1, #0
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 f8a1 	bl	801007c <memset>
	sConfig.Offset = 0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ff3e:	2304      	movs	r3, #4
 800ff40:	613b      	str	r3, [r7, #16]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800ff42:	2306      	movs	r3, #6
 800ff44:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800ff46:	2300      	movs	r3, #0
 800ff48:	60bb      	str	r3, [r7, #8]
	//sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ff4a:	237f      	movs	r3, #127	; 0x7f
 800ff4c:	60fb      	str	r3, [r7, #12]

	//sConfig.Channel = ADC_CHANNEL_3;
	sConfig.Channel = ADC_CHANNEL_4;
 800ff4e:	4b23      	ldr	r3, [pc, #140]	; (800ffdc <hw_adc_init+0x134>)
 800ff50:	603b      	str	r3, [r7, #0]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800ff52:	463b      	mov	r3, r7
 800ff54:	4619      	mov	r1, r3
 800ff56:	4822      	ldr	r0, [pc, #136]	; (800ffe0 <hw_adc_init+0x138>)
 800ff58:	f7f2 fa02 	bl	8002360 <HAL_ADC_ConfigChannel>

	//sConfig.Channel = ADC_CHANNEL_4;
	sConfig.Channel = ADC_CHANNEL_5;
 800ff5c:	4b21      	ldr	r3, [pc, #132]	; (800ffe4 <hw_adc_init+0x13c>)
 800ff5e:	603b      	str	r3, [r7, #0]

	HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800ff60:	463b      	mov	r3, r7
 800ff62:	4619      	mov	r1, r3
 800ff64:	4820      	ldr	r0, [pc, #128]	; (800ffe8 <hw_adc_init+0x140>)
 800ff66:	f7f2 f9fb 	bl	8002360 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 800ff6a:	4b20      	ldr	r3, [pc, #128]	; (800ffec <hw_adc_init+0x144>)
 800ff6c:	603b      	str	r3, [r7, #0]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ff6e:	237f      	movs	r3, #127	; 0x7f
 800ff70:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800ff72:	463b      	mov	r3, r7
 800ff74:	4619      	mov	r1, r3
 800ff76:	481e      	ldr	r0, [pc, #120]	; (800fff0 <hw_adc_init+0x148>)
 800ff78:	f7f2 f9f2 	bl	8002360 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 800ff7c:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <hw_adc_init+0x14c>)
 800ff7e:	603b      	str	r3, [r7, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800ff80:	463b      	mov	r3, r7
 800ff82:	4619      	mov	r1, r3
 800ff84:	481c      	ldr	r0, [pc, #112]	; (800fff8 <hw_adc_init+0x150>)
 800ff86:	f7f2 f9eb 	bl	8002360 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 800ff8a:	4b1c      	ldr	r3, [pc, #112]	; (800fffc <hw_adc_init+0x154>)
 800ff8c:	603b      	str	r3, [r7, #0]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800ff8e:	2304      	movs	r3, #4
 800ff90:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800ff92:	237f      	movs	r3, #127	; 0x7f
 800ff94:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800ff96:	463b      	mov	r3, r7
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4819      	ldr	r0, [pc, #100]	; (8010000 <hw_adc_init+0x158>)
 800ff9c:	f7f2 f9e0 	bl	8002360 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_1;
 800ffa0:	4b18      	ldr	r3, [pc, #96]	; (8010004 <hw_adc_init+0x15c>)
 800ffa2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800ffa4:	230c      	movs	r3, #12
 800ffa6:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800ffa8:	463b      	mov	r3, r7
 800ffaa:	4619      	mov	r1, r3
 800ffac:	4814      	ldr	r0, [pc, #80]	; (8010000 <hw_adc_init+0x158>)
 800ffae:	f7f2 f9d7 	bl	8002360 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_2;
 800ffb2:	4b15      	ldr	r3, [pc, #84]	; (8010008 <hw_adc_init+0x160>)
 800ffb4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800ffb6:	2312      	movs	r3, #18
 800ffb8:	607b      	str	r3, [r7, #4]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800ffba:	463b      	mov	r3, r7
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	4810      	ldr	r0, [pc, #64]	; (8010000 <hw_adc_init+0x158>)
 800ffc0:	f7f2 f9ce 	bl	8002360 <HAL_ADC_ConfigChannel>
}
 800ffc4:	bf00      	nop
 800ffc6:	3720      	adds	r7, #32
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	20003824 	.word	0x20003824
 800ffd0:	40010308 	.word	0x40010308
 800ffd4:	200037e8 	.word	0x200037e8
 800ffd8:	40010304 	.word	0x40010304
 800ffdc:	10c00010 	.word	0x10c00010
 800ffe0:	20001e7c 	.word	0x20001e7c
 800ffe4:	14f00020 	.word	0x14f00020
 800ffe8:	20001fcc 	.word	0x20001fcc
 800ffec:	c3290000 	.word	0xc3290000
 800fff0:	20001d2c 	.word	0x20001d2c
 800fff4:	b6982000 	.word	0xb6982000
 800fff8:	20001f60 	.word	0x20001f60
 800fffc:	90c00010 	.word	0x90c00010
 8010000:	20001d98 	.word	0x20001d98
 8010004:	04300002 	.word	0x04300002
 8010008:	08600004 	.word	0x08600004

0801000c <__errno>:
 801000c:	4b01      	ldr	r3, [pc, #4]	; (8010014 <__errno+0x8>)
 801000e:	6818      	ldr	r0, [r3, #0]
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	200003a8 	.word	0x200003a8

08010018 <__libc_init_array>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	4d0d      	ldr	r5, [pc, #52]	; (8010050 <__libc_init_array+0x38>)
 801001c:	4c0d      	ldr	r4, [pc, #52]	; (8010054 <__libc_init_array+0x3c>)
 801001e:	1b64      	subs	r4, r4, r5
 8010020:	10a4      	asrs	r4, r4, #2
 8010022:	2600      	movs	r6, #0
 8010024:	42a6      	cmp	r6, r4
 8010026:	d109      	bne.n	801003c <__libc_init_array+0x24>
 8010028:	4d0b      	ldr	r5, [pc, #44]	; (8010058 <__libc_init_array+0x40>)
 801002a:	4c0c      	ldr	r4, [pc, #48]	; (801005c <__libc_init_array+0x44>)
 801002c:	f005 fcba 	bl	80159a4 <_init>
 8010030:	1b64      	subs	r4, r4, r5
 8010032:	10a4      	asrs	r4, r4, #2
 8010034:	2600      	movs	r6, #0
 8010036:	42a6      	cmp	r6, r4
 8010038:	d105      	bne.n	8010046 <__libc_init_array+0x2e>
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010040:	4798      	blx	r3
 8010042:	3601      	adds	r6, #1
 8010044:	e7ee      	b.n	8010024 <__libc_init_array+0xc>
 8010046:	f855 3b04 	ldr.w	r3, [r5], #4
 801004a:	4798      	blx	r3
 801004c:	3601      	adds	r6, #1
 801004e:	e7f2      	b.n	8010036 <__libc_init_array+0x1e>
 8010050:	08016558 	.word	0x08016558
 8010054:	08016558 	.word	0x08016558
 8010058:	08016558 	.word	0x08016558
 801005c:	0801655c 	.word	0x0801655c

08010060 <memcpy>:
 8010060:	440a      	add	r2, r1
 8010062:	4291      	cmp	r1, r2
 8010064:	f100 33ff 	add.w	r3, r0, #4294967295
 8010068:	d100      	bne.n	801006c <memcpy+0xc>
 801006a:	4770      	bx	lr
 801006c:	b510      	push	{r4, lr}
 801006e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010076:	4291      	cmp	r1, r2
 8010078:	d1f9      	bne.n	801006e <memcpy+0xe>
 801007a:	bd10      	pop	{r4, pc}

0801007c <memset>:
 801007c:	4402      	add	r2, r0
 801007e:	4603      	mov	r3, r0
 8010080:	4293      	cmp	r3, r2
 8010082:	d100      	bne.n	8010086 <memset+0xa>
 8010084:	4770      	bx	lr
 8010086:	f803 1b01 	strb.w	r1, [r3], #1
 801008a:	e7f9      	b.n	8010080 <memset+0x4>

0801008c <__cvt>:
 801008c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010090:	ec55 4b10 	vmov	r4, r5, d0
 8010094:	2d00      	cmp	r5, #0
 8010096:	460e      	mov	r6, r1
 8010098:	4619      	mov	r1, r3
 801009a:	462b      	mov	r3, r5
 801009c:	bfbb      	ittet	lt
 801009e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80100a2:	461d      	movlt	r5, r3
 80100a4:	2300      	movge	r3, #0
 80100a6:	232d      	movlt	r3, #45	; 0x2d
 80100a8:	700b      	strb	r3, [r1, #0]
 80100aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80100b0:	4691      	mov	r9, r2
 80100b2:	f023 0820 	bic.w	r8, r3, #32
 80100b6:	bfbc      	itt	lt
 80100b8:	4622      	movlt	r2, r4
 80100ba:	4614      	movlt	r4, r2
 80100bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100c0:	d005      	beq.n	80100ce <__cvt+0x42>
 80100c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80100c6:	d100      	bne.n	80100ca <__cvt+0x3e>
 80100c8:	3601      	adds	r6, #1
 80100ca:	2102      	movs	r1, #2
 80100cc:	e000      	b.n	80100d0 <__cvt+0x44>
 80100ce:	2103      	movs	r1, #3
 80100d0:	ab03      	add	r3, sp, #12
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	ab02      	add	r3, sp, #8
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	ec45 4b10 	vmov	d0, r4, r5
 80100dc:	4653      	mov	r3, sl
 80100de:	4632      	mov	r2, r6
 80100e0:	f001 ff6e 	bl	8011fc0 <_dtoa_r>
 80100e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100e8:	4607      	mov	r7, r0
 80100ea:	d102      	bne.n	80100f2 <__cvt+0x66>
 80100ec:	f019 0f01 	tst.w	r9, #1
 80100f0:	d022      	beq.n	8010138 <__cvt+0xac>
 80100f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100f6:	eb07 0906 	add.w	r9, r7, r6
 80100fa:	d110      	bne.n	801011e <__cvt+0x92>
 80100fc:	783b      	ldrb	r3, [r7, #0]
 80100fe:	2b30      	cmp	r3, #48	; 0x30
 8010100:	d10a      	bne.n	8010118 <__cvt+0x8c>
 8010102:	2200      	movs	r2, #0
 8010104:	2300      	movs	r3, #0
 8010106:	4620      	mov	r0, r4
 8010108:	4629      	mov	r1, r5
 801010a:	f7f0 fd15 	bl	8000b38 <__aeabi_dcmpeq>
 801010e:	b918      	cbnz	r0, 8010118 <__cvt+0x8c>
 8010110:	f1c6 0601 	rsb	r6, r6, #1
 8010114:	f8ca 6000 	str.w	r6, [sl]
 8010118:	f8da 3000 	ldr.w	r3, [sl]
 801011c:	4499      	add	r9, r3
 801011e:	2200      	movs	r2, #0
 8010120:	2300      	movs	r3, #0
 8010122:	4620      	mov	r0, r4
 8010124:	4629      	mov	r1, r5
 8010126:	f7f0 fd07 	bl	8000b38 <__aeabi_dcmpeq>
 801012a:	b108      	cbz	r0, 8010130 <__cvt+0xa4>
 801012c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010130:	2230      	movs	r2, #48	; 0x30
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	454b      	cmp	r3, r9
 8010136:	d307      	bcc.n	8010148 <__cvt+0xbc>
 8010138:	9b03      	ldr	r3, [sp, #12]
 801013a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801013c:	1bdb      	subs	r3, r3, r7
 801013e:	4638      	mov	r0, r7
 8010140:	6013      	str	r3, [r2, #0]
 8010142:	b004      	add	sp, #16
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	1c59      	adds	r1, r3, #1
 801014a:	9103      	str	r1, [sp, #12]
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	e7f0      	b.n	8010132 <__cvt+0xa6>

08010150 <__exponent>:
 8010150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010152:	4603      	mov	r3, r0
 8010154:	2900      	cmp	r1, #0
 8010156:	bfb8      	it	lt
 8010158:	4249      	neglt	r1, r1
 801015a:	f803 2b02 	strb.w	r2, [r3], #2
 801015e:	bfb4      	ite	lt
 8010160:	222d      	movlt	r2, #45	; 0x2d
 8010162:	222b      	movge	r2, #43	; 0x2b
 8010164:	2909      	cmp	r1, #9
 8010166:	7042      	strb	r2, [r0, #1]
 8010168:	dd2a      	ble.n	80101c0 <__exponent+0x70>
 801016a:	f10d 0407 	add.w	r4, sp, #7
 801016e:	46a4      	mov	ip, r4
 8010170:	270a      	movs	r7, #10
 8010172:	46a6      	mov	lr, r4
 8010174:	460a      	mov	r2, r1
 8010176:	fb91 f6f7 	sdiv	r6, r1, r7
 801017a:	fb07 1516 	mls	r5, r7, r6, r1
 801017e:	3530      	adds	r5, #48	; 0x30
 8010180:	2a63      	cmp	r2, #99	; 0x63
 8010182:	f104 34ff 	add.w	r4, r4, #4294967295
 8010186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801018a:	4631      	mov	r1, r6
 801018c:	dcf1      	bgt.n	8010172 <__exponent+0x22>
 801018e:	3130      	adds	r1, #48	; 0x30
 8010190:	f1ae 0502 	sub.w	r5, lr, #2
 8010194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010198:	1c44      	adds	r4, r0, #1
 801019a:	4629      	mov	r1, r5
 801019c:	4561      	cmp	r1, ip
 801019e:	d30a      	bcc.n	80101b6 <__exponent+0x66>
 80101a0:	f10d 0209 	add.w	r2, sp, #9
 80101a4:	eba2 020e 	sub.w	r2, r2, lr
 80101a8:	4565      	cmp	r5, ip
 80101aa:	bf88      	it	hi
 80101ac:	2200      	movhi	r2, #0
 80101ae:	4413      	add	r3, r2
 80101b0:	1a18      	subs	r0, r3, r0
 80101b2:	b003      	add	sp, #12
 80101b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80101be:	e7ed      	b.n	801019c <__exponent+0x4c>
 80101c0:	2330      	movs	r3, #48	; 0x30
 80101c2:	3130      	adds	r1, #48	; 0x30
 80101c4:	7083      	strb	r3, [r0, #2]
 80101c6:	70c1      	strb	r1, [r0, #3]
 80101c8:	1d03      	adds	r3, r0, #4
 80101ca:	e7f1      	b.n	80101b0 <__exponent+0x60>

080101cc <_printf_float>:
 80101cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d0:	ed2d 8b02 	vpush	{d8}
 80101d4:	b08d      	sub	sp, #52	; 0x34
 80101d6:	460c      	mov	r4, r1
 80101d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101dc:	4616      	mov	r6, r2
 80101de:	461f      	mov	r7, r3
 80101e0:	4605      	mov	r5, r0
 80101e2:	f003 f85b 	bl	801329c <_localeconv_r>
 80101e6:	f8d0 a000 	ldr.w	sl, [r0]
 80101ea:	4650      	mov	r0, sl
 80101ec:	f7f0 f822 	bl	8000234 <strlen>
 80101f0:	2300      	movs	r3, #0
 80101f2:	930a      	str	r3, [sp, #40]	; 0x28
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	9305      	str	r3, [sp, #20]
 80101f8:	f8d8 3000 	ldr.w	r3, [r8]
 80101fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010200:	3307      	adds	r3, #7
 8010202:	f023 0307 	bic.w	r3, r3, #7
 8010206:	f103 0208 	add.w	r2, r3, #8
 801020a:	f8c8 2000 	str.w	r2, [r8]
 801020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801021a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801021e:	9307      	str	r3, [sp, #28]
 8010220:	f8cd 8018 	str.w	r8, [sp, #24]
 8010224:	ee08 0a10 	vmov	s16, r0
 8010228:	4b9f      	ldr	r3, [pc, #636]	; (80104a8 <_printf_float+0x2dc>)
 801022a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801022e:	f04f 32ff 	mov.w	r2, #4294967295
 8010232:	f7f0 fcb3 	bl	8000b9c <__aeabi_dcmpun>
 8010236:	bb88      	cbnz	r0, 801029c <_printf_float+0xd0>
 8010238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801023c:	4b9a      	ldr	r3, [pc, #616]	; (80104a8 <_printf_float+0x2dc>)
 801023e:	f04f 32ff 	mov.w	r2, #4294967295
 8010242:	f7f0 fc8d 	bl	8000b60 <__aeabi_dcmple>
 8010246:	bb48      	cbnz	r0, 801029c <_printf_float+0xd0>
 8010248:	2200      	movs	r2, #0
 801024a:	2300      	movs	r3, #0
 801024c:	4640      	mov	r0, r8
 801024e:	4649      	mov	r1, r9
 8010250:	f7f0 fc7c 	bl	8000b4c <__aeabi_dcmplt>
 8010254:	b110      	cbz	r0, 801025c <_printf_float+0x90>
 8010256:	232d      	movs	r3, #45	; 0x2d
 8010258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801025c:	4b93      	ldr	r3, [pc, #588]	; (80104ac <_printf_float+0x2e0>)
 801025e:	4894      	ldr	r0, [pc, #592]	; (80104b0 <_printf_float+0x2e4>)
 8010260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010264:	bf94      	ite	ls
 8010266:	4698      	movls	r8, r3
 8010268:	4680      	movhi	r8, r0
 801026a:	2303      	movs	r3, #3
 801026c:	6123      	str	r3, [r4, #16]
 801026e:	9b05      	ldr	r3, [sp, #20]
 8010270:	f023 0204 	bic.w	r2, r3, #4
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	f04f 0900 	mov.w	r9, #0
 801027a:	9700      	str	r7, [sp, #0]
 801027c:	4633      	mov	r3, r6
 801027e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010280:	4621      	mov	r1, r4
 8010282:	4628      	mov	r0, r5
 8010284:	f000 f9d8 	bl	8010638 <_printf_common>
 8010288:	3001      	adds	r0, #1
 801028a:	f040 8090 	bne.w	80103ae <_printf_float+0x1e2>
 801028e:	f04f 30ff 	mov.w	r0, #4294967295
 8010292:	b00d      	add	sp, #52	; 0x34
 8010294:	ecbd 8b02 	vpop	{d8}
 8010298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029c:	4642      	mov	r2, r8
 801029e:	464b      	mov	r3, r9
 80102a0:	4640      	mov	r0, r8
 80102a2:	4649      	mov	r1, r9
 80102a4:	f7f0 fc7a 	bl	8000b9c <__aeabi_dcmpun>
 80102a8:	b140      	cbz	r0, 80102bc <_printf_float+0xf0>
 80102aa:	464b      	mov	r3, r9
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	bfbc      	itt	lt
 80102b0:	232d      	movlt	r3, #45	; 0x2d
 80102b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80102b6:	487f      	ldr	r0, [pc, #508]	; (80104b4 <_printf_float+0x2e8>)
 80102b8:	4b7f      	ldr	r3, [pc, #508]	; (80104b8 <_printf_float+0x2ec>)
 80102ba:	e7d1      	b.n	8010260 <_printf_float+0x94>
 80102bc:	6863      	ldr	r3, [r4, #4]
 80102be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80102c2:	9206      	str	r2, [sp, #24]
 80102c4:	1c5a      	adds	r2, r3, #1
 80102c6:	d13f      	bne.n	8010348 <_printf_float+0x17c>
 80102c8:	2306      	movs	r3, #6
 80102ca:	6063      	str	r3, [r4, #4]
 80102cc:	9b05      	ldr	r3, [sp, #20]
 80102ce:	6861      	ldr	r1, [r4, #4]
 80102d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80102d4:	2300      	movs	r3, #0
 80102d6:	9303      	str	r3, [sp, #12]
 80102d8:	ab0a      	add	r3, sp, #40	; 0x28
 80102da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80102de:	ab09      	add	r3, sp, #36	; 0x24
 80102e0:	ec49 8b10 	vmov	d0, r8, r9
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	6022      	str	r2, [r4, #0]
 80102e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7ff fecd 	bl	801008c <__cvt>
 80102f2:	9b06      	ldr	r3, [sp, #24]
 80102f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102f6:	2b47      	cmp	r3, #71	; 0x47
 80102f8:	4680      	mov	r8, r0
 80102fa:	d108      	bne.n	801030e <_printf_float+0x142>
 80102fc:	1cc8      	adds	r0, r1, #3
 80102fe:	db02      	blt.n	8010306 <_printf_float+0x13a>
 8010300:	6863      	ldr	r3, [r4, #4]
 8010302:	4299      	cmp	r1, r3
 8010304:	dd41      	ble.n	801038a <_printf_float+0x1be>
 8010306:	f1ab 0b02 	sub.w	fp, fp, #2
 801030a:	fa5f fb8b 	uxtb.w	fp, fp
 801030e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010312:	d820      	bhi.n	8010356 <_printf_float+0x18a>
 8010314:	3901      	subs	r1, #1
 8010316:	465a      	mov	r2, fp
 8010318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801031c:	9109      	str	r1, [sp, #36]	; 0x24
 801031e:	f7ff ff17 	bl	8010150 <__exponent>
 8010322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010324:	1813      	adds	r3, r2, r0
 8010326:	2a01      	cmp	r2, #1
 8010328:	4681      	mov	r9, r0
 801032a:	6123      	str	r3, [r4, #16]
 801032c:	dc02      	bgt.n	8010334 <_printf_float+0x168>
 801032e:	6822      	ldr	r2, [r4, #0]
 8010330:	07d2      	lsls	r2, r2, #31
 8010332:	d501      	bpl.n	8010338 <_printf_float+0x16c>
 8010334:	3301      	adds	r3, #1
 8010336:	6123      	str	r3, [r4, #16]
 8010338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801033c:	2b00      	cmp	r3, #0
 801033e:	d09c      	beq.n	801027a <_printf_float+0xae>
 8010340:	232d      	movs	r3, #45	; 0x2d
 8010342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010346:	e798      	b.n	801027a <_printf_float+0xae>
 8010348:	9a06      	ldr	r2, [sp, #24]
 801034a:	2a47      	cmp	r2, #71	; 0x47
 801034c:	d1be      	bne.n	80102cc <_printf_float+0x100>
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1bc      	bne.n	80102cc <_printf_float+0x100>
 8010352:	2301      	movs	r3, #1
 8010354:	e7b9      	b.n	80102ca <_printf_float+0xfe>
 8010356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801035a:	d118      	bne.n	801038e <_printf_float+0x1c2>
 801035c:	2900      	cmp	r1, #0
 801035e:	6863      	ldr	r3, [r4, #4]
 8010360:	dd0b      	ble.n	801037a <_printf_float+0x1ae>
 8010362:	6121      	str	r1, [r4, #16]
 8010364:	b913      	cbnz	r3, 801036c <_printf_float+0x1a0>
 8010366:	6822      	ldr	r2, [r4, #0]
 8010368:	07d0      	lsls	r0, r2, #31
 801036a:	d502      	bpl.n	8010372 <_printf_float+0x1a6>
 801036c:	3301      	adds	r3, #1
 801036e:	440b      	add	r3, r1
 8010370:	6123      	str	r3, [r4, #16]
 8010372:	65a1      	str	r1, [r4, #88]	; 0x58
 8010374:	f04f 0900 	mov.w	r9, #0
 8010378:	e7de      	b.n	8010338 <_printf_float+0x16c>
 801037a:	b913      	cbnz	r3, 8010382 <_printf_float+0x1b6>
 801037c:	6822      	ldr	r2, [r4, #0]
 801037e:	07d2      	lsls	r2, r2, #31
 8010380:	d501      	bpl.n	8010386 <_printf_float+0x1ba>
 8010382:	3302      	adds	r3, #2
 8010384:	e7f4      	b.n	8010370 <_printf_float+0x1a4>
 8010386:	2301      	movs	r3, #1
 8010388:	e7f2      	b.n	8010370 <_printf_float+0x1a4>
 801038a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801038e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010390:	4299      	cmp	r1, r3
 8010392:	db05      	blt.n	80103a0 <_printf_float+0x1d4>
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	6121      	str	r1, [r4, #16]
 8010398:	07d8      	lsls	r0, r3, #31
 801039a:	d5ea      	bpl.n	8010372 <_printf_float+0x1a6>
 801039c:	1c4b      	adds	r3, r1, #1
 801039e:	e7e7      	b.n	8010370 <_printf_float+0x1a4>
 80103a0:	2900      	cmp	r1, #0
 80103a2:	bfd4      	ite	le
 80103a4:	f1c1 0202 	rsble	r2, r1, #2
 80103a8:	2201      	movgt	r2, #1
 80103aa:	4413      	add	r3, r2
 80103ac:	e7e0      	b.n	8010370 <_printf_float+0x1a4>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	055a      	lsls	r2, r3, #21
 80103b2:	d407      	bmi.n	80103c4 <_printf_float+0x1f8>
 80103b4:	6923      	ldr	r3, [r4, #16]
 80103b6:	4642      	mov	r2, r8
 80103b8:	4631      	mov	r1, r6
 80103ba:	4628      	mov	r0, r5
 80103bc:	47b8      	blx	r7
 80103be:	3001      	adds	r0, #1
 80103c0:	d12c      	bne.n	801041c <_printf_float+0x250>
 80103c2:	e764      	b.n	801028e <_printf_float+0xc2>
 80103c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80103c8:	f240 80e0 	bls.w	801058c <_printf_float+0x3c0>
 80103cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103d0:	2200      	movs	r2, #0
 80103d2:	2300      	movs	r3, #0
 80103d4:	f7f0 fbb0 	bl	8000b38 <__aeabi_dcmpeq>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d034      	beq.n	8010446 <_printf_float+0x27a>
 80103dc:	4a37      	ldr	r2, [pc, #220]	; (80104bc <_printf_float+0x2f0>)
 80103de:	2301      	movs	r3, #1
 80103e0:	4631      	mov	r1, r6
 80103e2:	4628      	mov	r0, r5
 80103e4:	47b8      	blx	r7
 80103e6:	3001      	adds	r0, #1
 80103e8:	f43f af51 	beq.w	801028e <_printf_float+0xc2>
 80103ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103f0:	429a      	cmp	r2, r3
 80103f2:	db02      	blt.n	80103fa <_printf_float+0x22e>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	07d8      	lsls	r0, r3, #31
 80103f8:	d510      	bpl.n	801041c <_printf_float+0x250>
 80103fa:	ee18 3a10 	vmov	r3, s16
 80103fe:	4652      	mov	r2, sl
 8010400:	4631      	mov	r1, r6
 8010402:	4628      	mov	r0, r5
 8010404:	47b8      	blx	r7
 8010406:	3001      	adds	r0, #1
 8010408:	f43f af41 	beq.w	801028e <_printf_float+0xc2>
 801040c:	f04f 0800 	mov.w	r8, #0
 8010410:	f104 091a 	add.w	r9, r4, #26
 8010414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010416:	3b01      	subs	r3, #1
 8010418:	4543      	cmp	r3, r8
 801041a:	dc09      	bgt.n	8010430 <_printf_float+0x264>
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	079b      	lsls	r3, r3, #30
 8010420:	f100 8105 	bmi.w	801062e <_printf_float+0x462>
 8010424:	68e0      	ldr	r0, [r4, #12]
 8010426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010428:	4298      	cmp	r0, r3
 801042a:	bfb8      	it	lt
 801042c:	4618      	movlt	r0, r3
 801042e:	e730      	b.n	8010292 <_printf_float+0xc6>
 8010430:	2301      	movs	r3, #1
 8010432:	464a      	mov	r2, r9
 8010434:	4631      	mov	r1, r6
 8010436:	4628      	mov	r0, r5
 8010438:	47b8      	blx	r7
 801043a:	3001      	adds	r0, #1
 801043c:	f43f af27 	beq.w	801028e <_printf_float+0xc2>
 8010440:	f108 0801 	add.w	r8, r8, #1
 8010444:	e7e6      	b.n	8010414 <_printf_float+0x248>
 8010446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010448:	2b00      	cmp	r3, #0
 801044a:	dc39      	bgt.n	80104c0 <_printf_float+0x2f4>
 801044c:	4a1b      	ldr	r2, [pc, #108]	; (80104bc <_printf_float+0x2f0>)
 801044e:	2301      	movs	r3, #1
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f af19 	beq.w	801028e <_printf_float+0xc2>
 801045c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010460:	4313      	orrs	r3, r2
 8010462:	d102      	bne.n	801046a <_printf_float+0x29e>
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	07d9      	lsls	r1, r3, #31
 8010468:	d5d8      	bpl.n	801041c <_printf_float+0x250>
 801046a:	ee18 3a10 	vmov	r3, s16
 801046e:	4652      	mov	r2, sl
 8010470:	4631      	mov	r1, r6
 8010472:	4628      	mov	r0, r5
 8010474:	47b8      	blx	r7
 8010476:	3001      	adds	r0, #1
 8010478:	f43f af09 	beq.w	801028e <_printf_float+0xc2>
 801047c:	f04f 0900 	mov.w	r9, #0
 8010480:	f104 0a1a 	add.w	sl, r4, #26
 8010484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010486:	425b      	negs	r3, r3
 8010488:	454b      	cmp	r3, r9
 801048a:	dc01      	bgt.n	8010490 <_printf_float+0x2c4>
 801048c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801048e:	e792      	b.n	80103b6 <_printf_float+0x1ea>
 8010490:	2301      	movs	r3, #1
 8010492:	4652      	mov	r2, sl
 8010494:	4631      	mov	r1, r6
 8010496:	4628      	mov	r0, r5
 8010498:	47b8      	blx	r7
 801049a:	3001      	adds	r0, #1
 801049c:	f43f aef7 	beq.w	801028e <_printf_float+0xc2>
 80104a0:	f109 0901 	add.w	r9, r9, #1
 80104a4:	e7ee      	b.n	8010484 <_printf_float+0x2b8>
 80104a6:	bf00      	nop
 80104a8:	7fefffff 	.word	0x7fefffff
 80104ac:	08015fb0 	.word	0x08015fb0
 80104b0:	08015fb4 	.word	0x08015fb4
 80104b4:	08015fbc 	.word	0x08015fbc
 80104b8:	08015fb8 	.word	0x08015fb8
 80104bc:	08015fc0 	.word	0x08015fc0
 80104c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104c4:	429a      	cmp	r2, r3
 80104c6:	bfa8      	it	ge
 80104c8:	461a      	movge	r2, r3
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	4691      	mov	r9, r2
 80104ce:	dc37      	bgt.n	8010540 <_printf_float+0x374>
 80104d0:	f04f 0b00 	mov.w	fp, #0
 80104d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104d8:	f104 021a 	add.w	r2, r4, #26
 80104dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104de:	9305      	str	r3, [sp, #20]
 80104e0:	eba3 0309 	sub.w	r3, r3, r9
 80104e4:	455b      	cmp	r3, fp
 80104e6:	dc33      	bgt.n	8010550 <_printf_float+0x384>
 80104e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104ec:	429a      	cmp	r2, r3
 80104ee:	db3b      	blt.n	8010568 <_printf_float+0x39c>
 80104f0:	6823      	ldr	r3, [r4, #0]
 80104f2:	07da      	lsls	r2, r3, #31
 80104f4:	d438      	bmi.n	8010568 <_printf_float+0x39c>
 80104f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104f8:	9b05      	ldr	r3, [sp, #20]
 80104fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104fc:	1ad3      	subs	r3, r2, r3
 80104fe:	eba2 0901 	sub.w	r9, r2, r1
 8010502:	4599      	cmp	r9, r3
 8010504:	bfa8      	it	ge
 8010506:	4699      	movge	r9, r3
 8010508:	f1b9 0f00 	cmp.w	r9, #0
 801050c:	dc35      	bgt.n	801057a <_printf_float+0x3ae>
 801050e:	f04f 0800 	mov.w	r8, #0
 8010512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010516:	f104 0a1a 	add.w	sl, r4, #26
 801051a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801051e:	1a9b      	subs	r3, r3, r2
 8010520:	eba3 0309 	sub.w	r3, r3, r9
 8010524:	4543      	cmp	r3, r8
 8010526:	f77f af79 	ble.w	801041c <_printf_float+0x250>
 801052a:	2301      	movs	r3, #1
 801052c:	4652      	mov	r2, sl
 801052e:	4631      	mov	r1, r6
 8010530:	4628      	mov	r0, r5
 8010532:	47b8      	blx	r7
 8010534:	3001      	adds	r0, #1
 8010536:	f43f aeaa 	beq.w	801028e <_printf_float+0xc2>
 801053a:	f108 0801 	add.w	r8, r8, #1
 801053e:	e7ec      	b.n	801051a <_printf_float+0x34e>
 8010540:	4613      	mov	r3, r2
 8010542:	4631      	mov	r1, r6
 8010544:	4642      	mov	r2, r8
 8010546:	4628      	mov	r0, r5
 8010548:	47b8      	blx	r7
 801054a:	3001      	adds	r0, #1
 801054c:	d1c0      	bne.n	80104d0 <_printf_float+0x304>
 801054e:	e69e      	b.n	801028e <_printf_float+0xc2>
 8010550:	2301      	movs	r3, #1
 8010552:	4631      	mov	r1, r6
 8010554:	4628      	mov	r0, r5
 8010556:	9205      	str	r2, [sp, #20]
 8010558:	47b8      	blx	r7
 801055a:	3001      	adds	r0, #1
 801055c:	f43f ae97 	beq.w	801028e <_printf_float+0xc2>
 8010560:	9a05      	ldr	r2, [sp, #20]
 8010562:	f10b 0b01 	add.w	fp, fp, #1
 8010566:	e7b9      	b.n	80104dc <_printf_float+0x310>
 8010568:	ee18 3a10 	vmov	r3, s16
 801056c:	4652      	mov	r2, sl
 801056e:	4631      	mov	r1, r6
 8010570:	4628      	mov	r0, r5
 8010572:	47b8      	blx	r7
 8010574:	3001      	adds	r0, #1
 8010576:	d1be      	bne.n	80104f6 <_printf_float+0x32a>
 8010578:	e689      	b.n	801028e <_printf_float+0xc2>
 801057a:	9a05      	ldr	r2, [sp, #20]
 801057c:	464b      	mov	r3, r9
 801057e:	4442      	add	r2, r8
 8010580:	4631      	mov	r1, r6
 8010582:	4628      	mov	r0, r5
 8010584:	47b8      	blx	r7
 8010586:	3001      	adds	r0, #1
 8010588:	d1c1      	bne.n	801050e <_printf_float+0x342>
 801058a:	e680      	b.n	801028e <_printf_float+0xc2>
 801058c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801058e:	2a01      	cmp	r2, #1
 8010590:	dc01      	bgt.n	8010596 <_printf_float+0x3ca>
 8010592:	07db      	lsls	r3, r3, #31
 8010594:	d538      	bpl.n	8010608 <_printf_float+0x43c>
 8010596:	2301      	movs	r3, #1
 8010598:	4642      	mov	r2, r8
 801059a:	4631      	mov	r1, r6
 801059c:	4628      	mov	r0, r5
 801059e:	47b8      	blx	r7
 80105a0:	3001      	adds	r0, #1
 80105a2:	f43f ae74 	beq.w	801028e <_printf_float+0xc2>
 80105a6:	ee18 3a10 	vmov	r3, s16
 80105aa:	4652      	mov	r2, sl
 80105ac:	4631      	mov	r1, r6
 80105ae:	4628      	mov	r0, r5
 80105b0:	47b8      	blx	r7
 80105b2:	3001      	adds	r0, #1
 80105b4:	f43f ae6b 	beq.w	801028e <_printf_float+0xc2>
 80105b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105bc:	2200      	movs	r2, #0
 80105be:	2300      	movs	r3, #0
 80105c0:	f7f0 faba 	bl	8000b38 <__aeabi_dcmpeq>
 80105c4:	b9d8      	cbnz	r0, 80105fe <_printf_float+0x432>
 80105c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c8:	f108 0201 	add.w	r2, r8, #1
 80105cc:	3b01      	subs	r3, #1
 80105ce:	4631      	mov	r1, r6
 80105d0:	4628      	mov	r0, r5
 80105d2:	47b8      	blx	r7
 80105d4:	3001      	adds	r0, #1
 80105d6:	d10e      	bne.n	80105f6 <_printf_float+0x42a>
 80105d8:	e659      	b.n	801028e <_printf_float+0xc2>
 80105da:	2301      	movs	r3, #1
 80105dc:	4652      	mov	r2, sl
 80105de:	4631      	mov	r1, r6
 80105e0:	4628      	mov	r0, r5
 80105e2:	47b8      	blx	r7
 80105e4:	3001      	adds	r0, #1
 80105e6:	f43f ae52 	beq.w	801028e <_printf_float+0xc2>
 80105ea:	f108 0801 	add.w	r8, r8, #1
 80105ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105f0:	3b01      	subs	r3, #1
 80105f2:	4543      	cmp	r3, r8
 80105f4:	dcf1      	bgt.n	80105da <_printf_float+0x40e>
 80105f6:	464b      	mov	r3, r9
 80105f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105fc:	e6dc      	b.n	80103b8 <_printf_float+0x1ec>
 80105fe:	f04f 0800 	mov.w	r8, #0
 8010602:	f104 0a1a 	add.w	sl, r4, #26
 8010606:	e7f2      	b.n	80105ee <_printf_float+0x422>
 8010608:	2301      	movs	r3, #1
 801060a:	4642      	mov	r2, r8
 801060c:	e7df      	b.n	80105ce <_printf_float+0x402>
 801060e:	2301      	movs	r3, #1
 8010610:	464a      	mov	r2, r9
 8010612:	4631      	mov	r1, r6
 8010614:	4628      	mov	r0, r5
 8010616:	47b8      	blx	r7
 8010618:	3001      	adds	r0, #1
 801061a:	f43f ae38 	beq.w	801028e <_printf_float+0xc2>
 801061e:	f108 0801 	add.w	r8, r8, #1
 8010622:	68e3      	ldr	r3, [r4, #12]
 8010624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010626:	1a5b      	subs	r3, r3, r1
 8010628:	4543      	cmp	r3, r8
 801062a:	dcf0      	bgt.n	801060e <_printf_float+0x442>
 801062c:	e6fa      	b.n	8010424 <_printf_float+0x258>
 801062e:	f04f 0800 	mov.w	r8, #0
 8010632:	f104 0919 	add.w	r9, r4, #25
 8010636:	e7f4      	b.n	8010622 <_printf_float+0x456>

08010638 <_printf_common>:
 8010638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801063c:	4616      	mov	r6, r2
 801063e:	4699      	mov	r9, r3
 8010640:	688a      	ldr	r2, [r1, #8]
 8010642:	690b      	ldr	r3, [r1, #16]
 8010644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010648:	4293      	cmp	r3, r2
 801064a:	bfb8      	it	lt
 801064c:	4613      	movlt	r3, r2
 801064e:	6033      	str	r3, [r6, #0]
 8010650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010654:	4607      	mov	r7, r0
 8010656:	460c      	mov	r4, r1
 8010658:	b10a      	cbz	r2, 801065e <_printf_common+0x26>
 801065a:	3301      	adds	r3, #1
 801065c:	6033      	str	r3, [r6, #0]
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	0699      	lsls	r1, r3, #26
 8010662:	bf42      	ittt	mi
 8010664:	6833      	ldrmi	r3, [r6, #0]
 8010666:	3302      	addmi	r3, #2
 8010668:	6033      	strmi	r3, [r6, #0]
 801066a:	6825      	ldr	r5, [r4, #0]
 801066c:	f015 0506 	ands.w	r5, r5, #6
 8010670:	d106      	bne.n	8010680 <_printf_common+0x48>
 8010672:	f104 0a19 	add.w	sl, r4, #25
 8010676:	68e3      	ldr	r3, [r4, #12]
 8010678:	6832      	ldr	r2, [r6, #0]
 801067a:	1a9b      	subs	r3, r3, r2
 801067c:	42ab      	cmp	r3, r5
 801067e:	dc26      	bgt.n	80106ce <_printf_common+0x96>
 8010680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010684:	1e13      	subs	r3, r2, #0
 8010686:	6822      	ldr	r2, [r4, #0]
 8010688:	bf18      	it	ne
 801068a:	2301      	movne	r3, #1
 801068c:	0692      	lsls	r2, r2, #26
 801068e:	d42b      	bmi.n	80106e8 <_printf_common+0xb0>
 8010690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010694:	4649      	mov	r1, r9
 8010696:	4638      	mov	r0, r7
 8010698:	47c0      	blx	r8
 801069a:	3001      	adds	r0, #1
 801069c:	d01e      	beq.n	80106dc <_printf_common+0xa4>
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	68e5      	ldr	r5, [r4, #12]
 80106a2:	6832      	ldr	r2, [r6, #0]
 80106a4:	f003 0306 	and.w	r3, r3, #6
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	bf08      	it	eq
 80106ac:	1aad      	subeq	r5, r5, r2
 80106ae:	68a3      	ldr	r3, [r4, #8]
 80106b0:	6922      	ldr	r2, [r4, #16]
 80106b2:	bf0c      	ite	eq
 80106b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106b8:	2500      	movne	r5, #0
 80106ba:	4293      	cmp	r3, r2
 80106bc:	bfc4      	itt	gt
 80106be:	1a9b      	subgt	r3, r3, r2
 80106c0:	18ed      	addgt	r5, r5, r3
 80106c2:	2600      	movs	r6, #0
 80106c4:	341a      	adds	r4, #26
 80106c6:	42b5      	cmp	r5, r6
 80106c8:	d11a      	bne.n	8010700 <_printf_common+0xc8>
 80106ca:	2000      	movs	r0, #0
 80106cc:	e008      	b.n	80106e0 <_printf_common+0xa8>
 80106ce:	2301      	movs	r3, #1
 80106d0:	4652      	mov	r2, sl
 80106d2:	4649      	mov	r1, r9
 80106d4:	4638      	mov	r0, r7
 80106d6:	47c0      	blx	r8
 80106d8:	3001      	adds	r0, #1
 80106da:	d103      	bne.n	80106e4 <_printf_common+0xac>
 80106dc:	f04f 30ff 	mov.w	r0, #4294967295
 80106e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e4:	3501      	adds	r5, #1
 80106e6:	e7c6      	b.n	8010676 <_printf_common+0x3e>
 80106e8:	18e1      	adds	r1, r4, r3
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	2030      	movs	r0, #48	; 0x30
 80106ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106f2:	4422      	add	r2, r4
 80106f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106fc:	3302      	adds	r3, #2
 80106fe:	e7c7      	b.n	8010690 <_printf_common+0x58>
 8010700:	2301      	movs	r3, #1
 8010702:	4622      	mov	r2, r4
 8010704:	4649      	mov	r1, r9
 8010706:	4638      	mov	r0, r7
 8010708:	47c0      	blx	r8
 801070a:	3001      	adds	r0, #1
 801070c:	d0e6      	beq.n	80106dc <_printf_common+0xa4>
 801070e:	3601      	adds	r6, #1
 8010710:	e7d9      	b.n	80106c6 <_printf_common+0x8e>
	...

08010714 <_printf_i>:
 8010714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	4691      	mov	r9, r2
 801071c:	7e27      	ldrb	r7, [r4, #24]
 801071e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010720:	2f78      	cmp	r7, #120	; 0x78
 8010722:	4680      	mov	r8, r0
 8010724:	469a      	mov	sl, r3
 8010726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801072a:	d807      	bhi.n	801073c <_printf_i+0x28>
 801072c:	2f62      	cmp	r7, #98	; 0x62
 801072e:	d80a      	bhi.n	8010746 <_printf_i+0x32>
 8010730:	2f00      	cmp	r7, #0
 8010732:	f000 80d8 	beq.w	80108e6 <_printf_i+0x1d2>
 8010736:	2f58      	cmp	r7, #88	; 0x58
 8010738:	f000 80a3 	beq.w	8010882 <_printf_i+0x16e>
 801073c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010744:	e03a      	b.n	80107bc <_printf_i+0xa8>
 8010746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801074a:	2b15      	cmp	r3, #21
 801074c:	d8f6      	bhi.n	801073c <_printf_i+0x28>
 801074e:	a001      	add	r0, pc, #4	; (adr r0, 8010754 <_printf_i+0x40>)
 8010750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010754:	080107ad 	.word	0x080107ad
 8010758:	080107c1 	.word	0x080107c1
 801075c:	0801073d 	.word	0x0801073d
 8010760:	0801073d 	.word	0x0801073d
 8010764:	0801073d 	.word	0x0801073d
 8010768:	0801073d 	.word	0x0801073d
 801076c:	080107c1 	.word	0x080107c1
 8010770:	0801073d 	.word	0x0801073d
 8010774:	0801073d 	.word	0x0801073d
 8010778:	0801073d 	.word	0x0801073d
 801077c:	0801073d 	.word	0x0801073d
 8010780:	080108cd 	.word	0x080108cd
 8010784:	080107f1 	.word	0x080107f1
 8010788:	080108af 	.word	0x080108af
 801078c:	0801073d 	.word	0x0801073d
 8010790:	0801073d 	.word	0x0801073d
 8010794:	080108ef 	.word	0x080108ef
 8010798:	0801073d 	.word	0x0801073d
 801079c:	080107f1 	.word	0x080107f1
 80107a0:	0801073d 	.word	0x0801073d
 80107a4:	0801073d 	.word	0x0801073d
 80107a8:	080108b7 	.word	0x080108b7
 80107ac:	680b      	ldr	r3, [r1, #0]
 80107ae:	1d1a      	adds	r2, r3, #4
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	600a      	str	r2, [r1, #0]
 80107b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80107b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107bc:	2301      	movs	r3, #1
 80107be:	e0a3      	b.n	8010908 <_printf_i+0x1f4>
 80107c0:	6825      	ldr	r5, [r4, #0]
 80107c2:	6808      	ldr	r0, [r1, #0]
 80107c4:	062e      	lsls	r6, r5, #24
 80107c6:	f100 0304 	add.w	r3, r0, #4
 80107ca:	d50a      	bpl.n	80107e2 <_printf_i+0xce>
 80107cc:	6805      	ldr	r5, [r0, #0]
 80107ce:	600b      	str	r3, [r1, #0]
 80107d0:	2d00      	cmp	r5, #0
 80107d2:	da03      	bge.n	80107dc <_printf_i+0xc8>
 80107d4:	232d      	movs	r3, #45	; 0x2d
 80107d6:	426d      	negs	r5, r5
 80107d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107dc:	485e      	ldr	r0, [pc, #376]	; (8010958 <_printf_i+0x244>)
 80107de:	230a      	movs	r3, #10
 80107e0:	e019      	b.n	8010816 <_printf_i+0x102>
 80107e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80107e6:	6805      	ldr	r5, [r0, #0]
 80107e8:	600b      	str	r3, [r1, #0]
 80107ea:	bf18      	it	ne
 80107ec:	b22d      	sxthne	r5, r5
 80107ee:	e7ef      	b.n	80107d0 <_printf_i+0xbc>
 80107f0:	680b      	ldr	r3, [r1, #0]
 80107f2:	6825      	ldr	r5, [r4, #0]
 80107f4:	1d18      	adds	r0, r3, #4
 80107f6:	6008      	str	r0, [r1, #0]
 80107f8:	0628      	lsls	r0, r5, #24
 80107fa:	d501      	bpl.n	8010800 <_printf_i+0xec>
 80107fc:	681d      	ldr	r5, [r3, #0]
 80107fe:	e002      	b.n	8010806 <_printf_i+0xf2>
 8010800:	0669      	lsls	r1, r5, #25
 8010802:	d5fb      	bpl.n	80107fc <_printf_i+0xe8>
 8010804:	881d      	ldrh	r5, [r3, #0]
 8010806:	4854      	ldr	r0, [pc, #336]	; (8010958 <_printf_i+0x244>)
 8010808:	2f6f      	cmp	r7, #111	; 0x6f
 801080a:	bf0c      	ite	eq
 801080c:	2308      	moveq	r3, #8
 801080e:	230a      	movne	r3, #10
 8010810:	2100      	movs	r1, #0
 8010812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010816:	6866      	ldr	r6, [r4, #4]
 8010818:	60a6      	str	r6, [r4, #8]
 801081a:	2e00      	cmp	r6, #0
 801081c:	bfa2      	ittt	ge
 801081e:	6821      	ldrge	r1, [r4, #0]
 8010820:	f021 0104 	bicge.w	r1, r1, #4
 8010824:	6021      	strge	r1, [r4, #0]
 8010826:	b90d      	cbnz	r5, 801082c <_printf_i+0x118>
 8010828:	2e00      	cmp	r6, #0
 801082a:	d04d      	beq.n	80108c8 <_printf_i+0x1b4>
 801082c:	4616      	mov	r6, r2
 801082e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010832:	fb03 5711 	mls	r7, r3, r1, r5
 8010836:	5dc7      	ldrb	r7, [r0, r7]
 8010838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801083c:	462f      	mov	r7, r5
 801083e:	42bb      	cmp	r3, r7
 8010840:	460d      	mov	r5, r1
 8010842:	d9f4      	bls.n	801082e <_printf_i+0x11a>
 8010844:	2b08      	cmp	r3, #8
 8010846:	d10b      	bne.n	8010860 <_printf_i+0x14c>
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	07df      	lsls	r7, r3, #31
 801084c:	d508      	bpl.n	8010860 <_printf_i+0x14c>
 801084e:	6923      	ldr	r3, [r4, #16]
 8010850:	6861      	ldr	r1, [r4, #4]
 8010852:	4299      	cmp	r1, r3
 8010854:	bfde      	ittt	le
 8010856:	2330      	movle	r3, #48	; 0x30
 8010858:	f806 3c01 	strble.w	r3, [r6, #-1]
 801085c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010860:	1b92      	subs	r2, r2, r6
 8010862:	6122      	str	r2, [r4, #16]
 8010864:	f8cd a000 	str.w	sl, [sp]
 8010868:	464b      	mov	r3, r9
 801086a:	aa03      	add	r2, sp, #12
 801086c:	4621      	mov	r1, r4
 801086e:	4640      	mov	r0, r8
 8010870:	f7ff fee2 	bl	8010638 <_printf_common>
 8010874:	3001      	adds	r0, #1
 8010876:	d14c      	bne.n	8010912 <_printf_i+0x1fe>
 8010878:	f04f 30ff 	mov.w	r0, #4294967295
 801087c:	b004      	add	sp, #16
 801087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010882:	4835      	ldr	r0, [pc, #212]	; (8010958 <_printf_i+0x244>)
 8010884:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010888:	6823      	ldr	r3, [r4, #0]
 801088a:	680e      	ldr	r6, [r1, #0]
 801088c:	061f      	lsls	r7, r3, #24
 801088e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010892:	600e      	str	r6, [r1, #0]
 8010894:	d514      	bpl.n	80108c0 <_printf_i+0x1ac>
 8010896:	07d9      	lsls	r1, r3, #31
 8010898:	bf44      	itt	mi
 801089a:	f043 0320 	orrmi.w	r3, r3, #32
 801089e:	6023      	strmi	r3, [r4, #0]
 80108a0:	b91d      	cbnz	r5, 80108aa <_printf_i+0x196>
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	f023 0320 	bic.w	r3, r3, #32
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	2310      	movs	r3, #16
 80108ac:	e7b0      	b.n	8010810 <_printf_i+0xfc>
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	f043 0320 	orr.w	r3, r3, #32
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	2378      	movs	r3, #120	; 0x78
 80108b8:	4828      	ldr	r0, [pc, #160]	; (801095c <_printf_i+0x248>)
 80108ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108be:	e7e3      	b.n	8010888 <_printf_i+0x174>
 80108c0:	065e      	lsls	r6, r3, #25
 80108c2:	bf48      	it	mi
 80108c4:	b2ad      	uxthmi	r5, r5
 80108c6:	e7e6      	b.n	8010896 <_printf_i+0x182>
 80108c8:	4616      	mov	r6, r2
 80108ca:	e7bb      	b.n	8010844 <_printf_i+0x130>
 80108cc:	680b      	ldr	r3, [r1, #0]
 80108ce:	6826      	ldr	r6, [r4, #0]
 80108d0:	6960      	ldr	r0, [r4, #20]
 80108d2:	1d1d      	adds	r5, r3, #4
 80108d4:	600d      	str	r5, [r1, #0]
 80108d6:	0635      	lsls	r5, r6, #24
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	d501      	bpl.n	80108e0 <_printf_i+0x1cc>
 80108dc:	6018      	str	r0, [r3, #0]
 80108de:	e002      	b.n	80108e6 <_printf_i+0x1d2>
 80108e0:	0671      	lsls	r1, r6, #25
 80108e2:	d5fb      	bpl.n	80108dc <_printf_i+0x1c8>
 80108e4:	8018      	strh	r0, [r3, #0]
 80108e6:	2300      	movs	r3, #0
 80108e8:	6123      	str	r3, [r4, #16]
 80108ea:	4616      	mov	r6, r2
 80108ec:	e7ba      	b.n	8010864 <_printf_i+0x150>
 80108ee:	680b      	ldr	r3, [r1, #0]
 80108f0:	1d1a      	adds	r2, r3, #4
 80108f2:	600a      	str	r2, [r1, #0]
 80108f4:	681e      	ldr	r6, [r3, #0]
 80108f6:	6862      	ldr	r2, [r4, #4]
 80108f8:	2100      	movs	r1, #0
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ef fca8 	bl	8000250 <memchr>
 8010900:	b108      	cbz	r0, 8010906 <_printf_i+0x1f2>
 8010902:	1b80      	subs	r0, r0, r6
 8010904:	6060      	str	r0, [r4, #4]
 8010906:	6863      	ldr	r3, [r4, #4]
 8010908:	6123      	str	r3, [r4, #16]
 801090a:	2300      	movs	r3, #0
 801090c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010910:	e7a8      	b.n	8010864 <_printf_i+0x150>
 8010912:	6923      	ldr	r3, [r4, #16]
 8010914:	4632      	mov	r2, r6
 8010916:	4649      	mov	r1, r9
 8010918:	4640      	mov	r0, r8
 801091a:	47d0      	blx	sl
 801091c:	3001      	adds	r0, #1
 801091e:	d0ab      	beq.n	8010878 <_printf_i+0x164>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	079b      	lsls	r3, r3, #30
 8010924:	d413      	bmi.n	801094e <_printf_i+0x23a>
 8010926:	68e0      	ldr	r0, [r4, #12]
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	4298      	cmp	r0, r3
 801092c:	bfb8      	it	lt
 801092e:	4618      	movlt	r0, r3
 8010930:	e7a4      	b.n	801087c <_printf_i+0x168>
 8010932:	2301      	movs	r3, #1
 8010934:	4632      	mov	r2, r6
 8010936:	4649      	mov	r1, r9
 8010938:	4640      	mov	r0, r8
 801093a:	47d0      	blx	sl
 801093c:	3001      	adds	r0, #1
 801093e:	d09b      	beq.n	8010878 <_printf_i+0x164>
 8010940:	3501      	adds	r5, #1
 8010942:	68e3      	ldr	r3, [r4, #12]
 8010944:	9903      	ldr	r1, [sp, #12]
 8010946:	1a5b      	subs	r3, r3, r1
 8010948:	42ab      	cmp	r3, r5
 801094a:	dcf2      	bgt.n	8010932 <_printf_i+0x21e>
 801094c:	e7eb      	b.n	8010926 <_printf_i+0x212>
 801094e:	2500      	movs	r5, #0
 8010950:	f104 0619 	add.w	r6, r4, #25
 8010954:	e7f5      	b.n	8010942 <_printf_i+0x22e>
 8010956:	bf00      	nop
 8010958:	08015fc2 	.word	0x08015fc2
 801095c:	08015fd3 	.word	0x08015fd3

08010960 <_scanf_float>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	b087      	sub	sp, #28
 8010966:	4617      	mov	r7, r2
 8010968:	9303      	str	r3, [sp, #12]
 801096a:	688b      	ldr	r3, [r1, #8]
 801096c:	1e5a      	subs	r2, r3, #1
 801096e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010972:	bf83      	ittte	hi
 8010974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010978:	195b      	addhi	r3, r3, r5
 801097a:	9302      	strhi	r3, [sp, #8]
 801097c:	2300      	movls	r3, #0
 801097e:	bf86      	itte	hi
 8010980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010984:	608b      	strhi	r3, [r1, #8]
 8010986:	9302      	strls	r3, [sp, #8]
 8010988:	680b      	ldr	r3, [r1, #0]
 801098a:	468b      	mov	fp, r1
 801098c:	2500      	movs	r5, #0
 801098e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010992:	f84b 3b1c 	str.w	r3, [fp], #28
 8010996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801099a:	4680      	mov	r8, r0
 801099c:	460c      	mov	r4, r1
 801099e:	465e      	mov	r6, fp
 80109a0:	46aa      	mov	sl, r5
 80109a2:	46a9      	mov	r9, r5
 80109a4:	9501      	str	r5, [sp, #4]
 80109a6:	68a2      	ldr	r2, [r4, #8]
 80109a8:	b152      	cbz	r2, 80109c0 <_scanf_float+0x60>
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	2b4e      	cmp	r3, #78	; 0x4e
 80109b0:	d864      	bhi.n	8010a7c <_scanf_float+0x11c>
 80109b2:	2b40      	cmp	r3, #64	; 0x40
 80109b4:	d83c      	bhi.n	8010a30 <_scanf_float+0xd0>
 80109b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80109ba:	b2c8      	uxtb	r0, r1
 80109bc:	280e      	cmp	r0, #14
 80109be:	d93a      	bls.n	8010a36 <_scanf_float+0xd6>
 80109c0:	f1b9 0f00 	cmp.w	r9, #0
 80109c4:	d003      	beq.n	80109ce <_scanf_float+0x6e>
 80109c6:	6823      	ldr	r3, [r4, #0]
 80109c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109cc:	6023      	str	r3, [r4, #0]
 80109ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109d2:	f1ba 0f01 	cmp.w	sl, #1
 80109d6:	f200 8113 	bhi.w	8010c00 <_scanf_float+0x2a0>
 80109da:	455e      	cmp	r6, fp
 80109dc:	f200 8105 	bhi.w	8010bea <_scanf_float+0x28a>
 80109e0:	2501      	movs	r5, #1
 80109e2:	4628      	mov	r0, r5
 80109e4:	b007      	add	sp, #28
 80109e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80109ee:	2a0d      	cmp	r2, #13
 80109f0:	d8e6      	bhi.n	80109c0 <_scanf_float+0x60>
 80109f2:	a101      	add	r1, pc, #4	; (adr r1, 80109f8 <_scanf_float+0x98>)
 80109f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80109f8:	08010b37 	.word	0x08010b37
 80109fc:	080109c1 	.word	0x080109c1
 8010a00:	080109c1 	.word	0x080109c1
 8010a04:	080109c1 	.word	0x080109c1
 8010a08:	08010b97 	.word	0x08010b97
 8010a0c:	08010b6f 	.word	0x08010b6f
 8010a10:	080109c1 	.word	0x080109c1
 8010a14:	080109c1 	.word	0x080109c1
 8010a18:	08010b45 	.word	0x08010b45
 8010a1c:	080109c1 	.word	0x080109c1
 8010a20:	080109c1 	.word	0x080109c1
 8010a24:	080109c1 	.word	0x080109c1
 8010a28:	080109c1 	.word	0x080109c1
 8010a2c:	08010afd 	.word	0x08010afd
 8010a30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010a34:	e7db      	b.n	80109ee <_scanf_float+0x8e>
 8010a36:	290e      	cmp	r1, #14
 8010a38:	d8c2      	bhi.n	80109c0 <_scanf_float+0x60>
 8010a3a:	a001      	add	r0, pc, #4	; (adr r0, 8010a40 <_scanf_float+0xe0>)
 8010a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010a40:	08010aef 	.word	0x08010aef
 8010a44:	080109c1 	.word	0x080109c1
 8010a48:	08010aef 	.word	0x08010aef
 8010a4c:	08010b83 	.word	0x08010b83
 8010a50:	080109c1 	.word	0x080109c1
 8010a54:	08010a9d 	.word	0x08010a9d
 8010a58:	08010ad9 	.word	0x08010ad9
 8010a5c:	08010ad9 	.word	0x08010ad9
 8010a60:	08010ad9 	.word	0x08010ad9
 8010a64:	08010ad9 	.word	0x08010ad9
 8010a68:	08010ad9 	.word	0x08010ad9
 8010a6c:	08010ad9 	.word	0x08010ad9
 8010a70:	08010ad9 	.word	0x08010ad9
 8010a74:	08010ad9 	.word	0x08010ad9
 8010a78:	08010ad9 	.word	0x08010ad9
 8010a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8010a7e:	d809      	bhi.n	8010a94 <_scanf_float+0x134>
 8010a80:	2b60      	cmp	r3, #96	; 0x60
 8010a82:	d8b2      	bhi.n	80109ea <_scanf_float+0x8a>
 8010a84:	2b54      	cmp	r3, #84	; 0x54
 8010a86:	d077      	beq.n	8010b78 <_scanf_float+0x218>
 8010a88:	2b59      	cmp	r3, #89	; 0x59
 8010a8a:	d199      	bne.n	80109c0 <_scanf_float+0x60>
 8010a8c:	2d07      	cmp	r5, #7
 8010a8e:	d197      	bne.n	80109c0 <_scanf_float+0x60>
 8010a90:	2508      	movs	r5, #8
 8010a92:	e029      	b.n	8010ae8 <_scanf_float+0x188>
 8010a94:	2b74      	cmp	r3, #116	; 0x74
 8010a96:	d06f      	beq.n	8010b78 <_scanf_float+0x218>
 8010a98:	2b79      	cmp	r3, #121	; 0x79
 8010a9a:	e7f6      	b.n	8010a8a <_scanf_float+0x12a>
 8010a9c:	6821      	ldr	r1, [r4, #0]
 8010a9e:	05c8      	lsls	r0, r1, #23
 8010aa0:	d51a      	bpl.n	8010ad8 <_scanf_float+0x178>
 8010aa2:	9b02      	ldr	r3, [sp, #8]
 8010aa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010aa8:	6021      	str	r1, [r4, #0]
 8010aaa:	f109 0901 	add.w	r9, r9, #1
 8010aae:	b11b      	cbz	r3, 8010ab8 <_scanf_float+0x158>
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	3201      	adds	r2, #1
 8010ab4:	9302      	str	r3, [sp, #8]
 8010ab6:	60a2      	str	r2, [r4, #8]
 8010ab8:	68a3      	ldr	r3, [r4, #8]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	60a3      	str	r3, [r4, #8]
 8010abe:	6923      	ldr	r3, [r4, #16]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	6123      	str	r3, [r4, #16]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	607b      	str	r3, [r7, #4]
 8010acc:	f340 8084 	ble.w	8010bd8 <_scanf_float+0x278>
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	603b      	str	r3, [r7, #0]
 8010ad6:	e766      	b.n	80109a6 <_scanf_float+0x46>
 8010ad8:	eb1a 0f05 	cmn.w	sl, r5
 8010adc:	f47f af70 	bne.w	80109c0 <_scanf_float+0x60>
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010ae6:	6022      	str	r2, [r4, #0]
 8010ae8:	f806 3b01 	strb.w	r3, [r6], #1
 8010aec:	e7e4      	b.n	8010ab8 <_scanf_float+0x158>
 8010aee:	6822      	ldr	r2, [r4, #0]
 8010af0:	0610      	lsls	r0, r2, #24
 8010af2:	f57f af65 	bpl.w	80109c0 <_scanf_float+0x60>
 8010af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010afa:	e7f4      	b.n	8010ae6 <_scanf_float+0x186>
 8010afc:	f1ba 0f00 	cmp.w	sl, #0
 8010b00:	d10e      	bne.n	8010b20 <_scanf_float+0x1c0>
 8010b02:	f1b9 0f00 	cmp.w	r9, #0
 8010b06:	d10e      	bne.n	8010b26 <_scanf_float+0x1c6>
 8010b08:	6822      	ldr	r2, [r4, #0]
 8010b0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010b0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010b12:	d108      	bne.n	8010b26 <_scanf_float+0x1c6>
 8010b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b18:	6022      	str	r2, [r4, #0]
 8010b1a:	f04f 0a01 	mov.w	sl, #1
 8010b1e:	e7e3      	b.n	8010ae8 <_scanf_float+0x188>
 8010b20:	f1ba 0f02 	cmp.w	sl, #2
 8010b24:	d055      	beq.n	8010bd2 <_scanf_float+0x272>
 8010b26:	2d01      	cmp	r5, #1
 8010b28:	d002      	beq.n	8010b30 <_scanf_float+0x1d0>
 8010b2a:	2d04      	cmp	r5, #4
 8010b2c:	f47f af48 	bne.w	80109c0 <_scanf_float+0x60>
 8010b30:	3501      	adds	r5, #1
 8010b32:	b2ed      	uxtb	r5, r5
 8010b34:	e7d8      	b.n	8010ae8 <_scanf_float+0x188>
 8010b36:	f1ba 0f01 	cmp.w	sl, #1
 8010b3a:	f47f af41 	bne.w	80109c0 <_scanf_float+0x60>
 8010b3e:	f04f 0a02 	mov.w	sl, #2
 8010b42:	e7d1      	b.n	8010ae8 <_scanf_float+0x188>
 8010b44:	b97d      	cbnz	r5, 8010b66 <_scanf_float+0x206>
 8010b46:	f1b9 0f00 	cmp.w	r9, #0
 8010b4a:	f47f af3c 	bne.w	80109c6 <_scanf_float+0x66>
 8010b4e:	6822      	ldr	r2, [r4, #0]
 8010b50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010b54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010b58:	f47f af39 	bne.w	80109ce <_scanf_float+0x6e>
 8010b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010b60:	6022      	str	r2, [r4, #0]
 8010b62:	2501      	movs	r5, #1
 8010b64:	e7c0      	b.n	8010ae8 <_scanf_float+0x188>
 8010b66:	2d03      	cmp	r5, #3
 8010b68:	d0e2      	beq.n	8010b30 <_scanf_float+0x1d0>
 8010b6a:	2d05      	cmp	r5, #5
 8010b6c:	e7de      	b.n	8010b2c <_scanf_float+0x1cc>
 8010b6e:	2d02      	cmp	r5, #2
 8010b70:	f47f af26 	bne.w	80109c0 <_scanf_float+0x60>
 8010b74:	2503      	movs	r5, #3
 8010b76:	e7b7      	b.n	8010ae8 <_scanf_float+0x188>
 8010b78:	2d06      	cmp	r5, #6
 8010b7a:	f47f af21 	bne.w	80109c0 <_scanf_float+0x60>
 8010b7e:	2507      	movs	r5, #7
 8010b80:	e7b2      	b.n	8010ae8 <_scanf_float+0x188>
 8010b82:	6822      	ldr	r2, [r4, #0]
 8010b84:	0591      	lsls	r1, r2, #22
 8010b86:	f57f af1b 	bpl.w	80109c0 <_scanf_float+0x60>
 8010b8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010b8e:	6022      	str	r2, [r4, #0]
 8010b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b94:	e7a8      	b.n	8010ae8 <_scanf_float+0x188>
 8010b96:	6822      	ldr	r2, [r4, #0]
 8010b98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010b9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010ba0:	d006      	beq.n	8010bb0 <_scanf_float+0x250>
 8010ba2:	0550      	lsls	r0, r2, #21
 8010ba4:	f57f af0c 	bpl.w	80109c0 <_scanf_float+0x60>
 8010ba8:	f1b9 0f00 	cmp.w	r9, #0
 8010bac:	f43f af0f 	beq.w	80109ce <_scanf_float+0x6e>
 8010bb0:	0591      	lsls	r1, r2, #22
 8010bb2:	bf58      	it	pl
 8010bb4:	9901      	ldrpl	r1, [sp, #4]
 8010bb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010bba:	bf58      	it	pl
 8010bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8010bc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010bc4:	bf58      	it	pl
 8010bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010bca:	6022      	str	r2, [r4, #0]
 8010bcc:	f04f 0900 	mov.w	r9, #0
 8010bd0:	e78a      	b.n	8010ae8 <_scanf_float+0x188>
 8010bd2:	f04f 0a03 	mov.w	sl, #3
 8010bd6:	e787      	b.n	8010ae8 <_scanf_float+0x188>
 8010bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010bdc:	4639      	mov	r1, r7
 8010bde:	4640      	mov	r0, r8
 8010be0:	4798      	blx	r3
 8010be2:	2800      	cmp	r0, #0
 8010be4:	f43f aedf 	beq.w	80109a6 <_scanf_float+0x46>
 8010be8:	e6ea      	b.n	80109c0 <_scanf_float+0x60>
 8010bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010bf2:	463a      	mov	r2, r7
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	4798      	blx	r3
 8010bf8:	6923      	ldr	r3, [r4, #16]
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	6123      	str	r3, [r4, #16]
 8010bfe:	e6ec      	b.n	80109da <_scanf_float+0x7a>
 8010c00:	1e6b      	subs	r3, r5, #1
 8010c02:	2b06      	cmp	r3, #6
 8010c04:	d825      	bhi.n	8010c52 <_scanf_float+0x2f2>
 8010c06:	2d02      	cmp	r5, #2
 8010c08:	d836      	bhi.n	8010c78 <_scanf_float+0x318>
 8010c0a:	455e      	cmp	r6, fp
 8010c0c:	f67f aee8 	bls.w	80109e0 <_scanf_float+0x80>
 8010c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c18:	463a      	mov	r2, r7
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	4798      	blx	r3
 8010c1e:	6923      	ldr	r3, [r4, #16]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	e7f1      	b.n	8010c0a <_scanf_float+0x2aa>
 8010c26:	9802      	ldr	r0, [sp, #8]
 8010c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010c30:	9002      	str	r0, [sp, #8]
 8010c32:	463a      	mov	r2, r7
 8010c34:	4640      	mov	r0, r8
 8010c36:	4798      	blx	r3
 8010c38:	6923      	ldr	r3, [r4, #16]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	6123      	str	r3, [r4, #16]
 8010c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c42:	fa5f fa8a 	uxtb.w	sl, sl
 8010c46:	f1ba 0f02 	cmp.w	sl, #2
 8010c4a:	d1ec      	bne.n	8010c26 <_scanf_float+0x2c6>
 8010c4c:	3d03      	subs	r5, #3
 8010c4e:	b2ed      	uxtb	r5, r5
 8010c50:	1b76      	subs	r6, r6, r5
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	05da      	lsls	r2, r3, #23
 8010c56:	d52f      	bpl.n	8010cb8 <_scanf_float+0x358>
 8010c58:	055b      	lsls	r3, r3, #21
 8010c5a:	d510      	bpl.n	8010c7e <_scanf_float+0x31e>
 8010c5c:	455e      	cmp	r6, fp
 8010c5e:	f67f aebf 	bls.w	80109e0 <_scanf_float+0x80>
 8010c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010c6a:	463a      	mov	r2, r7
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	4798      	blx	r3
 8010c70:	6923      	ldr	r3, [r4, #16]
 8010c72:	3b01      	subs	r3, #1
 8010c74:	6123      	str	r3, [r4, #16]
 8010c76:	e7f1      	b.n	8010c5c <_scanf_float+0x2fc>
 8010c78:	46aa      	mov	sl, r5
 8010c7a:	9602      	str	r6, [sp, #8]
 8010c7c:	e7df      	b.n	8010c3e <_scanf_float+0x2de>
 8010c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010c82:	6923      	ldr	r3, [r4, #16]
 8010c84:	2965      	cmp	r1, #101	; 0x65
 8010c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8010c8e:	6123      	str	r3, [r4, #16]
 8010c90:	d00c      	beq.n	8010cac <_scanf_float+0x34c>
 8010c92:	2945      	cmp	r1, #69	; 0x45
 8010c94:	d00a      	beq.n	8010cac <_scanf_float+0x34c>
 8010c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010c9a:	463a      	mov	r2, r7
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4798      	blx	r3
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	1eb5      	subs	r5, r6, #2
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010cb0:	463a      	mov	r2, r7
 8010cb2:	4640      	mov	r0, r8
 8010cb4:	4798      	blx	r3
 8010cb6:	462e      	mov	r6, r5
 8010cb8:	6825      	ldr	r5, [r4, #0]
 8010cba:	f015 0510 	ands.w	r5, r5, #16
 8010cbe:	d158      	bne.n	8010d72 <_scanf_float+0x412>
 8010cc0:	7035      	strb	r5, [r6, #0]
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ccc:	d11c      	bne.n	8010d08 <_scanf_float+0x3a8>
 8010cce:	9b01      	ldr	r3, [sp, #4]
 8010cd0:	454b      	cmp	r3, r9
 8010cd2:	eba3 0209 	sub.w	r2, r3, r9
 8010cd6:	d124      	bne.n	8010d22 <_scanf_float+0x3c2>
 8010cd8:	2200      	movs	r2, #0
 8010cda:	4659      	mov	r1, fp
 8010cdc:	4640      	mov	r0, r8
 8010cde:	f000 ffa1 	bl	8011c24 <_strtod_r>
 8010ce2:	9b03      	ldr	r3, [sp, #12]
 8010ce4:	6821      	ldr	r1, [r4, #0]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f011 0f02 	tst.w	r1, #2
 8010cec:	ec57 6b10 	vmov	r6, r7, d0
 8010cf0:	f103 0204 	add.w	r2, r3, #4
 8010cf4:	d020      	beq.n	8010d38 <_scanf_float+0x3d8>
 8010cf6:	9903      	ldr	r1, [sp, #12]
 8010cf8:	600a      	str	r2, [r1, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	e9c3 6700 	strd	r6, r7, [r3]
 8010d00:	68e3      	ldr	r3, [r4, #12]
 8010d02:	3301      	adds	r3, #1
 8010d04:	60e3      	str	r3, [r4, #12]
 8010d06:	e66c      	b.n	80109e2 <_scanf_float+0x82>
 8010d08:	9b04      	ldr	r3, [sp, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d0e4      	beq.n	8010cd8 <_scanf_float+0x378>
 8010d0e:	9905      	ldr	r1, [sp, #20]
 8010d10:	230a      	movs	r3, #10
 8010d12:	462a      	mov	r2, r5
 8010d14:	3101      	adds	r1, #1
 8010d16:	4640      	mov	r0, r8
 8010d18:	f001 f86a 	bl	8011df0 <_strtol_r>
 8010d1c:	9b04      	ldr	r3, [sp, #16]
 8010d1e:	9e05      	ldr	r6, [sp, #20]
 8010d20:	1ac2      	subs	r2, r0, r3
 8010d22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010d26:	429e      	cmp	r6, r3
 8010d28:	bf28      	it	cs
 8010d2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010d2e:	4912      	ldr	r1, [pc, #72]	; (8010d78 <_scanf_float+0x418>)
 8010d30:	4630      	mov	r0, r6
 8010d32:	f000 f929 	bl	8010f88 <siprintf>
 8010d36:	e7cf      	b.n	8010cd8 <_scanf_float+0x378>
 8010d38:	f011 0f04 	tst.w	r1, #4
 8010d3c:	9903      	ldr	r1, [sp, #12]
 8010d3e:	600a      	str	r2, [r1, #0]
 8010d40:	d1db      	bne.n	8010cfa <_scanf_float+0x39a>
 8010d42:	f8d3 8000 	ldr.w	r8, [r3]
 8010d46:	ee10 2a10 	vmov	r2, s0
 8010d4a:	ee10 0a10 	vmov	r0, s0
 8010d4e:	463b      	mov	r3, r7
 8010d50:	4639      	mov	r1, r7
 8010d52:	f7ef ff23 	bl	8000b9c <__aeabi_dcmpun>
 8010d56:	b128      	cbz	r0, 8010d64 <_scanf_float+0x404>
 8010d58:	4808      	ldr	r0, [pc, #32]	; (8010d7c <_scanf_float+0x41c>)
 8010d5a:	f000 f89d 	bl	8010e98 <nanf>
 8010d5e:	ed88 0a00 	vstr	s0, [r8]
 8010d62:	e7cd      	b.n	8010d00 <_scanf_float+0x3a0>
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ef ff76 	bl	8000c58 <__aeabi_d2f>
 8010d6c:	f8c8 0000 	str.w	r0, [r8]
 8010d70:	e7c6      	b.n	8010d00 <_scanf_float+0x3a0>
 8010d72:	2500      	movs	r5, #0
 8010d74:	e635      	b.n	80109e2 <_scanf_float+0x82>
 8010d76:	bf00      	nop
 8010d78:	08015fe4 	.word	0x08015fe4
 8010d7c:	0801614c 	.word	0x0801614c

08010d80 <rand>:
 8010d80:	4b17      	ldr	r3, [pc, #92]	; (8010de0 <rand+0x60>)
 8010d82:	b510      	push	{r4, lr}
 8010d84:	681c      	ldr	r4, [r3, #0]
 8010d86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d88:	b9b3      	cbnz	r3, 8010db8 <rand+0x38>
 8010d8a:	2018      	movs	r0, #24
 8010d8c:	f002 fa8a 	bl	80132a4 <malloc>
 8010d90:	63a0      	str	r0, [r4, #56]	; 0x38
 8010d92:	b928      	cbnz	r0, 8010da0 <rand+0x20>
 8010d94:	4602      	mov	r2, r0
 8010d96:	4b13      	ldr	r3, [pc, #76]	; (8010de4 <rand+0x64>)
 8010d98:	4813      	ldr	r0, [pc, #76]	; (8010de8 <rand+0x68>)
 8010d9a:	214e      	movs	r1, #78	; 0x4e
 8010d9c:	f001 f864 	bl	8011e68 <__assert_func>
 8010da0:	4a12      	ldr	r2, [pc, #72]	; (8010dec <rand+0x6c>)
 8010da2:	4b13      	ldr	r3, [pc, #76]	; (8010df0 <rand+0x70>)
 8010da4:	e9c0 2300 	strd	r2, r3, [r0]
 8010da8:	4b12      	ldr	r3, [pc, #72]	; (8010df4 <rand+0x74>)
 8010daa:	6083      	str	r3, [r0, #8]
 8010dac:	230b      	movs	r3, #11
 8010dae:	8183      	strh	r3, [r0, #12]
 8010db0:	2201      	movs	r2, #1
 8010db2:	2300      	movs	r3, #0
 8010db4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010db8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010dba:	480f      	ldr	r0, [pc, #60]	; (8010df8 <rand+0x78>)
 8010dbc:	690a      	ldr	r2, [r1, #16]
 8010dbe:	694b      	ldr	r3, [r1, #20]
 8010dc0:	4c0e      	ldr	r4, [pc, #56]	; (8010dfc <rand+0x7c>)
 8010dc2:	4350      	muls	r0, r2
 8010dc4:	fb04 0003 	mla	r0, r4, r3, r0
 8010dc8:	fba2 3404 	umull	r3, r4, r2, r4
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	4404      	add	r4, r0
 8010dd0:	f144 0000 	adc.w	r0, r4, #0
 8010dd4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8010dd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	bf00      	nop
 8010de0:	200003a8 	.word	0x200003a8
 8010de4:	08015fe9 	.word	0x08015fe9
 8010de8:	08016000 	.word	0x08016000
 8010dec:	abcd330e 	.word	0xabcd330e
 8010df0:	e66d1234 	.word	0xe66d1234
 8010df4:	0005deec 	.word	0x0005deec
 8010df8:	5851f42d 	.word	0x5851f42d
 8010dfc:	4c957f2d 	.word	0x4c957f2d

08010e00 <frexpf>:
 8010e00:	ee10 3a10 	vmov	r3, s0
 8010e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010e08:	2100      	movs	r1, #0
 8010e0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010e0e:	6001      	str	r1, [r0, #0]
 8010e10:	da19      	bge.n	8010e46 <frexpf+0x46>
 8010e12:	b1c2      	cbz	r2, 8010e46 <frexpf+0x46>
 8010e14:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010e18:	d10a      	bne.n	8010e30 <frexpf+0x30>
 8010e1a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010e48 <frexpf+0x48>
 8010e1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010e22:	f06f 0118 	mvn.w	r1, #24
 8010e26:	ee17 3a90 	vmov	r3, s15
 8010e2a:	6001      	str	r1, [r0, #0]
 8010e2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010e30:	6801      	ldr	r1, [r0, #0]
 8010e32:	15d2      	asrs	r2, r2, #23
 8010e34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e38:	3a7e      	subs	r2, #126	; 0x7e
 8010e3a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8010e3e:	440a      	add	r2, r1
 8010e40:	ee00 3a10 	vmov	s0, r3
 8010e44:	6002      	str	r2, [r0, #0]
 8010e46:	4770      	bx	lr
 8010e48:	4c000000 	.word	0x4c000000

08010e4c <ldexpf>:
 8010e4c:	b510      	push	{r4, lr}
 8010e4e:	ed2d 8b02 	vpush	{d8}
 8010e52:	4604      	mov	r4, r0
 8010e54:	eeb0 8a40 	vmov.f32	s16, s0
 8010e58:	f003 fa82 	bl	8014360 <finitef>
 8010e5c:	b1b8      	cbz	r0, 8010e8e <ldexpf+0x42>
 8010e5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e66:	d012      	beq.n	8010e8e <ldexpf+0x42>
 8010e68:	eeb0 0a48 	vmov.f32	s0, s16
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 f819 	bl	8010ea4 <scalbnf>
 8010e72:	eeb0 8a40 	vmov.f32	s16, s0
 8010e76:	f003 fa73 	bl	8014360 <finitef>
 8010e7a:	b120      	cbz	r0, 8010e86 <ldexpf+0x3a>
 8010e7c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e84:	d103      	bne.n	8010e8e <ldexpf+0x42>
 8010e86:	f7ff f8c1 	bl	801000c <__errno>
 8010e8a:	2322      	movs	r3, #34	; 0x22
 8010e8c:	6003      	str	r3, [r0, #0]
 8010e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8010e92:	ecbd 8b02 	vpop	{d8}
 8010e96:	bd10      	pop	{r4, pc}

08010e98 <nanf>:
 8010e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010ea0 <nanf+0x8>
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	7fc00000 	.word	0x7fc00000

08010ea4 <scalbnf>:
 8010ea4:	ee10 3a10 	vmov	r3, s0
 8010ea8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010eac:	d025      	beq.n	8010efa <scalbnf+0x56>
 8010eae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010eb2:	d302      	bcc.n	8010eba <scalbnf+0x16>
 8010eb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010eb8:	4770      	bx	lr
 8010eba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010ebe:	d122      	bne.n	8010f06 <scalbnf+0x62>
 8010ec0:	4b2a      	ldr	r3, [pc, #168]	; (8010f6c <scalbnf+0xc8>)
 8010ec2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010f70 <scalbnf+0xcc>
 8010ec6:	4298      	cmp	r0, r3
 8010ec8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010ecc:	db16      	blt.n	8010efc <scalbnf+0x58>
 8010ece:	ee10 3a10 	vmov	r3, s0
 8010ed2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ed6:	3a19      	subs	r2, #25
 8010ed8:	4402      	add	r2, r0
 8010eda:	2afe      	cmp	r2, #254	; 0xfe
 8010edc:	dd15      	ble.n	8010f0a <scalbnf+0x66>
 8010ede:	ee10 3a10 	vmov	r3, s0
 8010ee2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010f74 <scalbnf+0xd0>
 8010ee6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010f78 <scalbnf+0xd4>
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	eeb0 7a67 	vmov.f32	s14, s15
 8010ef0:	bfb8      	it	lt
 8010ef2:	eef0 7a66 	vmovlt.f32	s15, s13
 8010ef6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010efa:	4770      	bx	lr
 8010efc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010f7c <scalbnf+0xd8>
 8010f00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f04:	4770      	bx	lr
 8010f06:	0dd2      	lsrs	r2, r2, #23
 8010f08:	e7e6      	b.n	8010ed8 <scalbnf+0x34>
 8010f0a:	2a00      	cmp	r2, #0
 8010f0c:	dd06      	ble.n	8010f1c <scalbnf+0x78>
 8010f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010f16:	ee00 3a10 	vmov	s0, r3
 8010f1a:	4770      	bx	lr
 8010f1c:	f112 0f16 	cmn.w	r2, #22
 8010f20:	da1a      	bge.n	8010f58 <scalbnf+0xb4>
 8010f22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010f26:	4298      	cmp	r0, r3
 8010f28:	ee10 3a10 	vmov	r3, s0
 8010f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f30:	dd0a      	ble.n	8010f48 <scalbnf+0xa4>
 8010f32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010f74 <scalbnf+0xd0>
 8010f36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010f78 <scalbnf+0xd4>
 8010f3a:	eef0 7a40 	vmov.f32	s15, s0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	bf18      	it	ne
 8010f42:	eeb0 0a47 	vmovne.f32	s0, s14
 8010f46:	e7db      	b.n	8010f00 <scalbnf+0x5c>
 8010f48:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010f7c <scalbnf+0xd8>
 8010f4c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010f80 <scalbnf+0xdc>
 8010f50:	eef0 7a40 	vmov.f32	s15, s0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	e7f3      	b.n	8010f40 <scalbnf+0x9c>
 8010f58:	3219      	adds	r2, #25
 8010f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010f62:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010f84 <scalbnf+0xe0>
 8010f66:	ee07 3a10 	vmov	s14, r3
 8010f6a:	e7c4      	b.n	8010ef6 <scalbnf+0x52>
 8010f6c:	ffff3cb0 	.word	0xffff3cb0
 8010f70:	4c000000 	.word	0x4c000000
 8010f74:	7149f2ca 	.word	0x7149f2ca
 8010f78:	f149f2ca 	.word	0xf149f2ca
 8010f7c:	0da24260 	.word	0x0da24260
 8010f80:	8da24260 	.word	0x8da24260
 8010f84:	33000000 	.word	0x33000000

08010f88 <siprintf>:
 8010f88:	b40e      	push	{r1, r2, r3}
 8010f8a:	b500      	push	{lr}
 8010f8c:	b09c      	sub	sp, #112	; 0x70
 8010f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8010f90:	9002      	str	r0, [sp, #8]
 8010f92:	9006      	str	r0, [sp, #24]
 8010f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f98:	4809      	ldr	r0, [pc, #36]	; (8010fc0 <siprintf+0x38>)
 8010f9a:	9107      	str	r1, [sp, #28]
 8010f9c:	9104      	str	r1, [sp, #16]
 8010f9e:	4909      	ldr	r1, [pc, #36]	; (8010fc4 <siprintf+0x3c>)
 8010fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fa4:	9105      	str	r1, [sp, #20]
 8010fa6:	6800      	ldr	r0, [r0, #0]
 8010fa8:	9301      	str	r3, [sp, #4]
 8010faa:	a902      	add	r1, sp, #8
 8010fac:	f002 ff64 	bl	8013e78 <_svfiprintf_r>
 8010fb0:	9b02      	ldr	r3, [sp, #8]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	701a      	strb	r2, [r3, #0]
 8010fb6:	b01c      	add	sp, #112	; 0x70
 8010fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fbc:	b003      	add	sp, #12
 8010fbe:	4770      	bx	lr
 8010fc0:	200003a8 	.word	0x200003a8
 8010fc4:	ffff0208 	.word	0xffff0208

08010fc8 <strcpy>:
 8010fc8:	4603      	mov	r3, r0
 8010fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fce:	f803 2b01 	strb.w	r2, [r3], #1
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d1f9      	bne.n	8010fca <strcpy+0x2>
 8010fd6:	4770      	bx	lr

08010fd8 <sulp>:
 8010fd8:	b570      	push	{r4, r5, r6, lr}
 8010fda:	4604      	mov	r4, r0
 8010fdc:	460d      	mov	r5, r1
 8010fde:	ec45 4b10 	vmov	d0, r4, r5
 8010fe2:	4616      	mov	r6, r2
 8010fe4:	f002 fce4 	bl	80139b0 <__ulp>
 8010fe8:	ec51 0b10 	vmov	r0, r1, d0
 8010fec:	b17e      	cbz	r6, 801100e <sulp+0x36>
 8010fee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd09      	ble.n	801100e <sulp+0x36>
 8010ffa:	051b      	lsls	r3, r3, #20
 8010ffc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011000:	2400      	movs	r4, #0
 8011002:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011006:	4622      	mov	r2, r4
 8011008:	462b      	mov	r3, r5
 801100a:	f7ef fb2d 	bl	8000668 <__aeabi_dmul>
 801100e:	bd70      	pop	{r4, r5, r6, pc}

08011010 <_strtod_l>:
 8011010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	b0a3      	sub	sp, #140	; 0x8c
 8011016:	461f      	mov	r7, r3
 8011018:	2300      	movs	r3, #0
 801101a:	931e      	str	r3, [sp, #120]	; 0x78
 801101c:	4ba4      	ldr	r3, [pc, #656]	; (80112b0 <_strtod_l+0x2a0>)
 801101e:	9219      	str	r2, [sp, #100]	; 0x64
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	9307      	str	r3, [sp, #28]
 8011024:	4604      	mov	r4, r0
 8011026:	4618      	mov	r0, r3
 8011028:	4688      	mov	r8, r1
 801102a:	f7ef f903 	bl	8000234 <strlen>
 801102e:	f04f 0a00 	mov.w	sl, #0
 8011032:	4605      	mov	r5, r0
 8011034:	f04f 0b00 	mov.w	fp, #0
 8011038:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801103c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801103e:	781a      	ldrb	r2, [r3, #0]
 8011040:	2a2b      	cmp	r2, #43	; 0x2b
 8011042:	d04c      	beq.n	80110de <_strtod_l+0xce>
 8011044:	d839      	bhi.n	80110ba <_strtod_l+0xaa>
 8011046:	2a0d      	cmp	r2, #13
 8011048:	d832      	bhi.n	80110b0 <_strtod_l+0xa0>
 801104a:	2a08      	cmp	r2, #8
 801104c:	d832      	bhi.n	80110b4 <_strtod_l+0xa4>
 801104e:	2a00      	cmp	r2, #0
 8011050:	d03c      	beq.n	80110cc <_strtod_l+0xbc>
 8011052:	2300      	movs	r3, #0
 8011054:	930e      	str	r3, [sp, #56]	; 0x38
 8011056:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011058:	7833      	ldrb	r3, [r6, #0]
 801105a:	2b30      	cmp	r3, #48	; 0x30
 801105c:	f040 80b4 	bne.w	80111c8 <_strtod_l+0x1b8>
 8011060:	7873      	ldrb	r3, [r6, #1]
 8011062:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011066:	2b58      	cmp	r3, #88	; 0x58
 8011068:	d16c      	bne.n	8011144 <_strtod_l+0x134>
 801106a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801106c:	9301      	str	r3, [sp, #4]
 801106e:	ab1e      	add	r3, sp, #120	; 0x78
 8011070:	9702      	str	r7, [sp, #8]
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	4a8f      	ldr	r2, [pc, #572]	; (80112b4 <_strtod_l+0x2a4>)
 8011076:	ab1f      	add	r3, sp, #124	; 0x7c
 8011078:	a91d      	add	r1, sp, #116	; 0x74
 801107a:	4620      	mov	r0, r4
 801107c:	f001 fe06 	bl	8012c8c <__gethex>
 8011080:	f010 0707 	ands.w	r7, r0, #7
 8011084:	4605      	mov	r5, r0
 8011086:	d005      	beq.n	8011094 <_strtod_l+0x84>
 8011088:	2f06      	cmp	r7, #6
 801108a:	d12a      	bne.n	80110e2 <_strtod_l+0xd2>
 801108c:	3601      	adds	r6, #1
 801108e:	2300      	movs	r3, #0
 8011090:	961d      	str	r6, [sp, #116]	; 0x74
 8011092:	930e      	str	r3, [sp, #56]	; 0x38
 8011094:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011096:	2b00      	cmp	r3, #0
 8011098:	f040 8596 	bne.w	8011bc8 <_strtod_l+0xbb8>
 801109c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801109e:	b1db      	cbz	r3, 80110d8 <_strtod_l+0xc8>
 80110a0:	4652      	mov	r2, sl
 80110a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80110a6:	ec43 2b10 	vmov	d0, r2, r3
 80110aa:	b023      	add	sp, #140	; 0x8c
 80110ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b0:	2a20      	cmp	r2, #32
 80110b2:	d1ce      	bne.n	8011052 <_strtod_l+0x42>
 80110b4:	3301      	adds	r3, #1
 80110b6:	931d      	str	r3, [sp, #116]	; 0x74
 80110b8:	e7c0      	b.n	801103c <_strtod_l+0x2c>
 80110ba:	2a2d      	cmp	r2, #45	; 0x2d
 80110bc:	d1c9      	bne.n	8011052 <_strtod_l+0x42>
 80110be:	2201      	movs	r2, #1
 80110c0:	920e      	str	r2, [sp, #56]	; 0x38
 80110c2:	1c5a      	adds	r2, r3, #1
 80110c4:	921d      	str	r2, [sp, #116]	; 0x74
 80110c6:	785b      	ldrb	r3, [r3, #1]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1c4      	bne.n	8011056 <_strtod_l+0x46>
 80110cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80110ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f040 8576 	bne.w	8011bc4 <_strtod_l+0xbb4>
 80110d8:	4652      	mov	r2, sl
 80110da:	465b      	mov	r3, fp
 80110dc:	e7e3      	b.n	80110a6 <_strtod_l+0x96>
 80110de:	2200      	movs	r2, #0
 80110e0:	e7ee      	b.n	80110c0 <_strtod_l+0xb0>
 80110e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80110e4:	b13a      	cbz	r2, 80110f6 <_strtod_l+0xe6>
 80110e6:	2135      	movs	r1, #53	; 0x35
 80110e8:	a820      	add	r0, sp, #128	; 0x80
 80110ea:	f002 fd6c 	bl	8013bc6 <__copybits>
 80110ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80110f0:	4620      	mov	r0, r4
 80110f2:	f002 f931 	bl	8013358 <_Bfree>
 80110f6:	3f01      	subs	r7, #1
 80110f8:	2f05      	cmp	r7, #5
 80110fa:	d807      	bhi.n	801110c <_strtod_l+0xfc>
 80110fc:	e8df f007 	tbb	[pc, r7]
 8011100:	1d180b0e 	.word	0x1d180b0e
 8011104:	030e      	.short	0x030e
 8011106:	f04f 0b00 	mov.w	fp, #0
 801110a:	46da      	mov	sl, fp
 801110c:	0728      	lsls	r0, r5, #28
 801110e:	d5c1      	bpl.n	8011094 <_strtod_l+0x84>
 8011110:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011114:	e7be      	b.n	8011094 <_strtod_l+0x84>
 8011116:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801111a:	e7f7      	b.n	801110c <_strtod_l+0xfc>
 801111c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011120:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011122:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011126:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801112a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801112e:	e7ed      	b.n	801110c <_strtod_l+0xfc>
 8011130:	f8df b184 	ldr.w	fp, [pc, #388]	; 80112b8 <_strtod_l+0x2a8>
 8011134:	f04f 0a00 	mov.w	sl, #0
 8011138:	e7e8      	b.n	801110c <_strtod_l+0xfc>
 801113a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801113e:	f04f 3aff 	mov.w	sl, #4294967295
 8011142:	e7e3      	b.n	801110c <_strtod_l+0xfc>
 8011144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011146:	1c5a      	adds	r2, r3, #1
 8011148:	921d      	str	r2, [sp, #116]	; 0x74
 801114a:	785b      	ldrb	r3, [r3, #1]
 801114c:	2b30      	cmp	r3, #48	; 0x30
 801114e:	d0f9      	beq.n	8011144 <_strtod_l+0x134>
 8011150:	2b00      	cmp	r3, #0
 8011152:	d09f      	beq.n	8011094 <_strtod_l+0x84>
 8011154:	2301      	movs	r3, #1
 8011156:	f04f 0900 	mov.w	r9, #0
 801115a:	9304      	str	r3, [sp, #16]
 801115c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801115e:	930a      	str	r3, [sp, #40]	; 0x28
 8011160:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011164:	464f      	mov	r7, r9
 8011166:	220a      	movs	r2, #10
 8011168:	981d      	ldr	r0, [sp, #116]	; 0x74
 801116a:	7806      	ldrb	r6, [r0, #0]
 801116c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011170:	b2d9      	uxtb	r1, r3
 8011172:	2909      	cmp	r1, #9
 8011174:	d92a      	bls.n	80111cc <_strtod_l+0x1bc>
 8011176:	9907      	ldr	r1, [sp, #28]
 8011178:	462a      	mov	r2, r5
 801117a:	f003 f8fe 	bl	801437a <strncmp>
 801117e:	b398      	cbz	r0, 80111e8 <_strtod_l+0x1d8>
 8011180:	2000      	movs	r0, #0
 8011182:	4633      	mov	r3, r6
 8011184:	463d      	mov	r5, r7
 8011186:	9007      	str	r0, [sp, #28]
 8011188:	4602      	mov	r2, r0
 801118a:	2b65      	cmp	r3, #101	; 0x65
 801118c:	d001      	beq.n	8011192 <_strtod_l+0x182>
 801118e:	2b45      	cmp	r3, #69	; 0x45
 8011190:	d118      	bne.n	80111c4 <_strtod_l+0x1b4>
 8011192:	b91d      	cbnz	r5, 801119c <_strtod_l+0x18c>
 8011194:	9b04      	ldr	r3, [sp, #16]
 8011196:	4303      	orrs	r3, r0
 8011198:	d098      	beq.n	80110cc <_strtod_l+0xbc>
 801119a:	2500      	movs	r5, #0
 801119c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80111a0:	f108 0301 	add.w	r3, r8, #1
 80111a4:	931d      	str	r3, [sp, #116]	; 0x74
 80111a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80111aa:	2b2b      	cmp	r3, #43	; 0x2b
 80111ac:	d075      	beq.n	801129a <_strtod_l+0x28a>
 80111ae:	2b2d      	cmp	r3, #45	; 0x2d
 80111b0:	d07b      	beq.n	80112aa <_strtod_l+0x29a>
 80111b2:	f04f 0c00 	mov.w	ip, #0
 80111b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80111ba:	2909      	cmp	r1, #9
 80111bc:	f240 8082 	bls.w	80112c4 <_strtod_l+0x2b4>
 80111c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80111c4:	2600      	movs	r6, #0
 80111c6:	e09d      	b.n	8011304 <_strtod_l+0x2f4>
 80111c8:	2300      	movs	r3, #0
 80111ca:	e7c4      	b.n	8011156 <_strtod_l+0x146>
 80111cc:	2f08      	cmp	r7, #8
 80111ce:	bfd8      	it	le
 80111d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80111d2:	f100 0001 	add.w	r0, r0, #1
 80111d6:	bfda      	itte	le
 80111d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80111dc:	9309      	strle	r3, [sp, #36]	; 0x24
 80111de:	fb02 3909 	mlagt	r9, r2, r9, r3
 80111e2:	3701      	adds	r7, #1
 80111e4:	901d      	str	r0, [sp, #116]	; 0x74
 80111e6:	e7bf      	b.n	8011168 <_strtod_l+0x158>
 80111e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111ea:	195a      	adds	r2, r3, r5
 80111ec:	921d      	str	r2, [sp, #116]	; 0x74
 80111ee:	5d5b      	ldrb	r3, [r3, r5]
 80111f0:	2f00      	cmp	r7, #0
 80111f2:	d037      	beq.n	8011264 <_strtod_l+0x254>
 80111f4:	9007      	str	r0, [sp, #28]
 80111f6:	463d      	mov	r5, r7
 80111f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80111fc:	2a09      	cmp	r2, #9
 80111fe:	d912      	bls.n	8011226 <_strtod_l+0x216>
 8011200:	2201      	movs	r2, #1
 8011202:	e7c2      	b.n	801118a <_strtod_l+0x17a>
 8011204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011206:	1c5a      	adds	r2, r3, #1
 8011208:	921d      	str	r2, [sp, #116]	; 0x74
 801120a:	785b      	ldrb	r3, [r3, #1]
 801120c:	3001      	adds	r0, #1
 801120e:	2b30      	cmp	r3, #48	; 0x30
 8011210:	d0f8      	beq.n	8011204 <_strtod_l+0x1f4>
 8011212:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011216:	2a08      	cmp	r2, #8
 8011218:	f200 84db 	bhi.w	8011bd2 <_strtod_l+0xbc2>
 801121c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801121e:	9007      	str	r0, [sp, #28]
 8011220:	2000      	movs	r0, #0
 8011222:	920a      	str	r2, [sp, #40]	; 0x28
 8011224:	4605      	mov	r5, r0
 8011226:	3b30      	subs	r3, #48	; 0x30
 8011228:	f100 0201 	add.w	r2, r0, #1
 801122c:	d014      	beq.n	8011258 <_strtod_l+0x248>
 801122e:	9907      	ldr	r1, [sp, #28]
 8011230:	4411      	add	r1, r2
 8011232:	9107      	str	r1, [sp, #28]
 8011234:	462a      	mov	r2, r5
 8011236:	eb00 0e05 	add.w	lr, r0, r5
 801123a:	210a      	movs	r1, #10
 801123c:	4572      	cmp	r2, lr
 801123e:	d113      	bne.n	8011268 <_strtod_l+0x258>
 8011240:	182a      	adds	r2, r5, r0
 8011242:	2a08      	cmp	r2, #8
 8011244:	f105 0501 	add.w	r5, r5, #1
 8011248:	4405      	add	r5, r0
 801124a:	dc1c      	bgt.n	8011286 <_strtod_l+0x276>
 801124c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801124e:	220a      	movs	r2, #10
 8011250:	fb02 3301 	mla	r3, r2, r1, r3
 8011254:	9309      	str	r3, [sp, #36]	; 0x24
 8011256:	2200      	movs	r2, #0
 8011258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801125a:	1c59      	adds	r1, r3, #1
 801125c:	911d      	str	r1, [sp, #116]	; 0x74
 801125e:	785b      	ldrb	r3, [r3, #1]
 8011260:	4610      	mov	r0, r2
 8011262:	e7c9      	b.n	80111f8 <_strtod_l+0x1e8>
 8011264:	4638      	mov	r0, r7
 8011266:	e7d2      	b.n	801120e <_strtod_l+0x1fe>
 8011268:	2a08      	cmp	r2, #8
 801126a:	dc04      	bgt.n	8011276 <_strtod_l+0x266>
 801126c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801126e:	434e      	muls	r6, r1
 8011270:	9609      	str	r6, [sp, #36]	; 0x24
 8011272:	3201      	adds	r2, #1
 8011274:	e7e2      	b.n	801123c <_strtod_l+0x22c>
 8011276:	f102 0c01 	add.w	ip, r2, #1
 801127a:	f1bc 0f10 	cmp.w	ip, #16
 801127e:	bfd8      	it	le
 8011280:	fb01 f909 	mulle.w	r9, r1, r9
 8011284:	e7f5      	b.n	8011272 <_strtod_l+0x262>
 8011286:	2d10      	cmp	r5, #16
 8011288:	bfdc      	itt	le
 801128a:	220a      	movle	r2, #10
 801128c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011290:	e7e1      	b.n	8011256 <_strtod_l+0x246>
 8011292:	2300      	movs	r3, #0
 8011294:	9307      	str	r3, [sp, #28]
 8011296:	2201      	movs	r2, #1
 8011298:	e77c      	b.n	8011194 <_strtod_l+0x184>
 801129a:	f04f 0c00 	mov.w	ip, #0
 801129e:	f108 0302 	add.w	r3, r8, #2
 80112a2:	931d      	str	r3, [sp, #116]	; 0x74
 80112a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80112a8:	e785      	b.n	80111b6 <_strtod_l+0x1a6>
 80112aa:	f04f 0c01 	mov.w	ip, #1
 80112ae:	e7f6      	b.n	801129e <_strtod_l+0x28e>
 80112b0:	08016334 	.word	0x08016334
 80112b4:	08016060 	.word	0x08016060
 80112b8:	7ff00000 	.word	0x7ff00000
 80112bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112be:	1c59      	adds	r1, r3, #1
 80112c0:	911d      	str	r1, [sp, #116]	; 0x74
 80112c2:	785b      	ldrb	r3, [r3, #1]
 80112c4:	2b30      	cmp	r3, #48	; 0x30
 80112c6:	d0f9      	beq.n	80112bc <_strtod_l+0x2ac>
 80112c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80112cc:	2908      	cmp	r1, #8
 80112ce:	f63f af79 	bhi.w	80111c4 <_strtod_l+0x1b4>
 80112d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80112d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112d8:	9308      	str	r3, [sp, #32]
 80112da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112dc:	1c59      	adds	r1, r3, #1
 80112de:	911d      	str	r1, [sp, #116]	; 0x74
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80112e6:	2e09      	cmp	r6, #9
 80112e8:	d937      	bls.n	801135a <_strtod_l+0x34a>
 80112ea:	9e08      	ldr	r6, [sp, #32]
 80112ec:	1b89      	subs	r1, r1, r6
 80112ee:	2908      	cmp	r1, #8
 80112f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80112f4:	dc02      	bgt.n	80112fc <_strtod_l+0x2ec>
 80112f6:	4576      	cmp	r6, lr
 80112f8:	bfa8      	it	ge
 80112fa:	4676      	movge	r6, lr
 80112fc:	f1bc 0f00 	cmp.w	ip, #0
 8011300:	d000      	beq.n	8011304 <_strtod_l+0x2f4>
 8011302:	4276      	negs	r6, r6
 8011304:	2d00      	cmp	r5, #0
 8011306:	d14f      	bne.n	80113a8 <_strtod_l+0x398>
 8011308:	9904      	ldr	r1, [sp, #16]
 801130a:	4301      	orrs	r1, r0
 801130c:	f47f aec2 	bne.w	8011094 <_strtod_l+0x84>
 8011310:	2a00      	cmp	r2, #0
 8011312:	f47f aedb 	bne.w	80110cc <_strtod_l+0xbc>
 8011316:	2b69      	cmp	r3, #105	; 0x69
 8011318:	d027      	beq.n	801136a <_strtod_l+0x35a>
 801131a:	dc24      	bgt.n	8011366 <_strtod_l+0x356>
 801131c:	2b49      	cmp	r3, #73	; 0x49
 801131e:	d024      	beq.n	801136a <_strtod_l+0x35a>
 8011320:	2b4e      	cmp	r3, #78	; 0x4e
 8011322:	f47f aed3 	bne.w	80110cc <_strtod_l+0xbc>
 8011326:	499e      	ldr	r1, [pc, #632]	; (80115a0 <_strtod_l+0x590>)
 8011328:	a81d      	add	r0, sp, #116	; 0x74
 801132a:	f001 ff07 	bl	801313c <__match>
 801132e:	2800      	cmp	r0, #0
 8011330:	f43f aecc 	beq.w	80110cc <_strtod_l+0xbc>
 8011334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b28      	cmp	r3, #40	; 0x28
 801133a:	d12d      	bne.n	8011398 <_strtod_l+0x388>
 801133c:	4999      	ldr	r1, [pc, #612]	; (80115a4 <_strtod_l+0x594>)
 801133e:	aa20      	add	r2, sp, #128	; 0x80
 8011340:	a81d      	add	r0, sp, #116	; 0x74
 8011342:	f001 ff0f 	bl	8013164 <__hexnan>
 8011346:	2805      	cmp	r0, #5
 8011348:	d126      	bne.n	8011398 <_strtod_l+0x388>
 801134a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801134c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011350:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011354:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011358:	e69c      	b.n	8011094 <_strtod_l+0x84>
 801135a:	210a      	movs	r1, #10
 801135c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011360:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011364:	e7b9      	b.n	80112da <_strtod_l+0x2ca>
 8011366:	2b6e      	cmp	r3, #110	; 0x6e
 8011368:	e7db      	b.n	8011322 <_strtod_l+0x312>
 801136a:	498f      	ldr	r1, [pc, #572]	; (80115a8 <_strtod_l+0x598>)
 801136c:	a81d      	add	r0, sp, #116	; 0x74
 801136e:	f001 fee5 	bl	801313c <__match>
 8011372:	2800      	cmp	r0, #0
 8011374:	f43f aeaa 	beq.w	80110cc <_strtod_l+0xbc>
 8011378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801137a:	498c      	ldr	r1, [pc, #560]	; (80115ac <_strtod_l+0x59c>)
 801137c:	3b01      	subs	r3, #1
 801137e:	a81d      	add	r0, sp, #116	; 0x74
 8011380:	931d      	str	r3, [sp, #116]	; 0x74
 8011382:	f001 fedb 	bl	801313c <__match>
 8011386:	b910      	cbnz	r0, 801138e <_strtod_l+0x37e>
 8011388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801138a:	3301      	adds	r3, #1
 801138c:	931d      	str	r3, [sp, #116]	; 0x74
 801138e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80115bc <_strtod_l+0x5ac>
 8011392:	f04f 0a00 	mov.w	sl, #0
 8011396:	e67d      	b.n	8011094 <_strtod_l+0x84>
 8011398:	4885      	ldr	r0, [pc, #532]	; (80115b0 <_strtod_l+0x5a0>)
 801139a:	f002 ffc9 	bl	8014330 <nan>
 801139e:	ed8d 0b04 	vstr	d0, [sp, #16]
 80113a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80113a6:	e675      	b.n	8011094 <_strtod_l+0x84>
 80113a8:	9b07      	ldr	r3, [sp, #28]
 80113aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113ac:	1af3      	subs	r3, r6, r3
 80113ae:	2f00      	cmp	r7, #0
 80113b0:	bf08      	it	eq
 80113b2:	462f      	moveq	r7, r5
 80113b4:	2d10      	cmp	r5, #16
 80113b6:	9308      	str	r3, [sp, #32]
 80113b8:	46a8      	mov	r8, r5
 80113ba:	bfa8      	it	ge
 80113bc:	f04f 0810 	movge.w	r8, #16
 80113c0:	f7ef f8d8 	bl	8000574 <__aeabi_ui2d>
 80113c4:	2d09      	cmp	r5, #9
 80113c6:	4682      	mov	sl, r0
 80113c8:	468b      	mov	fp, r1
 80113ca:	dd13      	ble.n	80113f4 <_strtod_l+0x3e4>
 80113cc:	4b79      	ldr	r3, [pc, #484]	; (80115b4 <_strtod_l+0x5a4>)
 80113ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80113d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80113d6:	f7ef f947 	bl	8000668 <__aeabi_dmul>
 80113da:	4682      	mov	sl, r0
 80113dc:	4648      	mov	r0, r9
 80113de:	468b      	mov	fp, r1
 80113e0:	f7ef f8c8 	bl	8000574 <__aeabi_ui2d>
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	4650      	mov	r0, sl
 80113ea:	4659      	mov	r1, fp
 80113ec:	f7ee ff86 	bl	80002fc <__adddf3>
 80113f0:	4682      	mov	sl, r0
 80113f2:	468b      	mov	fp, r1
 80113f4:	2d0f      	cmp	r5, #15
 80113f6:	dc38      	bgt.n	801146a <_strtod_l+0x45a>
 80113f8:	9b08      	ldr	r3, [sp, #32]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f43f ae4a 	beq.w	8011094 <_strtod_l+0x84>
 8011400:	dd24      	ble.n	801144c <_strtod_l+0x43c>
 8011402:	2b16      	cmp	r3, #22
 8011404:	dc0b      	bgt.n	801141e <_strtod_l+0x40e>
 8011406:	4d6b      	ldr	r5, [pc, #428]	; (80115b4 <_strtod_l+0x5a4>)
 8011408:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801140c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011410:	4652      	mov	r2, sl
 8011412:	465b      	mov	r3, fp
 8011414:	f7ef f928 	bl	8000668 <__aeabi_dmul>
 8011418:	4682      	mov	sl, r0
 801141a:	468b      	mov	fp, r1
 801141c:	e63a      	b.n	8011094 <_strtod_l+0x84>
 801141e:	9a08      	ldr	r2, [sp, #32]
 8011420:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011424:	4293      	cmp	r3, r2
 8011426:	db20      	blt.n	801146a <_strtod_l+0x45a>
 8011428:	4c62      	ldr	r4, [pc, #392]	; (80115b4 <_strtod_l+0x5a4>)
 801142a:	f1c5 050f 	rsb	r5, r5, #15
 801142e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011432:	4652      	mov	r2, sl
 8011434:	465b      	mov	r3, fp
 8011436:	e9d1 0100 	ldrd	r0, r1, [r1]
 801143a:	f7ef f915 	bl	8000668 <__aeabi_dmul>
 801143e:	9b08      	ldr	r3, [sp, #32]
 8011440:	1b5d      	subs	r5, r3, r5
 8011442:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011446:	e9d4 2300 	ldrd	r2, r3, [r4]
 801144a:	e7e3      	b.n	8011414 <_strtod_l+0x404>
 801144c:	9b08      	ldr	r3, [sp, #32]
 801144e:	3316      	adds	r3, #22
 8011450:	db0b      	blt.n	801146a <_strtod_l+0x45a>
 8011452:	9b07      	ldr	r3, [sp, #28]
 8011454:	4a57      	ldr	r2, [pc, #348]	; (80115b4 <_strtod_l+0x5a4>)
 8011456:	1b9e      	subs	r6, r3, r6
 8011458:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801145c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011460:	4650      	mov	r0, sl
 8011462:	4659      	mov	r1, fp
 8011464:	f7ef fa2a 	bl	80008bc <__aeabi_ddiv>
 8011468:	e7d6      	b.n	8011418 <_strtod_l+0x408>
 801146a:	9b08      	ldr	r3, [sp, #32]
 801146c:	eba5 0808 	sub.w	r8, r5, r8
 8011470:	4498      	add	r8, r3
 8011472:	f1b8 0f00 	cmp.w	r8, #0
 8011476:	dd71      	ble.n	801155c <_strtod_l+0x54c>
 8011478:	f018 030f 	ands.w	r3, r8, #15
 801147c:	d00a      	beq.n	8011494 <_strtod_l+0x484>
 801147e:	494d      	ldr	r1, [pc, #308]	; (80115b4 <_strtod_l+0x5a4>)
 8011480:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011484:	4652      	mov	r2, sl
 8011486:	465b      	mov	r3, fp
 8011488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801148c:	f7ef f8ec 	bl	8000668 <__aeabi_dmul>
 8011490:	4682      	mov	sl, r0
 8011492:	468b      	mov	fp, r1
 8011494:	f038 080f 	bics.w	r8, r8, #15
 8011498:	d04d      	beq.n	8011536 <_strtod_l+0x526>
 801149a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801149e:	dd22      	ble.n	80114e6 <_strtod_l+0x4d6>
 80114a0:	2500      	movs	r5, #0
 80114a2:	462e      	mov	r6, r5
 80114a4:	9509      	str	r5, [sp, #36]	; 0x24
 80114a6:	9507      	str	r5, [sp, #28]
 80114a8:	2322      	movs	r3, #34	; 0x22
 80114aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80115bc <_strtod_l+0x5ac>
 80114ae:	6023      	str	r3, [r4, #0]
 80114b0:	f04f 0a00 	mov.w	sl, #0
 80114b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f43f adec 	beq.w	8011094 <_strtod_l+0x84>
 80114bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80114be:	4620      	mov	r0, r4
 80114c0:	f001 ff4a 	bl	8013358 <_Bfree>
 80114c4:	9907      	ldr	r1, [sp, #28]
 80114c6:	4620      	mov	r0, r4
 80114c8:	f001 ff46 	bl	8013358 <_Bfree>
 80114cc:	4631      	mov	r1, r6
 80114ce:	4620      	mov	r0, r4
 80114d0:	f001 ff42 	bl	8013358 <_Bfree>
 80114d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114d6:	4620      	mov	r0, r4
 80114d8:	f001 ff3e 	bl	8013358 <_Bfree>
 80114dc:	4629      	mov	r1, r5
 80114de:	4620      	mov	r0, r4
 80114e0:	f001 ff3a 	bl	8013358 <_Bfree>
 80114e4:	e5d6      	b.n	8011094 <_strtod_l+0x84>
 80114e6:	2300      	movs	r3, #0
 80114e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80114ec:	4650      	mov	r0, sl
 80114ee:	4659      	mov	r1, fp
 80114f0:	4699      	mov	r9, r3
 80114f2:	f1b8 0f01 	cmp.w	r8, #1
 80114f6:	dc21      	bgt.n	801153c <_strtod_l+0x52c>
 80114f8:	b10b      	cbz	r3, 80114fe <_strtod_l+0x4ee>
 80114fa:	4682      	mov	sl, r0
 80114fc:	468b      	mov	fp, r1
 80114fe:	4b2e      	ldr	r3, [pc, #184]	; (80115b8 <_strtod_l+0x5a8>)
 8011500:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011504:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011508:	4652      	mov	r2, sl
 801150a:	465b      	mov	r3, fp
 801150c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011510:	f7ef f8aa 	bl	8000668 <__aeabi_dmul>
 8011514:	4b29      	ldr	r3, [pc, #164]	; (80115bc <_strtod_l+0x5ac>)
 8011516:	460a      	mov	r2, r1
 8011518:	400b      	ands	r3, r1
 801151a:	4929      	ldr	r1, [pc, #164]	; (80115c0 <_strtod_l+0x5b0>)
 801151c:	428b      	cmp	r3, r1
 801151e:	4682      	mov	sl, r0
 8011520:	d8be      	bhi.n	80114a0 <_strtod_l+0x490>
 8011522:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011526:	428b      	cmp	r3, r1
 8011528:	bf86      	itte	hi
 801152a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80115c4 <_strtod_l+0x5b4>
 801152e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011532:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011536:	2300      	movs	r3, #0
 8011538:	9304      	str	r3, [sp, #16]
 801153a:	e081      	b.n	8011640 <_strtod_l+0x630>
 801153c:	f018 0f01 	tst.w	r8, #1
 8011540:	d007      	beq.n	8011552 <_strtod_l+0x542>
 8011542:	4b1d      	ldr	r3, [pc, #116]	; (80115b8 <_strtod_l+0x5a8>)
 8011544:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	f7ef f88c 	bl	8000668 <__aeabi_dmul>
 8011550:	2301      	movs	r3, #1
 8011552:	f109 0901 	add.w	r9, r9, #1
 8011556:	ea4f 0868 	mov.w	r8, r8, asr #1
 801155a:	e7ca      	b.n	80114f2 <_strtod_l+0x4e2>
 801155c:	d0eb      	beq.n	8011536 <_strtod_l+0x526>
 801155e:	f1c8 0800 	rsb	r8, r8, #0
 8011562:	f018 020f 	ands.w	r2, r8, #15
 8011566:	d00a      	beq.n	801157e <_strtod_l+0x56e>
 8011568:	4b12      	ldr	r3, [pc, #72]	; (80115b4 <_strtod_l+0x5a4>)
 801156a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801156e:	4650      	mov	r0, sl
 8011570:	4659      	mov	r1, fp
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	f7ef f9a1 	bl	80008bc <__aeabi_ddiv>
 801157a:	4682      	mov	sl, r0
 801157c:	468b      	mov	fp, r1
 801157e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011582:	d0d8      	beq.n	8011536 <_strtod_l+0x526>
 8011584:	f1b8 0f1f 	cmp.w	r8, #31
 8011588:	dd1e      	ble.n	80115c8 <_strtod_l+0x5b8>
 801158a:	2500      	movs	r5, #0
 801158c:	462e      	mov	r6, r5
 801158e:	9509      	str	r5, [sp, #36]	; 0x24
 8011590:	9507      	str	r5, [sp, #28]
 8011592:	2322      	movs	r3, #34	; 0x22
 8011594:	f04f 0a00 	mov.w	sl, #0
 8011598:	f04f 0b00 	mov.w	fp, #0
 801159c:	6023      	str	r3, [r4, #0]
 801159e:	e789      	b.n	80114b4 <_strtod_l+0x4a4>
 80115a0:	08015fbd 	.word	0x08015fbd
 80115a4:	08016074 	.word	0x08016074
 80115a8:	08015fb5 	.word	0x08015fb5
 80115ac:	08016251 	.word	0x08016251
 80115b0:	0801614c 	.word	0x0801614c
 80115b4:	080163d0 	.word	0x080163d0
 80115b8:	080163a8 	.word	0x080163a8
 80115bc:	7ff00000 	.word	0x7ff00000
 80115c0:	7ca00000 	.word	0x7ca00000
 80115c4:	7fefffff 	.word	0x7fefffff
 80115c8:	f018 0310 	ands.w	r3, r8, #16
 80115cc:	bf18      	it	ne
 80115ce:	236a      	movne	r3, #106	; 0x6a
 80115d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011988 <_strtod_l+0x978>
 80115d4:	9304      	str	r3, [sp, #16]
 80115d6:	4650      	mov	r0, sl
 80115d8:	4659      	mov	r1, fp
 80115da:	2300      	movs	r3, #0
 80115dc:	f018 0f01 	tst.w	r8, #1
 80115e0:	d004      	beq.n	80115ec <_strtod_l+0x5dc>
 80115e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80115e6:	f7ef f83f 	bl	8000668 <__aeabi_dmul>
 80115ea:	2301      	movs	r3, #1
 80115ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80115f0:	f109 0908 	add.w	r9, r9, #8
 80115f4:	d1f2      	bne.n	80115dc <_strtod_l+0x5cc>
 80115f6:	b10b      	cbz	r3, 80115fc <_strtod_l+0x5ec>
 80115f8:	4682      	mov	sl, r0
 80115fa:	468b      	mov	fp, r1
 80115fc:	9b04      	ldr	r3, [sp, #16]
 80115fe:	b1bb      	cbz	r3, 8011630 <_strtod_l+0x620>
 8011600:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011604:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011608:	2b00      	cmp	r3, #0
 801160a:	4659      	mov	r1, fp
 801160c:	dd10      	ble.n	8011630 <_strtod_l+0x620>
 801160e:	2b1f      	cmp	r3, #31
 8011610:	f340 8128 	ble.w	8011864 <_strtod_l+0x854>
 8011614:	2b34      	cmp	r3, #52	; 0x34
 8011616:	bfde      	ittt	le
 8011618:	3b20      	suble	r3, #32
 801161a:	f04f 32ff 	movle.w	r2, #4294967295
 801161e:	fa02 f303 	lslle.w	r3, r2, r3
 8011622:	f04f 0a00 	mov.w	sl, #0
 8011626:	bfcc      	ite	gt
 8011628:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801162c:	ea03 0b01 	andle.w	fp, r3, r1
 8011630:	2200      	movs	r2, #0
 8011632:	2300      	movs	r3, #0
 8011634:	4650      	mov	r0, sl
 8011636:	4659      	mov	r1, fp
 8011638:	f7ef fa7e 	bl	8000b38 <__aeabi_dcmpeq>
 801163c:	2800      	cmp	r0, #0
 801163e:	d1a4      	bne.n	801158a <_strtod_l+0x57a>
 8011640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011642:	9300      	str	r3, [sp, #0]
 8011644:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011646:	462b      	mov	r3, r5
 8011648:	463a      	mov	r2, r7
 801164a:	4620      	mov	r0, r4
 801164c:	f001 fef0 	bl	8013430 <__s2b>
 8011650:	9009      	str	r0, [sp, #36]	; 0x24
 8011652:	2800      	cmp	r0, #0
 8011654:	f43f af24 	beq.w	80114a0 <_strtod_l+0x490>
 8011658:	9b07      	ldr	r3, [sp, #28]
 801165a:	1b9e      	subs	r6, r3, r6
 801165c:	9b08      	ldr	r3, [sp, #32]
 801165e:	2b00      	cmp	r3, #0
 8011660:	bfb4      	ite	lt
 8011662:	4633      	movlt	r3, r6
 8011664:	2300      	movge	r3, #0
 8011666:	9310      	str	r3, [sp, #64]	; 0x40
 8011668:	9b08      	ldr	r3, [sp, #32]
 801166a:	2500      	movs	r5, #0
 801166c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011670:	9318      	str	r3, [sp, #96]	; 0x60
 8011672:	462e      	mov	r6, r5
 8011674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011676:	4620      	mov	r0, r4
 8011678:	6859      	ldr	r1, [r3, #4]
 801167a:	f001 fe2d 	bl	80132d8 <_Balloc>
 801167e:	9007      	str	r0, [sp, #28]
 8011680:	2800      	cmp	r0, #0
 8011682:	f43f af11 	beq.w	80114a8 <_strtod_l+0x498>
 8011686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011688:	691a      	ldr	r2, [r3, #16]
 801168a:	3202      	adds	r2, #2
 801168c:	f103 010c 	add.w	r1, r3, #12
 8011690:	0092      	lsls	r2, r2, #2
 8011692:	300c      	adds	r0, #12
 8011694:	f7fe fce4 	bl	8010060 <memcpy>
 8011698:	ec4b ab10 	vmov	d0, sl, fp
 801169c:	aa20      	add	r2, sp, #128	; 0x80
 801169e:	a91f      	add	r1, sp, #124	; 0x7c
 80116a0:	4620      	mov	r0, r4
 80116a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80116a6:	f002 f9ff 	bl	8013aa8 <__d2b>
 80116aa:	901e      	str	r0, [sp, #120]	; 0x78
 80116ac:	2800      	cmp	r0, #0
 80116ae:	f43f aefb 	beq.w	80114a8 <_strtod_l+0x498>
 80116b2:	2101      	movs	r1, #1
 80116b4:	4620      	mov	r0, r4
 80116b6:	f001 ff55 	bl	8013564 <__i2b>
 80116ba:	4606      	mov	r6, r0
 80116bc:	2800      	cmp	r0, #0
 80116be:	f43f aef3 	beq.w	80114a8 <_strtod_l+0x498>
 80116c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116c4:	9904      	ldr	r1, [sp, #16]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	bfab      	itete	ge
 80116ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80116cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80116ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80116d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80116d4:	bfac      	ite	ge
 80116d6:	eb03 0902 	addge.w	r9, r3, r2
 80116da:	1ad7      	sublt	r7, r2, r3
 80116dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80116de:	eba3 0801 	sub.w	r8, r3, r1
 80116e2:	4490      	add	r8, r2
 80116e4:	4ba3      	ldr	r3, [pc, #652]	; (8011974 <_strtod_l+0x964>)
 80116e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80116ea:	4598      	cmp	r8, r3
 80116ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80116f0:	f280 80cc 	bge.w	801188c <_strtod_l+0x87c>
 80116f4:	eba3 0308 	sub.w	r3, r3, r8
 80116f8:	2b1f      	cmp	r3, #31
 80116fa:	eba2 0203 	sub.w	r2, r2, r3
 80116fe:	f04f 0101 	mov.w	r1, #1
 8011702:	f300 80b6 	bgt.w	8011872 <_strtod_l+0x862>
 8011706:	fa01 f303 	lsl.w	r3, r1, r3
 801170a:	9311      	str	r3, [sp, #68]	; 0x44
 801170c:	2300      	movs	r3, #0
 801170e:	930c      	str	r3, [sp, #48]	; 0x30
 8011710:	eb09 0802 	add.w	r8, r9, r2
 8011714:	9b04      	ldr	r3, [sp, #16]
 8011716:	45c1      	cmp	r9, r8
 8011718:	4417      	add	r7, r2
 801171a:	441f      	add	r7, r3
 801171c:	464b      	mov	r3, r9
 801171e:	bfa8      	it	ge
 8011720:	4643      	movge	r3, r8
 8011722:	42bb      	cmp	r3, r7
 8011724:	bfa8      	it	ge
 8011726:	463b      	movge	r3, r7
 8011728:	2b00      	cmp	r3, #0
 801172a:	bfc2      	ittt	gt
 801172c:	eba8 0803 	subgt.w	r8, r8, r3
 8011730:	1aff      	subgt	r7, r7, r3
 8011732:	eba9 0903 	subgt.w	r9, r9, r3
 8011736:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011738:	2b00      	cmp	r3, #0
 801173a:	dd17      	ble.n	801176c <_strtod_l+0x75c>
 801173c:	4631      	mov	r1, r6
 801173e:	461a      	mov	r2, r3
 8011740:	4620      	mov	r0, r4
 8011742:	f001 ffcb 	bl	80136dc <__pow5mult>
 8011746:	4606      	mov	r6, r0
 8011748:	2800      	cmp	r0, #0
 801174a:	f43f aead 	beq.w	80114a8 <_strtod_l+0x498>
 801174e:	4601      	mov	r1, r0
 8011750:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011752:	4620      	mov	r0, r4
 8011754:	f001 ff1c 	bl	8013590 <__multiply>
 8011758:	900f      	str	r0, [sp, #60]	; 0x3c
 801175a:	2800      	cmp	r0, #0
 801175c:	f43f aea4 	beq.w	80114a8 <_strtod_l+0x498>
 8011760:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011762:	4620      	mov	r0, r4
 8011764:	f001 fdf8 	bl	8013358 <_Bfree>
 8011768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801176a:	931e      	str	r3, [sp, #120]	; 0x78
 801176c:	f1b8 0f00 	cmp.w	r8, #0
 8011770:	f300 8091 	bgt.w	8011896 <_strtod_l+0x886>
 8011774:	9b08      	ldr	r3, [sp, #32]
 8011776:	2b00      	cmp	r3, #0
 8011778:	dd08      	ble.n	801178c <_strtod_l+0x77c>
 801177a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801177c:	9907      	ldr	r1, [sp, #28]
 801177e:	4620      	mov	r0, r4
 8011780:	f001 ffac 	bl	80136dc <__pow5mult>
 8011784:	9007      	str	r0, [sp, #28]
 8011786:	2800      	cmp	r0, #0
 8011788:	f43f ae8e 	beq.w	80114a8 <_strtod_l+0x498>
 801178c:	2f00      	cmp	r7, #0
 801178e:	dd08      	ble.n	80117a2 <_strtod_l+0x792>
 8011790:	9907      	ldr	r1, [sp, #28]
 8011792:	463a      	mov	r2, r7
 8011794:	4620      	mov	r0, r4
 8011796:	f001 fffb 	bl	8013790 <__lshift>
 801179a:	9007      	str	r0, [sp, #28]
 801179c:	2800      	cmp	r0, #0
 801179e:	f43f ae83 	beq.w	80114a8 <_strtod_l+0x498>
 80117a2:	f1b9 0f00 	cmp.w	r9, #0
 80117a6:	dd08      	ble.n	80117ba <_strtod_l+0x7aa>
 80117a8:	4631      	mov	r1, r6
 80117aa:	464a      	mov	r2, r9
 80117ac:	4620      	mov	r0, r4
 80117ae:	f001 ffef 	bl	8013790 <__lshift>
 80117b2:	4606      	mov	r6, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f43f ae77 	beq.w	80114a8 <_strtod_l+0x498>
 80117ba:	9a07      	ldr	r2, [sp, #28]
 80117bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80117be:	4620      	mov	r0, r4
 80117c0:	f002 f86e 	bl	80138a0 <__mdiff>
 80117c4:	4605      	mov	r5, r0
 80117c6:	2800      	cmp	r0, #0
 80117c8:	f43f ae6e 	beq.w	80114a8 <_strtod_l+0x498>
 80117cc:	68c3      	ldr	r3, [r0, #12]
 80117ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d0:	2300      	movs	r3, #0
 80117d2:	60c3      	str	r3, [r0, #12]
 80117d4:	4631      	mov	r1, r6
 80117d6:	f002 f847 	bl	8013868 <__mcmp>
 80117da:	2800      	cmp	r0, #0
 80117dc:	da65      	bge.n	80118aa <_strtod_l+0x89a>
 80117de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117e0:	ea53 030a 	orrs.w	r3, r3, sl
 80117e4:	f040 8087 	bne.w	80118f6 <_strtod_l+0x8e6>
 80117e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f040 8082 	bne.w	80118f6 <_strtod_l+0x8e6>
 80117f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117f6:	0d1b      	lsrs	r3, r3, #20
 80117f8:	051b      	lsls	r3, r3, #20
 80117fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80117fe:	d97a      	bls.n	80118f6 <_strtod_l+0x8e6>
 8011800:	696b      	ldr	r3, [r5, #20]
 8011802:	b913      	cbnz	r3, 801180a <_strtod_l+0x7fa>
 8011804:	692b      	ldr	r3, [r5, #16]
 8011806:	2b01      	cmp	r3, #1
 8011808:	dd75      	ble.n	80118f6 <_strtod_l+0x8e6>
 801180a:	4629      	mov	r1, r5
 801180c:	2201      	movs	r2, #1
 801180e:	4620      	mov	r0, r4
 8011810:	f001 ffbe 	bl	8013790 <__lshift>
 8011814:	4631      	mov	r1, r6
 8011816:	4605      	mov	r5, r0
 8011818:	f002 f826 	bl	8013868 <__mcmp>
 801181c:	2800      	cmp	r0, #0
 801181e:	dd6a      	ble.n	80118f6 <_strtod_l+0x8e6>
 8011820:	9904      	ldr	r1, [sp, #16]
 8011822:	4a55      	ldr	r2, [pc, #340]	; (8011978 <_strtod_l+0x968>)
 8011824:	465b      	mov	r3, fp
 8011826:	2900      	cmp	r1, #0
 8011828:	f000 8085 	beq.w	8011936 <_strtod_l+0x926>
 801182c:	ea02 010b 	and.w	r1, r2, fp
 8011830:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011834:	dc7f      	bgt.n	8011936 <_strtod_l+0x926>
 8011836:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801183a:	f77f aeaa 	ble.w	8011592 <_strtod_l+0x582>
 801183e:	4a4f      	ldr	r2, [pc, #316]	; (801197c <_strtod_l+0x96c>)
 8011840:	2300      	movs	r3, #0
 8011842:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011846:	4650      	mov	r0, sl
 8011848:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801184c:	4659      	mov	r1, fp
 801184e:	f7ee ff0b 	bl	8000668 <__aeabi_dmul>
 8011852:	460b      	mov	r3, r1
 8011854:	4303      	orrs	r3, r0
 8011856:	bf08      	it	eq
 8011858:	2322      	moveq	r3, #34	; 0x22
 801185a:	4682      	mov	sl, r0
 801185c:	468b      	mov	fp, r1
 801185e:	bf08      	it	eq
 8011860:	6023      	streq	r3, [r4, #0]
 8011862:	e62b      	b.n	80114bc <_strtod_l+0x4ac>
 8011864:	f04f 32ff 	mov.w	r2, #4294967295
 8011868:	fa02 f303 	lsl.w	r3, r2, r3
 801186c:	ea03 0a0a 	and.w	sl, r3, sl
 8011870:	e6de      	b.n	8011630 <_strtod_l+0x620>
 8011872:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011876:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801187a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801187e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011882:	fa01 f308 	lsl.w	r3, r1, r8
 8011886:	930c      	str	r3, [sp, #48]	; 0x30
 8011888:	9111      	str	r1, [sp, #68]	; 0x44
 801188a:	e741      	b.n	8011710 <_strtod_l+0x700>
 801188c:	2300      	movs	r3, #0
 801188e:	930c      	str	r3, [sp, #48]	; 0x30
 8011890:	2301      	movs	r3, #1
 8011892:	9311      	str	r3, [sp, #68]	; 0x44
 8011894:	e73c      	b.n	8011710 <_strtod_l+0x700>
 8011896:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011898:	4642      	mov	r2, r8
 801189a:	4620      	mov	r0, r4
 801189c:	f001 ff78 	bl	8013790 <__lshift>
 80118a0:	901e      	str	r0, [sp, #120]	; 0x78
 80118a2:	2800      	cmp	r0, #0
 80118a4:	f47f af66 	bne.w	8011774 <_strtod_l+0x764>
 80118a8:	e5fe      	b.n	80114a8 <_strtod_l+0x498>
 80118aa:	465f      	mov	r7, fp
 80118ac:	d16e      	bne.n	801198c <_strtod_l+0x97c>
 80118ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80118b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118b4:	b342      	cbz	r2, 8011908 <_strtod_l+0x8f8>
 80118b6:	4a32      	ldr	r2, [pc, #200]	; (8011980 <_strtod_l+0x970>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d128      	bne.n	801190e <_strtod_l+0x8fe>
 80118bc:	9b04      	ldr	r3, [sp, #16]
 80118be:	4650      	mov	r0, sl
 80118c0:	b1eb      	cbz	r3, 80118fe <_strtod_l+0x8ee>
 80118c2:	4a2d      	ldr	r2, [pc, #180]	; (8011978 <_strtod_l+0x968>)
 80118c4:	403a      	ands	r2, r7
 80118c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80118ca:	f04f 31ff 	mov.w	r1, #4294967295
 80118ce:	d819      	bhi.n	8011904 <_strtod_l+0x8f4>
 80118d0:	0d12      	lsrs	r2, r2, #20
 80118d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80118d6:	fa01 f303 	lsl.w	r3, r1, r3
 80118da:	4298      	cmp	r0, r3
 80118dc:	d117      	bne.n	801190e <_strtod_l+0x8fe>
 80118de:	4b29      	ldr	r3, [pc, #164]	; (8011984 <_strtod_l+0x974>)
 80118e0:	429f      	cmp	r7, r3
 80118e2:	d102      	bne.n	80118ea <_strtod_l+0x8da>
 80118e4:	3001      	adds	r0, #1
 80118e6:	f43f addf 	beq.w	80114a8 <_strtod_l+0x498>
 80118ea:	4b23      	ldr	r3, [pc, #140]	; (8011978 <_strtod_l+0x968>)
 80118ec:	403b      	ands	r3, r7
 80118ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80118f2:	f04f 0a00 	mov.w	sl, #0
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1a0      	bne.n	801183e <_strtod_l+0x82e>
 80118fc:	e5de      	b.n	80114bc <_strtod_l+0x4ac>
 80118fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011902:	e7ea      	b.n	80118da <_strtod_l+0x8ca>
 8011904:	460b      	mov	r3, r1
 8011906:	e7e8      	b.n	80118da <_strtod_l+0x8ca>
 8011908:	ea53 030a 	orrs.w	r3, r3, sl
 801190c:	d088      	beq.n	8011820 <_strtod_l+0x810>
 801190e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011910:	b1db      	cbz	r3, 801194a <_strtod_l+0x93a>
 8011912:	423b      	tst	r3, r7
 8011914:	d0ef      	beq.n	80118f6 <_strtod_l+0x8e6>
 8011916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011918:	9a04      	ldr	r2, [sp, #16]
 801191a:	4650      	mov	r0, sl
 801191c:	4659      	mov	r1, fp
 801191e:	b1c3      	cbz	r3, 8011952 <_strtod_l+0x942>
 8011920:	f7ff fb5a 	bl	8010fd8 <sulp>
 8011924:	4602      	mov	r2, r0
 8011926:	460b      	mov	r3, r1
 8011928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801192c:	f7ee fce6 	bl	80002fc <__adddf3>
 8011930:	4682      	mov	sl, r0
 8011932:	468b      	mov	fp, r1
 8011934:	e7df      	b.n	80118f6 <_strtod_l+0x8e6>
 8011936:	4013      	ands	r3, r2
 8011938:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801193c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011940:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011944:	f04f 3aff 	mov.w	sl, #4294967295
 8011948:	e7d5      	b.n	80118f6 <_strtod_l+0x8e6>
 801194a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801194c:	ea13 0f0a 	tst.w	r3, sl
 8011950:	e7e0      	b.n	8011914 <_strtod_l+0x904>
 8011952:	f7ff fb41 	bl	8010fd8 <sulp>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801195e:	f7ee fccb 	bl	80002f8 <__aeabi_dsub>
 8011962:	2200      	movs	r2, #0
 8011964:	2300      	movs	r3, #0
 8011966:	4682      	mov	sl, r0
 8011968:	468b      	mov	fp, r1
 801196a:	f7ef f8e5 	bl	8000b38 <__aeabi_dcmpeq>
 801196e:	2800      	cmp	r0, #0
 8011970:	d0c1      	beq.n	80118f6 <_strtod_l+0x8e6>
 8011972:	e60e      	b.n	8011592 <_strtod_l+0x582>
 8011974:	fffffc02 	.word	0xfffffc02
 8011978:	7ff00000 	.word	0x7ff00000
 801197c:	39500000 	.word	0x39500000
 8011980:	000fffff 	.word	0x000fffff
 8011984:	7fefffff 	.word	0x7fefffff
 8011988:	08016088 	.word	0x08016088
 801198c:	4631      	mov	r1, r6
 801198e:	4628      	mov	r0, r5
 8011990:	f002 f8e6 	bl	8013b60 <__ratio>
 8011994:	ec59 8b10 	vmov	r8, r9, d0
 8011998:	ee10 0a10 	vmov	r0, s0
 801199c:	2200      	movs	r2, #0
 801199e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80119a2:	4649      	mov	r1, r9
 80119a4:	f7ef f8dc 	bl	8000b60 <__aeabi_dcmple>
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d07c      	beq.n	8011aa6 <_strtod_l+0xa96>
 80119ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d04c      	beq.n	8011a4c <_strtod_l+0xa3c>
 80119b2:	4b95      	ldr	r3, [pc, #596]	; (8011c08 <_strtod_l+0xbf8>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80119ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011c08 <_strtod_l+0xbf8>
 80119be:	f04f 0800 	mov.w	r8, #0
 80119c2:	4b92      	ldr	r3, [pc, #584]	; (8011c0c <_strtod_l+0xbfc>)
 80119c4:	403b      	ands	r3, r7
 80119c6:	9311      	str	r3, [sp, #68]	; 0x44
 80119c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119ca:	4b91      	ldr	r3, [pc, #580]	; (8011c10 <_strtod_l+0xc00>)
 80119cc:	429a      	cmp	r2, r3
 80119ce:	f040 80b2 	bne.w	8011b36 <_strtod_l+0xb26>
 80119d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80119d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80119da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80119de:	ec4b ab10 	vmov	d0, sl, fp
 80119e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80119e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80119ea:	f001 ffe1 	bl	80139b0 <__ulp>
 80119ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80119f2:	ec53 2b10 	vmov	r2, r3, d0
 80119f6:	f7ee fe37 	bl	8000668 <__aeabi_dmul>
 80119fa:	4652      	mov	r2, sl
 80119fc:	465b      	mov	r3, fp
 80119fe:	f7ee fc7d 	bl	80002fc <__adddf3>
 8011a02:	460b      	mov	r3, r1
 8011a04:	4981      	ldr	r1, [pc, #516]	; (8011c0c <_strtod_l+0xbfc>)
 8011a06:	4a83      	ldr	r2, [pc, #524]	; (8011c14 <_strtod_l+0xc04>)
 8011a08:	4019      	ands	r1, r3
 8011a0a:	4291      	cmp	r1, r2
 8011a0c:	4682      	mov	sl, r0
 8011a0e:	d95e      	bls.n	8011ace <_strtod_l+0xabe>
 8011a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a12:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d103      	bne.n	8011a22 <_strtod_l+0xa12>
 8011a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	f43f ad43 	beq.w	80114a8 <_strtod_l+0x498>
 8011a22:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011c20 <_strtod_l+0xc10>
 8011a26:	f04f 3aff 	mov.w	sl, #4294967295
 8011a2a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f001 fc93 	bl	8013358 <_Bfree>
 8011a32:	9907      	ldr	r1, [sp, #28]
 8011a34:	4620      	mov	r0, r4
 8011a36:	f001 fc8f 	bl	8013358 <_Bfree>
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f001 fc8b 	bl	8013358 <_Bfree>
 8011a42:	4629      	mov	r1, r5
 8011a44:	4620      	mov	r0, r4
 8011a46:	f001 fc87 	bl	8013358 <_Bfree>
 8011a4a:	e613      	b.n	8011674 <_strtod_l+0x664>
 8011a4c:	f1ba 0f00 	cmp.w	sl, #0
 8011a50:	d11b      	bne.n	8011a8a <_strtod_l+0xa7a>
 8011a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a56:	b9f3      	cbnz	r3, 8011a96 <_strtod_l+0xa86>
 8011a58:	4b6b      	ldr	r3, [pc, #428]	; (8011c08 <_strtod_l+0xbf8>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	4649      	mov	r1, r9
 8011a60:	f7ef f874 	bl	8000b4c <__aeabi_dcmplt>
 8011a64:	b9d0      	cbnz	r0, 8011a9c <_strtod_l+0xa8c>
 8011a66:	4640      	mov	r0, r8
 8011a68:	4649      	mov	r1, r9
 8011a6a:	4b6b      	ldr	r3, [pc, #428]	; (8011c18 <_strtod_l+0xc08>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f7ee fdfb 	bl	8000668 <__aeabi_dmul>
 8011a72:	4680      	mov	r8, r0
 8011a74:	4689      	mov	r9, r1
 8011a76:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a7a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011a7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a80:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011a84:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011a88:	e79b      	b.n	80119c2 <_strtod_l+0x9b2>
 8011a8a:	f1ba 0f01 	cmp.w	sl, #1
 8011a8e:	d102      	bne.n	8011a96 <_strtod_l+0xa86>
 8011a90:	2f00      	cmp	r7, #0
 8011a92:	f43f ad7e 	beq.w	8011592 <_strtod_l+0x582>
 8011a96:	4b61      	ldr	r3, [pc, #388]	; (8011c1c <_strtod_l+0xc0c>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	e78c      	b.n	80119b6 <_strtod_l+0x9a6>
 8011a9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011c18 <_strtod_l+0xc08>
 8011aa0:	f04f 0800 	mov.w	r8, #0
 8011aa4:	e7e7      	b.n	8011a76 <_strtod_l+0xa66>
 8011aa6:	4b5c      	ldr	r3, [pc, #368]	; (8011c18 <_strtod_l+0xc08>)
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	4649      	mov	r1, r9
 8011aac:	2200      	movs	r2, #0
 8011aae:	f7ee fddb 	bl	8000668 <__aeabi_dmul>
 8011ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ab4:	4680      	mov	r8, r0
 8011ab6:	4689      	mov	r9, r1
 8011ab8:	b933      	cbnz	r3, 8011ac8 <_strtod_l+0xab8>
 8011aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011abe:	9012      	str	r0, [sp, #72]	; 0x48
 8011ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ac2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011ac6:	e7dd      	b.n	8011a84 <_strtod_l+0xa74>
 8011ac8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011acc:	e7f9      	b.n	8011ac2 <_strtod_l+0xab2>
 8011ace:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011ad2:	9b04      	ldr	r3, [sp, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1a8      	bne.n	8011a2a <_strtod_l+0xa1a>
 8011ad8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ade:	0d1b      	lsrs	r3, r3, #20
 8011ae0:	051b      	lsls	r3, r3, #20
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d1a1      	bne.n	8011a2a <_strtod_l+0xa1a>
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	4649      	mov	r1, r9
 8011aea:	f7ef f91d 	bl	8000d28 <__aeabi_d2lz>
 8011aee:	f7ee fd8d 	bl	800060c <__aeabi_l2d>
 8011af2:	4602      	mov	r2, r0
 8011af4:	460b      	mov	r3, r1
 8011af6:	4640      	mov	r0, r8
 8011af8:	4649      	mov	r1, r9
 8011afa:	f7ee fbfd 	bl	80002f8 <__aeabi_dsub>
 8011afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b04:	ea43 030a 	orr.w	r3, r3, sl
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	4680      	mov	r8, r0
 8011b0c:	4689      	mov	r9, r1
 8011b0e:	d053      	beq.n	8011bb8 <_strtod_l+0xba8>
 8011b10:	a335      	add	r3, pc, #212	; (adr r3, 8011be8 <_strtod_l+0xbd8>)
 8011b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b16:	f7ef f819 	bl	8000b4c <__aeabi_dcmplt>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	f47f acce 	bne.w	80114bc <_strtod_l+0x4ac>
 8011b20:	a333      	add	r3, pc, #204	; (adr r3, 8011bf0 <_strtod_l+0xbe0>)
 8011b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b26:	4640      	mov	r0, r8
 8011b28:	4649      	mov	r1, r9
 8011b2a:	f7ef f82d 	bl	8000b88 <__aeabi_dcmpgt>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	f43f af7b 	beq.w	8011a2a <_strtod_l+0xa1a>
 8011b34:	e4c2      	b.n	80114bc <_strtod_l+0x4ac>
 8011b36:	9b04      	ldr	r3, [sp, #16]
 8011b38:	b333      	cbz	r3, 8011b88 <_strtod_l+0xb78>
 8011b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011b40:	d822      	bhi.n	8011b88 <_strtod_l+0xb78>
 8011b42:	a32d      	add	r3, pc, #180	; (adr r3, 8011bf8 <_strtod_l+0xbe8>)
 8011b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b48:	4640      	mov	r0, r8
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	f7ef f808 	bl	8000b60 <__aeabi_dcmple>
 8011b50:	b1a0      	cbz	r0, 8011b7c <_strtod_l+0xb6c>
 8011b52:	4649      	mov	r1, r9
 8011b54:	4640      	mov	r0, r8
 8011b56:	f7ef f85f 	bl	8000c18 <__aeabi_d2uiz>
 8011b5a:	2801      	cmp	r0, #1
 8011b5c:	bf38      	it	cc
 8011b5e:	2001      	movcc	r0, #1
 8011b60:	f7ee fd08 	bl	8000574 <__aeabi_ui2d>
 8011b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b66:	4680      	mov	r8, r0
 8011b68:	4689      	mov	r9, r1
 8011b6a:	bb13      	cbnz	r3, 8011bb2 <_strtod_l+0xba2>
 8011b6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b70:	9014      	str	r0, [sp, #80]	; 0x50
 8011b72:	9315      	str	r3, [sp, #84]	; 0x54
 8011b74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011b78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011b80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011b84:	1a9b      	subs	r3, r3, r2
 8011b86:	930d      	str	r3, [sp, #52]	; 0x34
 8011b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011b8c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011b94:	f001 ff0c 	bl	80139b0 <__ulp>
 8011b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011b9c:	ec53 2b10 	vmov	r2, r3, d0
 8011ba0:	f7ee fd62 	bl	8000668 <__aeabi_dmul>
 8011ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ba8:	f7ee fba8 	bl	80002fc <__adddf3>
 8011bac:	4682      	mov	sl, r0
 8011bae:	468b      	mov	fp, r1
 8011bb0:	e78f      	b.n	8011ad2 <_strtod_l+0xac2>
 8011bb2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011bb6:	e7dd      	b.n	8011b74 <_strtod_l+0xb64>
 8011bb8:	a311      	add	r3, pc, #68	; (adr r3, 8011c00 <_strtod_l+0xbf0>)
 8011bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbe:	f7ee ffc5 	bl	8000b4c <__aeabi_dcmplt>
 8011bc2:	e7b4      	b.n	8011b2e <_strtod_l+0xb1e>
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8011bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011bca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	f7ff ba65 	b.w	801109c <_strtod_l+0x8c>
 8011bd2:	2b65      	cmp	r3, #101	; 0x65
 8011bd4:	f43f ab5d 	beq.w	8011292 <_strtod_l+0x282>
 8011bd8:	2b45      	cmp	r3, #69	; 0x45
 8011bda:	f43f ab5a 	beq.w	8011292 <_strtod_l+0x282>
 8011bde:	2201      	movs	r2, #1
 8011be0:	f7ff bb92 	b.w	8011308 <_strtod_l+0x2f8>
 8011be4:	f3af 8000 	nop.w
 8011be8:	94a03595 	.word	0x94a03595
 8011bec:	3fdfffff 	.word	0x3fdfffff
 8011bf0:	35afe535 	.word	0x35afe535
 8011bf4:	3fe00000 	.word	0x3fe00000
 8011bf8:	ffc00000 	.word	0xffc00000
 8011bfc:	41dfffff 	.word	0x41dfffff
 8011c00:	94a03595 	.word	0x94a03595
 8011c04:	3fcfffff 	.word	0x3fcfffff
 8011c08:	3ff00000 	.word	0x3ff00000
 8011c0c:	7ff00000 	.word	0x7ff00000
 8011c10:	7fe00000 	.word	0x7fe00000
 8011c14:	7c9fffff 	.word	0x7c9fffff
 8011c18:	3fe00000 	.word	0x3fe00000
 8011c1c:	bff00000 	.word	0xbff00000
 8011c20:	7fefffff 	.word	0x7fefffff

08011c24 <_strtod_r>:
 8011c24:	4b01      	ldr	r3, [pc, #4]	; (8011c2c <_strtod_r+0x8>)
 8011c26:	f7ff b9f3 	b.w	8011010 <_strtod_l>
 8011c2a:	bf00      	nop
 8011c2c:	20000410 	.word	0x20000410

08011c30 <strtok>:
 8011c30:	4b16      	ldr	r3, [pc, #88]	; (8011c8c <strtok+0x5c>)
 8011c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c34:	681e      	ldr	r6, [r3, #0]
 8011c36:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011c38:	4605      	mov	r5, r0
 8011c3a:	b9fc      	cbnz	r4, 8011c7c <strtok+0x4c>
 8011c3c:	2050      	movs	r0, #80	; 0x50
 8011c3e:	9101      	str	r1, [sp, #4]
 8011c40:	f001 fb30 	bl	80132a4 <malloc>
 8011c44:	9901      	ldr	r1, [sp, #4]
 8011c46:	65b0      	str	r0, [r6, #88]	; 0x58
 8011c48:	4602      	mov	r2, r0
 8011c4a:	b920      	cbnz	r0, 8011c56 <strtok+0x26>
 8011c4c:	4b10      	ldr	r3, [pc, #64]	; (8011c90 <strtok+0x60>)
 8011c4e:	4811      	ldr	r0, [pc, #68]	; (8011c94 <strtok+0x64>)
 8011c50:	2157      	movs	r1, #87	; 0x57
 8011c52:	f000 f909 	bl	8011e68 <__assert_func>
 8011c56:	e9c0 4400 	strd	r4, r4, [r0]
 8011c5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011c5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011c62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011c66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011c6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011c6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011c72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011c76:	6184      	str	r4, [r0, #24]
 8011c78:	7704      	strb	r4, [r0, #28]
 8011c7a:	6244      	str	r4, [r0, #36]	; 0x24
 8011c7c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011c7e:	2301      	movs	r3, #1
 8011c80:	4628      	mov	r0, r5
 8011c82:	b002      	add	sp, #8
 8011c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c88:	f000 b806 	b.w	8011c98 <__strtok_r>
 8011c8c:	200003a8 	.word	0x200003a8
 8011c90:	08015fe9 	.word	0x08015fe9
 8011c94:	080160b0 	.word	0x080160b0

08011c98 <__strtok_r>:
 8011c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9a:	b908      	cbnz	r0, 8011ca0 <__strtok_r+0x8>
 8011c9c:	6810      	ldr	r0, [r2, #0]
 8011c9e:	b188      	cbz	r0, 8011cc4 <__strtok_r+0x2c>
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011ca8:	460f      	mov	r7, r1
 8011caa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011cae:	b91e      	cbnz	r6, 8011cb8 <__strtok_r+0x20>
 8011cb0:	b965      	cbnz	r5, 8011ccc <__strtok_r+0x34>
 8011cb2:	6015      	str	r5, [r2, #0]
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	e005      	b.n	8011cc4 <__strtok_r+0x2c>
 8011cb8:	42b5      	cmp	r5, r6
 8011cba:	d1f6      	bne.n	8011caa <__strtok_r+0x12>
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1f0      	bne.n	8011ca2 <__strtok_r+0xa>
 8011cc0:	6014      	str	r4, [r2, #0]
 8011cc2:	7003      	strb	r3, [r0, #0]
 8011cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc6:	461c      	mov	r4, r3
 8011cc8:	e00c      	b.n	8011ce4 <__strtok_r+0x4c>
 8011cca:	b915      	cbnz	r5, 8011cd2 <__strtok_r+0x3a>
 8011ccc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011cd0:	460e      	mov	r6, r1
 8011cd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011cd6:	42ab      	cmp	r3, r5
 8011cd8:	d1f7      	bne.n	8011cca <__strtok_r+0x32>
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d0f3      	beq.n	8011cc6 <__strtok_r+0x2e>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011ce4:	6014      	str	r4, [r2, #0]
 8011ce6:	e7ed      	b.n	8011cc4 <__strtok_r+0x2c>

08011ce8 <_strtol_l.isra.0>:
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cee:	d001      	beq.n	8011cf4 <_strtol_l.isra.0+0xc>
 8011cf0:	2b24      	cmp	r3, #36	; 0x24
 8011cf2:	d906      	bls.n	8011d02 <_strtol_l.isra.0+0x1a>
 8011cf4:	f7fe f98a 	bl	801000c <__errno>
 8011cf8:	2316      	movs	r3, #22
 8011cfa:	6003      	str	r3, [r0, #0]
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d02:	4f3a      	ldr	r7, [pc, #232]	; (8011dec <_strtol_l.isra.0+0x104>)
 8011d04:	468e      	mov	lr, r1
 8011d06:	4676      	mov	r6, lr
 8011d08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d0c:	5de5      	ldrb	r5, [r4, r7]
 8011d0e:	f015 0508 	ands.w	r5, r5, #8
 8011d12:	d1f8      	bne.n	8011d06 <_strtol_l.isra.0+0x1e>
 8011d14:	2c2d      	cmp	r4, #45	; 0x2d
 8011d16:	d134      	bne.n	8011d82 <_strtol_l.isra.0+0x9a>
 8011d18:	f89e 4000 	ldrb.w	r4, [lr]
 8011d1c:	f04f 0801 	mov.w	r8, #1
 8011d20:	f106 0e02 	add.w	lr, r6, #2
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d05c      	beq.n	8011de2 <_strtol_l.isra.0+0xfa>
 8011d28:	2b10      	cmp	r3, #16
 8011d2a:	d10c      	bne.n	8011d46 <_strtol_l.isra.0+0x5e>
 8011d2c:	2c30      	cmp	r4, #48	; 0x30
 8011d2e:	d10a      	bne.n	8011d46 <_strtol_l.isra.0+0x5e>
 8011d30:	f89e 4000 	ldrb.w	r4, [lr]
 8011d34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d38:	2c58      	cmp	r4, #88	; 0x58
 8011d3a:	d14d      	bne.n	8011dd8 <_strtol_l.isra.0+0xf0>
 8011d3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011d40:	2310      	movs	r3, #16
 8011d42:	f10e 0e02 	add.w	lr, lr, #2
 8011d46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011d4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011d4e:	2600      	movs	r6, #0
 8011d50:	fbbc f9f3 	udiv	r9, ip, r3
 8011d54:	4635      	mov	r5, r6
 8011d56:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011d5e:	2f09      	cmp	r7, #9
 8011d60:	d818      	bhi.n	8011d94 <_strtol_l.isra.0+0xac>
 8011d62:	463c      	mov	r4, r7
 8011d64:	42a3      	cmp	r3, r4
 8011d66:	dd24      	ble.n	8011db2 <_strtol_l.isra.0+0xca>
 8011d68:	2e00      	cmp	r6, #0
 8011d6a:	db1f      	blt.n	8011dac <_strtol_l.isra.0+0xc4>
 8011d6c:	45a9      	cmp	r9, r5
 8011d6e:	d31d      	bcc.n	8011dac <_strtol_l.isra.0+0xc4>
 8011d70:	d101      	bne.n	8011d76 <_strtol_l.isra.0+0x8e>
 8011d72:	45a2      	cmp	sl, r4
 8011d74:	db1a      	blt.n	8011dac <_strtol_l.isra.0+0xc4>
 8011d76:	fb05 4503 	mla	r5, r5, r3, r4
 8011d7a:	2601      	movs	r6, #1
 8011d7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d80:	e7eb      	b.n	8011d5a <_strtol_l.isra.0+0x72>
 8011d82:	2c2b      	cmp	r4, #43	; 0x2b
 8011d84:	bf08      	it	eq
 8011d86:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011d8a:	46a8      	mov	r8, r5
 8011d8c:	bf08      	it	eq
 8011d8e:	f106 0e02 	addeq.w	lr, r6, #2
 8011d92:	e7c7      	b.n	8011d24 <_strtol_l.isra.0+0x3c>
 8011d94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011d98:	2f19      	cmp	r7, #25
 8011d9a:	d801      	bhi.n	8011da0 <_strtol_l.isra.0+0xb8>
 8011d9c:	3c37      	subs	r4, #55	; 0x37
 8011d9e:	e7e1      	b.n	8011d64 <_strtol_l.isra.0+0x7c>
 8011da0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011da4:	2f19      	cmp	r7, #25
 8011da6:	d804      	bhi.n	8011db2 <_strtol_l.isra.0+0xca>
 8011da8:	3c57      	subs	r4, #87	; 0x57
 8011daa:	e7db      	b.n	8011d64 <_strtol_l.isra.0+0x7c>
 8011dac:	f04f 36ff 	mov.w	r6, #4294967295
 8011db0:	e7e4      	b.n	8011d7c <_strtol_l.isra.0+0x94>
 8011db2:	2e00      	cmp	r6, #0
 8011db4:	da05      	bge.n	8011dc2 <_strtol_l.isra.0+0xda>
 8011db6:	2322      	movs	r3, #34	; 0x22
 8011db8:	6003      	str	r3, [r0, #0]
 8011dba:	4665      	mov	r5, ip
 8011dbc:	b942      	cbnz	r2, 8011dd0 <_strtol_l.isra.0+0xe8>
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	e79d      	b.n	8011cfe <_strtol_l.isra.0+0x16>
 8011dc2:	f1b8 0f00 	cmp.w	r8, #0
 8011dc6:	d000      	beq.n	8011dca <_strtol_l.isra.0+0xe2>
 8011dc8:	426d      	negs	r5, r5
 8011dca:	2a00      	cmp	r2, #0
 8011dcc:	d0f7      	beq.n	8011dbe <_strtol_l.isra.0+0xd6>
 8011dce:	b10e      	cbz	r6, 8011dd4 <_strtol_l.isra.0+0xec>
 8011dd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011dd4:	6011      	str	r1, [r2, #0]
 8011dd6:	e7f2      	b.n	8011dbe <_strtol_l.isra.0+0xd6>
 8011dd8:	2430      	movs	r4, #48	; 0x30
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d1b3      	bne.n	8011d46 <_strtol_l.isra.0+0x5e>
 8011dde:	2308      	movs	r3, #8
 8011de0:	e7b1      	b.n	8011d46 <_strtol_l.isra.0+0x5e>
 8011de2:	2c30      	cmp	r4, #48	; 0x30
 8011de4:	d0a4      	beq.n	8011d30 <_strtol_l.isra.0+0x48>
 8011de6:	230a      	movs	r3, #10
 8011de8:	e7ad      	b.n	8011d46 <_strtol_l.isra.0+0x5e>
 8011dea:	bf00      	nop
 8011dec:	0801614e 	.word	0x0801614e

08011df0 <_strtol_r>:
 8011df0:	f7ff bf7a 	b.w	8011ce8 <_strtol_l.isra.0>

08011df4 <_vsniprintf_r>:
 8011df4:	b530      	push	{r4, r5, lr}
 8011df6:	1e14      	subs	r4, r2, #0
 8011df8:	4605      	mov	r5, r0
 8011dfa:	b09b      	sub	sp, #108	; 0x6c
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	da05      	bge.n	8011e0c <_vsniprintf_r+0x18>
 8011e00:	238b      	movs	r3, #139	; 0x8b
 8011e02:	602b      	str	r3, [r5, #0]
 8011e04:	f04f 30ff 	mov.w	r0, #4294967295
 8011e08:	b01b      	add	sp, #108	; 0x6c
 8011e0a:	bd30      	pop	{r4, r5, pc}
 8011e0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011e10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e14:	bf14      	ite	ne
 8011e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011e1a:	4623      	moveq	r3, r4
 8011e1c:	9302      	str	r3, [sp, #8]
 8011e1e:	9305      	str	r3, [sp, #20]
 8011e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e24:	9100      	str	r1, [sp, #0]
 8011e26:	9104      	str	r1, [sp, #16]
 8011e28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011e30:	4669      	mov	r1, sp
 8011e32:	4628      	mov	r0, r5
 8011e34:	f002 f820 	bl	8013e78 <_svfiprintf_r>
 8011e38:	1c43      	adds	r3, r0, #1
 8011e3a:	bfbc      	itt	lt
 8011e3c:	238b      	movlt	r3, #139	; 0x8b
 8011e3e:	602b      	strlt	r3, [r5, #0]
 8011e40:	2c00      	cmp	r4, #0
 8011e42:	d0e1      	beq.n	8011e08 <_vsniprintf_r+0x14>
 8011e44:	9b00      	ldr	r3, [sp, #0]
 8011e46:	2200      	movs	r2, #0
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	e7dd      	b.n	8011e08 <_vsniprintf_r+0x14>

08011e4c <vsniprintf>:
 8011e4c:	b507      	push	{r0, r1, r2, lr}
 8011e4e:	9300      	str	r3, [sp, #0]
 8011e50:	4613      	mov	r3, r2
 8011e52:	460a      	mov	r2, r1
 8011e54:	4601      	mov	r1, r0
 8011e56:	4803      	ldr	r0, [pc, #12]	; (8011e64 <vsniprintf+0x18>)
 8011e58:	6800      	ldr	r0, [r0, #0]
 8011e5a:	f7ff ffcb 	bl	8011df4 <_vsniprintf_r>
 8011e5e:	b003      	add	sp, #12
 8011e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e64:	200003a8 	.word	0x200003a8

08011e68 <__assert_func>:
 8011e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e6a:	4614      	mov	r4, r2
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b09      	ldr	r3, [pc, #36]	; (8011e94 <__assert_func+0x2c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4605      	mov	r5, r0
 8011e74:	68d8      	ldr	r0, [r3, #12]
 8011e76:	b14c      	cbz	r4, 8011e8c <__assert_func+0x24>
 8011e78:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <__assert_func+0x30>)
 8011e7a:	9100      	str	r1, [sp, #0]
 8011e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e80:	4906      	ldr	r1, [pc, #24]	; (8011e9c <__assert_func+0x34>)
 8011e82:	462b      	mov	r3, r5
 8011e84:	f000 fe88 	bl	8012b98 <fiprintf>
 8011e88:	f002 fb58 	bl	801453c <abort>
 8011e8c:	4b04      	ldr	r3, [pc, #16]	; (8011ea0 <__assert_func+0x38>)
 8011e8e:	461c      	mov	r4, r3
 8011e90:	e7f3      	b.n	8011e7a <__assert_func+0x12>
 8011e92:	bf00      	nop
 8011e94:	200003a8 	.word	0x200003a8
 8011e98:	08016111 	.word	0x08016111
 8011e9c:	0801611e 	.word	0x0801611e
 8011ea0:	0801614c 	.word	0x0801614c

08011ea4 <quorem>:
 8011ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea8:	6903      	ldr	r3, [r0, #16]
 8011eaa:	690c      	ldr	r4, [r1, #16]
 8011eac:	42a3      	cmp	r3, r4
 8011eae:	4607      	mov	r7, r0
 8011eb0:	f2c0 8081 	blt.w	8011fb6 <quorem+0x112>
 8011eb4:	3c01      	subs	r4, #1
 8011eb6:	f101 0814 	add.w	r8, r1, #20
 8011eba:	f100 0514 	add.w	r5, r0, #20
 8011ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ec2:	9301      	str	r3, [sp, #4]
 8011ec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ed4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ed8:	fbb2 f6f3 	udiv	r6, r2, r3
 8011edc:	d331      	bcc.n	8011f42 <quorem+0x9e>
 8011ede:	f04f 0e00 	mov.w	lr, #0
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	46ac      	mov	ip, r5
 8011ee6:	46f2      	mov	sl, lr
 8011ee8:	f850 2b04 	ldr.w	r2, [r0], #4
 8011eec:	b293      	uxth	r3, r2
 8011eee:	fb06 e303 	mla	r3, r6, r3, lr
 8011ef2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	ebaa 0303 	sub.w	r3, sl, r3
 8011efc:	0c12      	lsrs	r2, r2, #16
 8011efe:	f8dc a000 	ldr.w	sl, [ip]
 8011f02:	fb06 e202 	mla	r2, r6, r2, lr
 8011f06:	fa13 f38a 	uxtah	r3, r3, sl
 8011f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f0e:	fa1f fa82 	uxth.w	sl, r2
 8011f12:	f8dc 2000 	ldr.w	r2, [ip]
 8011f16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011f1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f24:	4581      	cmp	r9, r0
 8011f26:	f84c 3b04 	str.w	r3, [ip], #4
 8011f2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f2e:	d2db      	bcs.n	8011ee8 <quorem+0x44>
 8011f30:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f34:	b92b      	cbnz	r3, 8011f42 <quorem+0x9e>
 8011f36:	9b01      	ldr	r3, [sp, #4]
 8011f38:	3b04      	subs	r3, #4
 8011f3a:	429d      	cmp	r5, r3
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	d32e      	bcc.n	8011f9e <quorem+0xfa>
 8011f40:	613c      	str	r4, [r7, #16]
 8011f42:	4638      	mov	r0, r7
 8011f44:	f001 fc90 	bl	8013868 <__mcmp>
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	db24      	blt.n	8011f96 <quorem+0xf2>
 8011f4c:	3601      	adds	r6, #1
 8011f4e:	4628      	mov	r0, r5
 8011f50:	f04f 0c00 	mov.w	ip, #0
 8011f54:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f58:	f8d0 e000 	ldr.w	lr, [r0]
 8011f5c:	b293      	uxth	r3, r2
 8011f5e:	ebac 0303 	sub.w	r3, ip, r3
 8011f62:	0c12      	lsrs	r2, r2, #16
 8011f64:	fa13 f38e 	uxtah	r3, r3, lr
 8011f68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f76:	45c1      	cmp	r9, r8
 8011f78:	f840 3b04 	str.w	r3, [r0], #4
 8011f7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f80:	d2e8      	bcs.n	8011f54 <quorem+0xb0>
 8011f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f8a:	b922      	cbnz	r2, 8011f96 <quorem+0xf2>
 8011f8c:	3b04      	subs	r3, #4
 8011f8e:	429d      	cmp	r5, r3
 8011f90:	461a      	mov	r2, r3
 8011f92:	d30a      	bcc.n	8011faa <quorem+0x106>
 8011f94:	613c      	str	r4, [r7, #16]
 8011f96:	4630      	mov	r0, r6
 8011f98:	b003      	add	sp, #12
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	6812      	ldr	r2, [r2, #0]
 8011fa0:	3b04      	subs	r3, #4
 8011fa2:	2a00      	cmp	r2, #0
 8011fa4:	d1cc      	bne.n	8011f40 <quorem+0x9c>
 8011fa6:	3c01      	subs	r4, #1
 8011fa8:	e7c7      	b.n	8011f3a <quorem+0x96>
 8011faa:	6812      	ldr	r2, [r2, #0]
 8011fac:	3b04      	subs	r3, #4
 8011fae:	2a00      	cmp	r2, #0
 8011fb0:	d1f0      	bne.n	8011f94 <quorem+0xf0>
 8011fb2:	3c01      	subs	r4, #1
 8011fb4:	e7eb      	b.n	8011f8e <quorem+0xea>
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	e7ee      	b.n	8011f98 <quorem+0xf4>
 8011fba:	0000      	movs	r0, r0
 8011fbc:	0000      	movs	r0, r0
	...

08011fc0 <_dtoa_r>:
 8011fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	ed2d 8b02 	vpush	{d8}
 8011fc8:	ec57 6b10 	vmov	r6, r7, d0
 8011fcc:	b095      	sub	sp, #84	; 0x54
 8011fce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011fd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011fd4:	9105      	str	r1, [sp, #20]
 8011fd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011fda:	4604      	mov	r4, r0
 8011fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8011fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fe0:	b975      	cbnz	r5, 8012000 <_dtoa_r+0x40>
 8011fe2:	2010      	movs	r0, #16
 8011fe4:	f001 f95e 	bl	80132a4 <malloc>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	6260      	str	r0, [r4, #36]	; 0x24
 8011fec:	b920      	cbnz	r0, 8011ff8 <_dtoa_r+0x38>
 8011fee:	4bb2      	ldr	r3, [pc, #712]	; (80122b8 <_dtoa_r+0x2f8>)
 8011ff0:	21ea      	movs	r1, #234	; 0xea
 8011ff2:	48b2      	ldr	r0, [pc, #712]	; (80122bc <_dtoa_r+0x2fc>)
 8011ff4:	f7ff ff38 	bl	8011e68 <__assert_func>
 8011ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ffc:	6005      	str	r5, [r0, #0]
 8011ffe:	60c5      	str	r5, [r0, #12]
 8012000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012002:	6819      	ldr	r1, [r3, #0]
 8012004:	b151      	cbz	r1, 801201c <_dtoa_r+0x5c>
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	604a      	str	r2, [r1, #4]
 801200a:	2301      	movs	r3, #1
 801200c:	4093      	lsls	r3, r2
 801200e:	608b      	str	r3, [r1, #8]
 8012010:	4620      	mov	r0, r4
 8012012:	f001 f9a1 	bl	8013358 <_Bfree>
 8012016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012018:	2200      	movs	r2, #0
 801201a:	601a      	str	r2, [r3, #0]
 801201c:	1e3b      	subs	r3, r7, #0
 801201e:	bfb9      	ittee	lt
 8012020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012024:	9303      	strlt	r3, [sp, #12]
 8012026:	2300      	movge	r3, #0
 8012028:	f8c8 3000 	strge.w	r3, [r8]
 801202c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012030:	4ba3      	ldr	r3, [pc, #652]	; (80122c0 <_dtoa_r+0x300>)
 8012032:	bfbc      	itt	lt
 8012034:	2201      	movlt	r2, #1
 8012036:	f8c8 2000 	strlt.w	r2, [r8]
 801203a:	ea33 0309 	bics.w	r3, r3, r9
 801203e:	d11b      	bne.n	8012078 <_dtoa_r+0xb8>
 8012040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012042:	f242 730f 	movw	r3, #9999	; 0x270f
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801204c:	4333      	orrs	r3, r6
 801204e:	f000 857a 	beq.w	8012b46 <_dtoa_r+0xb86>
 8012052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012054:	b963      	cbnz	r3, 8012070 <_dtoa_r+0xb0>
 8012056:	4b9b      	ldr	r3, [pc, #620]	; (80122c4 <_dtoa_r+0x304>)
 8012058:	e024      	b.n	80120a4 <_dtoa_r+0xe4>
 801205a:	4b9b      	ldr	r3, [pc, #620]	; (80122c8 <_dtoa_r+0x308>)
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	3308      	adds	r3, #8
 8012060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	9800      	ldr	r0, [sp, #0]
 8012066:	b015      	add	sp, #84	; 0x54
 8012068:	ecbd 8b02 	vpop	{d8}
 801206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012070:	4b94      	ldr	r3, [pc, #592]	; (80122c4 <_dtoa_r+0x304>)
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	3303      	adds	r3, #3
 8012076:	e7f3      	b.n	8012060 <_dtoa_r+0xa0>
 8012078:	ed9d 7b02 	vldr	d7, [sp, #8]
 801207c:	2200      	movs	r2, #0
 801207e:	ec51 0b17 	vmov	r0, r1, d7
 8012082:	2300      	movs	r3, #0
 8012084:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012088:	f7ee fd56 	bl	8000b38 <__aeabi_dcmpeq>
 801208c:	4680      	mov	r8, r0
 801208e:	b158      	cbz	r0, 80120a8 <_dtoa_r+0xe8>
 8012090:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012092:	2301      	movs	r3, #1
 8012094:	6013      	str	r3, [r2, #0]
 8012096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 8551 	beq.w	8012b40 <_dtoa_r+0xb80>
 801209e:	488b      	ldr	r0, [pc, #556]	; (80122cc <_dtoa_r+0x30c>)
 80120a0:	6018      	str	r0, [r3, #0]
 80120a2:	1e43      	subs	r3, r0, #1
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	e7dd      	b.n	8012064 <_dtoa_r+0xa4>
 80120a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80120ac:	aa12      	add	r2, sp, #72	; 0x48
 80120ae:	a913      	add	r1, sp, #76	; 0x4c
 80120b0:	4620      	mov	r0, r4
 80120b2:	f001 fcf9 	bl	8013aa8 <__d2b>
 80120b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120ba:	4683      	mov	fp, r0
 80120bc:	2d00      	cmp	r5, #0
 80120be:	d07c      	beq.n	80121ba <_dtoa_r+0x1fa>
 80120c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80120c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80120ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80120d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80120d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80120da:	4b7d      	ldr	r3, [pc, #500]	; (80122d0 <_dtoa_r+0x310>)
 80120dc:	2200      	movs	r2, #0
 80120de:	4630      	mov	r0, r6
 80120e0:	4639      	mov	r1, r7
 80120e2:	f7ee f909 	bl	80002f8 <__aeabi_dsub>
 80120e6:	a36e      	add	r3, pc, #440	; (adr r3, 80122a0 <_dtoa_r+0x2e0>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	f7ee fabc 	bl	8000668 <__aeabi_dmul>
 80120f0:	a36d      	add	r3, pc, #436	; (adr r3, 80122a8 <_dtoa_r+0x2e8>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f901 	bl	80002fc <__adddf3>
 80120fa:	4606      	mov	r6, r0
 80120fc:	4628      	mov	r0, r5
 80120fe:	460f      	mov	r7, r1
 8012100:	f7ee fa48 	bl	8000594 <__aeabi_i2d>
 8012104:	a36a      	add	r3, pc, #424	; (adr r3, 80122b0 <_dtoa_r+0x2f0>)
 8012106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210a:	f7ee faad 	bl	8000668 <__aeabi_dmul>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4630      	mov	r0, r6
 8012114:	4639      	mov	r1, r7
 8012116:	f7ee f8f1 	bl	80002fc <__adddf3>
 801211a:	4606      	mov	r6, r0
 801211c:	460f      	mov	r7, r1
 801211e:	f7ee fd53 	bl	8000bc8 <__aeabi_d2iz>
 8012122:	2200      	movs	r2, #0
 8012124:	4682      	mov	sl, r0
 8012126:	2300      	movs	r3, #0
 8012128:	4630      	mov	r0, r6
 801212a:	4639      	mov	r1, r7
 801212c:	f7ee fd0e 	bl	8000b4c <__aeabi_dcmplt>
 8012130:	b148      	cbz	r0, 8012146 <_dtoa_r+0x186>
 8012132:	4650      	mov	r0, sl
 8012134:	f7ee fa2e 	bl	8000594 <__aeabi_i2d>
 8012138:	4632      	mov	r2, r6
 801213a:	463b      	mov	r3, r7
 801213c:	f7ee fcfc 	bl	8000b38 <__aeabi_dcmpeq>
 8012140:	b908      	cbnz	r0, 8012146 <_dtoa_r+0x186>
 8012142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012146:	f1ba 0f16 	cmp.w	sl, #22
 801214a:	d854      	bhi.n	80121f6 <_dtoa_r+0x236>
 801214c:	4b61      	ldr	r3, [pc, #388]	; (80122d4 <_dtoa_r+0x314>)
 801214e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801215a:	f7ee fcf7 	bl	8000b4c <__aeabi_dcmplt>
 801215e:	2800      	cmp	r0, #0
 8012160:	d04b      	beq.n	80121fa <_dtoa_r+0x23a>
 8012162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012166:	2300      	movs	r3, #0
 8012168:	930e      	str	r3, [sp, #56]	; 0x38
 801216a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801216c:	1b5d      	subs	r5, r3, r5
 801216e:	1e6b      	subs	r3, r5, #1
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	bf43      	ittte	mi
 8012174:	2300      	movmi	r3, #0
 8012176:	f1c5 0801 	rsbmi	r8, r5, #1
 801217a:	9304      	strmi	r3, [sp, #16]
 801217c:	f04f 0800 	movpl.w	r8, #0
 8012180:	f1ba 0f00 	cmp.w	sl, #0
 8012184:	db3b      	blt.n	80121fe <_dtoa_r+0x23e>
 8012186:	9b04      	ldr	r3, [sp, #16]
 8012188:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801218c:	4453      	add	r3, sl
 801218e:	9304      	str	r3, [sp, #16]
 8012190:	2300      	movs	r3, #0
 8012192:	9306      	str	r3, [sp, #24]
 8012194:	9b05      	ldr	r3, [sp, #20]
 8012196:	2b09      	cmp	r3, #9
 8012198:	d869      	bhi.n	801226e <_dtoa_r+0x2ae>
 801219a:	2b05      	cmp	r3, #5
 801219c:	bfc4      	itt	gt
 801219e:	3b04      	subgt	r3, #4
 80121a0:	9305      	strgt	r3, [sp, #20]
 80121a2:	9b05      	ldr	r3, [sp, #20]
 80121a4:	f1a3 0302 	sub.w	r3, r3, #2
 80121a8:	bfcc      	ite	gt
 80121aa:	2500      	movgt	r5, #0
 80121ac:	2501      	movle	r5, #1
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d869      	bhi.n	8012286 <_dtoa_r+0x2c6>
 80121b2:	e8df f003 	tbb	[pc, r3]
 80121b6:	4e2c      	.short	0x4e2c
 80121b8:	5a4c      	.short	0x5a4c
 80121ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80121be:	441d      	add	r5, r3
 80121c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80121c4:	2b20      	cmp	r3, #32
 80121c6:	bfc1      	itttt	gt
 80121c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80121cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80121d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80121d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80121d8:	bfda      	itte	le
 80121da:	f1c3 0320 	rsble	r3, r3, #32
 80121de:	fa06 f003 	lslle.w	r0, r6, r3
 80121e2:	4318      	orrgt	r0, r3
 80121e4:	f7ee f9c6 	bl	8000574 <__aeabi_ui2d>
 80121e8:	2301      	movs	r3, #1
 80121ea:	4606      	mov	r6, r0
 80121ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121f0:	3d01      	subs	r5, #1
 80121f2:	9310      	str	r3, [sp, #64]	; 0x40
 80121f4:	e771      	b.n	80120da <_dtoa_r+0x11a>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e7b6      	b.n	8012168 <_dtoa_r+0x1a8>
 80121fa:	900e      	str	r0, [sp, #56]	; 0x38
 80121fc:	e7b5      	b.n	801216a <_dtoa_r+0x1aa>
 80121fe:	f1ca 0300 	rsb	r3, sl, #0
 8012202:	9306      	str	r3, [sp, #24]
 8012204:	2300      	movs	r3, #0
 8012206:	eba8 080a 	sub.w	r8, r8, sl
 801220a:	930d      	str	r3, [sp, #52]	; 0x34
 801220c:	e7c2      	b.n	8012194 <_dtoa_r+0x1d4>
 801220e:	2300      	movs	r3, #0
 8012210:	9308      	str	r3, [sp, #32]
 8012212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012214:	2b00      	cmp	r3, #0
 8012216:	dc39      	bgt.n	801228c <_dtoa_r+0x2cc>
 8012218:	f04f 0901 	mov.w	r9, #1
 801221c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012220:	464b      	mov	r3, r9
 8012222:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012226:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012228:	2200      	movs	r2, #0
 801222a:	6042      	str	r2, [r0, #4]
 801222c:	2204      	movs	r2, #4
 801222e:	f102 0614 	add.w	r6, r2, #20
 8012232:	429e      	cmp	r6, r3
 8012234:	6841      	ldr	r1, [r0, #4]
 8012236:	d92f      	bls.n	8012298 <_dtoa_r+0x2d8>
 8012238:	4620      	mov	r0, r4
 801223a:	f001 f84d 	bl	80132d8 <_Balloc>
 801223e:	9000      	str	r0, [sp, #0]
 8012240:	2800      	cmp	r0, #0
 8012242:	d14b      	bne.n	80122dc <_dtoa_r+0x31c>
 8012244:	4b24      	ldr	r3, [pc, #144]	; (80122d8 <_dtoa_r+0x318>)
 8012246:	4602      	mov	r2, r0
 8012248:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801224c:	e6d1      	b.n	8011ff2 <_dtoa_r+0x32>
 801224e:	2301      	movs	r3, #1
 8012250:	e7de      	b.n	8012210 <_dtoa_r+0x250>
 8012252:	2300      	movs	r3, #0
 8012254:	9308      	str	r3, [sp, #32]
 8012256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012258:	eb0a 0903 	add.w	r9, sl, r3
 801225c:	f109 0301 	add.w	r3, r9, #1
 8012260:	2b01      	cmp	r3, #1
 8012262:	9301      	str	r3, [sp, #4]
 8012264:	bfb8      	it	lt
 8012266:	2301      	movlt	r3, #1
 8012268:	e7dd      	b.n	8012226 <_dtoa_r+0x266>
 801226a:	2301      	movs	r3, #1
 801226c:	e7f2      	b.n	8012254 <_dtoa_r+0x294>
 801226e:	2501      	movs	r5, #1
 8012270:	2300      	movs	r3, #0
 8012272:	9305      	str	r3, [sp, #20]
 8012274:	9508      	str	r5, [sp, #32]
 8012276:	f04f 39ff 	mov.w	r9, #4294967295
 801227a:	2200      	movs	r2, #0
 801227c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012280:	2312      	movs	r3, #18
 8012282:	9209      	str	r2, [sp, #36]	; 0x24
 8012284:	e7cf      	b.n	8012226 <_dtoa_r+0x266>
 8012286:	2301      	movs	r3, #1
 8012288:	9308      	str	r3, [sp, #32]
 801228a:	e7f4      	b.n	8012276 <_dtoa_r+0x2b6>
 801228c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012290:	f8cd 9004 	str.w	r9, [sp, #4]
 8012294:	464b      	mov	r3, r9
 8012296:	e7c6      	b.n	8012226 <_dtoa_r+0x266>
 8012298:	3101      	adds	r1, #1
 801229a:	6041      	str	r1, [r0, #4]
 801229c:	0052      	lsls	r2, r2, #1
 801229e:	e7c6      	b.n	801222e <_dtoa_r+0x26e>
 80122a0:	636f4361 	.word	0x636f4361
 80122a4:	3fd287a7 	.word	0x3fd287a7
 80122a8:	8b60c8b3 	.word	0x8b60c8b3
 80122ac:	3fc68a28 	.word	0x3fc68a28
 80122b0:	509f79fb 	.word	0x509f79fb
 80122b4:	3fd34413 	.word	0x3fd34413
 80122b8:	08015fe9 	.word	0x08015fe9
 80122bc:	0801625b 	.word	0x0801625b
 80122c0:	7ff00000 	.word	0x7ff00000
 80122c4:	08016257 	.word	0x08016257
 80122c8:	0801624e 	.word	0x0801624e
 80122cc:	08015fc1 	.word	0x08015fc1
 80122d0:	3ff80000 	.word	0x3ff80000
 80122d4:	080163d0 	.word	0x080163d0
 80122d8:	080162ba 	.word	0x080162ba
 80122dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122de:	9a00      	ldr	r2, [sp, #0]
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	2b0e      	cmp	r3, #14
 80122e6:	f200 80ad 	bhi.w	8012444 <_dtoa_r+0x484>
 80122ea:	2d00      	cmp	r5, #0
 80122ec:	f000 80aa 	beq.w	8012444 <_dtoa_r+0x484>
 80122f0:	f1ba 0f00 	cmp.w	sl, #0
 80122f4:	dd36      	ble.n	8012364 <_dtoa_r+0x3a4>
 80122f6:	4ac3      	ldr	r2, [pc, #780]	; (8012604 <_dtoa_r+0x644>)
 80122f8:	f00a 030f 	and.w	r3, sl, #15
 80122fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012300:	ed93 7b00 	vldr	d7, [r3]
 8012304:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012308:	ea4f 172a 	mov.w	r7, sl, asr #4
 801230c:	eeb0 8a47 	vmov.f32	s16, s14
 8012310:	eef0 8a67 	vmov.f32	s17, s15
 8012314:	d016      	beq.n	8012344 <_dtoa_r+0x384>
 8012316:	4bbc      	ldr	r3, [pc, #752]	; (8012608 <_dtoa_r+0x648>)
 8012318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801231c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012320:	f7ee facc 	bl	80008bc <__aeabi_ddiv>
 8012324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012328:	f007 070f 	and.w	r7, r7, #15
 801232c:	2503      	movs	r5, #3
 801232e:	4eb6      	ldr	r6, [pc, #728]	; (8012608 <_dtoa_r+0x648>)
 8012330:	b957      	cbnz	r7, 8012348 <_dtoa_r+0x388>
 8012332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012336:	ec53 2b18 	vmov	r2, r3, d8
 801233a:	f7ee fabf 	bl	80008bc <__aeabi_ddiv>
 801233e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012342:	e029      	b.n	8012398 <_dtoa_r+0x3d8>
 8012344:	2502      	movs	r5, #2
 8012346:	e7f2      	b.n	801232e <_dtoa_r+0x36e>
 8012348:	07f9      	lsls	r1, r7, #31
 801234a:	d508      	bpl.n	801235e <_dtoa_r+0x39e>
 801234c:	ec51 0b18 	vmov	r0, r1, d8
 8012350:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012354:	f7ee f988 	bl	8000668 <__aeabi_dmul>
 8012358:	ec41 0b18 	vmov	d8, r0, r1
 801235c:	3501      	adds	r5, #1
 801235e:	107f      	asrs	r7, r7, #1
 8012360:	3608      	adds	r6, #8
 8012362:	e7e5      	b.n	8012330 <_dtoa_r+0x370>
 8012364:	f000 80a6 	beq.w	80124b4 <_dtoa_r+0x4f4>
 8012368:	f1ca 0600 	rsb	r6, sl, #0
 801236c:	4ba5      	ldr	r3, [pc, #660]	; (8012604 <_dtoa_r+0x644>)
 801236e:	4fa6      	ldr	r7, [pc, #664]	; (8012608 <_dtoa_r+0x648>)
 8012370:	f006 020f 	and.w	r2, r6, #15
 8012374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012380:	f7ee f972 	bl	8000668 <__aeabi_dmul>
 8012384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012388:	1136      	asrs	r6, r6, #4
 801238a:	2300      	movs	r3, #0
 801238c:	2502      	movs	r5, #2
 801238e:	2e00      	cmp	r6, #0
 8012390:	f040 8085 	bne.w	801249e <_dtoa_r+0x4de>
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1d2      	bne.n	801233e <_dtoa_r+0x37e>
 8012398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 808c 	beq.w	80124b8 <_dtoa_r+0x4f8>
 80123a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123a4:	4b99      	ldr	r3, [pc, #612]	; (801260c <_dtoa_r+0x64c>)
 80123a6:	2200      	movs	r2, #0
 80123a8:	4630      	mov	r0, r6
 80123aa:	4639      	mov	r1, r7
 80123ac:	f7ee fbce 	bl	8000b4c <__aeabi_dcmplt>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	f000 8081 	beq.w	80124b8 <_dtoa_r+0x4f8>
 80123b6:	9b01      	ldr	r3, [sp, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d07d      	beq.n	80124b8 <_dtoa_r+0x4f8>
 80123bc:	f1b9 0f00 	cmp.w	r9, #0
 80123c0:	dd3c      	ble.n	801243c <_dtoa_r+0x47c>
 80123c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80123c6:	9307      	str	r3, [sp, #28]
 80123c8:	2200      	movs	r2, #0
 80123ca:	4b91      	ldr	r3, [pc, #580]	; (8012610 <_dtoa_r+0x650>)
 80123cc:	4630      	mov	r0, r6
 80123ce:	4639      	mov	r1, r7
 80123d0:	f7ee f94a 	bl	8000668 <__aeabi_dmul>
 80123d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d8:	3501      	adds	r5, #1
 80123da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80123de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123e2:	4628      	mov	r0, r5
 80123e4:	f7ee f8d6 	bl	8000594 <__aeabi_i2d>
 80123e8:	4632      	mov	r2, r6
 80123ea:	463b      	mov	r3, r7
 80123ec:	f7ee f93c 	bl	8000668 <__aeabi_dmul>
 80123f0:	4b88      	ldr	r3, [pc, #544]	; (8012614 <_dtoa_r+0x654>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	f7ed ff82 	bl	80002fc <__adddf3>
 80123f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012400:	9303      	str	r3, [sp, #12]
 8012402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012404:	2b00      	cmp	r3, #0
 8012406:	d15c      	bne.n	80124c2 <_dtoa_r+0x502>
 8012408:	4b83      	ldr	r3, [pc, #524]	; (8012618 <_dtoa_r+0x658>)
 801240a:	2200      	movs	r2, #0
 801240c:	4630      	mov	r0, r6
 801240e:	4639      	mov	r1, r7
 8012410:	f7ed ff72 	bl	80002f8 <__aeabi_dsub>
 8012414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012418:	4606      	mov	r6, r0
 801241a:	460f      	mov	r7, r1
 801241c:	f7ee fbb4 	bl	8000b88 <__aeabi_dcmpgt>
 8012420:	2800      	cmp	r0, #0
 8012422:	f040 8296 	bne.w	8012952 <_dtoa_r+0x992>
 8012426:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801242a:	4630      	mov	r0, r6
 801242c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012430:	4639      	mov	r1, r7
 8012432:	f7ee fb8b 	bl	8000b4c <__aeabi_dcmplt>
 8012436:	2800      	cmp	r0, #0
 8012438:	f040 8288 	bne.w	801294c <_dtoa_r+0x98c>
 801243c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012440:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012446:	2b00      	cmp	r3, #0
 8012448:	f2c0 8158 	blt.w	80126fc <_dtoa_r+0x73c>
 801244c:	f1ba 0f0e 	cmp.w	sl, #14
 8012450:	f300 8154 	bgt.w	80126fc <_dtoa_r+0x73c>
 8012454:	4b6b      	ldr	r3, [pc, #428]	; (8012604 <_dtoa_r+0x644>)
 8012456:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801245a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801245e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012460:	2b00      	cmp	r3, #0
 8012462:	f280 80e3 	bge.w	801262c <_dtoa_r+0x66c>
 8012466:	9b01      	ldr	r3, [sp, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	f300 80df 	bgt.w	801262c <_dtoa_r+0x66c>
 801246e:	f040 826d 	bne.w	801294c <_dtoa_r+0x98c>
 8012472:	4b69      	ldr	r3, [pc, #420]	; (8012618 <_dtoa_r+0x658>)
 8012474:	2200      	movs	r2, #0
 8012476:	4640      	mov	r0, r8
 8012478:	4649      	mov	r1, r9
 801247a:	f7ee f8f5 	bl	8000668 <__aeabi_dmul>
 801247e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012482:	f7ee fb77 	bl	8000b74 <__aeabi_dcmpge>
 8012486:	9e01      	ldr	r6, [sp, #4]
 8012488:	4637      	mov	r7, r6
 801248a:	2800      	cmp	r0, #0
 801248c:	f040 8243 	bne.w	8012916 <_dtoa_r+0x956>
 8012490:	9d00      	ldr	r5, [sp, #0]
 8012492:	2331      	movs	r3, #49	; 0x31
 8012494:	f805 3b01 	strb.w	r3, [r5], #1
 8012498:	f10a 0a01 	add.w	sl, sl, #1
 801249c:	e23f      	b.n	801291e <_dtoa_r+0x95e>
 801249e:	07f2      	lsls	r2, r6, #31
 80124a0:	d505      	bpl.n	80124ae <_dtoa_r+0x4ee>
 80124a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124a6:	f7ee f8df 	bl	8000668 <__aeabi_dmul>
 80124aa:	3501      	adds	r5, #1
 80124ac:	2301      	movs	r3, #1
 80124ae:	1076      	asrs	r6, r6, #1
 80124b0:	3708      	adds	r7, #8
 80124b2:	e76c      	b.n	801238e <_dtoa_r+0x3ce>
 80124b4:	2502      	movs	r5, #2
 80124b6:	e76f      	b.n	8012398 <_dtoa_r+0x3d8>
 80124b8:	9b01      	ldr	r3, [sp, #4]
 80124ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80124be:	930c      	str	r3, [sp, #48]	; 0x30
 80124c0:	e78d      	b.n	80123de <_dtoa_r+0x41e>
 80124c2:	9900      	ldr	r1, [sp, #0]
 80124c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80124c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124c8:	4b4e      	ldr	r3, [pc, #312]	; (8012604 <_dtoa_r+0x644>)
 80124ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124ce:	4401      	add	r1, r0
 80124d0:	9102      	str	r1, [sp, #8]
 80124d2:	9908      	ldr	r1, [sp, #32]
 80124d4:	eeb0 8a47 	vmov.f32	s16, s14
 80124d8:	eef0 8a67 	vmov.f32	s17, s15
 80124dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80124e4:	2900      	cmp	r1, #0
 80124e6:	d045      	beq.n	8012574 <_dtoa_r+0x5b4>
 80124e8:	494c      	ldr	r1, [pc, #304]	; (801261c <_dtoa_r+0x65c>)
 80124ea:	2000      	movs	r0, #0
 80124ec:	f7ee f9e6 	bl	80008bc <__aeabi_ddiv>
 80124f0:	ec53 2b18 	vmov	r2, r3, d8
 80124f4:	f7ed ff00 	bl	80002f8 <__aeabi_dsub>
 80124f8:	9d00      	ldr	r5, [sp, #0]
 80124fa:	ec41 0b18 	vmov	d8, r0, r1
 80124fe:	4639      	mov	r1, r7
 8012500:	4630      	mov	r0, r6
 8012502:	f7ee fb61 	bl	8000bc8 <__aeabi_d2iz>
 8012506:	900c      	str	r0, [sp, #48]	; 0x30
 8012508:	f7ee f844 	bl	8000594 <__aeabi_i2d>
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	4630      	mov	r0, r6
 8012512:	4639      	mov	r1, r7
 8012514:	f7ed fef0 	bl	80002f8 <__aeabi_dsub>
 8012518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801251a:	3330      	adds	r3, #48	; 0x30
 801251c:	f805 3b01 	strb.w	r3, [r5], #1
 8012520:	ec53 2b18 	vmov	r2, r3, d8
 8012524:	4606      	mov	r6, r0
 8012526:	460f      	mov	r7, r1
 8012528:	f7ee fb10 	bl	8000b4c <__aeabi_dcmplt>
 801252c:	2800      	cmp	r0, #0
 801252e:	d165      	bne.n	80125fc <_dtoa_r+0x63c>
 8012530:	4632      	mov	r2, r6
 8012532:	463b      	mov	r3, r7
 8012534:	4935      	ldr	r1, [pc, #212]	; (801260c <_dtoa_r+0x64c>)
 8012536:	2000      	movs	r0, #0
 8012538:	f7ed fede 	bl	80002f8 <__aeabi_dsub>
 801253c:	ec53 2b18 	vmov	r2, r3, d8
 8012540:	f7ee fb04 	bl	8000b4c <__aeabi_dcmplt>
 8012544:	2800      	cmp	r0, #0
 8012546:	f040 80b9 	bne.w	80126bc <_dtoa_r+0x6fc>
 801254a:	9b02      	ldr	r3, [sp, #8]
 801254c:	429d      	cmp	r5, r3
 801254e:	f43f af75 	beq.w	801243c <_dtoa_r+0x47c>
 8012552:	4b2f      	ldr	r3, [pc, #188]	; (8012610 <_dtoa_r+0x650>)
 8012554:	ec51 0b18 	vmov	r0, r1, d8
 8012558:	2200      	movs	r2, #0
 801255a:	f7ee f885 	bl	8000668 <__aeabi_dmul>
 801255e:	4b2c      	ldr	r3, [pc, #176]	; (8012610 <_dtoa_r+0x650>)
 8012560:	ec41 0b18 	vmov	d8, r0, r1
 8012564:	2200      	movs	r2, #0
 8012566:	4630      	mov	r0, r6
 8012568:	4639      	mov	r1, r7
 801256a:	f7ee f87d 	bl	8000668 <__aeabi_dmul>
 801256e:	4606      	mov	r6, r0
 8012570:	460f      	mov	r7, r1
 8012572:	e7c4      	b.n	80124fe <_dtoa_r+0x53e>
 8012574:	ec51 0b17 	vmov	r0, r1, d7
 8012578:	f7ee f876 	bl	8000668 <__aeabi_dmul>
 801257c:	9b02      	ldr	r3, [sp, #8]
 801257e:	9d00      	ldr	r5, [sp, #0]
 8012580:	930c      	str	r3, [sp, #48]	; 0x30
 8012582:	ec41 0b18 	vmov	d8, r0, r1
 8012586:	4639      	mov	r1, r7
 8012588:	4630      	mov	r0, r6
 801258a:	f7ee fb1d 	bl	8000bc8 <__aeabi_d2iz>
 801258e:	9011      	str	r0, [sp, #68]	; 0x44
 8012590:	f7ee f800 	bl	8000594 <__aeabi_i2d>
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	f7ed feac 	bl	80002f8 <__aeabi_dsub>
 80125a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125a2:	3330      	adds	r3, #48	; 0x30
 80125a4:	f805 3b01 	strb.w	r3, [r5], #1
 80125a8:	9b02      	ldr	r3, [sp, #8]
 80125aa:	429d      	cmp	r5, r3
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	f04f 0200 	mov.w	r2, #0
 80125b4:	d134      	bne.n	8012620 <_dtoa_r+0x660>
 80125b6:	4b19      	ldr	r3, [pc, #100]	; (801261c <_dtoa_r+0x65c>)
 80125b8:	ec51 0b18 	vmov	r0, r1, d8
 80125bc:	f7ed fe9e 	bl	80002fc <__adddf3>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4630      	mov	r0, r6
 80125c6:	4639      	mov	r1, r7
 80125c8:	f7ee fade 	bl	8000b88 <__aeabi_dcmpgt>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d175      	bne.n	80126bc <_dtoa_r+0x6fc>
 80125d0:	ec53 2b18 	vmov	r2, r3, d8
 80125d4:	4911      	ldr	r1, [pc, #68]	; (801261c <_dtoa_r+0x65c>)
 80125d6:	2000      	movs	r0, #0
 80125d8:	f7ed fe8e 	bl	80002f8 <__aeabi_dsub>
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	4630      	mov	r0, r6
 80125e2:	4639      	mov	r1, r7
 80125e4:	f7ee fab2 	bl	8000b4c <__aeabi_dcmplt>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	f43f af27 	beq.w	801243c <_dtoa_r+0x47c>
 80125ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80125f0:	1e6b      	subs	r3, r5, #1
 80125f2:	930c      	str	r3, [sp, #48]	; 0x30
 80125f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125f8:	2b30      	cmp	r3, #48	; 0x30
 80125fa:	d0f8      	beq.n	80125ee <_dtoa_r+0x62e>
 80125fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012600:	e04a      	b.n	8012698 <_dtoa_r+0x6d8>
 8012602:	bf00      	nop
 8012604:	080163d0 	.word	0x080163d0
 8012608:	080163a8 	.word	0x080163a8
 801260c:	3ff00000 	.word	0x3ff00000
 8012610:	40240000 	.word	0x40240000
 8012614:	401c0000 	.word	0x401c0000
 8012618:	40140000 	.word	0x40140000
 801261c:	3fe00000 	.word	0x3fe00000
 8012620:	4baf      	ldr	r3, [pc, #700]	; (80128e0 <_dtoa_r+0x920>)
 8012622:	f7ee f821 	bl	8000668 <__aeabi_dmul>
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	e7ac      	b.n	8012586 <_dtoa_r+0x5c6>
 801262c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012630:	9d00      	ldr	r5, [sp, #0]
 8012632:	4642      	mov	r2, r8
 8012634:	464b      	mov	r3, r9
 8012636:	4630      	mov	r0, r6
 8012638:	4639      	mov	r1, r7
 801263a:	f7ee f93f 	bl	80008bc <__aeabi_ddiv>
 801263e:	f7ee fac3 	bl	8000bc8 <__aeabi_d2iz>
 8012642:	9002      	str	r0, [sp, #8]
 8012644:	f7ed ffa6 	bl	8000594 <__aeabi_i2d>
 8012648:	4642      	mov	r2, r8
 801264a:	464b      	mov	r3, r9
 801264c:	f7ee f80c 	bl	8000668 <__aeabi_dmul>
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4630      	mov	r0, r6
 8012656:	4639      	mov	r1, r7
 8012658:	f7ed fe4e 	bl	80002f8 <__aeabi_dsub>
 801265c:	9e02      	ldr	r6, [sp, #8]
 801265e:	9f01      	ldr	r7, [sp, #4]
 8012660:	3630      	adds	r6, #48	; 0x30
 8012662:	f805 6b01 	strb.w	r6, [r5], #1
 8012666:	9e00      	ldr	r6, [sp, #0]
 8012668:	1bae      	subs	r6, r5, r6
 801266a:	42b7      	cmp	r7, r6
 801266c:	4602      	mov	r2, r0
 801266e:	460b      	mov	r3, r1
 8012670:	d137      	bne.n	80126e2 <_dtoa_r+0x722>
 8012672:	f7ed fe43 	bl	80002fc <__adddf3>
 8012676:	4642      	mov	r2, r8
 8012678:	464b      	mov	r3, r9
 801267a:	4606      	mov	r6, r0
 801267c:	460f      	mov	r7, r1
 801267e:	f7ee fa83 	bl	8000b88 <__aeabi_dcmpgt>
 8012682:	b9c8      	cbnz	r0, 80126b8 <_dtoa_r+0x6f8>
 8012684:	4642      	mov	r2, r8
 8012686:	464b      	mov	r3, r9
 8012688:	4630      	mov	r0, r6
 801268a:	4639      	mov	r1, r7
 801268c:	f7ee fa54 	bl	8000b38 <__aeabi_dcmpeq>
 8012690:	b110      	cbz	r0, 8012698 <_dtoa_r+0x6d8>
 8012692:	9b02      	ldr	r3, [sp, #8]
 8012694:	07d9      	lsls	r1, r3, #31
 8012696:	d40f      	bmi.n	80126b8 <_dtoa_r+0x6f8>
 8012698:	4620      	mov	r0, r4
 801269a:	4659      	mov	r1, fp
 801269c:	f000 fe5c 	bl	8013358 <_Bfree>
 80126a0:	2300      	movs	r3, #0
 80126a2:	702b      	strb	r3, [r5, #0]
 80126a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126a6:	f10a 0001 	add.w	r0, sl, #1
 80126aa:	6018      	str	r0, [r3, #0]
 80126ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f43f acd8 	beq.w	8012064 <_dtoa_r+0xa4>
 80126b4:	601d      	str	r5, [r3, #0]
 80126b6:	e4d5      	b.n	8012064 <_dtoa_r+0xa4>
 80126b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80126bc:	462b      	mov	r3, r5
 80126be:	461d      	mov	r5, r3
 80126c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126c4:	2a39      	cmp	r2, #57	; 0x39
 80126c6:	d108      	bne.n	80126da <_dtoa_r+0x71a>
 80126c8:	9a00      	ldr	r2, [sp, #0]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d1f7      	bne.n	80126be <_dtoa_r+0x6fe>
 80126ce:	9a07      	ldr	r2, [sp, #28]
 80126d0:	9900      	ldr	r1, [sp, #0]
 80126d2:	3201      	adds	r2, #1
 80126d4:	9207      	str	r2, [sp, #28]
 80126d6:	2230      	movs	r2, #48	; 0x30
 80126d8:	700a      	strb	r2, [r1, #0]
 80126da:	781a      	ldrb	r2, [r3, #0]
 80126dc:	3201      	adds	r2, #1
 80126de:	701a      	strb	r2, [r3, #0]
 80126e0:	e78c      	b.n	80125fc <_dtoa_r+0x63c>
 80126e2:	4b7f      	ldr	r3, [pc, #508]	; (80128e0 <_dtoa_r+0x920>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	f7ed ffbf 	bl	8000668 <__aeabi_dmul>
 80126ea:	2200      	movs	r2, #0
 80126ec:	2300      	movs	r3, #0
 80126ee:	4606      	mov	r6, r0
 80126f0:	460f      	mov	r7, r1
 80126f2:	f7ee fa21 	bl	8000b38 <__aeabi_dcmpeq>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d09b      	beq.n	8012632 <_dtoa_r+0x672>
 80126fa:	e7cd      	b.n	8012698 <_dtoa_r+0x6d8>
 80126fc:	9a08      	ldr	r2, [sp, #32]
 80126fe:	2a00      	cmp	r2, #0
 8012700:	f000 80c4 	beq.w	801288c <_dtoa_r+0x8cc>
 8012704:	9a05      	ldr	r2, [sp, #20]
 8012706:	2a01      	cmp	r2, #1
 8012708:	f300 80a8 	bgt.w	801285c <_dtoa_r+0x89c>
 801270c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801270e:	2a00      	cmp	r2, #0
 8012710:	f000 80a0 	beq.w	8012854 <_dtoa_r+0x894>
 8012714:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012718:	9e06      	ldr	r6, [sp, #24]
 801271a:	4645      	mov	r5, r8
 801271c:	9a04      	ldr	r2, [sp, #16]
 801271e:	2101      	movs	r1, #1
 8012720:	441a      	add	r2, r3
 8012722:	4620      	mov	r0, r4
 8012724:	4498      	add	r8, r3
 8012726:	9204      	str	r2, [sp, #16]
 8012728:	f000 ff1c 	bl	8013564 <__i2b>
 801272c:	4607      	mov	r7, r0
 801272e:	2d00      	cmp	r5, #0
 8012730:	dd0b      	ble.n	801274a <_dtoa_r+0x78a>
 8012732:	9b04      	ldr	r3, [sp, #16]
 8012734:	2b00      	cmp	r3, #0
 8012736:	dd08      	ble.n	801274a <_dtoa_r+0x78a>
 8012738:	42ab      	cmp	r3, r5
 801273a:	9a04      	ldr	r2, [sp, #16]
 801273c:	bfa8      	it	ge
 801273e:	462b      	movge	r3, r5
 8012740:	eba8 0803 	sub.w	r8, r8, r3
 8012744:	1aed      	subs	r5, r5, r3
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	9304      	str	r3, [sp, #16]
 801274a:	9b06      	ldr	r3, [sp, #24]
 801274c:	b1fb      	cbz	r3, 801278e <_dtoa_r+0x7ce>
 801274e:	9b08      	ldr	r3, [sp, #32]
 8012750:	2b00      	cmp	r3, #0
 8012752:	f000 809f 	beq.w	8012894 <_dtoa_r+0x8d4>
 8012756:	2e00      	cmp	r6, #0
 8012758:	dd11      	ble.n	801277e <_dtoa_r+0x7be>
 801275a:	4639      	mov	r1, r7
 801275c:	4632      	mov	r2, r6
 801275e:	4620      	mov	r0, r4
 8012760:	f000 ffbc 	bl	80136dc <__pow5mult>
 8012764:	465a      	mov	r2, fp
 8012766:	4601      	mov	r1, r0
 8012768:	4607      	mov	r7, r0
 801276a:	4620      	mov	r0, r4
 801276c:	f000 ff10 	bl	8013590 <__multiply>
 8012770:	4659      	mov	r1, fp
 8012772:	9007      	str	r0, [sp, #28]
 8012774:	4620      	mov	r0, r4
 8012776:	f000 fdef 	bl	8013358 <_Bfree>
 801277a:	9b07      	ldr	r3, [sp, #28]
 801277c:	469b      	mov	fp, r3
 801277e:	9b06      	ldr	r3, [sp, #24]
 8012780:	1b9a      	subs	r2, r3, r6
 8012782:	d004      	beq.n	801278e <_dtoa_r+0x7ce>
 8012784:	4659      	mov	r1, fp
 8012786:	4620      	mov	r0, r4
 8012788:	f000 ffa8 	bl	80136dc <__pow5mult>
 801278c:	4683      	mov	fp, r0
 801278e:	2101      	movs	r1, #1
 8012790:	4620      	mov	r0, r4
 8012792:	f000 fee7 	bl	8013564 <__i2b>
 8012796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012798:	2b00      	cmp	r3, #0
 801279a:	4606      	mov	r6, r0
 801279c:	dd7c      	ble.n	8012898 <_dtoa_r+0x8d8>
 801279e:	461a      	mov	r2, r3
 80127a0:	4601      	mov	r1, r0
 80127a2:	4620      	mov	r0, r4
 80127a4:	f000 ff9a 	bl	80136dc <__pow5mult>
 80127a8:	9b05      	ldr	r3, [sp, #20]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	4606      	mov	r6, r0
 80127ae:	dd76      	ble.n	801289e <_dtoa_r+0x8de>
 80127b0:	2300      	movs	r3, #0
 80127b2:	9306      	str	r3, [sp, #24]
 80127b4:	6933      	ldr	r3, [r6, #16]
 80127b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80127ba:	6918      	ldr	r0, [r3, #16]
 80127bc:	f000 fe82 	bl	80134c4 <__hi0bits>
 80127c0:	f1c0 0020 	rsb	r0, r0, #32
 80127c4:	9b04      	ldr	r3, [sp, #16]
 80127c6:	4418      	add	r0, r3
 80127c8:	f010 001f 	ands.w	r0, r0, #31
 80127cc:	f000 8086 	beq.w	80128dc <_dtoa_r+0x91c>
 80127d0:	f1c0 0320 	rsb	r3, r0, #32
 80127d4:	2b04      	cmp	r3, #4
 80127d6:	dd7f      	ble.n	80128d8 <_dtoa_r+0x918>
 80127d8:	f1c0 001c 	rsb	r0, r0, #28
 80127dc:	9b04      	ldr	r3, [sp, #16]
 80127de:	4403      	add	r3, r0
 80127e0:	4480      	add	r8, r0
 80127e2:	4405      	add	r5, r0
 80127e4:	9304      	str	r3, [sp, #16]
 80127e6:	f1b8 0f00 	cmp.w	r8, #0
 80127ea:	dd05      	ble.n	80127f8 <_dtoa_r+0x838>
 80127ec:	4659      	mov	r1, fp
 80127ee:	4642      	mov	r2, r8
 80127f0:	4620      	mov	r0, r4
 80127f2:	f000 ffcd 	bl	8013790 <__lshift>
 80127f6:	4683      	mov	fp, r0
 80127f8:	9b04      	ldr	r3, [sp, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dd05      	ble.n	801280a <_dtoa_r+0x84a>
 80127fe:	4631      	mov	r1, r6
 8012800:	461a      	mov	r2, r3
 8012802:	4620      	mov	r0, r4
 8012804:	f000 ffc4 	bl	8013790 <__lshift>
 8012808:	4606      	mov	r6, r0
 801280a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801280c:	2b00      	cmp	r3, #0
 801280e:	d069      	beq.n	80128e4 <_dtoa_r+0x924>
 8012810:	4631      	mov	r1, r6
 8012812:	4658      	mov	r0, fp
 8012814:	f001 f828 	bl	8013868 <__mcmp>
 8012818:	2800      	cmp	r0, #0
 801281a:	da63      	bge.n	80128e4 <_dtoa_r+0x924>
 801281c:	2300      	movs	r3, #0
 801281e:	4659      	mov	r1, fp
 8012820:	220a      	movs	r2, #10
 8012822:	4620      	mov	r0, r4
 8012824:	f000 fdba 	bl	801339c <__multadd>
 8012828:	9b08      	ldr	r3, [sp, #32]
 801282a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801282e:	4683      	mov	fp, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	f000 818f 	beq.w	8012b54 <_dtoa_r+0xb94>
 8012836:	4639      	mov	r1, r7
 8012838:	2300      	movs	r3, #0
 801283a:	220a      	movs	r2, #10
 801283c:	4620      	mov	r0, r4
 801283e:	f000 fdad 	bl	801339c <__multadd>
 8012842:	f1b9 0f00 	cmp.w	r9, #0
 8012846:	4607      	mov	r7, r0
 8012848:	f300 808e 	bgt.w	8012968 <_dtoa_r+0x9a8>
 801284c:	9b05      	ldr	r3, [sp, #20]
 801284e:	2b02      	cmp	r3, #2
 8012850:	dc50      	bgt.n	80128f4 <_dtoa_r+0x934>
 8012852:	e089      	b.n	8012968 <_dtoa_r+0x9a8>
 8012854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801285a:	e75d      	b.n	8012718 <_dtoa_r+0x758>
 801285c:	9b01      	ldr	r3, [sp, #4]
 801285e:	1e5e      	subs	r6, r3, #1
 8012860:	9b06      	ldr	r3, [sp, #24]
 8012862:	42b3      	cmp	r3, r6
 8012864:	bfbf      	itttt	lt
 8012866:	9b06      	ldrlt	r3, [sp, #24]
 8012868:	9606      	strlt	r6, [sp, #24]
 801286a:	1af2      	sublt	r2, r6, r3
 801286c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801286e:	bfb6      	itet	lt
 8012870:	189b      	addlt	r3, r3, r2
 8012872:	1b9e      	subge	r6, r3, r6
 8012874:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012876:	9b01      	ldr	r3, [sp, #4]
 8012878:	bfb8      	it	lt
 801287a:	2600      	movlt	r6, #0
 801287c:	2b00      	cmp	r3, #0
 801287e:	bfb5      	itete	lt
 8012880:	eba8 0503 	sublt.w	r5, r8, r3
 8012884:	9b01      	ldrge	r3, [sp, #4]
 8012886:	2300      	movlt	r3, #0
 8012888:	4645      	movge	r5, r8
 801288a:	e747      	b.n	801271c <_dtoa_r+0x75c>
 801288c:	9e06      	ldr	r6, [sp, #24]
 801288e:	9f08      	ldr	r7, [sp, #32]
 8012890:	4645      	mov	r5, r8
 8012892:	e74c      	b.n	801272e <_dtoa_r+0x76e>
 8012894:	9a06      	ldr	r2, [sp, #24]
 8012896:	e775      	b.n	8012784 <_dtoa_r+0x7c4>
 8012898:	9b05      	ldr	r3, [sp, #20]
 801289a:	2b01      	cmp	r3, #1
 801289c:	dc18      	bgt.n	80128d0 <_dtoa_r+0x910>
 801289e:	9b02      	ldr	r3, [sp, #8]
 80128a0:	b9b3      	cbnz	r3, 80128d0 <_dtoa_r+0x910>
 80128a2:	9b03      	ldr	r3, [sp, #12]
 80128a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128a8:	b9a3      	cbnz	r3, 80128d4 <_dtoa_r+0x914>
 80128aa:	9b03      	ldr	r3, [sp, #12]
 80128ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128b0:	0d1b      	lsrs	r3, r3, #20
 80128b2:	051b      	lsls	r3, r3, #20
 80128b4:	b12b      	cbz	r3, 80128c2 <_dtoa_r+0x902>
 80128b6:	9b04      	ldr	r3, [sp, #16]
 80128b8:	3301      	adds	r3, #1
 80128ba:	9304      	str	r3, [sp, #16]
 80128bc:	f108 0801 	add.w	r8, r8, #1
 80128c0:	2301      	movs	r3, #1
 80128c2:	9306      	str	r3, [sp, #24]
 80128c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f47f af74 	bne.w	80127b4 <_dtoa_r+0x7f4>
 80128cc:	2001      	movs	r0, #1
 80128ce:	e779      	b.n	80127c4 <_dtoa_r+0x804>
 80128d0:	2300      	movs	r3, #0
 80128d2:	e7f6      	b.n	80128c2 <_dtoa_r+0x902>
 80128d4:	9b02      	ldr	r3, [sp, #8]
 80128d6:	e7f4      	b.n	80128c2 <_dtoa_r+0x902>
 80128d8:	d085      	beq.n	80127e6 <_dtoa_r+0x826>
 80128da:	4618      	mov	r0, r3
 80128dc:	301c      	adds	r0, #28
 80128de:	e77d      	b.n	80127dc <_dtoa_r+0x81c>
 80128e0:	40240000 	.word	0x40240000
 80128e4:	9b01      	ldr	r3, [sp, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	dc38      	bgt.n	801295c <_dtoa_r+0x99c>
 80128ea:	9b05      	ldr	r3, [sp, #20]
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	dd35      	ble.n	801295c <_dtoa_r+0x99c>
 80128f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80128f4:	f1b9 0f00 	cmp.w	r9, #0
 80128f8:	d10d      	bne.n	8012916 <_dtoa_r+0x956>
 80128fa:	4631      	mov	r1, r6
 80128fc:	464b      	mov	r3, r9
 80128fe:	2205      	movs	r2, #5
 8012900:	4620      	mov	r0, r4
 8012902:	f000 fd4b 	bl	801339c <__multadd>
 8012906:	4601      	mov	r1, r0
 8012908:	4606      	mov	r6, r0
 801290a:	4658      	mov	r0, fp
 801290c:	f000 ffac 	bl	8013868 <__mcmp>
 8012910:	2800      	cmp	r0, #0
 8012912:	f73f adbd 	bgt.w	8012490 <_dtoa_r+0x4d0>
 8012916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012918:	9d00      	ldr	r5, [sp, #0]
 801291a:	ea6f 0a03 	mvn.w	sl, r3
 801291e:	f04f 0800 	mov.w	r8, #0
 8012922:	4631      	mov	r1, r6
 8012924:	4620      	mov	r0, r4
 8012926:	f000 fd17 	bl	8013358 <_Bfree>
 801292a:	2f00      	cmp	r7, #0
 801292c:	f43f aeb4 	beq.w	8012698 <_dtoa_r+0x6d8>
 8012930:	f1b8 0f00 	cmp.w	r8, #0
 8012934:	d005      	beq.n	8012942 <_dtoa_r+0x982>
 8012936:	45b8      	cmp	r8, r7
 8012938:	d003      	beq.n	8012942 <_dtoa_r+0x982>
 801293a:	4641      	mov	r1, r8
 801293c:	4620      	mov	r0, r4
 801293e:	f000 fd0b 	bl	8013358 <_Bfree>
 8012942:	4639      	mov	r1, r7
 8012944:	4620      	mov	r0, r4
 8012946:	f000 fd07 	bl	8013358 <_Bfree>
 801294a:	e6a5      	b.n	8012698 <_dtoa_r+0x6d8>
 801294c:	2600      	movs	r6, #0
 801294e:	4637      	mov	r7, r6
 8012950:	e7e1      	b.n	8012916 <_dtoa_r+0x956>
 8012952:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012954:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012958:	4637      	mov	r7, r6
 801295a:	e599      	b.n	8012490 <_dtoa_r+0x4d0>
 801295c:	9b08      	ldr	r3, [sp, #32]
 801295e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 80fd 	beq.w	8012b62 <_dtoa_r+0xba2>
 8012968:	2d00      	cmp	r5, #0
 801296a:	dd05      	ble.n	8012978 <_dtoa_r+0x9b8>
 801296c:	4639      	mov	r1, r7
 801296e:	462a      	mov	r2, r5
 8012970:	4620      	mov	r0, r4
 8012972:	f000 ff0d 	bl	8013790 <__lshift>
 8012976:	4607      	mov	r7, r0
 8012978:	9b06      	ldr	r3, [sp, #24]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d05c      	beq.n	8012a38 <_dtoa_r+0xa78>
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	4620      	mov	r0, r4
 8012982:	f000 fca9 	bl	80132d8 <_Balloc>
 8012986:	4605      	mov	r5, r0
 8012988:	b928      	cbnz	r0, 8012996 <_dtoa_r+0x9d6>
 801298a:	4b80      	ldr	r3, [pc, #512]	; (8012b8c <_dtoa_r+0xbcc>)
 801298c:	4602      	mov	r2, r0
 801298e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012992:	f7ff bb2e 	b.w	8011ff2 <_dtoa_r+0x32>
 8012996:	693a      	ldr	r2, [r7, #16]
 8012998:	3202      	adds	r2, #2
 801299a:	0092      	lsls	r2, r2, #2
 801299c:	f107 010c 	add.w	r1, r7, #12
 80129a0:	300c      	adds	r0, #12
 80129a2:	f7fd fb5d 	bl	8010060 <memcpy>
 80129a6:	2201      	movs	r2, #1
 80129a8:	4629      	mov	r1, r5
 80129aa:	4620      	mov	r0, r4
 80129ac:	f000 fef0 	bl	8013790 <__lshift>
 80129b0:	9b00      	ldr	r3, [sp, #0]
 80129b2:	3301      	adds	r3, #1
 80129b4:	9301      	str	r3, [sp, #4]
 80129b6:	9b00      	ldr	r3, [sp, #0]
 80129b8:	444b      	add	r3, r9
 80129ba:	9307      	str	r3, [sp, #28]
 80129bc:	9b02      	ldr	r3, [sp, #8]
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	46b8      	mov	r8, r7
 80129c4:	9306      	str	r3, [sp, #24]
 80129c6:	4607      	mov	r7, r0
 80129c8:	9b01      	ldr	r3, [sp, #4]
 80129ca:	4631      	mov	r1, r6
 80129cc:	3b01      	subs	r3, #1
 80129ce:	4658      	mov	r0, fp
 80129d0:	9302      	str	r3, [sp, #8]
 80129d2:	f7ff fa67 	bl	8011ea4 <quorem>
 80129d6:	4603      	mov	r3, r0
 80129d8:	3330      	adds	r3, #48	; 0x30
 80129da:	9004      	str	r0, [sp, #16]
 80129dc:	4641      	mov	r1, r8
 80129de:	4658      	mov	r0, fp
 80129e0:	9308      	str	r3, [sp, #32]
 80129e2:	f000 ff41 	bl	8013868 <__mcmp>
 80129e6:	463a      	mov	r2, r7
 80129e8:	4681      	mov	r9, r0
 80129ea:	4631      	mov	r1, r6
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 ff57 	bl	80138a0 <__mdiff>
 80129f2:	68c2      	ldr	r2, [r0, #12]
 80129f4:	9b08      	ldr	r3, [sp, #32]
 80129f6:	4605      	mov	r5, r0
 80129f8:	bb02      	cbnz	r2, 8012a3c <_dtoa_r+0xa7c>
 80129fa:	4601      	mov	r1, r0
 80129fc:	4658      	mov	r0, fp
 80129fe:	f000 ff33 	bl	8013868 <__mcmp>
 8012a02:	9b08      	ldr	r3, [sp, #32]
 8012a04:	4602      	mov	r2, r0
 8012a06:	4629      	mov	r1, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012a0e:	f000 fca3 	bl	8013358 <_Bfree>
 8012a12:	9b05      	ldr	r3, [sp, #20]
 8012a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a16:	9d01      	ldr	r5, [sp, #4]
 8012a18:	ea43 0102 	orr.w	r1, r3, r2
 8012a1c:	9b06      	ldr	r3, [sp, #24]
 8012a1e:	430b      	orrs	r3, r1
 8012a20:	9b08      	ldr	r3, [sp, #32]
 8012a22:	d10d      	bne.n	8012a40 <_dtoa_r+0xa80>
 8012a24:	2b39      	cmp	r3, #57	; 0x39
 8012a26:	d029      	beq.n	8012a7c <_dtoa_r+0xabc>
 8012a28:	f1b9 0f00 	cmp.w	r9, #0
 8012a2c:	dd01      	ble.n	8012a32 <_dtoa_r+0xa72>
 8012a2e:	9b04      	ldr	r3, [sp, #16]
 8012a30:	3331      	adds	r3, #49	; 0x31
 8012a32:	9a02      	ldr	r2, [sp, #8]
 8012a34:	7013      	strb	r3, [r2, #0]
 8012a36:	e774      	b.n	8012922 <_dtoa_r+0x962>
 8012a38:	4638      	mov	r0, r7
 8012a3a:	e7b9      	b.n	80129b0 <_dtoa_r+0x9f0>
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	e7e2      	b.n	8012a06 <_dtoa_r+0xa46>
 8012a40:	f1b9 0f00 	cmp.w	r9, #0
 8012a44:	db06      	blt.n	8012a54 <_dtoa_r+0xa94>
 8012a46:	9905      	ldr	r1, [sp, #20]
 8012a48:	ea41 0909 	orr.w	r9, r1, r9
 8012a4c:	9906      	ldr	r1, [sp, #24]
 8012a4e:	ea59 0101 	orrs.w	r1, r9, r1
 8012a52:	d120      	bne.n	8012a96 <_dtoa_r+0xad6>
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	ddec      	ble.n	8012a32 <_dtoa_r+0xa72>
 8012a58:	4659      	mov	r1, fp
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	9301      	str	r3, [sp, #4]
 8012a60:	f000 fe96 	bl	8013790 <__lshift>
 8012a64:	4631      	mov	r1, r6
 8012a66:	4683      	mov	fp, r0
 8012a68:	f000 fefe 	bl	8013868 <__mcmp>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	dc02      	bgt.n	8012a78 <_dtoa_r+0xab8>
 8012a72:	d1de      	bne.n	8012a32 <_dtoa_r+0xa72>
 8012a74:	07da      	lsls	r2, r3, #31
 8012a76:	d5dc      	bpl.n	8012a32 <_dtoa_r+0xa72>
 8012a78:	2b39      	cmp	r3, #57	; 0x39
 8012a7a:	d1d8      	bne.n	8012a2e <_dtoa_r+0xa6e>
 8012a7c:	9a02      	ldr	r2, [sp, #8]
 8012a7e:	2339      	movs	r3, #57	; 0x39
 8012a80:	7013      	strb	r3, [r2, #0]
 8012a82:	462b      	mov	r3, r5
 8012a84:	461d      	mov	r5, r3
 8012a86:	3b01      	subs	r3, #1
 8012a88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a8c:	2a39      	cmp	r2, #57	; 0x39
 8012a8e:	d050      	beq.n	8012b32 <_dtoa_r+0xb72>
 8012a90:	3201      	adds	r2, #1
 8012a92:	701a      	strb	r2, [r3, #0]
 8012a94:	e745      	b.n	8012922 <_dtoa_r+0x962>
 8012a96:	2a00      	cmp	r2, #0
 8012a98:	dd03      	ble.n	8012aa2 <_dtoa_r+0xae2>
 8012a9a:	2b39      	cmp	r3, #57	; 0x39
 8012a9c:	d0ee      	beq.n	8012a7c <_dtoa_r+0xabc>
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	e7c7      	b.n	8012a32 <_dtoa_r+0xa72>
 8012aa2:	9a01      	ldr	r2, [sp, #4]
 8012aa4:	9907      	ldr	r1, [sp, #28]
 8012aa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012aaa:	428a      	cmp	r2, r1
 8012aac:	d02a      	beq.n	8012b04 <_dtoa_r+0xb44>
 8012aae:	4659      	mov	r1, fp
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	220a      	movs	r2, #10
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f000 fc71 	bl	801339c <__multadd>
 8012aba:	45b8      	cmp	r8, r7
 8012abc:	4683      	mov	fp, r0
 8012abe:	f04f 0300 	mov.w	r3, #0
 8012ac2:	f04f 020a 	mov.w	r2, #10
 8012ac6:	4641      	mov	r1, r8
 8012ac8:	4620      	mov	r0, r4
 8012aca:	d107      	bne.n	8012adc <_dtoa_r+0xb1c>
 8012acc:	f000 fc66 	bl	801339c <__multadd>
 8012ad0:	4680      	mov	r8, r0
 8012ad2:	4607      	mov	r7, r0
 8012ad4:	9b01      	ldr	r3, [sp, #4]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	9301      	str	r3, [sp, #4]
 8012ada:	e775      	b.n	80129c8 <_dtoa_r+0xa08>
 8012adc:	f000 fc5e 	bl	801339c <__multadd>
 8012ae0:	4639      	mov	r1, r7
 8012ae2:	4680      	mov	r8, r0
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	220a      	movs	r2, #10
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f000 fc57 	bl	801339c <__multadd>
 8012aee:	4607      	mov	r7, r0
 8012af0:	e7f0      	b.n	8012ad4 <_dtoa_r+0xb14>
 8012af2:	f1b9 0f00 	cmp.w	r9, #0
 8012af6:	9a00      	ldr	r2, [sp, #0]
 8012af8:	bfcc      	ite	gt
 8012afa:	464d      	movgt	r5, r9
 8012afc:	2501      	movle	r5, #1
 8012afe:	4415      	add	r5, r2
 8012b00:	f04f 0800 	mov.w	r8, #0
 8012b04:	4659      	mov	r1, fp
 8012b06:	2201      	movs	r2, #1
 8012b08:	4620      	mov	r0, r4
 8012b0a:	9301      	str	r3, [sp, #4]
 8012b0c:	f000 fe40 	bl	8013790 <__lshift>
 8012b10:	4631      	mov	r1, r6
 8012b12:	4683      	mov	fp, r0
 8012b14:	f000 fea8 	bl	8013868 <__mcmp>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	dcb2      	bgt.n	8012a82 <_dtoa_r+0xac2>
 8012b1c:	d102      	bne.n	8012b24 <_dtoa_r+0xb64>
 8012b1e:	9b01      	ldr	r3, [sp, #4]
 8012b20:	07db      	lsls	r3, r3, #31
 8012b22:	d4ae      	bmi.n	8012a82 <_dtoa_r+0xac2>
 8012b24:	462b      	mov	r3, r5
 8012b26:	461d      	mov	r5, r3
 8012b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b2c:	2a30      	cmp	r2, #48	; 0x30
 8012b2e:	d0fa      	beq.n	8012b26 <_dtoa_r+0xb66>
 8012b30:	e6f7      	b.n	8012922 <_dtoa_r+0x962>
 8012b32:	9a00      	ldr	r2, [sp, #0]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d1a5      	bne.n	8012a84 <_dtoa_r+0xac4>
 8012b38:	f10a 0a01 	add.w	sl, sl, #1
 8012b3c:	2331      	movs	r3, #49	; 0x31
 8012b3e:	e779      	b.n	8012a34 <_dtoa_r+0xa74>
 8012b40:	4b13      	ldr	r3, [pc, #76]	; (8012b90 <_dtoa_r+0xbd0>)
 8012b42:	f7ff baaf 	b.w	80120a4 <_dtoa_r+0xe4>
 8012b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f47f aa86 	bne.w	801205a <_dtoa_r+0x9a>
 8012b4e:	4b11      	ldr	r3, [pc, #68]	; (8012b94 <_dtoa_r+0xbd4>)
 8012b50:	f7ff baa8 	b.w	80120a4 <_dtoa_r+0xe4>
 8012b54:	f1b9 0f00 	cmp.w	r9, #0
 8012b58:	dc03      	bgt.n	8012b62 <_dtoa_r+0xba2>
 8012b5a:	9b05      	ldr	r3, [sp, #20]
 8012b5c:	2b02      	cmp	r3, #2
 8012b5e:	f73f aec9 	bgt.w	80128f4 <_dtoa_r+0x934>
 8012b62:	9d00      	ldr	r5, [sp, #0]
 8012b64:	4631      	mov	r1, r6
 8012b66:	4658      	mov	r0, fp
 8012b68:	f7ff f99c 	bl	8011ea4 <quorem>
 8012b6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b70:	f805 3b01 	strb.w	r3, [r5], #1
 8012b74:	9a00      	ldr	r2, [sp, #0]
 8012b76:	1aaa      	subs	r2, r5, r2
 8012b78:	4591      	cmp	r9, r2
 8012b7a:	ddba      	ble.n	8012af2 <_dtoa_r+0xb32>
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	2300      	movs	r3, #0
 8012b80:	220a      	movs	r2, #10
 8012b82:	4620      	mov	r0, r4
 8012b84:	f000 fc0a 	bl	801339c <__multadd>
 8012b88:	4683      	mov	fp, r0
 8012b8a:	e7eb      	b.n	8012b64 <_dtoa_r+0xba4>
 8012b8c:	080162ba 	.word	0x080162ba
 8012b90:	08015fc0 	.word	0x08015fc0
 8012b94:	0801624e 	.word	0x0801624e

08012b98 <fiprintf>:
 8012b98:	b40e      	push	{r1, r2, r3}
 8012b9a:	b503      	push	{r0, r1, lr}
 8012b9c:	4601      	mov	r1, r0
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	4805      	ldr	r0, [pc, #20]	; (8012bb8 <fiprintf+0x20>)
 8012ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba6:	6800      	ldr	r0, [r0, #0]
 8012ba8:	9301      	str	r3, [sp, #4]
 8012baa:	f001 fa8f 	bl	80140cc <_vfiprintf_r>
 8012bae:	b002      	add	sp, #8
 8012bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb4:	b003      	add	sp, #12
 8012bb6:	4770      	bx	lr
 8012bb8:	200003a8 	.word	0x200003a8

08012bbc <rshift>:
 8012bbc:	6903      	ldr	r3, [r0, #16]
 8012bbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012bc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012bca:	f100 0414 	add.w	r4, r0, #20
 8012bce:	dd45      	ble.n	8012c5c <rshift+0xa0>
 8012bd0:	f011 011f 	ands.w	r1, r1, #31
 8012bd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012bd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012bdc:	d10c      	bne.n	8012bf8 <rshift+0x3c>
 8012bde:	f100 0710 	add.w	r7, r0, #16
 8012be2:	4629      	mov	r1, r5
 8012be4:	42b1      	cmp	r1, r6
 8012be6:	d334      	bcc.n	8012c52 <rshift+0x96>
 8012be8:	1a9b      	subs	r3, r3, r2
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	1eea      	subs	r2, r5, #3
 8012bee:	4296      	cmp	r6, r2
 8012bf0:	bf38      	it	cc
 8012bf2:	2300      	movcc	r3, #0
 8012bf4:	4423      	add	r3, r4
 8012bf6:	e015      	b.n	8012c24 <rshift+0x68>
 8012bf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012bfc:	f1c1 0820 	rsb	r8, r1, #32
 8012c00:	40cf      	lsrs	r7, r1
 8012c02:	f105 0e04 	add.w	lr, r5, #4
 8012c06:	46a1      	mov	r9, r4
 8012c08:	4576      	cmp	r6, lr
 8012c0a:	46f4      	mov	ip, lr
 8012c0c:	d815      	bhi.n	8012c3a <rshift+0x7e>
 8012c0e:	1a9b      	subs	r3, r3, r2
 8012c10:	009a      	lsls	r2, r3, #2
 8012c12:	3a04      	subs	r2, #4
 8012c14:	3501      	adds	r5, #1
 8012c16:	42ae      	cmp	r6, r5
 8012c18:	bf38      	it	cc
 8012c1a:	2200      	movcc	r2, #0
 8012c1c:	18a3      	adds	r3, r4, r2
 8012c1e:	50a7      	str	r7, [r4, r2]
 8012c20:	b107      	cbz	r7, 8012c24 <rshift+0x68>
 8012c22:	3304      	adds	r3, #4
 8012c24:	1b1a      	subs	r2, r3, r4
 8012c26:	42a3      	cmp	r3, r4
 8012c28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c2c:	bf08      	it	eq
 8012c2e:	2300      	moveq	r3, #0
 8012c30:	6102      	str	r2, [r0, #16]
 8012c32:	bf08      	it	eq
 8012c34:	6143      	streq	r3, [r0, #20]
 8012c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c3a:	f8dc c000 	ldr.w	ip, [ip]
 8012c3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012c42:	ea4c 0707 	orr.w	r7, ip, r7
 8012c46:	f849 7b04 	str.w	r7, [r9], #4
 8012c4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012c4e:	40cf      	lsrs	r7, r1
 8012c50:	e7da      	b.n	8012c08 <rshift+0x4c>
 8012c52:	f851 cb04 	ldr.w	ip, [r1], #4
 8012c56:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c5a:	e7c3      	b.n	8012be4 <rshift+0x28>
 8012c5c:	4623      	mov	r3, r4
 8012c5e:	e7e1      	b.n	8012c24 <rshift+0x68>

08012c60 <__hexdig_fun>:
 8012c60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012c64:	2b09      	cmp	r3, #9
 8012c66:	d802      	bhi.n	8012c6e <__hexdig_fun+0xe>
 8012c68:	3820      	subs	r0, #32
 8012c6a:	b2c0      	uxtb	r0, r0
 8012c6c:	4770      	bx	lr
 8012c6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c72:	2b05      	cmp	r3, #5
 8012c74:	d801      	bhi.n	8012c7a <__hexdig_fun+0x1a>
 8012c76:	3847      	subs	r0, #71	; 0x47
 8012c78:	e7f7      	b.n	8012c6a <__hexdig_fun+0xa>
 8012c7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c7e:	2b05      	cmp	r3, #5
 8012c80:	d801      	bhi.n	8012c86 <__hexdig_fun+0x26>
 8012c82:	3827      	subs	r0, #39	; 0x27
 8012c84:	e7f1      	b.n	8012c6a <__hexdig_fun+0xa>
 8012c86:	2000      	movs	r0, #0
 8012c88:	4770      	bx	lr
	...

08012c8c <__gethex>:
 8012c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c90:	ed2d 8b02 	vpush	{d8}
 8012c94:	b089      	sub	sp, #36	; 0x24
 8012c96:	ee08 0a10 	vmov	s16, r0
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	4bbc      	ldr	r3, [pc, #752]	; (8012f90 <__gethex+0x304>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	468b      	mov	fp, r1
 8012ca6:	4690      	mov	r8, r2
 8012ca8:	f7ed fac4 	bl	8000234 <strlen>
 8012cac:	9b01      	ldr	r3, [sp, #4]
 8012cae:	f8db 2000 	ldr.w	r2, [fp]
 8012cb2:	4403      	add	r3, r0
 8012cb4:	4682      	mov	sl, r0
 8012cb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012cba:	9305      	str	r3, [sp, #20]
 8012cbc:	1c93      	adds	r3, r2, #2
 8012cbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012cc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012cc6:	32fe      	adds	r2, #254	; 0xfe
 8012cc8:	18d1      	adds	r1, r2, r3
 8012cca:	461f      	mov	r7, r3
 8012ccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012cd0:	9100      	str	r1, [sp, #0]
 8012cd2:	2830      	cmp	r0, #48	; 0x30
 8012cd4:	d0f8      	beq.n	8012cc8 <__gethex+0x3c>
 8012cd6:	f7ff ffc3 	bl	8012c60 <__hexdig_fun>
 8012cda:	4604      	mov	r4, r0
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d13a      	bne.n	8012d56 <__gethex+0xca>
 8012ce0:	9901      	ldr	r1, [sp, #4]
 8012ce2:	4652      	mov	r2, sl
 8012ce4:	4638      	mov	r0, r7
 8012ce6:	f001 fb48 	bl	801437a <strncmp>
 8012cea:	4605      	mov	r5, r0
 8012cec:	2800      	cmp	r0, #0
 8012cee:	d168      	bne.n	8012dc2 <__gethex+0x136>
 8012cf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012cf4:	eb07 060a 	add.w	r6, r7, sl
 8012cf8:	f7ff ffb2 	bl	8012c60 <__hexdig_fun>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d062      	beq.n	8012dc6 <__gethex+0x13a>
 8012d00:	4633      	mov	r3, r6
 8012d02:	7818      	ldrb	r0, [r3, #0]
 8012d04:	2830      	cmp	r0, #48	; 0x30
 8012d06:	461f      	mov	r7, r3
 8012d08:	f103 0301 	add.w	r3, r3, #1
 8012d0c:	d0f9      	beq.n	8012d02 <__gethex+0x76>
 8012d0e:	f7ff ffa7 	bl	8012c60 <__hexdig_fun>
 8012d12:	2301      	movs	r3, #1
 8012d14:	fab0 f480 	clz	r4, r0
 8012d18:	0964      	lsrs	r4, r4, #5
 8012d1a:	4635      	mov	r5, r6
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	463a      	mov	r2, r7
 8012d20:	4616      	mov	r6, r2
 8012d22:	3201      	adds	r2, #1
 8012d24:	7830      	ldrb	r0, [r6, #0]
 8012d26:	f7ff ff9b 	bl	8012c60 <__hexdig_fun>
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d1f8      	bne.n	8012d20 <__gethex+0x94>
 8012d2e:	9901      	ldr	r1, [sp, #4]
 8012d30:	4652      	mov	r2, sl
 8012d32:	4630      	mov	r0, r6
 8012d34:	f001 fb21 	bl	801437a <strncmp>
 8012d38:	b980      	cbnz	r0, 8012d5c <__gethex+0xd0>
 8012d3a:	b94d      	cbnz	r5, 8012d50 <__gethex+0xc4>
 8012d3c:	eb06 050a 	add.w	r5, r6, sl
 8012d40:	462a      	mov	r2, r5
 8012d42:	4616      	mov	r6, r2
 8012d44:	3201      	adds	r2, #1
 8012d46:	7830      	ldrb	r0, [r6, #0]
 8012d48:	f7ff ff8a 	bl	8012c60 <__hexdig_fun>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d1f8      	bne.n	8012d42 <__gethex+0xb6>
 8012d50:	1bad      	subs	r5, r5, r6
 8012d52:	00ad      	lsls	r5, r5, #2
 8012d54:	e004      	b.n	8012d60 <__gethex+0xd4>
 8012d56:	2400      	movs	r4, #0
 8012d58:	4625      	mov	r5, r4
 8012d5a:	e7e0      	b.n	8012d1e <__gethex+0x92>
 8012d5c:	2d00      	cmp	r5, #0
 8012d5e:	d1f7      	bne.n	8012d50 <__gethex+0xc4>
 8012d60:	7833      	ldrb	r3, [r6, #0]
 8012d62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d66:	2b50      	cmp	r3, #80	; 0x50
 8012d68:	d13b      	bne.n	8012de2 <__gethex+0x156>
 8012d6a:	7873      	ldrb	r3, [r6, #1]
 8012d6c:	2b2b      	cmp	r3, #43	; 0x2b
 8012d6e:	d02c      	beq.n	8012dca <__gethex+0x13e>
 8012d70:	2b2d      	cmp	r3, #45	; 0x2d
 8012d72:	d02e      	beq.n	8012dd2 <__gethex+0x146>
 8012d74:	1c71      	adds	r1, r6, #1
 8012d76:	f04f 0900 	mov.w	r9, #0
 8012d7a:	7808      	ldrb	r0, [r1, #0]
 8012d7c:	f7ff ff70 	bl	8012c60 <__hexdig_fun>
 8012d80:	1e43      	subs	r3, r0, #1
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	2b18      	cmp	r3, #24
 8012d86:	d82c      	bhi.n	8012de2 <__gethex+0x156>
 8012d88:	f1a0 0210 	sub.w	r2, r0, #16
 8012d8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d90:	f7ff ff66 	bl	8012c60 <__hexdig_fun>
 8012d94:	1e43      	subs	r3, r0, #1
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	2b18      	cmp	r3, #24
 8012d9a:	d91d      	bls.n	8012dd8 <__gethex+0x14c>
 8012d9c:	f1b9 0f00 	cmp.w	r9, #0
 8012da0:	d000      	beq.n	8012da4 <__gethex+0x118>
 8012da2:	4252      	negs	r2, r2
 8012da4:	4415      	add	r5, r2
 8012da6:	f8cb 1000 	str.w	r1, [fp]
 8012daa:	b1e4      	cbz	r4, 8012de6 <__gethex+0x15a>
 8012dac:	9b00      	ldr	r3, [sp, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	bf14      	ite	ne
 8012db2:	2700      	movne	r7, #0
 8012db4:	2706      	moveq	r7, #6
 8012db6:	4638      	mov	r0, r7
 8012db8:	b009      	add	sp, #36	; 0x24
 8012dba:	ecbd 8b02 	vpop	{d8}
 8012dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc2:	463e      	mov	r6, r7
 8012dc4:	4625      	mov	r5, r4
 8012dc6:	2401      	movs	r4, #1
 8012dc8:	e7ca      	b.n	8012d60 <__gethex+0xd4>
 8012dca:	f04f 0900 	mov.w	r9, #0
 8012dce:	1cb1      	adds	r1, r6, #2
 8012dd0:	e7d3      	b.n	8012d7a <__gethex+0xee>
 8012dd2:	f04f 0901 	mov.w	r9, #1
 8012dd6:	e7fa      	b.n	8012dce <__gethex+0x142>
 8012dd8:	230a      	movs	r3, #10
 8012dda:	fb03 0202 	mla	r2, r3, r2, r0
 8012dde:	3a10      	subs	r2, #16
 8012de0:	e7d4      	b.n	8012d8c <__gethex+0x100>
 8012de2:	4631      	mov	r1, r6
 8012de4:	e7df      	b.n	8012da6 <__gethex+0x11a>
 8012de6:	1bf3      	subs	r3, r6, r7
 8012de8:	3b01      	subs	r3, #1
 8012dea:	4621      	mov	r1, r4
 8012dec:	2b07      	cmp	r3, #7
 8012dee:	dc0b      	bgt.n	8012e08 <__gethex+0x17c>
 8012df0:	ee18 0a10 	vmov	r0, s16
 8012df4:	f000 fa70 	bl	80132d8 <_Balloc>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	b940      	cbnz	r0, 8012e0e <__gethex+0x182>
 8012dfc:	4b65      	ldr	r3, [pc, #404]	; (8012f94 <__gethex+0x308>)
 8012dfe:	4602      	mov	r2, r0
 8012e00:	21de      	movs	r1, #222	; 0xde
 8012e02:	4865      	ldr	r0, [pc, #404]	; (8012f98 <__gethex+0x30c>)
 8012e04:	f7ff f830 	bl	8011e68 <__assert_func>
 8012e08:	3101      	adds	r1, #1
 8012e0a:	105b      	asrs	r3, r3, #1
 8012e0c:	e7ee      	b.n	8012dec <__gethex+0x160>
 8012e0e:	f100 0914 	add.w	r9, r0, #20
 8012e12:	f04f 0b00 	mov.w	fp, #0
 8012e16:	f1ca 0301 	rsb	r3, sl, #1
 8012e1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e1e:	f8cd b000 	str.w	fp, [sp]
 8012e22:	9306      	str	r3, [sp, #24]
 8012e24:	42b7      	cmp	r7, r6
 8012e26:	d340      	bcc.n	8012eaa <__gethex+0x21e>
 8012e28:	9802      	ldr	r0, [sp, #8]
 8012e2a:	9b00      	ldr	r3, [sp, #0]
 8012e2c:	f840 3b04 	str.w	r3, [r0], #4
 8012e30:	eba0 0009 	sub.w	r0, r0, r9
 8012e34:	1080      	asrs	r0, r0, #2
 8012e36:	0146      	lsls	r6, r0, #5
 8012e38:	6120      	str	r0, [r4, #16]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fb42 	bl	80134c4 <__hi0bits>
 8012e40:	1a30      	subs	r0, r6, r0
 8012e42:	f8d8 6000 	ldr.w	r6, [r8]
 8012e46:	42b0      	cmp	r0, r6
 8012e48:	dd63      	ble.n	8012f12 <__gethex+0x286>
 8012e4a:	1b87      	subs	r7, r0, r6
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f000 fedc 	bl	8013c0c <__any_on>
 8012e54:	4682      	mov	sl, r0
 8012e56:	b1a8      	cbz	r0, 8012e84 <__gethex+0x1f8>
 8012e58:	1e7b      	subs	r3, r7, #1
 8012e5a:	1159      	asrs	r1, r3, #5
 8012e5c:	f003 021f 	and.w	r2, r3, #31
 8012e60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012e64:	f04f 0a01 	mov.w	sl, #1
 8012e68:	fa0a f202 	lsl.w	r2, sl, r2
 8012e6c:	420a      	tst	r2, r1
 8012e6e:	d009      	beq.n	8012e84 <__gethex+0x1f8>
 8012e70:	4553      	cmp	r3, sl
 8012e72:	dd05      	ble.n	8012e80 <__gethex+0x1f4>
 8012e74:	1eb9      	subs	r1, r7, #2
 8012e76:	4620      	mov	r0, r4
 8012e78:	f000 fec8 	bl	8013c0c <__any_on>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d145      	bne.n	8012f0c <__gethex+0x280>
 8012e80:	f04f 0a02 	mov.w	sl, #2
 8012e84:	4639      	mov	r1, r7
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7ff fe98 	bl	8012bbc <rshift>
 8012e8c:	443d      	add	r5, r7
 8012e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e92:	42ab      	cmp	r3, r5
 8012e94:	da4c      	bge.n	8012f30 <__gethex+0x2a4>
 8012e96:	ee18 0a10 	vmov	r0, s16
 8012e9a:	4621      	mov	r1, r4
 8012e9c:	f000 fa5c 	bl	8013358 <_Bfree>
 8012ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	27a3      	movs	r7, #163	; 0xa3
 8012ea8:	e785      	b.n	8012db6 <__gethex+0x12a>
 8012eaa:	1e73      	subs	r3, r6, #1
 8012eac:	9a05      	ldr	r2, [sp, #20]
 8012eae:	9303      	str	r3, [sp, #12]
 8012eb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	d019      	beq.n	8012eec <__gethex+0x260>
 8012eb8:	f1bb 0f20 	cmp.w	fp, #32
 8012ebc:	d107      	bne.n	8012ece <__gethex+0x242>
 8012ebe:	9b02      	ldr	r3, [sp, #8]
 8012ec0:	9a00      	ldr	r2, [sp, #0]
 8012ec2:	f843 2b04 	str.w	r2, [r3], #4
 8012ec6:	9302      	str	r3, [sp, #8]
 8012ec8:	2300      	movs	r3, #0
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	469b      	mov	fp, r3
 8012ece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012ed2:	f7ff fec5 	bl	8012c60 <__hexdig_fun>
 8012ed6:	9b00      	ldr	r3, [sp, #0]
 8012ed8:	f000 000f 	and.w	r0, r0, #15
 8012edc:	fa00 f00b 	lsl.w	r0, r0, fp
 8012ee0:	4303      	orrs	r3, r0
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	f10b 0b04 	add.w	fp, fp, #4
 8012ee8:	9b03      	ldr	r3, [sp, #12]
 8012eea:	e00d      	b.n	8012f08 <__gethex+0x27c>
 8012eec:	9b03      	ldr	r3, [sp, #12]
 8012eee:	9a06      	ldr	r2, [sp, #24]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	42bb      	cmp	r3, r7
 8012ef4:	d3e0      	bcc.n	8012eb8 <__gethex+0x22c>
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	9901      	ldr	r1, [sp, #4]
 8012efa:	9307      	str	r3, [sp, #28]
 8012efc:	4652      	mov	r2, sl
 8012efe:	f001 fa3c 	bl	801437a <strncmp>
 8012f02:	9b07      	ldr	r3, [sp, #28]
 8012f04:	2800      	cmp	r0, #0
 8012f06:	d1d7      	bne.n	8012eb8 <__gethex+0x22c>
 8012f08:	461e      	mov	r6, r3
 8012f0a:	e78b      	b.n	8012e24 <__gethex+0x198>
 8012f0c:	f04f 0a03 	mov.w	sl, #3
 8012f10:	e7b8      	b.n	8012e84 <__gethex+0x1f8>
 8012f12:	da0a      	bge.n	8012f2a <__gethex+0x29e>
 8012f14:	1a37      	subs	r7, r6, r0
 8012f16:	4621      	mov	r1, r4
 8012f18:	ee18 0a10 	vmov	r0, s16
 8012f1c:	463a      	mov	r2, r7
 8012f1e:	f000 fc37 	bl	8013790 <__lshift>
 8012f22:	1bed      	subs	r5, r5, r7
 8012f24:	4604      	mov	r4, r0
 8012f26:	f100 0914 	add.w	r9, r0, #20
 8012f2a:	f04f 0a00 	mov.w	sl, #0
 8012f2e:	e7ae      	b.n	8012e8e <__gethex+0x202>
 8012f30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012f34:	42a8      	cmp	r0, r5
 8012f36:	dd72      	ble.n	801301e <__gethex+0x392>
 8012f38:	1b45      	subs	r5, r0, r5
 8012f3a:	42ae      	cmp	r6, r5
 8012f3c:	dc36      	bgt.n	8012fac <__gethex+0x320>
 8012f3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f42:	2b02      	cmp	r3, #2
 8012f44:	d02a      	beq.n	8012f9c <__gethex+0x310>
 8012f46:	2b03      	cmp	r3, #3
 8012f48:	d02c      	beq.n	8012fa4 <__gethex+0x318>
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d115      	bne.n	8012f7a <__gethex+0x2ee>
 8012f4e:	42ae      	cmp	r6, r5
 8012f50:	d113      	bne.n	8012f7a <__gethex+0x2ee>
 8012f52:	2e01      	cmp	r6, #1
 8012f54:	d10b      	bne.n	8012f6e <__gethex+0x2e2>
 8012f56:	9a04      	ldr	r2, [sp, #16]
 8012f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f5c:	6013      	str	r3, [r2, #0]
 8012f5e:	2301      	movs	r3, #1
 8012f60:	6123      	str	r3, [r4, #16]
 8012f62:	f8c9 3000 	str.w	r3, [r9]
 8012f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f68:	2762      	movs	r7, #98	; 0x62
 8012f6a:	601c      	str	r4, [r3, #0]
 8012f6c:	e723      	b.n	8012db6 <__gethex+0x12a>
 8012f6e:	1e71      	subs	r1, r6, #1
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 fe4b 	bl	8013c0c <__any_on>
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d1ed      	bne.n	8012f56 <__gethex+0x2ca>
 8012f7a:	ee18 0a10 	vmov	r0, s16
 8012f7e:	4621      	mov	r1, r4
 8012f80:	f000 f9ea 	bl	8013358 <_Bfree>
 8012f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f86:	2300      	movs	r3, #0
 8012f88:	6013      	str	r3, [r2, #0]
 8012f8a:	2750      	movs	r7, #80	; 0x50
 8012f8c:	e713      	b.n	8012db6 <__gethex+0x12a>
 8012f8e:	bf00      	nop
 8012f90:	08016334 	.word	0x08016334
 8012f94:	080162ba 	.word	0x080162ba
 8012f98:	080162cb 	.word	0x080162cb
 8012f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1eb      	bne.n	8012f7a <__gethex+0x2ee>
 8012fa2:	e7d8      	b.n	8012f56 <__gethex+0x2ca>
 8012fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1d5      	bne.n	8012f56 <__gethex+0x2ca>
 8012faa:	e7e6      	b.n	8012f7a <__gethex+0x2ee>
 8012fac:	1e6f      	subs	r7, r5, #1
 8012fae:	f1ba 0f00 	cmp.w	sl, #0
 8012fb2:	d131      	bne.n	8013018 <__gethex+0x38c>
 8012fb4:	b127      	cbz	r7, 8012fc0 <__gethex+0x334>
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f000 fe27 	bl	8013c0c <__any_on>
 8012fbe:	4682      	mov	sl, r0
 8012fc0:	117b      	asrs	r3, r7, #5
 8012fc2:	2101      	movs	r1, #1
 8012fc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012fc8:	f007 071f 	and.w	r7, r7, #31
 8012fcc:	fa01 f707 	lsl.w	r7, r1, r7
 8012fd0:	421f      	tst	r7, r3
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	bf18      	it	ne
 8012fd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8012fdc:	1b76      	subs	r6, r6, r5
 8012fde:	f7ff fded 	bl	8012bbc <rshift>
 8012fe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012fe6:	2702      	movs	r7, #2
 8012fe8:	f1ba 0f00 	cmp.w	sl, #0
 8012fec:	d048      	beq.n	8013080 <__gethex+0x3f4>
 8012fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d015      	beq.n	8013022 <__gethex+0x396>
 8012ff6:	2b03      	cmp	r3, #3
 8012ff8:	d017      	beq.n	801302a <__gethex+0x39e>
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d109      	bne.n	8013012 <__gethex+0x386>
 8012ffe:	f01a 0f02 	tst.w	sl, #2
 8013002:	d006      	beq.n	8013012 <__gethex+0x386>
 8013004:	f8d9 0000 	ldr.w	r0, [r9]
 8013008:	ea4a 0a00 	orr.w	sl, sl, r0
 801300c:	f01a 0f01 	tst.w	sl, #1
 8013010:	d10e      	bne.n	8013030 <__gethex+0x3a4>
 8013012:	f047 0710 	orr.w	r7, r7, #16
 8013016:	e033      	b.n	8013080 <__gethex+0x3f4>
 8013018:	f04f 0a01 	mov.w	sl, #1
 801301c:	e7d0      	b.n	8012fc0 <__gethex+0x334>
 801301e:	2701      	movs	r7, #1
 8013020:	e7e2      	b.n	8012fe8 <__gethex+0x35c>
 8013022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013024:	f1c3 0301 	rsb	r3, r3, #1
 8013028:	9315      	str	r3, [sp, #84]	; 0x54
 801302a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801302c:	2b00      	cmp	r3, #0
 801302e:	d0f0      	beq.n	8013012 <__gethex+0x386>
 8013030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013034:	f104 0314 	add.w	r3, r4, #20
 8013038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801303c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013040:	f04f 0c00 	mov.w	ip, #0
 8013044:	4618      	mov	r0, r3
 8013046:	f853 2b04 	ldr.w	r2, [r3], #4
 801304a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801304e:	d01c      	beq.n	801308a <__gethex+0x3fe>
 8013050:	3201      	adds	r2, #1
 8013052:	6002      	str	r2, [r0, #0]
 8013054:	2f02      	cmp	r7, #2
 8013056:	f104 0314 	add.w	r3, r4, #20
 801305a:	d13f      	bne.n	80130dc <__gethex+0x450>
 801305c:	f8d8 2000 	ldr.w	r2, [r8]
 8013060:	3a01      	subs	r2, #1
 8013062:	42b2      	cmp	r2, r6
 8013064:	d10a      	bne.n	801307c <__gethex+0x3f0>
 8013066:	1171      	asrs	r1, r6, #5
 8013068:	2201      	movs	r2, #1
 801306a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801306e:	f006 061f 	and.w	r6, r6, #31
 8013072:	fa02 f606 	lsl.w	r6, r2, r6
 8013076:	421e      	tst	r6, r3
 8013078:	bf18      	it	ne
 801307a:	4617      	movne	r7, r2
 801307c:	f047 0720 	orr.w	r7, r7, #32
 8013080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013082:	601c      	str	r4, [r3, #0]
 8013084:	9b04      	ldr	r3, [sp, #16]
 8013086:	601d      	str	r5, [r3, #0]
 8013088:	e695      	b.n	8012db6 <__gethex+0x12a>
 801308a:	4299      	cmp	r1, r3
 801308c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013090:	d8d8      	bhi.n	8013044 <__gethex+0x3b8>
 8013092:	68a3      	ldr	r3, [r4, #8]
 8013094:	459b      	cmp	fp, r3
 8013096:	db19      	blt.n	80130cc <__gethex+0x440>
 8013098:	6861      	ldr	r1, [r4, #4]
 801309a:	ee18 0a10 	vmov	r0, s16
 801309e:	3101      	adds	r1, #1
 80130a0:	f000 f91a 	bl	80132d8 <_Balloc>
 80130a4:	4681      	mov	r9, r0
 80130a6:	b918      	cbnz	r0, 80130b0 <__gethex+0x424>
 80130a8:	4b1a      	ldr	r3, [pc, #104]	; (8013114 <__gethex+0x488>)
 80130aa:	4602      	mov	r2, r0
 80130ac:	2184      	movs	r1, #132	; 0x84
 80130ae:	e6a8      	b.n	8012e02 <__gethex+0x176>
 80130b0:	6922      	ldr	r2, [r4, #16]
 80130b2:	3202      	adds	r2, #2
 80130b4:	f104 010c 	add.w	r1, r4, #12
 80130b8:	0092      	lsls	r2, r2, #2
 80130ba:	300c      	adds	r0, #12
 80130bc:	f7fc ffd0 	bl	8010060 <memcpy>
 80130c0:	4621      	mov	r1, r4
 80130c2:	ee18 0a10 	vmov	r0, s16
 80130c6:	f000 f947 	bl	8013358 <_Bfree>
 80130ca:	464c      	mov	r4, r9
 80130cc:	6923      	ldr	r3, [r4, #16]
 80130ce:	1c5a      	adds	r2, r3, #1
 80130d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130d4:	6122      	str	r2, [r4, #16]
 80130d6:	2201      	movs	r2, #1
 80130d8:	615a      	str	r2, [r3, #20]
 80130da:	e7bb      	b.n	8013054 <__gethex+0x3c8>
 80130dc:	6922      	ldr	r2, [r4, #16]
 80130de:	455a      	cmp	r2, fp
 80130e0:	dd0b      	ble.n	80130fa <__gethex+0x46e>
 80130e2:	2101      	movs	r1, #1
 80130e4:	4620      	mov	r0, r4
 80130e6:	f7ff fd69 	bl	8012bbc <rshift>
 80130ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130ee:	3501      	adds	r5, #1
 80130f0:	42ab      	cmp	r3, r5
 80130f2:	f6ff aed0 	blt.w	8012e96 <__gethex+0x20a>
 80130f6:	2701      	movs	r7, #1
 80130f8:	e7c0      	b.n	801307c <__gethex+0x3f0>
 80130fa:	f016 061f 	ands.w	r6, r6, #31
 80130fe:	d0fa      	beq.n	80130f6 <__gethex+0x46a>
 8013100:	449a      	add	sl, r3
 8013102:	f1c6 0620 	rsb	r6, r6, #32
 8013106:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801310a:	f000 f9db 	bl	80134c4 <__hi0bits>
 801310e:	42b0      	cmp	r0, r6
 8013110:	dbe7      	blt.n	80130e2 <__gethex+0x456>
 8013112:	e7f0      	b.n	80130f6 <__gethex+0x46a>
 8013114:	080162ba 	.word	0x080162ba

08013118 <L_shift>:
 8013118:	f1c2 0208 	rsb	r2, r2, #8
 801311c:	0092      	lsls	r2, r2, #2
 801311e:	b570      	push	{r4, r5, r6, lr}
 8013120:	f1c2 0620 	rsb	r6, r2, #32
 8013124:	6843      	ldr	r3, [r0, #4]
 8013126:	6804      	ldr	r4, [r0, #0]
 8013128:	fa03 f506 	lsl.w	r5, r3, r6
 801312c:	432c      	orrs	r4, r5
 801312e:	40d3      	lsrs	r3, r2
 8013130:	6004      	str	r4, [r0, #0]
 8013132:	f840 3f04 	str.w	r3, [r0, #4]!
 8013136:	4288      	cmp	r0, r1
 8013138:	d3f4      	bcc.n	8013124 <L_shift+0xc>
 801313a:	bd70      	pop	{r4, r5, r6, pc}

0801313c <__match>:
 801313c:	b530      	push	{r4, r5, lr}
 801313e:	6803      	ldr	r3, [r0, #0]
 8013140:	3301      	adds	r3, #1
 8013142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013146:	b914      	cbnz	r4, 801314e <__match+0x12>
 8013148:	6003      	str	r3, [r0, #0]
 801314a:	2001      	movs	r0, #1
 801314c:	bd30      	pop	{r4, r5, pc}
 801314e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013156:	2d19      	cmp	r5, #25
 8013158:	bf98      	it	ls
 801315a:	3220      	addls	r2, #32
 801315c:	42a2      	cmp	r2, r4
 801315e:	d0f0      	beq.n	8013142 <__match+0x6>
 8013160:	2000      	movs	r0, #0
 8013162:	e7f3      	b.n	801314c <__match+0x10>

08013164 <__hexnan>:
 8013164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013168:	680b      	ldr	r3, [r1, #0]
 801316a:	6801      	ldr	r1, [r0, #0]
 801316c:	115e      	asrs	r6, r3, #5
 801316e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013172:	f013 031f 	ands.w	r3, r3, #31
 8013176:	b087      	sub	sp, #28
 8013178:	bf18      	it	ne
 801317a:	3604      	addne	r6, #4
 801317c:	2500      	movs	r5, #0
 801317e:	1f37      	subs	r7, r6, #4
 8013180:	4682      	mov	sl, r0
 8013182:	4690      	mov	r8, r2
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	f846 5c04 	str.w	r5, [r6, #-4]
 801318a:	46b9      	mov	r9, r7
 801318c:	463c      	mov	r4, r7
 801318e:	9502      	str	r5, [sp, #8]
 8013190:	46ab      	mov	fp, r5
 8013192:	784a      	ldrb	r2, [r1, #1]
 8013194:	1c4b      	adds	r3, r1, #1
 8013196:	9303      	str	r3, [sp, #12]
 8013198:	b342      	cbz	r2, 80131ec <__hexnan+0x88>
 801319a:	4610      	mov	r0, r2
 801319c:	9105      	str	r1, [sp, #20]
 801319e:	9204      	str	r2, [sp, #16]
 80131a0:	f7ff fd5e 	bl	8012c60 <__hexdig_fun>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d14f      	bne.n	8013248 <__hexnan+0xe4>
 80131a8:	9a04      	ldr	r2, [sp, #16]
 80131aa:	9905      	ldr	r1, [sp, #20]
 80131ac:	2a20      	cmp	r2, #32
 80131ae:	d818      	bhi.n	80131e2 <__hexnan+0x7e>
 80131b0:	9b02      	ldr	r3, [sp, #8]
 80131b2:	459b      	cmp	fp, r3
 80131b4:	dd13      	ble.n	80131de <__hexnan+0x7a>
 80131b6:	454c      	cmp	r4, r9
 80131b8:	d206      	bcs.n	80131c8 <__hexnan+0x64>
 80131ba:	2d07      	cmp	r5, #7
 80131bc:	dc04      	bgt.n	80131c8 <__hexnan+0x64>
 80131be:	462a      	mov	r2, r5
 80131c0:	4649      	mov	r1, r9
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7ff ffa8 	bl	8013118 <L_shift>
 80131c8:	4544      	cmp	r4, r8
 80131ca:	d950      	bls.n	801326e <__hexnan+0x10a>
 80131cc:	2300      	movs	r3, #0
 80131ce:	f1a4 0904 	sub.w	r9, r4, #4
 80131d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80131d6:	f8cd b008 	str.w	fp, [sp, #8]
 80131da:	464c      	mov	r4, r9
 80131dc:	461d      	mov	r5, r3
 80131de:	9903      	ldr	r1, [sp, #12]
 80131e0:	e7d7      	b.n	8013192 <__hexnan+0x2e>
 80131e2:	2a29      	cmp	r2, #41	; 0x29
 80131e4:	d156      	bne.n	8013294 <__hexnan+0x130>
 80131e6:	3102      	adds	r1, #2
 80131e8:	f8ca 1000 	str.w	r1, [sl]
 80131ec:	f1bb 0f00 	cmp.w	fp, #0
 80131f0:	d050      	beq.n	8013294 <__hexnan+0x130>
 80131f2:	454c      	cmp	r4, r9
 80131f4:	d206      	bcs.n	8013204 <__hexnan+0xa0>
 80131f6:	2d07      	cmp	r5, #7
 80131f8:	dc04      	bgt.n	8013204 <__hexnan+0xa0>
 80131fa:	462a      	mov	r2, r5
 80131fc:	4649      	mov	r1, r9
 80131fe:	4620      	mov	r0, r4
 8013200:	f7ff ff8a 	bl	8013118 <L_shift>
 8013204:	4544      	cmp	r4, r8
 8013206:	d934      	bls.n	8013272 <__hexnan+0x10e>
 8013208:	f1a8 0204 	sub.w	r2, r8, #4
 801320c:	4623      	mov	r3, r4
 801320e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013212:	f842 1f04 	str.w	r1, [r2, #4]!
 8013216:	429f      	cmp	r7, r3
 8013218:	d2f9      	bcs.n	801320e <__hexnan+0xaa>
 801321a:	1b3b      	subs	r3, r7, r4
 801321c:	f023 0303 	bic.w	r3, r3, #3
 8013220:	3304      	adds	r3, #4
 8013222:	3401      	adds	r4, #1
 8013224:	3e03      	subs	r6, #3
 8013226:	42b4      	cmp	r4, r6
 8013228:	bf88      	it	hi
 801322a:	2304      	movhi	r3, #4
 801322c:	4443      	add	r3, r8
 801322e:	2200      	movs	r2, #0
 8013230:	f843 2b04 	str.w	r2, [r3], #4
 8013234:	429f      	cmp	r7, r3
 8013236:	d2fb      	bcs.n	8013230 <__hexnan+0xcc>
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	b91b      	cbnz	r3, 8013244 <__hexnan+0xe0>
 801323c:	4547      	cmp	r7, r8
 801323e:	d127      	bne.n	8013290 <__hexnan+0x12c>
 8013240:	2301      	movs	r3, #1
 8013242:	603b      	str	r3, [r7, #0]
 8013244:	2005      	movs	r0, #5
 8013246:	e026      	b.n	8013296 <__hexnan+0x132>
 8013248:	3501      	adds	r5, #1
 801324a:	2d08      	cmp	r5, #8
 801324c:	f10b 0b01 	add.w	fp, fp, #1
 8013250:	dd06      	ble.n	8013260 <__hexnan+0xfc>
 8013252:	4544      	cmp	r4, r8
 8013254:	d9c3      	bls.n	80131de <__hexnan+0x7a>
 8013256:	2300      	movs	r3, #0
 8013258:	f844 3c04 	str.w	r3, [r4, #-4]
 801325c:	2501      	movs	r5, #1
 801325e:	3c04      	subs	r4, #4
 8013260:	6822      	ldr	r2, [r4, #0]
 8013262:	f000 000f 	and.w	r0, r0, #15
 8013266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801326a:	6022      	str	r2, [r4, #0]
 801326c:	e7b7      	b.n	80131de <__hexnan+0x7a>
 801326e:	2508      	movs	r5, #8
 8013270:	e7b5      	b.n	80131de <__hexnan+0x7a>
 8013272:	9b01      	ldr	r3, [sp, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d0df      	beq.n	8013238 <__hexnan+0xd4>
 8013278:	f04f 32ff 	mov.w	r2, #4294967295
 801327c:	f1c3 0320 	rsb	r3, r3, #32
 8013280:	fa22 f303 	lsr.w	r3, r2, r3
 8013284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013288:	401a      	ands	r2, r3
 801328a:	f846 2c04 	str.w	r2, [r6, #-4]
 801328e:	e7d3      	b.n	8013238 <__hexnan+0xd4>
 8013290:	3f04      	subs	r7, #4
 8013292:	e7d1      	b.n	8013238 <__hexnan+0xd4>
 8013294:	2004      	movs	r0, #4
 8013296:	b007      	add	sp, #28
 8013298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801329c <_localeconv_r>:
 801329c:	4800      	ldr	r0, [pc, #0]	; (80132a0 <_localeconv_r+0x4>)
 801329e:	4770      	bx	lr
 80132a0:	20000500 	.word	0x20000500

080132a4 <malloc>:
 80132a4:	4b02      	ldr	r3, [pc, #8]	; (80132b0 <malloc+0xc>)
 80132a6:	4601      	mov	r1, r0
 80132a8:	6818      	ldr	r0, [r3, #0]
 80132aa:	f000 bd2f 	b.w	8013d0c <_malloc_r>
 80132ae:	bf00      	nop
 80132b0:	200003a8 	.word	0x200003a8

080132b4 <__ascii_mbtowc>:
 80132b4:	b082      	sub	sp, #8
 80132b6:	b901      	cbnz	r1, 80132ba <__ascii_mbtowc+0x6>
 80132b8:	a901      	add	r1, sp, #4
 80132ba:	b142      	cbz	r2, 80132ce <__ascii_mbtowc+0x1a>
 80132bc:	b14b      	cbz	r3, 80132d2 <__ascii_mbtowc+0x1e>
 80132be:	7813      	ldrb	r3, [r2, #0]
 80132c0:	600b      	str	r3, [r1, #0]
 80132c2:	7812      	ldrb	r2, [r2, #0]
 80132c4:	1e10      	subs	r0, r2, #0
 80132c6:	bf18      	it	ne
 80132c8:	2001      	movne	r0, #1
 80132ca:	b002      	add	sp, #8
 80132cc:	4770      	bx	lr
 80132ce:	4610      	mov	r0, r2
 80132d0:	e7fb      	b.n	80132ca <__ascii_mbtowc+0x16>
 80132d2:	f06f 0001 	mvn.w	r0, #1
 80132d6:	e7f8      	b.n	80132ca <__ascii_mbtowc+0x16>

080132d8 <_Balloc>:
 80132d8:	b570      	push	{r4, r5, r6, lr}
 80132da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132dc:	4604      	mov	r4, r0
 80132de:	460d      	mov	r5, r1
 80132e0:	b976      	cbnz	r6, 8013300 <_Balloc+0x28>
 80132e2:	2010      	movs	r0, #16
 80132e4:	f7ff ffde 	bl	80132a4 <malloc>
 80132e8:	4602      	mov	r2, r0
 80132ea:	6260      	str	r0, [r4, #36]	; 0x24
 80132ec:	b920      	cbnz	r0, 80132f8 <_Balloc+0x20>
 80132ee:	4b18      	ldr	r3, [pc, #96]	; (8013350 <_Balloc+0x78>)
 80132f0:	4818      	ldr	r0, [pc, #96]	; (8013354 <_Balloc+0x7c>)
 80132f2:	2166      	movs	r1, #102	; 0x66
 80132f4:	f7fe fdb8 	bl	8011e68 <__assert_func>
 80132f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132fc:	6006      	str	r6, [r0, #0]
 80132fe:	60c6      	str	r6, [r0, #12]
 8013300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013302:	68f3      	ldr	r3, [r6, #12]
 8013304:	b183      	cbz	r3, 8013328 <_Balloc+0x50>
 8013306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801330e:	b9b8      	cbnz	r0, 8013340 <_Balloc+0x68>
 8013310:	2101      	movs	r1, #1
 8013312:	fa01 f605 	lsl.w	r6, r1, r5
 8013316:	1d72      	adds	r2, r6, #5
 8013318:	0092      	lsls	r2, r2, #2
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fc97 	bl	8013c4e <_calloc_r>
 8013320:	b160      	cbz	r0, 801333c <_Balloc+0x64>
 8013322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013326:	e00e      	b.n	8013346 <_Balloc+0x6e>
 8013328:	2221      	movs	r2, #33	; 0x21
 801332a:	2104      	movs	r1, #4
 801332c:	4620      	mov	r0, r4
 801332e:	f000 fc8e 	bl	8013c4e <_calloc_r>
 8013332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013334:	60f0      	str	r0, [r6, #12]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d1e4      	bne.n	8013306 <_Balloc+0x2e>
 801333c:	2000      	movs	r0, #0
 801333e:	bd70      	pop	{r4, r5, r6, pc}
 8013340:	6802      	ldr	r2, [r0, #0]
 8013342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013346:	2300      	movs	r3, #0
 8013348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801334c:	e7f7      	b.n	801333e <_Balloc+0x66>
 801334e:	bf00      	nop
 8013350:	08015fe9 	.word	0x08015fe9
 8013354:	08016348 	.word	0x08016348

08013358 <_Bfree>:
 8013358:	b570      	push	{r4, r5, r6, lr}
 801335a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801335c:	4605      	mov	r5, r0
 801335e:	460c      	mov	r4, r1
 8013360:	b976      	cbnz	r6, 8013380 <_Bfree+0x28>
 8013362:	2010      	movs	r0, #16
 8013364:	f7ff ff9e 	bl	80132a4 <malloc>
 8013368:	4602      	mov	r2, r0
 801336a:	6268      	str	r0, [r5, #36]	; 0x24
 801336c:	b920      	cbnz	r0, 8013378 <_Bfree+0x20>
 801336e:	4b09      	ldr	r3, [pc, #36]	; (8013394 <_Bfree+0x3c>)
 8013370:	4809      	ldr	r0, [pc, #36]	; (8013398 <_Bfree+0x40>)
 8013372:	218a      	movs	r1, #138	; 0x8a
 8013374:	f7fe fd78 	bl	8011e68 <__assert_func>
 8013378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801337c:	6006      	str	r6, [r0, #0]
 801337e:	60c6      	str	r6, [r0, #12]
 8013380:	b13c      	cbz	r4, 8013392 <_Bfree+0x3a>
 8013382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013384:	6862      	ldr	r2, [r4, #4]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801338c:	6021      	str	r1, [r4, #0]
 801338e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013392:	bd70      	pop	{r4, r5, r6, pc}
 8013394:	08015fe9 	.word	0x08015fe9
 8013398:	08016348 	.word	0x08016348

0801339c <__multadd>:
 801339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a0:	690e      	ldr	r6, [r1, #16]
 80133a2:	4607      	mov	r7, r0
 80133a4:	4698      	mov	r8, r3
 80133a6:	460c      	mov	r4, r1
 80133a8:	f101 0014 	add.w	r0, r1, #20
 80133ac:	2300      	movs	r3, #0
 80133ae:	6805      	ldr	r5, [r0, #0]
 80133b0:	b2a9      	uxth	r1, r5
 80133b2:	fb02 8101 	mla	r1, r2, r1, r8
 80133b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80133ba:	0c2d      	lsrs	r5, r5, #16
 80133bc:	fb02 c505 	mla	r5, r2, r5, ip
 80133c0:	b289      	uxth	r1, r1
 80133c2:	3301      	adds	r3, #1
 80133c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80133c8:	429e      	cmp	r6, r3
 80133ca:	f840 1b04 	str.w	r1, [r0], #4
 80133ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80133d2:	dcec      	bgt.n	80133ae <__multadd+0x12>
 80133d4:	f1b8 0f00 	cmp.w	r8, #0
 80133d8:	d022      	beq.n	8013420 <__multadd+0x84>
 80133da:	68a3      	ldr	r3, [r4, #8]
 80133dc:	42b3      	cmp	r3, r6
 80133de:	dc19      	bgt.n	8013414 <__multadd+0x78>
 80133e0:	6861      	ldr	r1, [r4, #4]
 80133e2:	4638      	mov	r0, r7
 80133e4:	3101      	adds	r1, #1
 80133e6:	f7ff ff77 	bl	80132d8 <_Balloc>
 80133ea:	4605      	mov	r5, r0
 80133ec:	b928      	cbnz	r0, 80133fa <__multadd+0x5e>
 80133ee:	4602      	mov	r2, r0
 80133f0:	4b0d      	ldr	r3, [pc, #52]	; (8013428 <__multadd+0x8c>)
 80133f2:	480e      	ldr	r0, [pc, #56]	; (801342c <__multadd+0x90>)
 80133f4:	21b5      	movs	r1, #181	; 0xb5
 80133f6:	f7fe fd37 	bl	8011e68 <__assert_func>
 80133fa:	6922      	ldr	r2, [r4, #16]
 80133fc:	3202      	adds	r2, #2
 80133fe:	f104 010c 	add.w	r1, r4, #12
 8013402:	0092      	lsls	r2, r2, #2
 8013404:	300c      	adds	r0, #12
 8013406:	f7fc fe2b 	bl	8010060 <memcpy>
 801340a:	4621      	mov	r1, r4
 801340c:	4638      	mov	r0, r7
 801340e:	f7ff ffa3 	bl	8013358 <_Bfree>
 8013412:	462c      	mov	r4, r5
 8013414:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013418:	3601      	adds	r6, #1
 801341a:	f8c3 8014 	str.w	r8, [r3, #20]
 801341e:	6126      	str	r6, [r4, #16]
 8013420:	4620      	mov	r0, r4
 8013422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013426:	bf00      	nop
 8013428:	080162ba 	.word	0x080162ba
 801342c:	08016348 	.word	0x08016348

08013430 <__s2b>:
 8013430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013434:	460c      	mov	r4, r1
 8013436:	4615      	mov	r5, r2
 8013438:	461f      	mov	r7, r3
 801343a:	2209      	movs	r2, #9
 801343c:	3308      	adds	r3, #8
 801343e:	4606      	mov	r6, r0
 8013440:	fb93 f3f2 	sdiv	r3, r3, r2
 8013444:	2100      	movs	r1, #0
 8013446:	2201      	movs	r2, #1
 8013448:	429a      	cmp	r2, r3
 801344a:	db09      	blt.n	8013460 <__s2b+0x30>
 801344c:	4630      	mov	r0, r6
 801344e:	f7ff ff43 	bl	80132d8 <_Balloc>
 8013452:	b940      	cbnz	r0, 8013466 <__s2b+0x36>
 8013454:	4602      	mov	r2, r0
 8013456:	4b19      	ldr	r3, [pc, #100]	; (80134bc <__s2b+0x8c>)
 8013458:	4819      	ldr	r0, [pc, #100]	; (80134c0 <__s2b+0x90>)
 801345a:	21ce      	movs	r1, #206	; 0xce
 801345c:	f7fe fd04 	bl	8011e68 <__assert_func>
 8013460:	0052      	lsls	r2, r2, #1
 8013462:	3101      	adds	r1, #1
 8013464:	e7f0      	b.n	8013448 <__s2b+0x18>
 8013466:	9b08      	ldr	r3, [sp, #32]
 8013468:	6143      	str	r3, [r0, #20]
 801346a:	2d09      	cmp	r5, #9
 801346c:	f04f 0301 	mov.w	r3, #1
 8013470:	6103      	str	r3, [r0, #16]
 8013472:	dd16      	ble.n	80134a2 <__s2b+0x72>
 8013474:	f104 0909 	add.w	r9, r4, #9
 8013478:	46c8      	mov	r8, r9
 801347a:	442c      	add	r4, r5
 801347c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013480:	4601      	mov	r1, r0
 8013482:	3b30      	subs	r3, #48	; 0x30
 8013484:	220a      	movs	r2, #10
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ff88 	bl	801339c <__multadd>
 801348c:	45a0      	cmp	r8, r4
 801348e:	d1f5      	bne.n	801347c <__s2b+0x4c>
 8013490:	f1a5 0408 	sub.w	r4, r5, #8
 8013494:	444c      	add	r4, r9
 8013496:	1b2d      	subs	r5, r5, r4
 8013498:	1963      	adds	r3, r4, r5
 801349a:	42bb      	cmp	r3, r7
 801349c:	db04      	blt.n	80134a8 <__s2b+0x78>
 801349e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a2:	340a      	adds	r4, #10
 80134a4:	2509      	movs	r5, #9
 80134a6:	e7f6      	b.n	8013496 <__s2b+0x66>
 80134a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80134ac:	4601      	mov	r1, r0
 80134ae:	3b30      	subs	r3, #48	; 0x30
 80134b0:	220a      	movs	r2, #10
 80134b2:	4630      	mov	r0, r6
 80134b4:	f7ff ff72 	bl	801339c <__multadd>
 80134b8:	e7ee      	b.n	8013498 <__s2b+0x68>
 80134ba:	bf00      	nop
 80134bc:	080162ba 	.word	0x080162ba
 80134c0:	08016348 	.word	0x08016348

080134c4 <__hi0bits>:
 80134c4:	0c03      	lsrs	r3, r0, #16
 80134c6:	041b      	lsls	r3, r3, #16
 80134c8:	b9d3      	cbnz	r3, 8013500 <__hi0bits+0x3c>
 80134ca:	0400      	lsls	r0, r0, #16
 80134cc:	2310      	movs	r3, #16
 80134ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80134d2:	bf04      	itt	eq
 80134d4:	0200      	lsleq	r0, r0, #8
 80134d6:	3308      	addeq	r3, #8
 80134d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80134dc:	bf04      	itt	eq
 80134de:	0100      	lsleq	r0, r0, #4
 80134e0:	3304      	addeq	r3, #4
 80134e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80134e6:	bf04      	itt	eq
 80134e8:	0080      	lsleq	r0, r0, #2
 80134ea:	3302      	addeq	r3, #2
 80134ec:	2800      	cmp	r0, #0
 80134ee:	db05      	blt.n	80134fc <__hi0bits+0x38>
 80134f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134f4:	f103 0301 	add.w	r3, r3, #1
 80134f8:	bf08      	it	eq
 80134fa:	2320      	moveq	r3, #32
 80134fc:	4618      	mov	r0, r3
 80134fe:	4770      	bx	lr
 8013500:	2300      	movs	r3, #0
 8013502:	e7e4      	b.n	80134ce <__hi0bits+0xa>

08013504 <__lo0bits>:
 8013504:	6803      	ldr	r3, [r0, #0]
 8013506:	f013 0207 	ands.w	r2, r3, #7
 801350a:	4601      	mov	r1, r0
 801350c:	d00b      	beq.n	8013526 <__lo0bits+0x22>
 801350e:	07da      	lsls	r2, r3, #31
 8013510:	d424      	bmi.n	801355c <__lo0bits+0x58>
 8013512:	0798      	lsls	r0, r3, #30
 8013514:	bf49      	itett	mi
 8013516:	085b      	lsrmi	r3, r3, #1
 8013518:	089b      	lsrpl	r3, r3, #2
 801351a:	2001      	movmi	r0, #1
 801351c:	600b      	strmi	r3, [r1, #0]
 801351e:	bf5c      	itt	pl
 8013520:	600b      	strpl	r3, [r1, #0]
 8013522:	2002      	movpl	r0, #2
 8013524:	4770      	bx	lr
 8013526:	b298      	uxth	r0, r3
 8013528:	b9b0      	cbnz	r0, 8013558 <__lo0bits+0x54>
 801352a:	0c1b      	lsrs	r3, r3, #16
 801352c:	2010      	movs	r0, #16
 801352e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013532:	bf04      	itt	eq
 8013534:	0a1b      	lsreq	r3, r3, #8
 8013536:	3008      	addeq	r0, #8
 8013538:	071a      	lsls	r2, r3, #28
 801353a:	bf04      	itt	eq
 801353c:	091b      	lsreq	r3, r3, #4
 801353e:	3004      	addeq	r0, #4
 8013540:	079a      	lsls	r2, r3, #30
 8013542:	bf04      	itt	eq
 8013544:	089b      	lsreq	r3, r3, #2
 8013546:	3002      	addeq	r0, #2
 8013548:	07da      	lsls	r2, r3, #31
 801354a:	d403      	bmi.n	8013554 <__lo0bits+0x50>
 801354c:	085b      	lsrs	r3, r3, #1
 801354e:	f100 0001 	add.w	r0, r0, #1
 8013552:	d005      	beq.n	8013560 <__lo0bits+0x5c>
 8013554:	600b      	str	r3, [r1, #0]
 8013556:	4770      	bx	lr
 8013558:	4610      	mov	r0, r2
 801355a:	e7e8      	b.n	801352e <__lo0bits+0x2a>
 801355c:	2000      	movs	r0, #0
 801355e:	4770      	bx	lr
 8013560:	2020      	movs	r0, #32
 8013562:	4770      	bx	lr

08013564 <__i2b>:
 8013564:	b510      	push	{r4, lr}
 8013566:	460c      	mov	r4, r1
 8013568:	2101      	movs	r1, #1
 801356a:	f7ff feb5 	bl	80132d8 <_Balloc>
 801356e:	4602      	mov	r2, r0
 8013570:	b928      	cbnz	r0, 801357e <__i2b+0x1a>
 8013572:	4b05      	ldr	r3, [pc, #20]	; (8013588 <__i2b+0x24>)
 8013574:	4805      	ldr	r0, [pc, #20]	; (801358c <__i2b+0x28>)
 8013576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801357a:	f7fe fc75 	bl	8011e68 <__assert_func>
 801357e:	2301      	movs	r3, #1
 8013580:	6144      	str	r4, [r0, #20]
 8013582:	6103      	str	r3, [r0, #16]
 8013584:	bd10      	pop	{r4, pc}
 8013586:	bf00      	nop
 8013588:	080162ba 	.word	0x080162ba
 801358c:	08016348 	.word	0x08016348

08013590 <__multiply>:
 8013590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013594:	4614      	mov	r4, r2
 8013596:	690a      	ldr	r2, [r1, #16]
 8013598:	6923      	ldr	r3, [r4, #16]
 801359a:	429a      	cmp	r2, r3
 801359c:	bfb8      	it	lt
 801359e:	460b      	movlt	r3, r1
 80135a0:	460d      	mov	r5, r1
 80135a2:	bfbc      	itt	lt
 80135a4:	4625      	movlt	r5, r4
 80135a6:	461c      	movlt	r4, r3
 80135a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80135ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80135b0:	68ab      	ldr	r3, [r5, #8]
 80135b2:	6869      	ldr	r1, [r5, #4]
 80135b4:	eb0a 0709 	add.w	r7, sl, r9
 80135b8:	42bb      	cmp	r3, r7
 80135ba:	b085      	sub	sp, #20
 80135bc:	bfb8      	it	lt
 80135be:	3101      	addlt	r1, #1
 80135c0:	f7ff fe8a 	bl	80132d8 <_Balloc>
 80135c4:	b930      	cbnz	r0, 80135d4 <__multiply+0x44>
 80135c6:	4602      	mov	r2, r0
 80135c8:	4b42      	ldr	r3, [pc, #264]	; (80136d4 <__multiply+0x144>)
 80135ca:	4843      	ldr	r0, [pc, #268]	; (80136d8 <__multiply+0x148>)
 80135cc:	f240 115d 	movw	r1, #349	; 0x15d
 80135d0:	f7fe fc4a 	bl	8011e68 <__assert_func>
 80135d4:	f100 0614 	add.w	r6, r0, #20
 80135d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80135dc:	4633      	mov	r3, r6
 80135de:	2200      	movs	r2, #0
 80135e0:	4543      	cmp	r3, r8
 80135e2:	d31e      	bcc.n	8013622 <__multiply+0x92>
 80135e4:	f105 0c14 	add.w	ip, r5, #20
 80135e8:	f104 0314 	add.w	r3, r4, #20
 80135ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80135f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80135f4:	9202      	str	r2, [sp, #8]
 80135f6:	ebac 0205 	sub.w	r2, ip, r5
 80135fa:	3a15      	subs	r2, #21
 80135fc:	f022 0203 	bic.w	r2, r2, #3
 8013600:	3204      	adds	r2, #4
 8013602:	f105 0115 	add.w	r1, r5, #21
 8013606:	458c      	cmp	ip, r1
 8013608:	bf38      	it	cc
 801360a:	2204      	movcc	r2, #4
 801360c:	9201      	str	r2, [sp, #4]
 801360e:	9a02      	ldr	r2, [sp, #8]
 8013610:	9303      	str	r3, [sp, #12]
 8013612:	429a      	cmp	r2, r3
 8013614:	d808      	bhi.n	8013628 <__multiply+0x98>
 8013616:	2f00      	cmp	r7, #0
 8013618:	dc55      	bgt.n	80136c6 <__multiply+0x136>
 801361a:	6107      	str	r7, [r0, #16]
 801361c:	b005      	add	sp, #20
 801361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013622:	f843 2b04 	str.w	r2, [r3], #4
 8013626:	e7db      	b.n	80135e0 <__multiply+0x50>
 8013628:	f8b3 a000 	ldrh.w	sl, [r3]
 801362c:	f1ba 0f00 	cmp.w	sl, #0
 8013630:	d020      	beq.n	8013674 <__multiply+0xe4>
 8013632:	f105 0e14 	add.w	lr, r5, #20
 8013636:	46b1      	mov	r9, r6
 8013638:	2200      	movs	r2, #0
 801363a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801363e:	f8d9 b000 	ldr.w	fp, [r9]
 8013642:	b2a1      	uxth	r1, r4
 8013644:	fa1f fb8b 	uxth.w	fp, fp
 8013648:	fb0a b101 	mla	r1, sl, r1, fp
 801364c:	4411      	add	r1, r2
 801364e:	f8d9 2000 	ldr.w	r2, [r9]
 8013652:	0c24      	lsrs	r4, r4, #16
 8013654:	0c12      	lsrs	r2, r2, #16
 8013656:	fb0a 2404 	mla	r4, sl, r4, r2
 801365a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801365e:	b289      	uxth	r1, r1
 8013660:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013664:	45f4      	cmp	ip, lr
 8013666:	f849 1b04 	str.w	r1, [r9], #4
 801366a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801366e:	d8e4      	bhi.n	801363a <__multiply+0xaa>
 8013670:	9901      	ldr	r1, [sp, #4]
 8013672:	5072      	str	r2, [r6, r1]
 8013674:	9a03      	ldr	r2, [sp, #12]
 8013676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801367a:	3304      	adds	r3, #4
 801367c:	f1b9 0f00 	cmp.w	r9, #0
 8013680:	d01f      	beq.n	80136c2 <__multiply+0x132>
 8013682:	6834      	ldr	r4, [r6, #0]
 8013684:	f105 0114 	add.w	r1, r5, #20
 8013688:	46b6      	mov	lr, r6
 801368a:	f04f 0a00 	mov.w	sl, #0
 801368e:	880a      	ldrh	r2, [r1, #0]
 8013690:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013694:	fb09 b202 	mla	r2, r9, r2, fp
 8013698:	4492      	add	sl, r2
 801369a:	b2a4      	uxth	r4, r4
 801369c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80136a0:	f84e 4b04 	str.w	r4, [lr], #4
 80136a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80136a8:	f8be 2000 	ldrh.w	r2, [lr]
 80136ac:	0c24      	lsrs	r4, r4, #16
 80136ae:	fb09 2404 	mla	r4, r9, r4, r2
 80136b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80136b6:	458c      	cmp	ip, r1
 80136b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80136bc:	d8e7      	bhi.n	801368e <__multiply+0xfe>
 80136be:	9a01      	ldr	r2, [sp, #4]
 80136c0:	50b4      	str	r4, [r6, r2]
 80136c2:	3604      	adds	r6, #4
 80136c4:	e7a3      	b.n	801360e <__multiply+0x7e>
 80136c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d1a5      	bne.n	801361a <__multiply+0x8a>
 80136ce:	3f01      	subs	r7, #1
 80136d0:	e7a1      	b.n	8013616 <__multiply+0x86>
 80136d2:	bf00      	nop
 80136d4:	080162ba 	.word	0x080162ba
 80136d8:	08016348 	.word	0x08016348

080136dc <__pow5mult>:
 80136dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136e0:	4615      	mov	r5, r2
 80136e2:	f012 0203 	ands.w	r2, r2, #3
 80136e6:	4606      	mov	r6, r0
 80136e8:	460f      	mov	r7, r1
 80136ea:	d007      	beq.n	80136fc <__pow5mult+0x20>
 80136ec:	4c25      	ldr	r4, [pc, #148]	; (8013784 <__pow5mult+0xa8>)
 80136ee:	3a01      	subs	r2, #1
 80136f0:	2300      	movs	r3, #0
 80136f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136f6:	f7ff fe51 	bl	801339c <__multadd>
 80136fa:	4607      	mov	r7, r0
 80136fc:	10ad      	asrs	r5, r5, #2
 80136fe:	d03d      	beq.n	801377c <__pow5mult+0xa0>
 8013700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013702:	b97c      	cbnz	r4, 8013724 <__pow5mult+0x48>
 8013704:	2010      	movs	r0, #16
 8013706:	f7ff fdcd 	bl	80132a4 <malloc>
 801370a:	4602      	mov	r2, r0
 801370c:	6270      	str	r0, [r6, #36]	; 0x24
 801370e:	b928      	cbnz	r0, 801371c <__pow5mult+0x40>
 8013710:	4b1d      	ldr	r3, [pc, #116]	; (8013788 <__pow5mult+0xac>)
 8013712:	481e      	ldr	r0, [pc, #120]	; (801378c <__pow5mult+0xb0>)
 8013714:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013718:	f7fe fba6 	bl	8011e68 <__assert_func>
 801371c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013720:	6004      	str	r4, [r0, #0]
 8013722:	60c4      	str	r4, [r0, #12]
 8013724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801372c:	b94c      	cbnz	r4, 8013742 <__pow5mult+0x66>
 801372e:	f240 2171 	movw	r1, #625	; 0x271
 8013732:	4630      	mov	r0, r6
 8013734:	f7ff ff16 	bl	8013564 <__i2b>
 8013738:	2300      	movs	r3, #0
 801373a:	f8c8 0008 	str.w	r0, [r8, #8]
 801373e:	4604      	mov	r4, r0
 8013740:	6003      	str	r3, [r0, #0]
 8013742:	f04f 0900 	mov.w	r9, #0
 8013746:	07eb      	lsls	r3, r5, #31
 8013748:	d50a      	bpl.n	8013760 <__pow5mult+0x84>
 801374a:	4639      	mov	r1, r7
 801374c:	4622      	mov	r2, r4
 801374e:	4630      	mov	r0, r6
 8013750:	f7ff ff1e 	bl	8013590 <__multiply>
 8013754:	4639      	mov	r1, r7
 8013756:	4680      	mov	r8, r0
 8013758:	4630      	mov	r0, r6
 801375a:	f7ff fdfd 	bl	8013358 <_Bfree>
 801375e:	4647      	mov	r7, r8
 8013760:	106d      	asrs	r5, r5, #1
 8013762:	d00b      	beq.n	801377c <__pow5mult+0xa0>
 8013764:	6820      	ldr	r0, [r4, #0]
 8013766:	b938      	cbnz	r0, 8013778 <__pow5mult+0x9c>
 8013768:	4622      	mov	r2, r4
 801376a:	4621      	mov	r1, r4
 801376c:	4630      	mov	r0, r6
 801376e:	f7ff ff0f 	bl	8013590 <__multiply>
 8013772:	6020      	str	r0, [r4, #0]
 8013774:	f8c0 9000 	str.w	r9, [r0]
 8013778:	4604      	mov	r4, r0
 801377a:	e7e4      	b.n	8013746 <__pow5mult+0x6a>
 801377c:	4638      	mov	r0, r7
 801377e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013782:	bf00      	nop
 8013784:	08016498 	.word	0x08016498
 8013788:	08015fe9 	.word	0x08015fe9
 801378c:	08016348 	.word	0x08016348

08013790 <__lshift>:
 8013790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013794:	460c      	mov	r4, r1
 8013796:	6849      	ldr	r1, [r1, #4]
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801379e:	68a3      	ldr	r3, [r4, #8]
 80137a0:	4607      	mov	r7, r0
 80137a2:	4691      	mov	r9, r2
 80137a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137a8:	f108 0601 	add.w	r6, r8, #1
 80137ac:	42b3      	cmp	r3, r6
 80137ae:	db0b      	blt.n	80137c8 <__lshift+0x38>
 80137b0:	4638      	mov	r0, r7
 80137b2:	f7ff fd91 	bl	80132d8 <_Balloc>
 80137b6:	4605      	mov	r5, r0
 80137b8:	b948      	cbnz	r0, 80137ce <__lshift+0x3e>
 80137ba:	4602      	mov	r2, r0
 80137bc:	4b28      	ldr	r3, [pc, #160]	; (8013860 <__lshift+0xd0>)
 80137be:	4829      	ldr	r0, [pc, #164]	; (8013864 <__lshift+0xd4>)
 80137c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80137c4:	f7fe fb50 	bl	8011e68 <__assert_func>
 80137c8:	3101      	adds	r1, #1
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	e7ee      	b.n	80137ac <__lshift+0x1c>
 80137ce:	2300      	movs	r3, #0
 80137d0:	f100 0114 	add.w	r1, r0, #20
 80137d4:	f100 0210 	add.w	r2, r0, #16
 80137d8:	4618      	mov	r0, r3
 80137da:	4553      	cmp	r3, sl
 80137dc:	db33      	blt.n	8013846 <__lshift+0xb6>
 80137de:	6920      	ldr	r0, [r4, #16]
 80137e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137e4:	f104 0314 	add.w	r3, r4, #20
 80137e8:	f019 091f 	ands.w	r9, r9, #31
 80137ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137f4:	d02b      	beq.n	801384e <__lshift+0xbe>
 80137f6:	f1c9 0e20 	rsb	lr, r9, #32
 80137fa:	468a      	mov	sl, r1
 80137fc:	2200      	movs	r2, #0
 80137fe:	6818      	ldr	r0, [r3, #0]
 8013800:	fa00 f009 	lsl.w	r0, r0, r9
 8013804:	4302      	orrs	r2, r0
 8013806:	f84a 2b04 	str.w	r2, [sl], #4
 801380a:	f853 2b04 	ldr.w	r2, [r3], #4
 801380e:	459c      	cmp	ip, r3
 8013810:	fa22 f20e 	lsr.w	r2, r2, lr
 8013814:	d8f3      	bhi.n	80137fe <__lshift+0x6e>
 8013816:	ebac 0304 	sub.w	r3, ip, r4
 801381a:	3b15      	subs	r3, #21
 801381c:	f023 0303 	bic.w	r3, r3, #3
 8013820:	3304      	adds	r3, #4
 8013822:	f104 0015 	add.w	r0, r4, #21
 8013826:	4584      	cmp	ip, r0
 8013828:	bf38      	it	cc
 801382a:	2304      	movcc	r3, #4
 801382c:	50ca      	str	r2, [r1, r3]
 801382e:	b10a      	cbz	r2, 8013834 <__lshift+0xa4>
 8013830:	f108 0602 	add.w	r6, r8, #2
 8013834:	3e01      	subs	r6, #1
 8013836:	4638      	mov	r0, r7
 8013838:	612e      	str	r6, [r5, #16]
 801383a:	4621      	mov	r1, r4
 801383c:	f7ff fd8c 	bl	8013358 <_Bfree>
 8013840:	4628      	mov	r0, r5
 8013842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013846:	f842 0f04 	str.w	r0, [r2, #4]!
 801384a:	3301      	adds	r3, #1
 801384c:	e7c5      	b.n	80137da <__lshift+0x4a>
 801384e:	3904      	subs	r1, #4
 8013850:	f853 2b04 	ldr.w	r2, [r3], #4
 8013854:	f841 2f04 	str.w	r2, [r1, #4]!
 8013858:	459c      	cmp	ip, r3
 801385a:	d8f9      	bhi.n	8013850 <__lshift+0xc0>
 801385c:	e7ea      	b.n	8013834 <__lshift+0xa4>
 801385e:	bf00      	nop
 8013860:	080162ba 	.word	0x080162ba
 8013864:	08016348 	.word	0x08016348

08013868 <__mcmp>:
 8013868:	b530      	push	{r4, r5, lr}
 801386a:	6902      	ldr	r2, [r0, #16]
 801386c:	690c      	ldr	r4, [r1, #16]
 801386e:	1b12      	subs	r2, r2, r4
 8013870:	d10e      	bne.n	8013890 <__mcmp+0x28>
 8013872:	f100 0314 	add.w	r3, r0, #20
 8013876:	3114      	adds	r1, #20
 8013878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801387c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013888:	42a5      	cmp	r5, r4
 801388a:	d003      	beq.n	8013894 <__mcmp+0x2c>
 801388c:	d305      	bcc.n	801389a <__mcmp+0x32>
 801388e:	2201      	movs	r2, #1
 8013890:	4610      	mov	r0, r2
 8013892:	bd30      	pop	{r4, r5, pc}
 8013894:	4283      	cmp	r3, r0
 8013896:	d3f3      	bcc.n	8013880 <__mcmp+0x18>
 8013898:	e7fa      	b.n	8013890 <__mcmp+0x28>
 801389a:	f04f 32ff 	mov.w	r2, #4294967295
 801389e:	e7f7      	b.n	8013890 <__mcmp+0x28>

080138a0 <__mdiff>:
 80138a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a4:	460c      	mov	r4, r1
 80138a6:	4606      	mov	r6, r0
 80138a8:	4611      	mov	r1, r2
 80138aa:	4620      	mov	r0, r4
 80138ac:	4617      	mov	r7, r2
 80138ae:	f7ff ffdb 	bl	8013868 <__mcmp>
 80138b2:	1e05      	subs	r5, r0, #0
 80138b4:	d110      	bne.n	80138d8 <__mdiff+0x38>
 80138b6:	4629      	mov	r1, r5
 80138b8:	4630      	mov	r0, r6
 80138ba:	f7ff fd0d 	bl	80132d8 <_Balloc>
 80138be:	b930      	cbnz	r0, 80138ce <__mdiff+0x2e>
 80138c0:	4b39      	ldr	r3, [pc, #228]	; (80139a8 <__mdiff+0x108>)
 80138c2:	4602      	mov	r2, r0
 80138c4:	f240 2132 	movw	r1, #562	; 0x232
 80138c8:	4838      	ldr	r0, [pc, #224]	; (80139ac <__mdiff+0x10c>)
 80138ca:	f7fe facd 	bl	8011e68 <__assert_func>
 80138ce:	2301      	movs	r3, #1
 80138d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80138d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d8:	bfa4      	itt	ge
 80138da:	463b      	movge	r3, r7
 80138dc:	4627      	movge	r7, r4
 80138de:	4630      	mov	r0, r6
 80138e0:	6879      	ldr	r1, [r7, #4]
 80138e2:	bfa6      	itte	ge
 80138e4:	461c      	movge	r4, r3
 80138e6:	2500      	movge	r5, #0
 80138e8:	2501      	movlt	r5, #1
 80138ea:	f7ff fcf5 	bl	80132d8 <_Balloc>
 80138ee:	b920      	cbnz	r0, 80138fa <__mdiff+0x5a>
 80138f0:	4b2d      	ldr	r3, [pc, #180]	; (80139a8 <__mdiff+0x108>)
 80138f2:	4602      	mov	r2, r0
 80138f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80138f8:	e7e6      	b.n	80138c8 <__mdiff+0x28>
 80138fa:	693e      	ldr	r6, [r7, #16]
 80138fc:	60c5      	str	r5, [r0, #12]
 80138fe:	6925      	ldr	r5, [r4, #16]
 8013900:	f107 0114 	add.w	r1, r7, #20
 8013904:	f104 0914 	add.w	r9, r4, #20
 8013908:	f100 0e14 	add.w	lr, r0, #20
 801390c:	f107 0210 	add.w	r2, r7, #16
 8013910:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013914:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013918:	46f2      	mov	sl, lr
 801391a:	2700      	movs	r7, #0
 801391c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013920:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013924:	fa1f f883 	uxth.w	r8, r3
 8013928:	fa17 f78b 	uxtah	r7, r7, fp
 801392c:	0c1b      	lsrs	r3, r3, #16
 801392e:	eba7 0808 	sub.w	r8, r7, r8
 8013932:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013936:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801393a:	fa1f f888 	uxth.w	r8, r8
 801393e:	141f      	asrs	r7, r3, #16
 8013940:	454d      	cmp	r5, r9
 8013942:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013946:	f84a 3b04 	str.w	r3, [sl], #4
 801394a:	d8e7      	bhi.n	801391c <__mdiff+0x7c>
 801394c:	1b2b      	subs	r3, r5, r4
 801394e:	3b15      	subs	r3, #21
 8013950:	f023 0303 	bic.w	r3, r3, #3
 8013954:	3304      	adds	r3, #4
 8013956:	3415      	adds	r4, #21
 8013958:	42a5      	cmp	r5, r4
 801395a:	bf38      	it	cc
 801395c:	2304      	movcc	r3, #4
 801395e:	4419      	add	r1, r3
 8013960:	4473      	add	r3, lr
 8013962:	469e      	mov	lr, r3
 8013964:	460d      	mov	r5, r1
 8013966:	4565      	cmp	r5, ip
 8013968:	d30e      	bcc.n	8013988 <__mdiff+0xe8>
 801396a:	f10c 0203 	add.w	r2, ip, #3
 801396e:	1a52      	subs	r2, r2, r1
 8013970:	f022 0203 	bic.w	r2, r2, #3
 8013974:	3903      	subs	r1, #3
 8013976:	458c      	cmp	ip, r1
 8013978:	bf38      	it	cc
 801397a:	2200      	movcc	r2, #0
 801397c:	441a      	add	r2, r3
 801397e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013982:	b17b      	cbz	r3, 80139a4 <__mdiff+0x104>
 8013984:	6106      	str	r6, [r0, #16]
 8013986:	e7a5      	b.n	80138d4 <__mdiff+0x34>
 8013988:	f855 8b04 	ldr.w	r8, [r5], #4
 801398c:	fa17 f488 	uxtah	r4, r7, r8
 8013990:	1422      	asrs	r2, r4, #16
 8013992:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013996:	b2a4      	uxth	r4, r4
 8013998:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801399c:	f84e 4b04 	str.w	r4, [lr], #4
 80139a0:	1417      	asrs	r7, r2, #16
 80139a2:	e7e0      	b.n	8013966 <__mdiff+0xc6>
 80139a4:	3e01      	subs	r6, #1
 80139a6:	e7ea      	b.n	801397e <__mdiff+0xde>
 80139a8:	080162ba 	.word	0x080162ba
 80139ac:	08016348 	.word	0x08016348

080139b0 <__ulp>:
 80139b0:	b082      	sub	sp, #8
 80139b2:	ed8d 0b00 	vstr	d0, [sp]
 80139b6:	9b01      	ldr	r3, [sp, #4]
 80139b8:	4912      	ldr	r1, [pc, #72]	; (8013a04 <__ulp+0x54>)
 80139ba:	4019      	ands	r1, r3
 80139bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80139c0:	2900      	cmp	r1, #0
 80139c2:	dd05      	ble.n	80139d0 <__ulp+0x20>
 80139c4:	2200      	movs	r2, #0
 80139c6:	460b      	mov	r3, r1
 80139c8:	ec43 2b10 	vmov	d0, r2, r3
 80139cc:	b002      	add	sp, #8
 80139ce:	4770      	bx	lr
 80139d0:	4249      	negs	r1, r1
 80139d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80139d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80139da:	f04f 0200 	mov.w	r2, #0
 80139de:	f04f 0300 	mov.w	r3, #0
 80139e2:	da04      	bge.n	80139ee <__ulp+0x3e>
 80139e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80139e8:	fa41 f300 	asr.w	r3, r1, r0
 80139ec:	e7ec      	b.n	80139c8 <__ulp+0x18>
 80139ee:	f1a0 0114 	sub.w	r1, r0, #20
 80139f2:	291e      	cmp	r1, #30
 80139f4:	bfda      	itte	le
 80139f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80139fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80139fe:	2101      	movgt	r1, #1
 8013a00:	460a      	mov	r2, r1
 8013a02:	e7e1      	b.n	80139c8 <__ulp+0x18>
 8013a04:	7ff00000 	.word	0x7ff00000

08013a08 <__b2d>:
 8013a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a0a:	6905      	ldr	r5, [r0, #16]
 8013a0c:	f100 0714 	add.w	r7, r0, #20
 8013a10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013a14:	1f2e      	subs	r6, r5, #4
 8013a16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f7ff fd52 	bl	80134c4 <__hi0bits>
 8013a20:	f1c0 0320 	rsb	r3, r0, #32
 8013a24:	280a      	cmp	r0, #10
 8013a26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013aa4 <__b2d+0x9c>
 8013a2a:	600b      	str	r3, [r1, #0]
 8013a2c:	dc14      	bgt.n	8013a58 <__b2d+0x50>
 8013a2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013a32:	fa24 f10e 	lsr.w	r1, r4, lr
 8013a36:	42b7      	cmp	r7, r6
 8013a38:	ea41 030c 	orr.w	r3, r1, ip
 8013a3c:	bf34      	ite	cc
 8013a3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a42:	2100      	movcs	r1, #0
 8013a44:	3015      	adds	r0, #21
 8013a46:	fa04 f000 	lsl.w	r0, r4, r0
 8013a4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013a4e:	ea40 0201 	orr.w	r2, r0, r1
 8013a52:	ec43 2b10 	vmov	d0, r2, r3
 8013a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a58:	42b7      	cmp	r7, r6
 8013a5a:	bf3a      	itte	cc
 8013a5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a60:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a64:	2100      	movcs	r1, #0
 8013a66:	380b      	subs	r0, #11
 8013a68:	d017      	beq.n	8013a9a <__b2d+0x92>
 8013a6a:	f1c0 0c20 	rsb	ip, r0, #32
 8013a6e:	fa04 f500 	lsl.w	r5, r4, r0
 8013a72:	42be      	cmp	r6, r7
 8013a74:	fa21 f40c 	lsr.w	r4, r1, ip
 8013a78:	ea45 0504 	orr.w	r5, r5, r4
 8013a7c:	bf8c      	ite	hi
 8013a7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a82:	2400      	movls	r4, #0
 8013a84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013a88:	fa01 f000 	lsl.w	r0, r1, r0
 8013a8c:	fa24 f40c 	lsr.w	r4, r4, ip
 8013a90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a94:	ea40 0204 	orr.w	r2, r0, r4
 8013a98:	e7db      	b.n	8013a52 <__b2d+0x4a>
 8013a9a:	ea44 030c 	orr.w	r3, r4, ip
 8013a9e:	460a      	mov	r2, r1
 8013aa0:	e7d7      	b.n	8013a52 <__b2d+0x4a>
 8013aa2:	bf00      	nop
 8013aa4:	3ff00000 	.word	0x3ff00000

08013aa8 <__d2b>:
 8013aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013aac:	4689      	mov	r9, r1
 8013aae:	2101      	movs	r1, #1
 8013ab0:	ec57 6b10 	vmov	r6, r7, d0
 8013ab4:	4690      	mov	r8, r2
 8013ab6:	f7ff fc0f 	bl	80132d8 <_Balloc>
 8013aba:	4604      	mov	r4, r0
 8013abc:	b930      	cbnz	r0, 8013acc <__d2b+0x24>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	4b25      	ldr	r3, [pc, #148]	; (8013b58 <__d2b+0xb0>)
 8013ac2:	4826      	ldr	r0, [pc, #152]	; (8013b5c <__d2b+0xb4>)
 8013ac4:	f240 310a 	movw	r1, #778	; 0x30a
 8013ac8:	f7fe f9ce 	bl	8011e68 <__assert_func>
 8013acc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013ad4:	bb35      	cbnz	r5, 8013b24 <__d2b+0x7c>
 8013ad6:	2e00      	cmp	r6, #0
 8013ad8:	9301      	str	r3, [sp, #4]
 8013ada:	d028      	beq.n	8013b2e <__d2b+0x86>
 8013adc:	4668      	mov	r0, sp
 8013ade:	9600      	str	r6, [sp, #0]
 8013ae0:	f7ff fd10 	bl	8013504 <__lo0bits>
 8013ae4:	9900      	ldr	r1, [sp, #0]
 8013ae6:	b300      	cbz	r0, 8013b2a <__d2b+0x82>
 8013ae8:	9a01      	ldr	r2, [sp, #4]
 8013aea:	f1c0 0320 	rsb	r3, r0, #32
 8013aee:	fa02 f303 	lsl.w	r3, r2, r3
 8013af2:	430b      	orrs	r3, r1
 8013af4:	40c2      	lsrs	r2, r0
 8013af6:	6163      	str	r3, [r4, #20]
 8013af8:	9201      	str	r2, [sp, #4]
 8013afa:	9b01      	ldr	r3, [sp, #4]
 8013afc:	61a3      	str	r3, [r4, #24]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	bf14      	ite	ne
 8013b02:	2202      	movne	r2, #2
 8013b04:	2201      	moveq	r2, #1
 8013b06:	6122      	str	r2, [r4, #16]
 8013b08:	b1d5      	cbz	r5, 8013b40 <__d2b+0x98>
 8013b0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013b0e:	4405      	add	r5, r0
 8013b10:	f8c9 5000 	str.w	r5, [r9]
 8013b14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013b18:	f8c8 0000 	str.w	r0, [r8]
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	b003      	add	sp, #12
 8013b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013b28:	e7d5      	b.n	8013ad6 <__d2b+0x2e>
 8013b2a:	6161      	str	r1, [r4, #20]
 8013b2c:	e7e5      	b.n	8013afa <__d2b+0x52>
 8013b2e:	a801      	add	r0, sp, #4
 8013b30:	f7ff fce8 	bl	8013504 <__lo0bits>
 8013b34:	9b01      	ldr	r3, [sp, #4]
 8013b36:	6163      	str	r3, [r4, #20]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	6122      	str	r2, [r4, #16]
 8013b3c:	3020      	adds	r0, #32
 8013b3e:	e7e3      	b.n	8013b08 <__d2b+0x60>
 8013b40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013b44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013b48:	f8c9 0000 	str.w	r0, [r9]
 8013b4c:	6918      	ldr	r0, [r3, #16]
 8013b4e:	f7ff fcb9 	bl	80134c4 <__hi0bits>
 8013b52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b56:	e7df      	b.n	8013b18 <__d2b+0x70>
 8013b58:	080162ba 	.word	0x080162ba
 8013b5c:	08016348 	.word	0x08016348

08013b60 <__ratio>:
 8013b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	4688      	mov	r8, r1
 8013b66:	4669      	mov	r1, sp
 8013b68:	4681      	mov	r9, r0
 8013b6a:	f7ff ff4d 	bl	8013a08 <__b2d>
 8013b6e:	a901      	add	r1, sp, #4
 8013b70:	4640      	mov	r0, r8
 8013b72:	ec55 4b10 	vmov	r4, r5, d0
 8013b76:	f7ff ff47 	bl	8013a08 <__b2d>
 8013b7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b82:	eba3 0c02 	sub.w	ip, r3, r2
 8013b86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b8a:	1a9b      	subs	r3, r3, r2
 8013b8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b90:	ec51 0b10 	vmov	r0, r1, d0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	bfd6      	itet	le
 8013b98:	460a      	movle	r2, r1
 8013b9a:	462a      	movgt	r2, r5
 8013b9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ba0:	468b      	mov	fp, r1
 8013ba2:	462f      	mov	r7, r5
 8013ba4:	bfd4      	ite	le
 8013ba6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013baa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013bae:	4620      	mov	r0, r4
 8013bb0:	ee10 2a10 	vmov	r2, s0
 8013bb4:	465b      	mov	r3, fp
 8013bb6:	4639      	mov	r1, r7
 8013bb8:	f7ec fe80 	bl	80008bc <__aeabi_ddiv>
 8013bbc:	ec41 0b10 	vmov	d0, r0, r1
 8013bc0:	b003      	add	sp, #12
 8013bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013bc6 <__copybits>:
 8013bc6:	3901      	subs	r1, #1
 8013bc8:	b570      	push	{r4, r5, r6, lr}
 8013bca:	1149      	asrs	r1, r1, #5
 8013bcc:	6914      	ldr	r4, [r2, #16]
 8013bce:	3101      	adds	r1, #1
 8013bd0:	f102 0314 	add.w	r3, r2, #20
 8013bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013bdc:	1f05      	subs	r5, r0, #4
 8013bde:	42a3      	cmp	r3, r4
 8013be0:	d30c      	bcc.n	8013bfc <__copybits+0x36>
 8013be2:	1aa3      	subs	r3, r4, r2
 8013be4:	3b11      	subs	r3, #17
 8013be6:	f023 0303 	bic.w	r3, r3, #3
 8013bea:	3211      	adds	r2, #17
 8013bec:	42a2      	cmp	r2, r4
 8013bee:	bf88      	it	hi
 8013bf0:	2300      	movhi	r3, #0
 8013bf2:	4418      	add	r0, r3
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	4288      	cmp	r0, r1
 8013bf8:	d305      	bcc.n	8013c06 <__copybits+0x40>
 8013bfa:	bd70      	pop	{r4, r5, r6, pc}
 8013bfc:	f853 6b04 	ldr.w	r6, [r3], #4
 8013c00:	f845 6f04 	str.w	r6, [r5, #4]!
 8013c04:	e7eb      	b.n	8013bde <__copybits+0x18>
 8013c06:	f840 3b04 	str.w	r3, [r0], #4
 8013c0a:	e7f4      	b.n	8013bf6 <__copybits+0x30>

08013c0c <__any_on>:
 8013c0c:	f100 0214 	add.w	r2, r0, #20
 8013c10:	6900      	ldr	r0, [r0, #16]
 8013c12:	114b      	asrs	r3, r1, #5
 8013c14:	4298      	cmp	r0, r3
 8013c16:	b510      	push	{r4, lr}
 8013c18:	db11      	blt.n	8013c3e <__any_on+0x32>
 8013c1a:	dd0a      	ble.n	8013c32 <__any_on+0x26>
 8013c1c:	f011 011f 	ands.w	r1, r1, #31
 8013c20:	d007      	beq.n	8013c32 <__any_on+0x26>
 8013c22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013c26:	fa24 f001 	lsr.w	r0, r4, r1
 8013c2a:	fa00 f101 	lsl.w	r1, r0, r1
 8013c2e:	428c      	cmp	r4, r1
 8013c30:	d10b      	bne.n	8013c4a <__any_on+0x3e>
 8013c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d803      	bhi.n	8013c42 <__any_on+0x36>
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	bd10      	pop	{r4, pc}
 8013c3e:	4603      	mov	r3, r0
 8013c40:	e7f7      	b.n	8013c32 <__any_on+0x26>
 8013c42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c46:	2900      	cmp	r1, #0
 8013c48:	d0f5      	beq.n	8013c36 <__any_on+0x2a>
 8013c4a:	2001      	movs	r0, #1
 8013c4c:	e7f6      	b.n	8013c3c <__any_on+0x30>

08013c4e <_calloc_r>:
 8013c4e:	b513      	push	{r0, r1, r4, lr}
 8013c50:	434a      	muls	r2, r1
 8013c52:	4611      	mov	r1, r2
 8013c54:	9201      	str	r2, [sp, #4]
 8013c56:	f000 f859 	bl	8013d0c <_malloc_r>
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	b118      	cbz	r0, 8013c66 <_calloc_r+0x18>
 8013c5e:	9a01      	ldr	r2, [sp, #4]
 8013c60:	2100      	movs	r1, #0
 8013c62:	f7fc fa0b 	bl	801007c <memset>
 8013c66:	4620      	mov	r0, r4
 8013c68:	b002      	add	sp, #8
 8013c6a:	bd10      	pop	{r4, pc}

08013c6c <_free_r>:
 8013c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c6e:	2900      	cmp	r1, #0
 8013c70:	d048      	beq.n	8013d04 <_free_r+0x98>
 8013c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c76:	9001      	str	r0, [sp, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8013c7e:	bfb8      	it	lt
 8013c80:	18e4      	addlt	r4, r4, r3
 8013c82:	f000 fe9b 	bl	80149bc <__malloc_lock>
 8013c86:	4a20      	ldr	r2, [pc, #128]	; (8013d08 <_free_r+0x9c>)
 8013c88:	9801      	ldr	r0, [sp, #4]
 8013c8a:	6813      	ldr	r3, [r2, #0]
 8013c8c:	4615      	mov	r5, r2
 8013c8e:	b933      	cbnz	r3, 8013c9e <_free_r+0x32>
 8013c90:	6063      	str	r3, [r4, #4]
 8013c92:	6014      	str	r4, [r2, #0]
 8013c94:	b003      	add	sp, #12
 8013c96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c9a:	f000 be95 	b.w	80149c8 <__malloc_unlock>
 8013c9e:	42a3      	cmp	r3, r4
 8013ca0:	d90b      	bls.n	8013cba <_free_r+0x4e>
 8013ca2:	6821      	ldr	r1, [r4, #0]
 8013ca4:	1862      	adds	r2, r4, r1
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	bf04      	itt	eq
 8013caa:	681a      	ldreq	r2, [r3, #0]
 8013cac:	685b      	ldreq	r3, [r3, #4]
 8013cae:	6063      	str	r3, [r4, #4]
 8013cb0:	bf04      	itt	eq
 8013cb2:	1852      	addeq	r2, r2, r1
 8013cb4:	6022      	streq	r2, [r4, #0]
 8013cb6:	602c      	str	r4, [r5, #0]
 8013cb8:	e7ec      	b.n	8013c94 <_free_r+0x28>
 8013cba:	461a      	mov	r2, r3
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	b10b      	cbz	r3, 8013cc4 <_free_r+0x58>
 8013cc0:	42a3      	cmp	r3, r4
 8013cc2:	d9fa      	bls.n	8013cba <_free_r+0x4e>
 8013cc4:	6811      	ldr	r1, [r2, #0]
 8013cc6:	1855      	adds	r5, r2, r1
 8013cc8:	42a5      	cmp	r5, r4
 8013cca:	d10b      	bne.n	8013ce4 <_free_r+0x78>
 8013ccc:	6824      	ldr	r4, [r4, #0]
 8013cce:	4421      	add	r1, r4
 8013cd0:	1854      	adds	r4, r2, r1
 8013cd2:	42a3      	cmp	r3, r4
 8013cd4:	6011      	str	r1, [r2, #0]
 8013cd6:	d1dd      	bne.n	8013c94 <_free_r+0x28>
 8013cd8:	681c      	ldr	r4, [r3, #0]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	6053      	str	r3, [r2, #4]
 8013cde:	4421      	add	r1, r4
 8013ce0:	6011      	str	r1, [r2, #0]
 8013ce2:	e7d7      	b.n	8013c94 <_free_r+0x28>
 8013ce4:	d902      	bls.n	8013cec <_free_r+0x80>
 8013ce6:	230c      	movs	r3, #12
 8013ce8:	6003      	str	r3, [r0, #0]
 8013cea:	e7d3      	b.n	8013c94 <_free_r+0x28>
 8013cec:	6825      	ldr	r5, [r4, #0]
 8013cee:	1961      	adds	r1, r4, r5
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	bf04      	itt	eq
 8013cf4:	6819      	ldreq	r1, [r3, #0]
 8013cf6:	685b      	ldreq	r3, [r3, #4]
 8013cf8:	6063      	str	r3, [r4, #4]
 8013cfa:	bf04      	itt	eq
 8013cfc:	1949      	addeq	r1, r1, r5
 8013cfe:	6021      	streq	r1, [r4, #0]
 8013d00:	6054      	str	r4, [r2, #4]
 8013d02:	e7c7      	b.n	8013c94 <_free_r+0x28>
 8013d04:	b003      	add	sp, #12
 8013d06:	bd30      	pop	{r4, r5, pc}
 8013d08:	20001cc0 	.word	0x20001cc0

08013d0c <_malloc_r>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	1ccd      	adds	r5, r1, #3
 8013d10:	f025 0503 	bic.w	r5, r5, #3
 8013d14:	3508      	adds	r5, #8
 8013d16:	2d0c      	cmp	r5, #12
 8013d18:	bf38      	it	cc
 8013d1a:	250c      	movcc	r5, #12
 8013d1c:	2d00      	cmp	r5, #0
 8013d1e:	4606      	mov	r6, r0
 8013d20:	db01      	blt.n	8013d26 <_malloc_r+0x1a>
 8013d22:	42a9      	cmp	r1, r5
 8013d24:	d903      	bls.n	8013d2e <_malloc_r+0x22>
 8013d26:	230c      	movs	r3, #12
 8013d28:	6033      	str	r3, [r6, #0]
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d2e:	f000 fe45 	bl	80149bc <__malloc_lock>
 8013d32:	4921      	ldr	r1, [pc, #132]	; (8013db8 <_malloc_r+0xac>)
 8013d34:	680a      	ldr	r2, [r1, #0]
 8013d36:	4614      	mov	r4, r2
 8013d38:	b99c      	cbnz	r4, 8013d62 <_malloc_r+0x56>
 8013d3a:	4f20      	ldr	r7, [pc, #128]	; (8013dbc <_malloc_r+0xb0>)
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	b923      	cbnz	r3, 8013d4a <_malloc_r+0x3e>
 8013d40:	4621      	mov	r1, r4
 8013d42:	4630      	mov	r0, r6
 8013d44:	f000 fafc 	bl	8014340 <_sbrk_r>
 8013d48:	6038      	str	r0, [r7, #0]
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	f000 faf7 	bl	8014340 <_sbrk_r>
 8013d52:	1c43      	adds	r3, r0, #1
 8013d54:	d123      	bne.n	8013d9e <_malloc_r+0x92>
 8013d56:	230c      	movs	r3, #12
 8013d58:	6033      	str	r3, [r6, #0]
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f000 fe34 	bl	80149c8 <__malloc_unlock>
 8013d60:	e7e3      	b.n	8013d2a <_malloc_r+0x1e>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	1b5b      	subs	r3, r3, r5
 8013d66:	d417      	bmi.n	8013d98 <_malloc_r+0x8c>
 8013d68:	2b0b      	cmp	r3, #11
 8013d6a:	d903      	bls.n	8013d74 <_malloc_r+0x68>
 8013d6c:	6023      	str	r3, [r4, #0]
 8013d6e:	441c      	add	r4, r3
 8013d70:	6025      	str	r5, [r4, #0]
 8013d72:	e004      	b.n	8013d7e <_malloc_r+0x72>
 8013d74:	6863      	ldr	r3, [r4, #4]
 8013d76:	42a2      	cmp	r2, r4
 8013d78:	bf0c      	ite	eq
 8013d7a:	600b      	streq	r3, [r1, #0]
 8013d7c:	6053      	strne	r3, [r2, #4]
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f000 fe22 	bl	80149c8 <__malloc_unlock>
 8013d84:	f104 000b 	add.w	r0, r4, #11
 8013d88:	1d23      	adds	r3, r4, #4
 8013d8a:	f020 0007 	bic.w	r0, r0, #7
 8013d8e:	1ac2      	subs	r2, r0, r3
 8013d90:	d0cc      	beq.n	8013d2c <_malloc_r+0x20>
 8013d92:	1a1b      	subs	r3, r3, r0
 8013d94:	50a3      	str	r3, [r4, r2]
 8013d96:	e7c9      	b.n	8013d2c <_malloc_r+0x20>
 8013d98:	4622      	mov	r2, r4
 8013d9a:	6864      	ldr	r4, [r4, #4]
 8013d9c:	e7cc      	b.n	8013d38 <_malloc_r+0x2c>
 8013d9e:	1cc4      	adds	r4, r0, #3
 8013da0:	f024 0403 	bic.w	r4, r4, #3
 8013da4:	42a0      	cmp	r0, r4
 8013da6:	d0e3      	beq.n	8013d70 <_malloc_r+0x64>
 8013da8:	1a21      	subs	r1, r4, r0
 8013daa:	4630      	mov	r0, r6
 8013dac:	f000 fac8 	bl	8014340 <_sbrk_r>
 8013db0:	3001      	adds	r0, #1
 8013db2:	d1dd      	bne.n	8013d70 <_malloc_r+0x64>
 8013db4:	e7cf      	b.n	8013d56 <_malloc_r+0x4a>
 8013db6:	bf00      	nop
 8013db8:	20001cc0 	.word	0x20001cc0
 8013dbc:	20001cc4 	.word	0x20001cc4

08013dc0 <__ssputs_r>:
 8013dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc4:	688e      	ldr	r6, [r1, #8]
 8013dc6:	429e      	cmp	r6, r3
 8013dc8:	4682      	mov	sl, r0
 8013dca:	460c      	mov	r4, r1
 8013dcc:	4690      	mov	r8, r2
 8013dce:	461f      	mov	r7, r3
 8013dd0:	d838      	bhi.n	8013e44 <__ssputs_r+0x84>
 8013dd2:	898a      	ldrh	r2, [r1, #12]
 8013dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013dd8:	d032      	beq.n	8013e40 <__ssputs_r+0x80>
 8013dda:	6825      	ldr	r5, [r4, #0]
 8013ddc:	6909      	ldr	r1, [r1, #16]
 8013dde:	eba5 0901 	sub.w	r9, r5, r1
 8013de2:	6965      	ldr	r5, [r4, #20]
 8013de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013dec:	3301      	adds	r3, #1
 8013dee:	444b      	add	r3, r9
 8013df0:	106d      	asrs	r5, r5, #1
 8013df2:	429d      	cmp	r5, r3
 8013df4:	bf38      	it	cc
 8013df6:	461d      	movcc	r5, r3
 8013df8:	0553      	lsls	r3, r2, #21
 8013dfa:	d531      	bpl.n	8013e60 <__ssputs_r+0xa0>
 8013dfc:	4629      	mov	r1, r5
 8013dfe:	f7ff ff85 	bl	8013d0c <_malloc_r>
 8013e02:	4606      	mov	r6, r0
 8013e04:	b950      	cbnz	r0, 8013e1c <__ssputs_r+0x5c>
 8013e06:	230c      	movs	r3, #12
 8013e08:	f8ca 3000 	str.w	r3, [sl]
 8013e0c:	89a3      	ldrh	r3, [r4, #12]
 8013e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e12:	81a3      	strh	r3, [r4, #12]
 8013e14:	f04f 30ff 	mov.w	r0, #4294967295
 8013e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e1c:	6921      	ldr	r1, [r4, #16]
 8013e1e:	464a      	mov	r2, r9
 8013e20:	f7fc f91e 	bl	8010060 <memcpy>
 8013e24:	89a3      	ldrh	r3, [r4, #12]
 8013e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e2e:	81a3      	strh	r3, [r4, #12]
 8013e30:	6126      	str	r6, [r4, #16]
 8013e32:	6165      	str	r5, [r4, #20]
 8013e34:	444e      	add	r6, r9
 8013e36:	eba5 0509 	sub.w	r5, r5, r9
 8013e3a:	6026      	str	r6, [r4, #0]
 8013e3c:	60a5      	str	r5, [r4, #8]
 8013e3e:	463e      	mov	r6, r7
 8013e40:	42be      	cmp	r6, r7
 8013e42:	d900      	bls.n	8013e46 <__ssputs_r+0x86>
 8013e44:	463e      	mov	r6, r7
 8013e46:	4632      	mov	r2, r6
 8013e48:	6820      	ldr	r0, [r4, #0]
 8013e4a:	4641      	mov	r1, r8
 8013e4c:	f000 fd9c 	bl	8014988 <memmove>
 8013e50:	68a3      	ldr	r3, [r4, #8]
 8013e52:	6822      	ldr	r2, [r4, #0]
 8013e54:	1b9b      	subs	r3, r3, r6
 8013e56:	4432      	add	r2, r6
 8013e58:	60a3      	str	r3, [r4, #8]
 8013e5a:	6022      	str	r2, [r4, #0]
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	e7db      	b.n	8013e18 <__ssputs_r+0x58>
 8013e60:	462a      	mov	r2, r5
 8013e62:	f000 fdb7 	bl	80149d4 <_realloc_r>
 8013e66:	4606      	mov	r6, r0
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d1e1      	bne.n	8013e30 <__ssputs_r+0x70>
 8013e6c:	6921      	ldr	r1, [r4, #16]
 8013e6e:	4650      	mov	r0, sl
 8013e70:	f7ff fefc 	bl	8013c6c <_free_r>
 8013e74:	e7c7      	b.n	8013e06 <__ssputs_r+0x46>
	...

08013e78 <_svfiprintf_r>:
 8013e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	4698      	mov	r8, r3
 8013e7e:	898b      	ldrh	r3, [r1, #12]
 8013e80:	061b      	lsls	r3, r3, #24
 8013e82:	b09d      	sub	sp, #116	; 0x74
 8013e84:	4607      	mov	r7, r0
 8013e86:	460d      	mov	r5, r1
 8013e88:	4614      	mov	r4, r2
 8013e8a:	d50e      	bpl.n	8013eaa <_svfiprintf_r+0x32>
 8013e8c:	690b      	ldr	r3, [r1, #16]
 8013e8e:	b963      	cbnz	r3, 8013eaa <_svfiprintf_r+0x32>
 8013e90:	2140      	movs	r1, #64	; 0x40
 8013e92:	f7ff ff3b 	bl	8013d0c <_malloc_r>
 8013e96:	6028      	str	r0, [r5, #0]
 8013e98:	6128      	str	r0, [r5, #16]
 8013e9a:	b920      	cbnz	r0, 8013ea6 <_svfiprintf_r+0x2e>
 8013e9c:	230c      	movs	r3, #12
 8013e9e:	603b      	str	r3, [r7, #0]
 8013ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ea4:	e0d1      	b.n	801404a <_svfiprintf_r+0x1d2>
 8013ea6:	2340      	movs	r3, #64	; 0x40
 8013ea8:	616b      	str	r3, [r5, #20]
 8013eaa:	2300      	movs	r3, #0
 8013eac:	9309      	str	r3, [sp, #36]	; 0x24
 8013eae:	2320      	movs	r3, #32
 8013eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013eb8:	2330      	movs	r3, #48	; 0x30
 8013eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014064 <_svfiprintf_r+0x1ec>
 8013ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ec2:	f04f 0901 	mov.w	r9, #1
 8013ec6:	4623      	mov	r3, r4
 8013ec8:	469a      	mov	sl, r3
 8013eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ece:	b10a      	cbz	r2, 8013ed4 <_svfiprintf_r+0x5c>
 8013ed0:	2a25      	cmp	r2, #37	; 0x25
 8013ed2:	d1f9      	bne.n	8013ec8 <_svfiprintf_r+0x50>
 8013ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ed8:	d00b      	beq.n	8013ef2 <_svfiprintf_r+0x7a>
 8013eda:	465b      	mov	r3, fp
 8013edc:	4622      	mov	r2, r4
 8013ede:	4629      	mov	r1, r5
 8013ee0:	4638      	mov	r0, r7
 8013ee2:	f7ff ff6d 	bl	8013dc0 <__ssputs_r>
 8013ee6:	3001      	adds	r0, #1
 8013ee8:	f000 80aa 	beq.w	8014040 <_svfiprintf_r+0x1c8>
 8013eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eee:	445a      	add	r2, fp
 8013ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8013ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f000 80a2 	beq.w	8014040 <_svfiprintf_r+0x1c8>
 8013efc:	2300      	movs	r3, #0
 8013efe:	f04f 32ff 	mov.w	r2, #4294967295
 8013f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f06:	f10a 0a01 	add.w	sl, sl, #1
 8013f0a:	9304      	str	r3, [sp, #16]
 8013f0c:	9307      	str	r3, [sp, #28]
 8013f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f12:	931a      	str	r3, [sp, #104]	; 0x68
 8013f14:	4654      	mov	r4, sl
 8013f16:	2205      	movs	r2, #5
 8013f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f1c:	4851      	ldr	r0, [pc, #324]	; (8014064 <_svfiprintf_r+0x1ec>)
 8013f1e:	f7ec f997 	bl	8000250 <memchr>
 8013f22:	9a04      	ldr	r2, [sp, #16]
 8013f24:	b9d8      	cbnz	r0, 8013f5e <_svfiprintf_r+0xe6>
 8013f26:	06d0      	lsls	r0, r2, #27
 8013f28:	bf44      	itt	mi
 8013f2a:	2320      	movmi	r3, #32
 8013f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f30:	0711      	lsls	r1, r2, #28
 8013f32:	bf44      	itt	mi
 8013f34:	232b      	movmi	r3, #43	; 0x2b
 8013f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8013f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f40:	d015      	beq.n	8013f6e <_svfiprintf_r+0xf6>
 8013f42:	9a07      	ldr	r2, [sp, #28]
 8013f44:	4654      	mov	r4, sl
 8013f46:	2000      	movs	r0, #0
 8013f48:	f04f 0c0a 	mov.w	ip, #10
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f52:	3b30      	subs	r3, #48	; 0x30
 8013f54:	2b09      	cmp	r3, #9
 8013f56:	d94e      	bls.n	8013ff6 <_svfiprintf_r+0x17e>
 8013f58:	b1b0      	cbz	r0, 8013f88 <_svfiprintf_r+0x110>
 8013f5a:	9207      	str	r2, [sp, #28]
 8013f5c:	e014      	b.n	8013f88 <_svfiprintf_r+0x110>
 8013f5e:	eba0 0308 	sub.w	r3, r0, r8
 8013f62:	fa09 f303 	lsl.w	r3, r9, r3
 8013f66:	4313      	orrs	r3, r2
 8013f68:	9304      	str	r3, [sp, #16]
 8013f6a:	46a2      	mov	sl, r4
 8013f6c:	e7d2      	b.n	8013f14 <_svfiprintf_r+0x9c>
 8013f6e:	9b03      	ldr	r3, [sp, #12]
 8013f70:	1d19      	adds	r1, r3, #4
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	9103      	str	r1, [sp, #12]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	bfbb      	ittet	lt
 8013f7a:	425b      	neglt	r3, r3
 8013f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8013f80:	9307      	strge	r3, [sp, #28]
 8013f82:	9307      	strlt	r3, [sp, #28]
 8013f84:	bfb8      	it	lt
 8013f86:	9204      	strlt	r2, [sp, #16]
 8013f88:	7823      	ldrb	r3, [r4, #0]
 8013f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8013f8c:	d10c      	bne.n	8013fa8 <_svfiprintf_r+0x130>
 8013f8e:	7863      	ldrb	r3, [r4, #1]
 8013f90:	2b2a      	cmp	r3, #42	; 0x2a
 8013f92:	d135      	bne.n	8014000 <_svfiprintf_r+0x188>
 8013f94:	9b03      	ldr	r3, [sp, #12]
 8013f96:	1d1a      	adds	r2, r3, #4
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	9203      	str	r2, [sp, #12]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	bfb8      	it	lt
 8013fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8013fa4:	3402      	adds	r4, #2
 8013fa6:	9305      	str	r3, [sp, #20]
 8013fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014074 <_svfiprintf_r+0x1fc>
 8013fac:	7821      	ldrb	r1, [r4, #0]
 8013fae:	2203      	movs	r2, #3
 8013fb0:	4650      	mov	r0, sl
 8013fb2:	f7ec f94d 	bl	8000250 <memchr>
 8013fb6:	b140      	cbz	r0, 8013fca <_svfiprintf_r+0x152>
 8013fb8:	2340      	movs	r3, #64	; 0x40
 8013fba:	eba0 000a 	sub.w	r0, r0, sl
 8013fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8013fc2:	9b04      	ldr	r3, [sp, #16]
 8013fc4:	4303      	orrs	r3, r0
 8013fc6:	3401      	adds	r4, #1
 8013fc8:	9304      	str	r3, [sp, #16]
 8013fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fce:	4826      	ldr	r0, [pc, #152]	; (8014068 <_svfiprintf_r+0x1f0>)
 8013fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fd4:	2206      	movs	r2, #6
 8013fd6:	f7ec f93b 	bl	8000250 <memchr>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d038      	beq.n	8014050 <_svfiprintf_r+0x1d8>
 8013fde:	4b23      	ldr	r3, [pc, #140]	; (801406c <_svfiprintf_r+0x1f4>)
 8013fe0:	bb1b      	cbnz	r3, 801402a <_svfiprintf_r+0x1b2>
 8013fe2:	9b03      	ldr	r3, [sp, #12]
 8013fe4:	3307      	adds	r3, #7
 8013fe6:	f023 0307 	bic.w	r3, r3, #7
 8013fea:	3308      	adds	r3, #8
 8013fec:	9303      	str	r3, [sp, #12]
 8013fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ff0:	4433      	add	r3, r6
 8013ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff4:	e767      	b.n	8013ec6 <_svfiprintf_r+0x4e>
 8013ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	2001      	movs	r0, #1
 8013ffe:	e7a5      	b.n	8013f4c <_svfiprintf_r+0xd4>
 8014000:	2300      	movs	r3, #0
 8014002:	3401      	adds	r4, #1
 8014004:	9305      	str	r3, [sp, #20]
 8014006:	4619      	mov	r1, r3
 8014008:	f04f 0c0a 	mov.w	ip, #10
 801400c:	4620      	mov	r0, r4
 801400e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014012:	3a30      	subs	r2, #48	; 0x30
 8014014:	2a09      	cmp	r2, #9
 8014016:	d903      	bls.n	8014020 <_svfiprintf_r+0x1a8>
 8014018:	2b00      	cmp	r3, #0
 801401a:	d0c5      	beq.n	8013fa8 <_svfiprintf_r+0x130>
 801401c:	9105      	str	r1, [sp, #20]
 801401e:	e7c3      	b.n	8013fa8 <_svfiprintf_r+0x130>
 8014020:	fb0c 2101 	mla	r1, ip, r1, r2
 8014024:	4604      	mov	r4, r0
 8014026:	2301      	movs	r3, #1
 8014028:	e7f0      	b.n	801400c <_svfiprintf_r+0x194>
 801402a:	ab03      	add	r3, sp, #12
 801402c:	9300      	str	r3, [sp, #0]
 801402e:	462a      	mov	r2, r5
 8014030:	4b0f      	ldr	r3, [pc, #60]	; (8014070 <_svfiprintf_r+0x1f8>)
 8014032:	a904      	add	r1, sp, #16
 8014034:	4638      	mov	r0, r7
 8014036:	f7fc f8c9 	bl	80101cc <_printf_float>
 801403a:	1c42      	adds	r2, r0, #1
 801403c:	4606      	mov	r6, r0
 801403e:	d1d6      	bne.n	8013fee <_svfiprintf_r+0x176>
 8014040:	89ab      	ldrh	r3, [r5, #12]
 8014042:	065b      	lsls	r3, r3, #25
 8014044:	f53f af2c 	bmi.w	8013ea0 <_svfiprintf_r+0x28>
 8014048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801404a:	b01d      	add	sp, #116	; 0x74
 801404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014050:	ab03      	add	r3, sp, #12
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	462a      	mov	r2, r5
 8014056:	4b06      	ldr	r3, [pc, #24]	; (8014070 <_svfiprintf_r+0x1f8>)
 8014058:	a904      	add	r1, sp, #16
 801405a:	4638      	mov	r0, r7
 801405c:	f7fc fb5a 	bl	8010714 <_printf_i>
 8014060:	e7eb      	b.n	801403a <_svfiprintf_r+0x1c2>
 8014062:	bf00      	nop
 8014064:	080164a4 	.word	0x080164a4
 8014068:	080164ae 	.word	0x080164ae
 801406c:	080101cd 	.word	0x080101cd
 8014070:	08013dc1 	.word	0x08013dc1
 8014074:	080164aa 	.word	0x080164aa

08014078 <__sfputc_r>:
 8014078:	6893      	ldr	r3, [r2, #8]
 801407a:	3b01      	subs	r3, #1
 801407c:	2b00      	cmp	r3, #0
 801407e:	b410      	push	{r4}
 8014080:	6093      	str	r3, [r2, #8]
 8014082:	da08      	bge.n	8014096 <__sfputc_r+0x1e>
 8014084:	6994      	ldr	r4, [r2, #24]
 8014086:	42a3      	cmp	r3, r4
 8014088:	db01      	blt.n	801408e <__sfputc_r+0x16>
 801408a:	290a      	cmp	r1, #10
 801408c:	d103      	bne.n	8014096 <__sfputc_r+0x1e>
 801408e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014092:	f000 b985 	b.w	80143a0 <__swbuf_r>
 8014096:	6813      	ldr	r3, [r2, #0]
 8014098:	1c58      	adds	r0, r3, #1
 801409a:	6010      	str	r0, [r2, #0]
 801409c:	7019      	strb	r1, [r3, #0]
 801409e:	4608      	mov	r0, r1
 80140a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a4:	4770      	bx	lr

080140a6 <__sfputs_r>:
 80140a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140a8:	4606      	mov	r6, r0
 80140aa:	460f      	mov	r7, r1
 80140ac:	4614      	mov	r4, r2
 80140ae:	18d5      	adds	r5, r2, r3
 80140b0:	42ac      	cmp	r4, r5
 80140b2:	d101      	bne.n	80140b8 <__sfputs_r+0x12>
 80140b4:	2000      	movs	r0, #0
 80140b6:	e007      	b.n	80140c8 <__sfputs_r+0x22>
 80140b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140bc:	463a      	mov	r2, r7
 80140be:	4630      	mov	r0, r6
 80140c0:	f7ff ffda 	bl	8014078 <__sfputc_r>
 80140c4:	1c43      	adds	r3, r0, #1
 80140c6:	d1f3      	bne.n	80140b0 <__sfputs_r+0xa>
 80140c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080140cc <_vfiprintf_r>:
 80140cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d0:	460d      	mov	r5, r1
 80140d2:	b09d      	sub	sp, #116	; 0x74
 80140d4:	4614      	mov	r4, r2
 80140d6:	4698      	mov	r8, r3
 80140d8:	4606      	mov	r6, r0
 80140da:	b118      	cbz	r0, 80140e4 <_vfiprintf_r+0x18>
 80140dc:	6983      	ldr	r3, [r0, #24]
 80140de:	b90b      	cbnz	r3, 80140e4 <_vfiprintf_r+0x18>
 80140e0:	f000 fb4e 	bl	8014780 <__sinit>
 80140e4:	4b89      	ldr	r3, [pc, #548]	; (801430c <_vfiprintf_r+0x240>)
 80140e6:	429d      	cmp	r5, r3
 80140e8:	d11b      	bne.n	8014122 <_vfiprintf_r+0x56>
 80140ea:	6875      	ldr	r5, [r6, #4]
 80140ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140ee:	07d9      	lsls	r1, r3, #31
 80140f0:	d405      	bmi.n	80140fe <_vfiprintf_r+0x32>
 80140f2:	89ab      	ldrh	r3, [r5, #12]
 80140f4:	059a      	lsls	r2, r3, #22
 80140f6:	d402      	bmi.n	80140fe <_vfiprintf_r+0x32>
 80140f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140fa:	f000 fbdf 	bl	80148bc <__retarget_lock_acquire_recursive>
 80140fe:	89ab      	ldrh	r3, [r5, #12]
 8014100:	071b      	lsls	r3, r3, #28
 8014102:	d501      	bpl.n	8014108 <_vfiprintf_r+0x3c>
 8014104:	692b      	ldr	r3, [r5, #16]
 8014106:	b9eb      	cbnz	r3, 8014144 <_vfiprintf_r+0x78>
 8014108:	4629      	mov	r1, r5
 801410a:	4630      	mov	r0, r6
 801410c:	f000 f9a8 	bl	8014460 <__swsetup_r>
 8014110:	b1c0      	cbz	r0, 8014144 <_vfiprintf_r+0x78>
 8014112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014114:	07dc      	lsls	r4, r3, #31
 8014116:	d50e      	bpl.n	8014136 <_vfiprintf_r+0x6a>
 8014118:	f04f 30ff 	mov.w	r0, #4294967295
 801411c:	b01d      	add	sp, #116	; 0x74
 801411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014122:	4b7b      	ldr	r3, [pc, #492]	; (8014310 <_vfiprintf_r+0x244>)
 8014124:	429d      	cmp	r5, r3
 8014126:	d101      	bne.n	801412c <_vfiprintf_r+0x60>
 8014128:	68b5      	ldr	r5, [r6, #8]
 801412a:	e7df      	b.n	80140ec <_vfiprintf_r+0x20>
 801412c:	4b79      	ldr	r3, [pc, #484]	; (8014314 <_vfiprintf_r+0x248>)
 801412e:	429d      	cmp	r5, r3
 8014130:	bf08      	it	eq
 8014132:	68f5      	ldreq	r5, [r6, #12]
 8014134:	e7da      	b.n	80140ec <_vfiprintf_r+0x20>
 8014136:	89ab      	ldrh	r3, [r5, #12]
 8014138:	0598      	lsls	r0, r3, #22
 801413a:	d4ed      	bmi.n	8014118 <_vfiprintf_r+0x4c>
 801413c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801413e:	f000 fbbe 	bl	80148be <__retarget_lock_release_recursive>
 8014142:	e7e9      	b.n	8014118 <_vfiprintf_r+0x4c>
 8014144:	2300      	movs	r3, #0
 8014146:	9309      	str	r3, [sp, #36]	; 0x24
 8014148:	2320      	movs	r3, #32
 801414a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801414e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014152:	2330      	movs	r3, #48	; 0x30
 8014154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014318 <_vfiprintf_r+0x24c>
 8014158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801415c:	f04f 0901 	mov.w	r9, #1
 8014160:	4623      	mov	r3, r4
 8014162:	469a      	mov	sl, r3
 8014164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014168:	b10a      	cbz	r2, 801416e <_vfiprintf_r+0xa2>
 801416a:	2a25      	cmp	r2, #37	; 0x25
 801416c:	d1f9      	bne.n	8014162 <_vfiprintf_r+0x96>
 801416e:	ebba 0b04 	subs.w	fp, sl, r4
 8014172:	d00b      	beq.n	801418c <_vfiprintf_r+0xc0>
 8014174:	465b      	mov	r3, fp
 8014176:	4622      	mov	r2, r4
 8014178:	4629      	mov	r1, r5
 801417a:	4630      	mov	r0, r6
 801417c:	f7ff ff93 	bl	80140a6 <__sfputs_r>
 8014180:	3001      	adds	r0, #1
 8014182:	f000 80aa 	beq.w	80142da <_vfiprintf_r+0x20e>
 8014186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014188:	445a      	add	r2, fp
 801418a:	9209      	str	r2, [sp, #36]	; 0x24
 801418c:	f89a 3000 	ldrb.w	r3, [sl]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f000 80a2 	beq.w	80142da <_vfiprintf_r+0x20e>
 8014196:	2300      	movs	r3, #0
 8014198:	f04f 32ff 	mov.w	r2, #4294967295
 801419c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141a0:	f10a 0a01 	add.w	sl, sl, #1
 80141a4:	9304      	str	r3, [sp, #16]
 80141a6:	9307      	str	r3, [sp, #28]
 80141a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141ac:	931a      	str	r3, [sp, #104]	; 0x68
 80141ae:	4654      	mov	r4, sl
 80141b0:	2205      	movs	r2, #5
 80141b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141b6:	4858      	ldr	r0, [pc, #352]	; (8014318 <_vfiprintf_r+0x24c>)
 80141b8:	f7ec f84a 	bl	8000250 <memchr>
 80141bc:	9a04      	ldr	r2, [sp, #16]
 80141be:	b9d8      	cbnz	r0, 80141f8 <_vfiprintf_r+0x12c>
 80141c0:	06d1      	lsls	r1, r2, #27
 80141c2:	bf44      	itt	mi
 80141c4:	2320      	movmi	r3, #32
 80141c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141ca:	0713      	lsls	r3, r2, #28
 80141cc:	bf44      	itt	mi
 80141ce:	232b      	movmi	r3, #43	; 0x2b
 80141d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141d4:	f89a 3000 	ldrb.w	r3, [sl]
 80141d8:	2b2a      	cmp	r3, #42	; 0x2a
 80141da:	d015      	beq.n	8014208 <_vfiprintf_r+0x13c>
 80141dc:	9a07      	ldr	r2, [sp, #28]
 80141de:	4654      	mov	r4, sl
 80141e0:	2000      	movs	r0, #0
 80141e2:	f04f 0c0a 	mov.w	ip, #10
 80141e6:	4621      	mov	r1, r4
 80141e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141ec:	3b30      	subs	r3, #48	; 0x30
 80141ee:	2b09      	cmp	r3, #9
 80141f0:	d94e      	bls.n	8014290 <_vfiprintf_r+0x1c4>
 80141f2:	b1b0      	cbz	r0, 8014222 <_vfiprintf_r+0x156>
 80141f4:	9207      	str	r2, [sp, #28]
 80141f6:	e014      	b.n	8014222 <_vfiprintf_r+0x156>
 80141f8:	eba0 0308 	sub.w	r3, r0, r8
 80141fc:	fa09 f303 	lsl.w	r3, r9, r3
 8014200:	4313      	orrs	r3, r2
 8014202:	9304      	str	r3, [sp, #16]
 8014204:	46a2      	mov	sl, r4
 8014206:	e7d2      	b.n	80141ae <_vfiprintf_r+0xe2>
 8014208:	9b03      	ldr	r3, [sp, #12]
 801420a:	1d19      	adds	r1, r3, #4
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	9103      	str	r1, [sp, #12]
 8014210:	2b00      	cmp	r3, #0
 8014212:	bfbb      	ittet	lt
 8014214:	425b      	neglt	r3, r3
 8014216:	f042 0202 	orrlt.w	r2, r2, #2
 801421a:	9307      	strge	r3, [sp, #28]
 801421c:	9307      	strlt	r3, [sp, #28]
 801421e:	bfb8      	it	lt
 8014220:	9204      	strlt	r2, [sp, #16]
 8014222:	7823      	ldrb	r3, [r4, #0]
 8014224:	2b2e      	cmp	r3, #46	; 0x2e
 8014226:	d10c      	bne.n	8014242 <_vfiprintf_r+0x176>
 8014228:	7863      	ldrb	r3, [r4, #1]
 801422a:	2b2a      	cmp	r3, #42	; 0x2a
 801422c:	d135      	bne.n	801429a <_vfiprintf_r+0x1ce>
 801422e:	9b03      	ldr	r3, [sp, #12]
 8014230:	1d1a      	adds	r2, r3, #4
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	9203      	str	r2, [sp, #12]
 8014236:	2b00      	cmp	r3, #0
 8014238:	bfb8      	it	lt
 801423a:	f04f 33ff 	movlt.w	r3, #4294967295
 801423e:	3402      	adds	r4, #2
 8014240:	9305      	str	r3, [sp, #20]
 8014242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014328 <_vfiprintf_r+0x25c>
 8014246:	7821      	ldrb	r1, [r4, #0]
 8014248:	2203      	movs	r2, #3
 801424a:	4650      	mov	r0, sl
 801424c:	f7ec f800 	bl	8000250 <memchr>
 8014250:	b140      	cbz	r0, 8014264 <_vfiprintf_r+0x198>
 8014252:	2340      	movs	r3, #64	; 0x40
 8014254:	eba0 000a 	sub.w	r0, r0, sl
 8014258:	fa03 f000 	lsl.w	r0, r3, r0
 801425c:	9b04      	ldr	r3, [sp, #16]
 801425e:	4303      	orrs	r3, r0
 8014260:	3401      	adds	r4, #1
 8014262:	9304      	str	r3, [sp, #16]
 8014264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014268:	482c      	ldr	r0, [pc, #176]	; (801431c <_vfiprintf_r+0x250>)
 801426a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801426e:	2206      	movs	r2, #6
 8014270:	f7eb ffee 	bl	8000250 <memchr>
 8014274:	2800      	cmp	r0, #0
 8014276:	d03f      	beq.n	80142f8 <_vfiprintf_r+0x22c>
 8014278:	4b29      	ldr	r3, [pc, #164]	; (8014320 <_vfiprintf_r+0x254>)
 801427a:	bb1b      	cbnz	r3, 80142c4 <_vfiprintf_r+0x1f8>
 801427c:	9b03      	ldr	r3, [sp, #12]
 801427e:	3307      	adds	r3, #7
 8014280:	f023 0307 	bic.w	r3, r3, #7
 8014284:	3308      	adds	r3, #8
 8014286:	9303      	str	r3, [sp, #12]
 8014288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801428a:	443b      	add	r3, r7
 801428c:	9309      	str	r3, [sp, #36]	; 0x24
 801428e:	e767      	b.n	8014160 <_vfiprintf_r+0x94>
 8014290:	fb0c 3202 	mla	r2, ip, r2, r3
 8014294:	460c      	mov	r4, r1
 8014296:	2001      	movs	r0, #1
 8014298:	e7a5      	b.n	80141e6 <_vfiprintf_r+0x11a>
 801429a:	2300      	movs	r3, #0
 801429c:	3401      	adds	r4, #1
 801429e:	9305      	str	r3, [sp, #20]
 80142a0:	4619      	mov	r1, r3
 80142a2:	f04f 0c0a 	mov.w	ip, #10
 80142a6:	4620      	mov	r0, r4
 80142a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142ac:	3a30      	subs	r2, #48	; 0x30
 80142ae:	2a09      	cmp	r2, #9
 80142b0:	d903      	bls.n	80142ba <_vfiprintf_r+0x1ee>
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d0c5      	beq.n	8014242 <_vfiprintf_r+0x176>
 80142b6:	9105      	str	r1, [sp, #20]
 80142b8:	e7c3      	b.n	8014242 <_vfiprintf_r+0x176>
 80142ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80142be:	4604      	mov	r4, r0
 80142c0:	2301      	movs	r3, #1
 80142c2:	e7f0      	b.n	80142a6 <_vfiprintf_r+0x1da>
 80142c4:	ab03      	add	r3, sp, #12
 80142c6:	9300      	str	r3, [sp, #0]
 80142c8:	462a      	mov	r2, r5
 80142ca:	4b16      	ldr	r3, [pc, #88]	; (8014324 <_vfiprintf_r+0x258>)
 80142cc:	a904      	add	r1, sp, #16
 80142ce:	4630      	mov	r0, r6
 80142d0:	f7fb ff7c 	bl	80101cc <_printf_float>
 80142d4:	4607      	mov	r7, r0
 80142d6:	1c78      	adds	r0, r7, #1
 80142d8:	d1d6      	bne.n	8014288 <_vfiprintf_r+0x1bc>
 80142da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142dc:	07d9      	lsls	r1, r3, #31
 80142de:	d405      	bmi.n	80142ec <_vfiprintf_r+0x220>
 80142e0:	89ab      	ldrh	r3, [r5, #12]
 80142e2:	059a      	lsls	r2, r3, #22
 80142e4:	d402      	bmi.n	80142ec <_vfiprintf_r+0x220>
 80142e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142e8:	f000 fae9 	bl	80148be <__retarget_lock_release_recursive>
 80142ec:	89ab      	ldrh	r3, [r5, #12]
 80142ee:	065b      	lsls	r3, r3, #25
 80142f0:	f53f af12 	bmi.w	8014118 <_vfiprintf_r+0x4c>
 80142f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142f6:	e711      	b.n	801411c <_vfiprintf_r+0x50>
 80142f8:	ab03      	add	r3, sp, #12
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	462a      	mov	r2, r5
 80142fe:	4b09      	ldr	r3, [pc, #36]	; (8014324 <_vfiprintf_r+0x258>)
 8014300:	a904      	add	r1, sp, #16
 8014302:	4630      	mov	r0, r6
 8014304:	f7fc fa06 	bl	8010714 <_printf_i>
 8014308:	e7e4      	b.n	80142d4 <_vfiprintf_r+0x208>
 801430a:	bf00      	nop
 801430c:	080164d8 	.word	0x080164d8
 8014310:	080164f8 	.word	0x080164f8
 8014314:	080164b8 	.word	0x080164b8
 8014318:	080164a4 	.word	0x080164a4
 801431c:	080164ae 	.word	0x080164ae
 8014320:	080101cd 	.word	0x080101cd
 8014324:	080140a7 	.word	0x080140a7
 8014328:	080164aa 	.word	0x080164aa
 801432c:	00000000 	.word	0x00000000

08014330 <nan>:
 8014330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014338 <nan+0x8>
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	00000000 	.word	0x00000000
 801433c:	7ff80000 	.word	0x7ff80000

08014340 <_sbrk_r>:
 8014340:	b538      	push	{r3, r4, r5, lr}
 8014342:	4d06      	ldr	r5, [pc, #24]	; (801435c <_sbrk_r+0x1c>)
 8014344:	2300      	movs	r3, #0
 8014346:	4604      	mov	r4, r0
 8014348:	4608      	mov	r0, r1
 801434a:	602b      	str	r3, [r5, #0]
 801434c:	f7fa ffe4 	bl	800f318 <_sbrk>
 8014350:	1c43      	adds	r3, r0, #1
 8014352:	d102      	bne.n	801435a <_sbrk_r+0x1a>
 8014354:	682b      	ldr	r3, [r5, #0]
 8014356:	b103      	cbz	r3, 801435a <_sbrk_r+0x1a>
 8014358:	6023      	str	r3, [r4, #0]
 801435a:	bd38      	pop	{r3, r4, r5, pc}
 801435c:	2000386c 	.word	0x2000386c

08014360 <finitef>:
 8014360:	b082      	sub	sp, #8
 8014362:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014366:	9801      	ldr	r0, [sp, #4]
 8014368:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801436c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014370:	bfac      	ite	ge
 8014372:	2000      	movge	r0, #0
 8014374:	2001      	movlt	r0, #1
 8014376:	b002      	add	sp, #8
 8014378:	4770      	bx	lr

0801437a <strncmp>:
 801437a:	b510      	push	{r4, lr}
 801437c:	b16a      	cbz	r2, 801439a <strncmp+0x20>
 801437e:	3901      	subs	r1, #1
 8014380:	1884      	adds	r4, r0, r2
 8014382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014386:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801438a:	4293      	cmp	r3, r2
 801438c:	d103      	bne.n	8014396 <strncmp+0x1c>
 801438e:	42a0      	cmp	r0, r4
 8014390:	d001      	beq.n	8014396 <strncmp+0x1c>
 8014392:	2b00      	cmp	r3, #0
 8014394:	d1f5      	bne.n	8014382 <strncmp+0x8>
 8014396:	1a98      	subs	r0, r3, r2
 8014398:	bd10      	pop	{r4, pc}
 801439a:	4610      	mov	r0, r2
 801439c:	e7fc      	b.n	8014398 <strncmp+0x1e>
	...

080143a0 <__swbuf_r>:
 80143a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a2:	460e      	mov	r6, r1
 80143a4:	4614      	mov	r4, r2
 80143a6:	4605      	mov	r5, r0
 80143a8:	b118      	cbz	r0, 80143b2 <__swbuf_r+0x12>
 80143aa:	6983      	ldr	r3, [r0, #24]
 80143ac:	b90b      	cbnz	r3, 80143b2 <__swbuf_r+0x12>
 80143ae:	f000 f9e7 	bl	8014780 <__sinit>
 80143b2:	4b21      	ldr	r3, [pc, #132]	; (8014438 <__swbuf_r+0x98>)
 80143b4:	429c      	cmp	r4, r3
 80143b6:	d12b      	bne.n	8014410 <__swbuf_r+0x70>
 80143b8:	686c      	ldr	r4, [r5, #4]
 80143ba:	69a3      	ldr	r3, [r4, #24]
 80143bc:	60a3      	str	r3, [r4, #8]
 80143be:	89a3      	ldrh	r3, [r4, #12]
 80143c0:	071a      	lsls	r2, r3, #28
 80143c2:	d52f      	bpl.n	8014424 <__swbuf_r+0x84>
 80143c4:	6923      	ldr	r3, [r4, #16]
 80143c6:	b36b      	cbz	r3, 8014424 <__swbuf_r+0x84>
 80143c8:	6923      	ldr	r3, [r4, #16]
 80143ca:	6820      	ldr	r0, [r4, #0]
 80143cc:	1ac0      	subs	r0, r0, r3
 80143ce:	6963      	ldr	r3, [r4, #20]
 80143d0:	b2f6      	uxtb	r6, r6
 80143d2:	4283      	cmp	r3, r0
 80143d4:	4637      	mov	r7, r6
 80143d6:	dc04      	bgt.n	80143e2 <__swbuf_r+0x42>
 80143d8:	4621      	mov	r1, r4
 80143da:	4628      	mov	r0, r5
 80143dc:	f000 f93c 	bl	8014658 <_fflush_r>
 80143e0:	bb30      	cbnz	r0, 8014430 <__swbuf_r+0x90>
 80143e2:	68a3      	ldr	r3, [r4, #8]
 80143e4:	3b01      	subs	r3, #1
 80143e6:	60a3      	str	r3, [r4, #8]
 80143e8:	6823      	ldr	r3, [r4, #0]
 80143ea:	1c5a      	adds	r2, r3, #1
 80143ec:	6022      	str	r2, [r4, #0]
 80143ee:	701e      	strb	r6, [r3, #0]
 80143f0:	6963      	ldr	r3, [r4, #20]
 80143f2:	3001      	adds	r0, #1
 80143f4:	4283      	cmp	r3, r0
 80143f6:	d004      	beq.n	8014402 <__swbuf_r+0x62>
 80143f8:	89a3      	ldrh	r3, [r4, #12]
 80143fa:	07db      	lsls	r3, r3, #31
 80143fc:	d506      	bpl.n	801440c <__swbuf_r+0x6c>
 80143fe:	2e0a      	cmp	r6, #10
 8014400:	d104      	bne.n	801440c <__swbuf_r+0x6c>
 8014402:	4621      	mov	r1, r4
 8014404:	4628      	mov	r0, r5
 8014406:	f000 f927 	bl	8014658 <_fflush_r>
 801440a:	b988      	cbnz	r0, 8014430 <__swbuf_r+0x90>
 801440c:	4638      	mov	r0, r7
 801440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014410:	4b0a      	ldr	r3, [pc, #40]	; (801443c <__swbuf_r+0x9c>)
 8014412:	429c      	cmp	r4, r3
 8014414:	d101      	bne.n	801441a <__swbuf_r+0x7a>
 8014416:	68ac      	ldr	r4, [r5, #8]
 8014418:	e7cf      	b.n	80143ba <__swbuf_r+0x1a>
 801441a:	4b09      	ldr	r3, [pc, #36]	; (8014440 <__swbuf_r+0xa0>)
 801441c:	429c      	cmp	r4, r3
 801441e:	bf08      	it	eq
 8014420:	68ec      	ldreq	r4, [r5, #12]
 8014422:	e7ca      	b.n	80143ba <__swbuf_r+0x1a>
 8014424:	4621      	mov	r1, r4
 8014426:	4628      	mov	r0, r5
 8014428:	f000 f81a 	bl	8014460 <__swsetup_r>
 801442c:	2800      	cmp	r0, #0
 801442e:	d0cb      	beq.n	80143c8 <__swbuf_r+0x28>
 8014430:	f04f 37ff 	mov.w	r7, #4294967295
 8014434:	e7ea      	b.n	801440c <__swbuf_r+0x6c>
 8014436:	bf00      	nop
 8014438:	080164d8 	.word	0x080164d8
 801443c:	080164f8 	.word	0x080164f8
 8014440:	080164b8 	.word	0x080164b8

08014444 <__ascii_wctomb>:
 8014444:	b149      	cbz	r1, 801445a <__ascii_wctomb+0x16>
 8014446:	2aff      	cmp	r2, #255	; 0xff
 8014448:	bf85      	ittet	hi
 801444a:	238a      	movhi	r3, #138	; 0x8a
 801444c:	6003      	strhi	r3, [r0, #0]
 801444e:	700a      	strbls	r2, [r1, #0]
 8014450:	f04f 30ff 	movhi.w	r0, #4294967295
 8014454:	bf98      	it	ls
 8014456:	2001      	movls	r0, #1
 8014458:	4770      	bx	lr
 801445a:	4608      	mov	r0, r1
 801445c:	4770      	bx	lr
	...

08014460 <__swsetup_r>:
 8014460:	4b32      	ldr	r3, [pc, #200]	; (801452c <__swsetup_r+0xcc>)
 8014462:	b570      	push	{r4, r5, r6, lr}
 8014464:	681d      	ldr	r5, [r3, #0]
 8014466:	4606      	mov	r6, r0
 8014468:	460c      	mov	r4, r1
 801446a:	b125      	cbz	r5, 8014476 <__swsetup_r+0x16>
 801446c:	69ab      	ldr	r3, [r5, #24]
 801446e:	b913      	cbnz	r3, 8014476 <__swsetup_r+0x16>
 8014470:	4628      	mov	r0, r5
 8014472:	f000 f985 	bl	8014780 <__sinit>
 8014476:	4b2e      	ldr	r3, [pc, #184]	; (8014530 <__swsetup_r+0xd0>)
 8014478:	429c      	cmp	r4, r3
 801447a:	d10f      	bne.n	801449c <__swsetup_r+0x3c>
 801447c:	686c      	ldr	r4, [r5, #4]
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014484:	0719      	lsls	r1, r3, #28
 8014486:	d42c      	bmi.n	80144e2 <__swsetup_r+0x82>
 8014488:	06dd      	lsls	r5, r3, #27
 801448a:	d411      	bmi.n	80144b0 <__swsetup_r+0x50>
 801448c:	2309      	movs	r3, #9
 801448e:	6033      	str	r3, [r6, #0]
 8014490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014494:	81a3      	strh	r3, [r4, #12]
 8014496:	f04f 30ff 	mov.w	r0, #4294967295
 801449a:	e03e      	b.n	801451a <__swsetup_r+0xba>
 801449c:	4b25      	ldr	r3, [pc, #148]	; (8014534 <__swsetup_r+0xd4>)
 801449e:	429c      	cmp	r4, r3
 80144a0:	d101      	bne.n	80144a6 <__swsetup_r+0x46>
 80144a2:	68ac      	ldr	r4, [r5, #8]
 80144a4:	e7eb      	b.n	801447e <__swsetup_r+0x1e>
 80144a6:	4b24      	ldr	r3, [pc, #144]	; (8014538 <__swsetup_r+0xd8>)
 80144a8:	429c      	cmp	r4, r3
 80144aa:	bf08      	it	eq
 80144ac:	68ec      	ldreq	r4, [r5, #12]
 80144ae:	e7e6      	b.n	801447e <__swsetup_r+0x1e>
 80144b0:	0758      	lsls	r0, r3, #29
 80144b2:	d512      	bpl.n	80144da <__swsetup_r+0x7a>
 80144b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144b6:	b141      	cbz	r1, 80144ca <__swsetup_r+0x6a>
 80144b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144bc:	4299      	cmp	r1, r3
 80144be:	d002      	beq.n	80144c6 <__swsetup_r+0x66>
 80144c0:	4630      	mov	r0, r6
 80144c2:	f7ff fbd3 	bl	8013c6c <_free_r>
 80144c6:	2300      	movs	r3, #0
 80144c8:	6363      	str	r3, [r4, #52]	; 0x34
 80144ca:	89a3      	ldrh	r3, [r4, #12]
 80144cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144d0:	81a3      	strh	r3, [r4, #12]
 80144d2:	2300      	movs	r3, #0
 80144d4:	6063      	str	r3, [r4, #4]
 80144d6:	6923      	ldr	r3, [r4, #16]
 80144d8:	6023      	str	r3, [r4, #0]
 80144da:	89a3      	ldrh	r3, [r4, #12]
 80144dc:	f043 0308 	orr.w	r3, r3, #8
 80144e0:	81a3      	strh	r3, [r4, #12]
 80144e2:	6923      	ldr	r3, [r4, #16]
 80144e4:	b94b      	cbnz	r3, 80144fa <__swsetup_r+0x9a>
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144f0:	d003      	beq.n	80144fa <__swsetup_r+0x9a>
 80144f2:	4621      	mov	r1, r4
 80144f4:	4630      	mov	r0, r6
 80144f6:	f000 fa07 	bl	8014908 <__smakebuf_r>
 80144fa:	89a0      	ldrh	r0, [r4, #12]
 80144fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014500:	f010 0301 	ands.w	r3, r0, #1
 8014504:	d00a      	beq.n	801451c <__swsetup_r+0xbc>
 8014506:	2300      	movs	r3, #0
 8014508:	60a3      	str	r3, [r4, #8]
 801450a:	6963      	ldr	r3, [r4, #20]
 801450c:	425b      	negs	r3, r3
 801450e:	61a3      	str	r3, [r4, #24]
 8014510:	6923      	ldr	r3, [r4, #16]
 8014512:	b943      	cbnz	r3, 8014526 <__swsetup_r+0xc6>
 8014514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014518:	d1ba      	bne.n	8014490 <__swsetup_r+0x30>
 801451a:	bd70      	pop	{r4, r5, r6, pc}
 801451c:	0781      	lsls	r1, r0, #30
 801451e:	bf58      	it	pl
 8014520:	6963      	ldrpl	r3, [r4, #20]
 8014522:	60a3      	str	r3, [r4, #8]
 8014524:	e7f4      	b.n	8014510 <__swsetup_r+0xb0>
 8014526:	2000      	movs	r0, #0
 8014528:	e7f7      	b.n	801451a <__swsetup_r+0xba>
 801452a:	bf00      	nop
 801452c:	200003a8 	.word	0x200003a8
 8014530:	080164d8 	.word	0x080164d8
 8014534:	080164f8 	.word	0x080164f8
 8014538:	080164b8 	.word	0x080164b8

0801453c <abort>:
 801453c:	b508      	push	{r3, lr}
 801453e:	2006      	movs	r0, #6
 8014540:	f000 fa96 	bl	8014a70 <raise>
 8014544:	2001      	movs	r0, #1
 8014546:	f7fa fe70 	bl	800f22a <_exit>
	...

0801454c <__sflush_r>:
 801454c:	898a      	ldrh	r2, [r1, #12]
 801454e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014552:	4605      	mov	r5, r0
 8014554:	0710      	lsls	r0, r2, #28
 8014556:	460c      	mov	r4, r1
 8014558:	d458      	bmi.n	801460c <__sflush_r+0xc0>
 801455a:	684b      	ldr	r3, [r1, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	dc05      	bgt.n	801456c <__sflush_r+0x20>
 8014560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014562:	2b00      	cmp	r3, #0
 8014564:	dc02      	bgt.n	801456c <__sflush_r+0x20>
 8014566:	2000      	movs	r0, #0
 8014568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801456c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801456e:	2e00      	cmp	r6, #0
 8014570:	d0f9      	beq.n	8014566 <__sflush_r+0x1a>
 8014572:	2300      	movs	r3, #0
 8014574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014578:	682f      	ldr	r7, [r5, #0]
 801457a:	602b      	str	r3, [r5, #0]
 801457c:	d032      	beq.n	80145e4 <__sflush_r+0x98>
 801457e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014580:	89a3      	ldrh	r3, [r4, #12]
 8014582:	075a      	lsls	r2, r3, #29
 8014584:	d505      	bpl.n	8014592 <__sflush_r+0x46>
 8014586:	6863      	ldr	r3, [r4, #4]
 8014588:	1ac0      	subs	r0, r0, r3
 801458a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801458c:	b10b      	cbz	r3, 8014592 <__sflush_r+0x46>
 801458e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014590:	1ac0      	subs	r0, r0, r3
 8014592:	2300      	movs	r3, #0
 8014594:	4602      	mov	r2, r0
 8014596:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014598:	6a21      	ldr	r1, [r4, #32]
 801459a:	4628      	mov	r0, r5
 801459c:	47b0      	blx	r6
 801459e:	1c43      	adds	r3, r0, #1
 80145a0:	89a3      	ldrh	r3, [r4, #12]
 80145a2:	d106      	bne.n	80145b2 <__sflush_r+0x66>
 80145a4:	6829      	ldr	r1, [r5, #0]
 80145a6:	291d      	cmp	r1, #29
 80145a8:	d82c      	bhi.n	8014604 <__sflush_r+0xb8>
 80145aa:	4a2a      	ldr	r2, [pc, #168]	; (8014654 <__sflush_r+0x108>)
 80145ac:	40ca      	lsrs	r2, r1
 80145ae:	07d6      	lsls	r6, r2, #31
 80145b0:	d528      	bpl.n	8014604 <__sflush_r+0xb8>
 80145b2:	2200      	movs	r2, #0
 80145b4:	6062      	str	r2, [r4, #4]
 80145b6:	04d9      	lsls	r1, r3, #19
 80145b8:	6922      	ldr	r2, [r4, #16]
 80145ba:	6022      	str	r2, [r4, #0]
 80145bc:	d504      	bpl.n	80145c8 <__sflush_r+0x7c>
 80145be:	1c42      	adds	r2, r0, #1
 80145c0:	d101      	bne.n	80145c6 <__sflush_r+0x7a>
 80145c2:	682b      	ldr	r3, [r5, #0]
 80145c4:	b903      	cbnz	r3, 80145c8 <__sflush_r+0x7c>
 80145c6:	6560      	str	r0, [r4, #84]	; 0x54
 80145c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ca:	602f      	str	r7, [r5, #0]
 80145cc:	2900      	cmp	r1, #0
 80145ce:	d0ca      	beq.n	8014566 <__sflush_r+0x1a>
 80145d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145d4:	4299      	cmp	r1, r3
 80145d6:	d002      	beq.n	80145de <__sflush_r+0x92>
 80145d8:	4628      	mov	r0, r5
 80145da:	f7ff fb47 	bl	8013c6c <_free_r>
 80145de:	2000      	movs	r0, #0
 80145e0:	6360      	str	r0, [r4, #52]	; 0x34
 80145e2:	e7c1      	b.n	8014568 <__sflush_r+0x1c>
 80145e4:	6a21      	ldr	r1, [r4, #32]
 80145e6:	2301      	movs	r3, #1
 80145e8:	4628      	mov	r0, r5
 80145ea:	47b0      	blx	r6
 80145ec:	1c41      	adds	r1, r0, #1
 80145ee:	d1c7      	bne.n	8014580 <__sflush_r+0x34>
 80145f0:	682b      	ldr	r3, [r5, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d0c4      	beq.n	8014580 <__sflush_r+0x34>
 80145f6:	2b1d      	cmp	r3, #29
 80145f8:	d001      	beq.n	80145fe <__sflush_r+0xb2>
 80145fa:	2b16      	cmp	r3, #22
 80145fc:	d101      	bne.n	8014602 <__sflush_r+0xb6>
 80145fe:	602f      	str	r7, [r5, #0]
 8014600:	e7b1      	b.n	8014566 <__sflush_r+0x1a>
 8014602:	89a3      	ldrh	r3, [r4, #12]
 8014604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014608:	81a3      	strh	r3, [r4, #12]
 801460a:	e7ad      	b.n	8014568 <__sflush_r+0x1c>
 801460c:	690f      	ldr	r7, [r1, #16]
 801460e:	2f00      	cmp	r7, #0
 8014610:	d0a9      	beq.n	8014566 <__sflush_r+0x1a>
 8014612:	0793      	lsls	r3, r2, #30
 8014614:	680e      	ldr	r6, [r1, #0]
 8014616:	bf08      	it	eq
 8014618:	694b      	ldreq	r3, [r1, #20]
 801461a:	600f      	str	r7, [r1, #0]
 801461c:	bf18      	it	ne
 801461e:	2300      	movne	r3, #0
 8014620:	eba6 0807 	sub.w	r8, r6, r7
 8014624:	608b      	str	r3, [r1, #8]
 8014626:	f1b8 0f00 	cmp.w	r8, #0
 801462a:	dd9c      	ble.n	8014566 <__sflush_r+0x1a>
 801462c:	6a21      	ldr	r1, [r4, #32]
 801462e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014630:	4643      	mov	r3, r8
 8014632:	463a      	mov	r2, r7
 8014634:	4628      	mov	r0, r5
 8014636:	47b0      	blx	r6
 8014638:	2800      	cmp	r0, #0
 801463a:	dc06      	bgt.n	801464a <__sflush_r+0xfe>
 801463c:	89a3      	ldrh	r3, [r4, #12]
 801463e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014642:	81a3      	strh	r3, [r4, #12]
 8014644:	f04f 30ff 	mov.w	r0, #4294967295
 8014648:	e78e      	b.n	8014568 <__sflush_r+0x1c>
 801464a:	4407      	add	r7, r0
 801464c:	eba8 0800 	sub.w	r8, r8, r0
 8014650:	e7e9      	b.n	8014626 <__sflush_r+0xda>
 8014652:	bf00      	nop
 8014654:	20400001 	.word	0x20400001

08014658 <_fflush_r>:
 8014658:	b538      	push	{r3, r4, r5, lr}
 801465a:	690b      	ldr	r3, [r1, #16]
 801465c:	4605      	mov	r5, r0
 801465e:	460c      	mov	r4, r1
 8014660:	b913      	cbnz	r3, 8014668 <_fflush_r+0x10>
 8014662:	2500      	movs	r5, #0
 8014664:	4628      	mov	r0, r5
 8014666:	bd38      	pop	{r3, r4, r5, pc}
 8014668:	b118      	cbz	r0, 8014672 <_fflush_r+0x1a>
 801466a:	6983      	ldr	r3, [r0, #24]
 801466c:	b90b      	cbnz	r3, 8014672 <_fflush_r+0x1a>
 801466e:	f000 f887 	bl	8014780 <__sinit>
 8014672:	4b14      	ldr	r3, [pc, #80]	; (80146c4 <_fflush_r+0x6c>)
 8014674:	429c      	cmp	r4, r3
 8014676:	d11b      	bne.n	80146b0 <_fflush_r+0x58>
 8014678:	686c      	ldr	r4, [r5, #4]
 801467a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d0ef      	beq.n	8014662 <_fflush_r+0xa>
 8014682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014684:	07d0      	lsls	r0, r2, #31
 8014686:	d404      	bmi.n	8014692 <_fflush_r+0x3a>
 8014688:	0599      	lsls	r1, r3, #22
 801468a:	d402      	bmi.n	8014692 <_fflush_r+0x3a>
 801468c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801468e:	f000 f915 	bl	80148bc <__retarget_lock_acquire_recursive>
 8014692:	4628      	mov	r0, r5
 8014694:	4621      	mov	r1, r4
 8014696:	f7ff ff59 	bl	801454c <__sflush_r>
 801469a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801469c:	07da      	lsls	r2, r3, #31
 801469e:	4605      	mov	r5, r0
 80146a0:	d4e0      	bmi.n	8014664 <_fflush_r+0xc>
 80146a2:	89a3      	ldrh	r3, [r4, #12]
 80146a4:	059b      	lsls	r3, r3, #22
 80146a6:	d4dd      	bmi.n	8014664 <_fflush_r+0xc>
 80146a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146aa:	f000 f908 	bl	80148be <__retarget_lock_release_recursive>
 80146ae:	e7d9      	b.n	8014664 <_fflush_r+0xc>
 80146b0:	4b05      	ldr	r3, [pc, #20]	; (80146c8 <_fflush_r+0x70>)
 80146b2:	429c      	cmp	r4, r3
 80146b4:	d101      	bne.n	80146ba <_fflush_r+0x62>
 80146b6:	68ac      	ldr	r4, [r5, #8]
 80146b8:	e7df      	b.n	801467a <_fflush_r+0x22>
 80146ba:	4b04      	ldr	r3, [pc, #16]	; (80146cc <_fflush_r+0x74>)
 80146bc:	429c      	cmp	r4, r3
 80146be:	bf08      	it	eq
 80146c0:	68ec      	ldreq	r4, [r5, #12]
 80146c2:	e7da      	b.n	801467a <_fflush_r+0x22>
 80146c4:	080164d8 	.word	0x080164d8
 80146c8:	080164f8 	.word	0x080164f8
 80146cc:	080164b8 	.word	0x080164b8

080146d0 <std>:
 80146d0:	2300      	movs	r3, #0
 80146d2:	b510      	push	{r4, lr}
 80146d4:	4604      	mov	r4, r0
 80146d6:	e9c0 3300 	strd	r3, r3, [r0]
 80146da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146de:	6083      	str	r3, [r0, #8]
 80146e0:	8181      	strh	r1, [r0, #12]
 80146e2:	6643      	str	r3, [r0, #100]	; 0x64
 80146e4:	81c2      	strh	r2, [r0, #14]
 80146e6:	6183      	str	r3, [r0, #24]
 80146e8:	4619      	mov	r1, r3
 80146ea:	2208      	movs	r2, #8
 80146ec:	305c      	adds	r0, #92	; 0x5c
 80146ee:	f7fb fcc5 	bl	801007c <memset>
 80146f2:	4b05      	ldr	r3, [pc, #20]	; (8014708 <std+0x38>)
 80146f4:	6263      	str	r3, [r4, #36]	; 0x24
 80146f6:	4b05      	ldr	r3, [pc, #20]	; (801470c <std+0x3c>)
 80146f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80146fa:	4b05      	ldr	r3, [pc, #20]	; (8014710 <std+0x40>)
 80146fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146fe:	4b05      	ldr	r3, [pc, #20]	; (8014714 <std+0x44>)
 8014700:	6224      	str	r4, [r4, #32]
 8014702:	6323      	str	r3, [r4, #48]	; 0x30
 8014704:	bd10      	pop	{r4, pc}
 8014706:	bf00      	nop
 8014708:	08014aa9 	.word	0x08014aa9
 801470c:	08014acb 	.word	0x08014acb
 8014710:	08014b03 	.word	0x08014b03
 8014714:	08014b27 	.word	0x08014b27

08014718 <_cleanup_r>:
 8014718:	4901      	ldr	r1, [pc, #4]	; (8014720 <_cleanup_r+0x8>)
 801471a:	f000 b8af 	b.w	801487c <_fwalk_reent>
 801471e:	bf00      	nop
 8014720:	08014659 	.word	0x08014659

08014724 <__sfmoreglue>:
 8014724:	b570      	push	{r4, r5, r6, lr}
 8014726:	1e4a      	subs	r2, r1, #1
 8014728:	2568      	movs	r5, #104	; 0x68
 801472a:	4355      	muls	r5, r2
 801472c:	460e      	mov	r6, r1
 801472e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014732:	f7ff faeb 	bl	8013d0c <_malloc_r>
 8014736:	4604      	mov	r4, r0
 8014738:	b140      	cbz	r0, 801474c <__sfmoreglue+0x28>
 801473a:	2100      	movs	r1, #0
 801473c:	e9c0 1600 	strd	r1, r6, [r0]
 8014740:	300c      	adds	r0, #12
 8014742:	60a0      	str	r0, [r4, #8]
 8014744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014748:	f7fb fc98 	bl	801007c <memset>
 801474c:	4620      	mov	r0, r4
 801474e:	bd70      	pop	{r4, r5, r6, pc}

08014750 <__sfp_lock_acquire>:
 8014750:	4801      	ldr	r0, [pc, #4]	; (8014758 <__sfp_lock_acquire+0x8>)
 8014752:	f000 b8b3 	b.w	80148bc <__retarget_lock_acquire_recursive>
 8014756:	bf00      	nop
 8014758:	20003868 	.word	0x20003868

0801475c <__sfp_lock_release>:
 801475c:	4801      	ldr	r0, [pc, #4]	; (8014764 <__sfp_lock_release+0x8>)
 801475e:	f000 b8ae 	b.w	80148be <__retarget_lock_release_recursive>
 8014762:	bf00      	nop
 8014764:	20003868 	.word	0x20003868

08014768 <__sinit_lock_acquire>:
 8014768:	4801      	ldr	r0, [pc, #4]	; (8014770 <__sinit_lock_acquire+0x8>)
 801476a:	f000 b8a7 	b.w	80148bc <__retarget_lock_acquire_recursive>
 801476e:	bf00      	nop
 8014770:	20003863 	.word	0x20003863

08014774 <__sinit_lock_release>:
 8014774:	4801      	ldr	r0, [pc, #4]	; (801477c <__sinit_lock_release+0x8>)
 8014776:	f000 b8a2 	b.w	80148be <__retarget_lock_release_recursive>
 801477a:	bf00      	nop
 801477c:	20003863 	.word	0x20003863

08014780 <__sinit>:
 8014780:	b510      	push	{r4, lr}
 8014782:	4604      	mov	r4, r0
 8014784:	f7ff fff0 	bl	8014768 <__sinit_lock_acquire>
 8014788:	69a3      	ldr	r3, [r4, #24]
 801478a:	b11b      	cbz	r3, 8014794 <__sinit+0x14>
 801478c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014790:	f7ff bff0 	b.w	8014774 <__sinit_lock_release>
 8014794:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014798:	6523      	str	r3, [r4, #80]	; 0x50
 801479a:	4b13      	ldr	r3, [pc, #76]	; (80147e8 <__sinit+0x68>)
 801479c:	4a13      	ldr	r2, [pc, #76]	; (80147ec <__sinit+0x6c>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80147a2:	42a3      	cmp	r3, r4
 80147a4:	bf04      	itt	eq
 80147a6:	2301      	moveq	r3, #1
 80147a8:	61a3      	streq	r3, [r4, #24]
 80147aa:	4620      	mov	r0, r4
 80147ac:	f000 f820 	bl	80147f0 <__sfp>
 80147b0:	6060      	str	r0, [r4, #4]
 80147b2:	4620      	mov	r0, r4
 80147b4:	f000 f81c 	bl	80147f0 <__sfp>
 80147b8:	60a0      	str	r0, [r4, #8]
 80147ba:	4620      	mov	r0, r4
 80147bc:	f000 f818 	bl	80147f0 <__sfp>
 80147c0:	2200      	movs	r2, #0
 80147c2:	60e0      	str	r0, [r4, #12]
 80147c4:	2104      	movs	r1, #4
 80147c6:	6860      	ldr	r0, [r4, #4]
 80147c8:	f7ff ff82 	bl	80146d0 <std>
 80147cc:	68a0      	ldr	r0, [r4, #8]
 80147ce:	2201      	movs	r2, #1
 80147d0:	2109      	movs	r1, #9
 80147d2:	f7ff ff7d 	bl	80146d0 <std>
 80147d6:	68e0      	ldr	r0, [r4, #12]
 80147d8:	2202      	movs	r2, #2
 80147da:	2112      	movs	r1, #18
 80147dc:	f7ff ff78 	bl	80146d0 <std>
 80147e0:	2301      	movs	r3, #1
 80147e2:	61a3      	str	r3, [r4, #24]
 80147e4:	e7d2      	b.n	801478c <__sinit+0xc>
 80147e6:	bf00      	nop
 80147e8:	08015fac 	.word	0x08015fac
 80147ec:	08014719 	.word	0x08014719

080147f0 <__sfp>:
 80147f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147f2:	4607      	mov	r7, r0
 80147f4:	f7ff ffac 	bl	8014750 <__sfp_lock_acquire>
 80147f8:	4b1e      	ldr	r3, [pc, #120]	; (8014874 <__sfp+0x84>)
 80147fa:	681e      	ldr	r6, [r3, #0]
 80147fc:	69b3      	ldr	r3, [r6, #24]
 80147fe:	b913      	cbnz	r3, 8014806 <__sfp+0x16>
 8014800:	4630      	mov	r0, r6
 8014802:	f7ff ffbd 	bl	8014780 <__sinit>
 8014806:	3648      	adds	r6, #72	; 0x48
 8014808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801480c:	3b01      	subs	r3, #1
 801480e:	d503      	bpl.n	8014818 <__sfp+0x28>
 8014810:	6833      	ldr	r3, [r6, #0]
 8014812:	b30b      	cbz	r3, 8014858 <__sfp+0x68>
 8014814:	6836      	ldr	r6, [r6, #0]
 8014816:	e7f7      	b.n	8014808 <__sfp+0x18>
 8014818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801481c:	b9d5      	cbnz	r5, 8014854 <__sfp+0x64>
 801481e:	4b16      	ldr	r3, [pc, #88]	; (8014878 <__sfp+0x88>)
 8014820:	60e3      	str	r3, [r4, #12]
 8014822:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014826:	6665      	str	r5, [r4, #100]	; 0x64
 8014828:	f000 f847 	bl	80148ba <__retarget_lock_init_recursive>
 801482c:	f7ff ff96 	bl	801475c <__sfp_lock_release>
 8014830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014838:	6025      	str	r5, [r4, #0]
 801483a:	61a5      	str	r5, [r4, #24]
 801483c:	2208      	movs	r2, #8
 801483e:	4629      	mov	r1, r5
 8014840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014844:	f7fb fc1a 	bl	801007c <memset>
 8014848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801484c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014850:	4620      	mov	r0, r4
 8014852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014854:	3468      	adds	r4, #104	; 0x68
 8014856:	e7d9      	b.n	801480c <__sfp+0x1c>
 8014858:	2104      	movs	r1, #4
 801485a:	4638      	mov	r0, r7
 801485c:	f7ff ff62 	bl	8014724 <__sfmoreglue>
 8014860:	4604      	mov	r4, r0
 8014862:	6030      	str	r0, [r6, #0]
 8014864:	2800      	cmp	r0, #0
 8014866:	d1d5      	bne.n	8014814 <__sfp+0x24>
 8014868:	f7ff ff78 	bl	801475c <__sfp_lock_release>
 801486c:	230c      	movs	r3, #12
 801486e:	603b      	str	r3, [r7, #0]
 8014870:	e7ee      	b.n	8014850 <__sfp+0x60>
 8014872:	bf00      	nop
 8014874:	08015fac 	.word	0x08015fac
 8014878:	ffff0001 	.word	0xffff0001

0801487c <_fwalk_reent>:
 801487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014880:	4606      	mov	r6, r0
 8014882:	4688      	mov	r8, r1
 8014884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014888:	2700      	movs	r7, #0
 801488a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801488e:	f1b9 0901 	subs.w	r9, r9, #1
 8014892:	d505      	bpl.n	80148a0 <_fwalk_reent+0x24>
 8014894:	6824      	ldr	r4, [r4, #0]
 8014896:	2c00      	cmp	r4, #0
 8014898:	d1f7      	bne.n	801488a <_fwalk_reent+0xe>
 801489a:	4638      	mov	r0, r7
 801489c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148a0:	89ab      	ldrh	r3, [r5, #12]
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d907      	bls.n	80148b6 <_fwalk_reent+0x3a>
 80148a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148aa:	3301      	adds	r3, #1
 80148ac:	d003      	beq.n	80148b6 <_fwalk_reent+0x3a>
 80148ae:	4629      	mov	r1, r5
 80148b0:	4630      	mov	r0, r6
 80148b2:	47c0      	blx	r8
 80148b4:	4307      	orrs	r7, r0
 80148b6:	3568      	adds	r5, #104	; 0x68
 80148b8:	e7e9      	b.n	801488e <_fwalk_reent+0x12>

080148ba <__retarget_lock_init_recursive>:
 80148ba:	4770      	bx	lr

080148bc <__retarget_lock_acquire_recursive>:
 80148bc:	4770      	bx	lr

080148be <__retarget_lock_release_recursive>:
 80148be:	4770      	bx	lr

080148c0 <__swhatbuf_r>:
 80148c0:	b570      	push	{r4, r5, r6, lr}
 80148c2:	460e      	mov	r6, r1
 80148c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148c8:	2900      	cmp	r1, #0
 80148ca:	b096      	sub	sp, #88	; 0x58
 80148cc:	4614      	mov	r4, r2
 80148ce:	461d      	mov	r5, r3
 80148d0:	da07      	bge.n	80148e2 <__swhatbuf_r+0x22>
 80148d2:	2300      	movs	r3, #0
 80148d4:	602b      	str	r3, [r5, #0]
 80148d6:	89b3      	ldrh	r3, [r6, #12]
 80148d8:	061a      	lsls	r2, r3, #24
 80148da:	d410      	bmi.n	80148fe <__swhatbuf_r+0x3e>
 80148dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148e0:	e00e      	b.n	8014900 <__swhatbuf_r+0x40>
 80148e2:	466a      	mov	r2, sp
 80148e4:	f000 f946 	bl	8014b74 <_fstat_r>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	dbf2      	blt.n	80148d2 <__swhatbuf_r+0x12>
 80148ec:	9a01      	ldr	r2, [sp, #4]
 80148ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80148f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80148f6:	425a      	negs	r2, r3
 80148f8:	415a      	adcs	r2, r3
 80148fa:	602a      	str	r2, [r5, #0]
 80148fc:	e7ee      	b.n	80148dc <__swhatbuf_r+0x1c>
 80148fe:	2340      	movs	r3, #64	; 0x40
 8014900:	2000      	movs	r0, #0
 8014902:	6023      	str	r3, [r4, #0]
 8014904:	b016      	add	sp, #88	; 0x58
 8014906:	bd70      	pop	{r4, r5, r6, pc}

08014908 <__smakebuf_r>:
 8014908:	898b      	ldrh	r3, [r1, #12]
 801490a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801490c:	079d      	lsls	r5, r3, #30
 801490e:	4606      	mov	r6, r0
 8014910:	460c      	mov	r4, r1
 8014912:	d507      	bpl.n	8014924 <__smakebuf_r+0x1c>
 8014914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	6123      	str	r3, [r4, #16]
 801491c:	2301      	movs	r3, #1
 801491e:	6163      	str	r3, [r4, #20]
 8014920:	b002      	add	sp, #8
 8014922:	bd70      	pop	{r4, r5, r6, pc}
 8014924:	ab01      	add	r3, sp, #4
 8014926:	466a      	mov	r2, sp
 8014928:	f7ff ffca 	bl	80148c0 <__swhatbuf_r>
 801492c:	9900      	ldr	r1, [sp, #0]
 801492e:	4605      	mov	r5, r0
 8014930:	4630      	mov	r0, r6
 8014932:	f7ff f9eb 	bl	8013d0c <_malloc_r>
 8014936:	b948      	cbnz	r0, 801494c <__smakebuf_r+0x44>
 8014938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801493c:	059a      	lsls	r2, r3, #22
 801493e:	d4ef      	bmi.n	8014920 <__smakebuf_r+0x18>
 8014940:	f023 0303 	bic.w	r3, r3, #3
 8014944:	f043 0302 	orr.w	r3, r3, #2
 8014948:	81a3      	strh	r3, [r4, #12]
 801494a:	e7e3      	b.n	8014914 <__smakebuf_r+0xc>
 801494c:	4b0d      	ldr	r3, [pc, #52]	; (8014984 <__smakebuf_r+0x7c>)
 801494e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014950:	89a3      	ldrh	r3, [r4, #12]
 8014952:	6020      	str	r0, [r4, #0]
 8014954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014958:	81a3      	strh	r3, [r4, #12]
 801495a:	9b00      	ldr	r3, [sp, #0]
 801495c:	6163      	str	r3, [r4, #20]
 801495e:	9b01      	ldr	r3, [sp, #4]
 8014960:	6120      	str	r0, [r4, #16]
 8014962:	b15b      	cbz	r3, 801497c <__smakebuf_r+0x74>
 8014964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014968:	4630      	mov	r0, r6
 801496a:	f000 f915 	bl	8014b98 <_isatty_r>
 801496e:	b128      	cbz	r0, 801497c <__smakebuf_r+0x74>
 8014970:	89a3      	ldrh	r3, [r4, #12]
 8014972:	f023 0303 	bic.w	r3, r3, #3
 8014976:	f043 0301 	orr.w	r3, r3, #1
 801497a:	81a3      	strh	r3, [r4, #12]
 801497c:	89a0      	ldrh	r0, [r4, #12]
 801497e:	4305      	orrs	r5, r0
 8014980:	81a5      	strh	r5, [r4, #12]
 8014982:	e7cd      	b.n	8014920 <__smakebuf_r+0x18>
 8014984:	08014719 	.word	0x08014719

08014988 <memmove>:
 8014988:	4288      	cmp	r0, r1
 801498a:	b510      	push	{r4, lr}
 801498c:	eb01 0402 	add.w	r4, r1, r2
 8014990:	d902      	bls.n	8014998 <memmove+0x10>
 8014992:	4284      	cmp	r4, r0
 8014994:	4623      	mov	r3, r4
 8014996:	d807      	bhi.n	80149a8 <memmove+0x20>
 8014998:	1e43      	subs	r3, r0, #1
 801499a:	42a1      	cmp	r1, r4
 801499c:	d008      	beq.n	80149b0 <memmove+0x28>
 801499e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80149a6:	e7f8      	b.n	801499a <memmove+0x12>
 80149a8:	4402      	add	r2, r0
 80149aa:	4601      	mov	r1, r0
 80149ac:	428a      	cmp	r2, r1
 80149ae:	d100      	bne.n	80149b2 <memmove+0x2a>
 80149b0:	bd10      	pop	{r4, pc}
 80149b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80149b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80149ba:	e7f7      	b.n	80149ac <memmove+0x24>

080149bc <__malloc_lock>:
 80149bc:	4801      	ldr	r0, [pc, #4]	; (80149c4 <__malloc_lock+0x8>)
 80149be:	f7ff bf7d 	b.w	80148bc <__retarget_lock_acquire_recursive>
 80149c2:	bf00      	nop
 80149c4:	20003864 	.word	0x20003864

080149c8 <__malloc_unlock>:
 80149c8:	4801      	ldr	r0, [pc, #4]	; (80149d0 <__malloc_unlock+0x8>)
 80149ca:	f7ff bf78 	b.w	80148be <__retarget_lock_release_recursive>
 80149ce:	bf00      	nop
 80149d0:	20003864 	.word	0x20003864

080149d4 <_realloc_r>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	4607      	mov	r7, r0
 80149d8:	4614      	mov	r4, r2
 80149da:	460e      	mov	r6, r1
 80149dc:	b921      	cbnz	r1, 80149e8 <_realloc_r+0x14>
 80149de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80149e2:	4611      	mov	r1, r2
 80149e4:	f7ff b992 	b.w	8013d0c <_malloc_r>
 80149e8:	b922      	cbnz	r2, 80149f4 <_realloc_r+0x20>
 80149ea:	f7ff f93f 	bl	8013c6c <_free_r>
 80149ee:	4625      	mov	r5, r4
 80149f0:	4628      	mov	r0, r5
 80149f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149f4:	f000 f8f2 	bl	8014bdc <_malloc_usable_size_r>
 80149f8:	42a0      	cmp	r0, r4
 80149fa:	d20f      	bcs.n	8014a1c <_realloc_r+0x48>
 80149fc:	4621      	mov	r1, r4
 80149fe:	4638      	mov	r0, r7
 8014a00:	f7ff f984 	bl	8013d0c <_malloc_r>
 8014a04:	4605      	mov	r5, r0
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d0f2      	beq.n	80149f0 <_realloc_r+0x1c>
 8014a0a:	4631      	mov	r1, r6
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	f7fb fb27 	bl	8010060 <memcpy>
 8014a12:	4631      	mov	r1, r6
 8014a14:	4638      	mov	r0, r7
 8014a16:	f7ff f929 	bl	8013c6c <_free_r>
 8014a1a:	e7e9      	b.n	80149f0 <_realloc_r+0x1c>
 8014a1c:	4635      	mov	r5, r6
 8014a1e:	e7e7      	b.n	80149f0 <_realloc_r+0x1c>

08014a20 <_raise_r>:
 8014a20:	291f      	cmp	r1, #31
 8014a22:	b538      	push	{r3, r4, r5, lr}
 8014a24:	4604      	mov	r4, r0
 8014a26:	460d      	mov	r5, r1
 8014a28:	d904      	bls.n	8014a34 <_raise_r+0x14>
 8014a2a:	2316      	movs	r3, #22
 8014a2c:	6003      	str	r3, [r0, #0]
 8014a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a32:	bd38      	pop	{r3, r4, r5, pc}
 8014a34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a36:	b112      	cbz	r2, 8014a3e <_raise_r+0x1e>
 8014a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a3c:	b94b      	cbnz	r3, 8014a52 <_raise_r+0x32>
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f000 f830 	bl	8014aa4 <_getpid_r>
 8014a44:	462a      	mov	r2, r5
 8014a46:	4601      	mov	r1, r0
 8014a48:	4620      	mov	r0, r4
 8014a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a4e:	f000 b817 	b.w	8014a80 <_kill_r>
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d00a      	beq.n	8014a6c <_raise_r+0x4c>
 8014a56:	1c59      	adds	r1, r3, #1
 8014a58:	d103      	bne.n	8014a62 <_raise_r+0x42>
 8014a5a:	2316      	movs	r3, #22
 8014a5c:	6003      	str	r3, [r0, #0]
 8014a5e:	2001      	movs	r0, #1
 8014a60:	e7e7      	b.n	8014a32 <_raise_r+0x12>
 8014a62:	2400      	movs	r4, #0
 8014a64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014a68:	4628      	mov	r0, r5
 8014a6a:	4798      	blx	r3
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	e7e0      	b.n	8014a32 <_raise_r+0x12>

08014a70 <raise>:
 8014a70:	4b02      	ldr	r3, [pc, #8]	; (8014a7c <raise+0xc>)
 8014a72:	4601      	mov	r1, r0
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	f7ff bfd3 	b.w	8014a20 <_raise_r>
 8014a7a:	bf00      	nop
 8014a7c:	200003a8 	.word	0x200003a8

08014a80 <_kill_r>:
 8014a80:	b538      	push	{r3, r4, r5, lr}
 8014a82:	4d07      	ldr	r5, [pc, #28]	; (8014aa0 <_kill_r+0x20>)
 8014a84:	2300      	movs	r3, #0
 8014a86:	4604      	mov	r4, r0
 8014a88:	4608      	mov	r0, r1
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	602b      	str	r3, [r5, #0]
 8014a8e:	f7fa fbbc 	bl	800f20a <_kill>
 8014a92:	1c43      	adds	r3, r0, #1
 8014a94:	d102      	bne.n	8014a9c <_kill_r+0x1c>
 8014a96:	682b      	ldr	r3, [r5, #0]
 8014a98:	b103      	cbz	r3, 8014a9c <_kill_r+0x1c>
 8014a9a:	6023      	str	r3, [r4, #0]
 8014a9c:	bd38      	pop	{r3, r4, r5, pc}
 8014a9e:	bf00      	nop
 8014aa0:	2000386c 	.word	0x2000386c

08014aa4 <_getpid_r>:
 8014aa4:	f7fa bba9 	b.w	800f1fa <_getpid>

08014aa8 <__sread>:
 8014aa8:	b510      	push	{r4, lr}
 8014aaa:	460c      	mov	r4, r1
 8014aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ab0:	f000 f89c 	bl	8014bec <_read_r>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	bfab      	itete	ge
 8014ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014aba:	89a3      	ldrhlt	r3, [r4, #12]
 8014abc:	181b      	addge	r3, r3, r0
 8014abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ac2:	bfac      	ite	ge
 8014ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ac6:	81a3      	strhlt	r3, [r4, #12]
 8014ac8:	bd10      	pop	{r4, pc}

08014aca <__swrite>:
 8014aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ace:	461f      	mov	r7, r3
 8014ad0:	898b      	ldrh	r3, [r1, #12]
 8014ad2:	05db      	lsls	r3, r3, #23
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	4616      	mov	r6, r2
 8014ada:	d505      	bpl.n	8014ae8 <__swrite+0x1e>
 8014adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ae0:	2302      	movs	r3, #2
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f000 f868 	bl	8014bb8 <_lseek_r>
 8014ae8:	89a3      	ldrh	r3, [r4, #12]
 8014aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014af2:	81a3      	strh	r3, [r4, #12]
 8014af4:	4632      	mov	r2, r6
 8014af6:	463b      	mov	r3, r7
 8014af8:	4628      	mov	r0, r5
 8014afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014afe:	f000 b817 	b.w	8014b30 <_write_r>

08014b02 <__sseek>:
 8014b02:	b510      	push	{r4, lr}
 8014b04:	460c      	mov	r4, r1
 8014b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b0a:	f000 f855 	bl	8014bb8 <_lseek_r>
 8014b0e:	1c43      	adds	r3, r0, #1
 8014b10:	89a3      	ldrh	r3, [r4, #12]
 8014b12:	bf15      	itete	ne
 8014b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b1e:	81a3      	strheq	r3, [r4, #12]
 8014b20:	bf18      	it	ne
 8014b22:	81a3      	strhne	r3, [r4, #12]
 8014b24:	bd10      	pop	{r4, pc}

08014b26 <__sclose>:
 8014b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b2a:	f000 b813 	b.w	8014b54 <_close_r>
	...

08014b30 <_write_r>:
 8014b30:	b538      	push	{r3, r4, r5, lr}
 8014b32:	4d07      	ldr	r5, [pc, #28]	; (8014b50 <_write_r+0x20>)
 8014b34:	4604      	mov	r4, r0
 8014b36:	4608      	mov	r0, r1
 8014b38:	4611      	mov	r1, r2
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	602a      	str	r2, [r5, #0]
 8014b3e:	461a      	mov	r2, r3
 8014b40:	f7fa fb9a 	bl	800f278 <_write>
 8014b44:	1c43      	adds	r3, r0, #1
 8014b46:	d102      	bne.n	8014b4e <_write_r+0x1e>
 8014b48:	682b      	ldr	r3, [r5, #0]
 8014b4a:	b103      	cbz	r3, 8014b4e <_write_r+0x1e>
 8014b4c:	6023      	str	r3, [r4, #0]
 8014b4e:	bd38      	pop	{r3, r4, r5, pc}
 8014b50:	2000386c 	.word	0x2000386c

08014b54 <_close_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4d06      	ldr	r5, [pc, #24]	; (8014b70 <_close_r+0x1c>)
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4608      	mov	r0, r1
 8014b5e:	602b      	str	r3, [r5, #0]
 8014b60:	f7fa fba6 	bl	800f2b0 <_close>
 8014b64:	1c43      	adds	r3, r0, #1
 8014b66:	d102      	bne.n	8014b6e <_close_r+0x1a>
 8014b68:	682b      	ldr	r3, [r5, #0]
 8014b6a:	b103      	cbz	r3, 8014b6e <_close_r+0x1a>
 8014b6c:	6023      	str	r3, [r4, #0]
 8014b6e:	bd38      	pop	{r3, r4, r5, pc}
 8014b70:	2000386c 	.word	0x2000386c

08014b74 <_fstat_r>:
 8014b74:	b538      	push	{r3, r4, r5, lr}
 8014b76:	4d07      	ldr	r5, [pc, #28]	; (8014b94 <_fstat_r+0x20>)
 8014b78:	2300      	movs	r3, #0
 8014b7a:	4604      	mov	r4, r0
 8014b7c:	4608      	mov	r0, r1
 8014b7e:	4611      	mov	r1, r2
 8014b80:	602b      	str	r3, [r5, #0]
 8014b82:	f7fa fba1 	bl	800f2c8 <_fstat>
 8014b86:	1c43      	adds	r3, r0, #1
 8014b88:	d102      	bne.n	8014b90 <_fstat_r+0x1c>
 8014b8a:	682b      	ldr	r3, [r5, #0]
 8014b8c:	b103      	cbz	r3, 8014b90 <_fstat_r+0x1c>
 8014b8e:	6023      	str	r3, [r4, #0]
 8014b90:	bd38      	pop	{r3, r4, r5, pc}
 8014b92:	bf00      	nop
 8014b94:	2000386c 	.word	0x2000386c

08014b98 <_isatty_r>:
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	4d06      	ldr	r5, [pc, #24]	; (8014bb4 <_isatty_r+0x1c>)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	4608      	mov	r0, r1
 8014ba2:	602b      	str	r3, [r5, #0]
 8014ba4:	f7fa fba0 	bl	800f2e8 <_isatty>
 8014ba8:	1c43      	adds	r3, r0, #1
 8014baa:	d102      	bne.n	8014bb2 <_isatty_r+0x1a>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b103      	cbz	r3, 8014bb2 <_isatty_r+0x1a>
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	bd38      	pop	{r3, r4, r5, pc}
 8014bb4:	2000386c 	.word	0x2000386c

08014bb8 <_lseek_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d07      	ldr	r5, [pc, #28]	; (8014bd8 <_lseek_r+0x20>)
 8014bbc:	4604      	mov	r4, r0
 8014bbe:	4608      	mov	r0, r1
 8014bc0:	4611      	mov	r1, r2
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	602a      	str	r2, [r5, #0]
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	f7fa fb99 	bl	800f2fe <_lseek>
 8014bcc:	1c43      	adds	r3, r0, #1
 8014bce:	d102      	bne.n	8014bd6 <_lseek_r+0x1e>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	b103      	cbz	r3, 8014bd6 <_lseek_r+0x1e>
 8014bd4:	6023      	str	r3, [r4, #0]
 8014bd6:	bd38      	pop	{r3, r4, r5, pc}
 8014bd8:	2000386c 	.word	0x2000386c

08014bdc <_malloc_usable_size_r>:
 8014bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014be0:	1f18      	subs	r0, r3, #4
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	bfbc      	itt	lt
 8014be6:	580b      	ldrlt	r3, [r1, r0]
 8014be8:	18c0      	addlt	r0, r0, r3
 8014bea:	4770      	bx	lr

08014bec <_read_r>:
 8014bec:	b538      	push	{r3, r4, r5, lr}
 8014bee:	4d07      	ldr	r5, [pc, #28]	; (8014c0c <_read_r+0x20>)
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	4608      	mov	r0, r1
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	602a      	str	r2, [r5, #0]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	f7fa fb1f 	bl	800f23e <_read>
 8014c00:	1c43      	adds	r3, r0, #1
 8014c02:	d102      	bne.n	8014c0a <_read_r+0x1e>
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	b103      	cbz	r3, 8014c0a <_read_r+0x1e>
 8014c08:	6023      	str	r3, [r4, #0]
 8014c0a:	bd38      	pop	{r3, r4, r5, pc}
 8014c0c:	2000386c 	.word	0x2000386c

08014c10 <round>:
 8014c10:	ec51 0b10 	vmov	r0, r1, d0
 8014c14:	b570      	push	{r4, r5, r6, lr}
 8014c16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8014c1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8014c1e:	2c13      	cmp	r4, #19
 8014c20:	ee10 2a10 	vmov	r2, s0
 8014c24:	460b      	mov	r3, r1
 8014c26:	dc19      	bgt.n	8014c5c <round+0x4c>
 8014c28:	2c00      	cmp	r4, #0
 8014c2a:	da09      	bge.n	8014c40 <round+0x30>
 8014c2c:	3401      	adds	r4, #1
 8014c2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8014c32:	d103      	bne.n	8014c3c <round+0x2c>
 8014c34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014c38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014c3c:	2100      	movs	r1, #0
 8014c3e:	e028      	b.n	8014c92 <round+0x82>
 8014c40:	4d15      	ldr	r5, [pc, #84]	; (8014c98 <round+0x88>)
 8014c42:	4125      	asrs	r5, r4
 8014c44:	ea01 0605 	and.w	r6, r1, r5
 8014c48:	4332      	orrs	r2, r6
 8014c4a:	d00e      	beq.n	8014c6a <round+0x5a>
 8014c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014c50:	fa42 f404 	asr.w	r4, r2, r4
 8014c54:	4423      	add	r3, r4
 8014c56:	ea23 0305 	bic.w	r3, r3, r5
 8014c5a:	e7ef      	b.n	8014c3c <round+0x2c>
 8014c5c:	2c33      	cmp	r4, #51	; 0x33
 8014c5e:	dd07      	ble.n	8014c70 <round+0x60>
 8014c60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014c64:	d101      	bne.n	8014c6a <round+0x5a>
 8014c66:	f7eb fb49 	bl	80002fc <__adddf3>
 8014c6a:	ec41 0b10 	vmov	d0, r0, r1
 8014c6e:	bd70      	pop	{r4, r5, r6, pc}
 8014c70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8014c74:	f04f 35ff 	mov.w	r5, #4294967295
 8014c78:	40f5      	lsrs	r5, r6
 8014c7a:	4228      	tst	r0, r5
 8014c7c:	d0f5      	beq.n	8014c6a <round+0x5a>
 8014c7e:	2101      	movs	r1, #1
 8014c80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8014c84:	fa01 f404 	lsl.w	r4, r1, r4
 8014c88:	1912      	adds	r2, r2, r4
 8014c8a:	bf28      	it	cs
 8014c8c:	185b      	addcs	r3, r3, r1
 8014c8e:	ea22 0105 	bic.w	r1, r2, r5
 8014c92:	4608      	mov	r0, r1
 8014c94:	4619      	mov	r1, r3
 8014c96:	e7e8      	b.n	8014c6a <round+0x5a>
 8014c98:	000fffff 	.word	0x000fffff

08014c9c <ceilf>:
 8014c9c:	ee10 3a10 	vmov	r3, s0
 8014ca0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ca4:	3a7f      	subs	r2, #127	; 0x7f
 8014ca6:	2a16      	cmp	r2, #22
 8014ca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014cac:	dc2a      	bgt.n	8014d04 <ceilf+0x68>
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	da11      	bge.n	8014cd6 <ceilf+0x3a>
 8014cb2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014d18 <ceilf+0x7c>
 8014cb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014cba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc2:	dd05      	ble.n	8014cd0 <ceilf+0x34>
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	db23      	blt.n	8014d10 <ceilf+0x74>
 8014cc8:	2900      	cmp	r1, #0
 8014cca:	bf18      	it	ne
 8014ccc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8014cd0:	ee00 3a10 	vmov	s0, r3
 8014cd4:	4770      	bx	lr
 8014cd6:	4911      	ldr	r1, [pc, #68]	; (8014d1c <ceilf+0x80>)
 8014cd8:	4111      	asrs	r1, r2
 8014cda:	420b      	tst	r3, r1
 8014cdc:	d0fa      	beq.n	8014cd4 <ceilf+0x38>
 8014cde:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014d18 <ceilf+0x7c>
 8014ce2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ce6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cee:	ddef      	ble.n	8014cd0 <ceilf+0x34>
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	bfc2      	ittt	gt
 8014cf4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8014cf8:	fa40 f202 	asrgt.w	r2, r0, r2
 8014cfc:	189b      	addgt	r3, r3, r2
 8014cfe:	ea23 0301 	bic.w	r3, r3, r1
 8014d02:	e7e5      	b.n	8014cd0 <ceilf+0x34>
 8014d04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014d08:	d3e4      	bcc.n	8014cd4 <ceilf+0x38>
 8014d0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014d0e:	4770      	bx	lr
 8014d10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d14:	e7dc      	b.n	8014cd0 <ceilf+0x34>
 8014d16:	bf00      	nop
 8014d18:	7149f2ca 	.word	0x7149f2ca
 8014d1c:	007fffff 	.word	0x007fffff

08014d20 <roundf>:
 8014d20:	ee10 0a10 	vmov	r0, s0
 8014d24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014d28:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014d2c:	2a16      	cmp	r2, #22
 8014d2e:	dc15      	bgt.n	8014d5c <roundf+0x3c>
 8014d30:	2a00      	cmp	r2, #0
 8014d32:	da08      	bge.n	8014d46 <roundf+0x26>
 8014d34:	3201      	adds	r2, #1
 8014d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014d3a:	d101      	bne.n	8014d40 <roundf+0x20>
 8014d3c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014d40:	ee00 3a10 	vmov	s0, r3
 8014d44:	4770      	bx	lr
 8014d46:	4908      	ldr	r1, [pc, #32]	; (8014d68 <roundf+0x48>)
 8014d48:	4111      	asrs	r1, r2
 8014d4a:	4208      	tst	r0, r1
 8014d4c:	d0fa      	beq.n	8014d44 <roundf+0x24>
 8014d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014d52:	4113      	asrs	r3, r2
 8014d54:	4403      	add	r3, r0
 8014d56:	ea23 0301 	bic.w	r3, r3, r1
 8014d5a:	e7f1      	b.n	8014d40 <roundf+0x20>
 8014d5c:	2a80      	cmp	r2, #128	; 0x80
 8014d5e:	d1f1      	bne.n	8014d44 <roundf+0x24>
 8014d60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	007fffff 	.word	0x007fffff

08014d6c <expf>:
 8014d6c:	b508      	push	{r3, lr}
 8014d6e:	ed2d 8b02 	vpush	{d8}
 8014d72:	eef0 8a40 	vmov.f32	s17, s0
 8014d76:	f000 f92b 	bl	8014fd0 <__ieee754_expf>
 8014d7a:	4b16      	ldr	r3, [pc, #88]	; (8014dd4 <expf+0x68>)
 8014d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8014d80:	3301      	adds	r3, #1
 8014d82:	eeb0 8a40 	vmov.f32	s16, s0
 8014d86:	d011      	beq.n	8014dac <expf+0x40>
 8014d88:	eeb0 0a68 	vmov.f32	s0, s17
 8014d8c:	f7ff fae8 	bl	8014360 <finitef>
 8014d90:	b160      	cbz	r0, 8014dac <expf+0x40>
 8014d92:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014dd8 <expf+0x6c>
 8014d96:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9e:	dd0a      	ble.n	8014db6 <expf+0x4a>
 8014da0:	f7fb f934 	bl	801000c <__errno>
 8014da4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014ddc <expf+0x70>
 8014da8:	2322      	movs	r3, #34	; 0x22
 8014daa:	6003      	str	r3, [r0, #0]
 8014dac:	eeb0 0a48 	vmov.f32	s0, s16
 8014db0:	ecbd 8b02 	vpop	{d8}
 8014db4:	bd08      	pop	{r3, pc}
 8014db6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014de0 <expf+0x74>
 8014dba:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc2:	d5f3      	bpl.n	8014dac <expf+0x40>
 8014dc4:	f7fb f922 	bl	801000c <__errno>
 8014dc8:	2322      	movs	r3, #34	; 0x22
 8014dca:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8014de4 <expf+0x78>
 8014dce:	6003      	str	r3, [r0, #0]
 8014dd0:	e7ec      	b.n	8014dac <expf+0x40>
 8014dd2:	bf00      	nop
 8014dd4:	2000057c 	.word	0x2000057c
 8014dd8:	42b17180 	.word	0x42b17180
 8014ddc:	7f800000 	.word	0x7f800000
 8014de0:	c2cff1b5 	.word	0xc2cff1b5
 8014de4:	00000000 	.word	0x00000000

08014de8 <logf>:
 8014de8:	b508      	push	{r3, lr}
 8014dea:	ed2d 8b02 	vpush	{d8}
 8014dee:	eeb0 8a40 	vmov.f32	s16, s0
 8014df2:	f000 f9c1 	bl	8015178 <__ieee754_logf>
 8014df6:	4b14      	ldr	r3, [pc, #80]	; (8014e48 <logf+0x60>)
 8014df8:	f993 3000 	ldrsb.w	r3, [r3]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	d014      	beq.n	8014e2a <logf+0x42>
 8014e00:	eeb4 8a48 	vcmp.f32	s16, s16
 8014e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e08:	d60f      	bvs.n	8014e2a <logf+0x42>
 8014e0a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e12:	dc0a      	bgt.n	8014e2a <logf+0x42>
 8014e14:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1c:	d108      	bne.n	8014e30 <logf+0x48>
 8014e1e:	f7fb f8f5 	bl	801000c <__errno>
 8014e22:	2322      	movs	r3, #34	; 0x22
 8014e24:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014e4c <logf+0x64>
 8014e28:	6003      	str	r3, [r0, #0]
 8014e2a:	ecbd 8b02 	vpop	{d8}
 8014e2e:	bd08      	pop	{r3, pc}
 8014e30:	f7fb f8ec 	bl	801000c <__errno>
 8014e34:	ecbd 8b02 	vpop	{d8}
 8014e38:	2321      	movs	r3, #33	; 0x21
 8014e3a:	6003      	str	r3, [r0, #0]
 8014e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e40:	4803      	ldr	r0, [pc, #12]	; (8014e50 <logf+0x68>)
 8014e42:	f7fc b829 	b.w	8010e98 <nanf>
 8014e46:	bf00      	nop
 8014e48:	2000057c 	.word	0x2000057c
 8014e4c:	ff800000 	.word	0xff800000
 8014e50:	0801614c 	.word	0x0801614c

08014e54 <powf>:
 8014e54:	b508      	push	{r3, lr}
 8014e56:	ed2d 8b04 	vpush	{d8-d9}
 8014e5a:	eeb0 9a40 	vmov.f32	s18, s0
 8014e5e:	eef0 8a60 	vmov.f32	s17, s1
 8014e62:	f000 fa79 	bl	8015358 <__ieee754_powf>
 8014e66:	4b43      	ldr	r3, [pc, #268]	; (8014f74 <powf+0x120>)
 8014e68:	f993 3000 	ldrsb.w	r3, [r3]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	eeb0 8a40 	vmov.f32	s16, s0
 8014e72:	d012      	beq.n	8014e9a <powf+0x46>
 8014e74:	eef4 8a68 	vcmp.f32	s17, s17
 8014e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7c:	d60d      	bvs.n	8014e9a <powf+0x46>
 8014e7e:	eeb4 9a49 	vcmp.f32	s18, s18
 8014e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e86:	d70d      	bvc.n	8014ea4 <powf+0x50>
 8014e88:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e94:	bf08      	it	eq
 8014e96:	eeb0 8a67 	vmoveq.f32	s16, s15
 8014e9a:	eeb0 0a48 	vmov.f32	s0, s16
 8014e9e:	ecbd 8b04 	vpop	{d8-d9}
 8014ea2:	bd08      	pop	{r3, pc}
 8014ea4:	eddf 9a34 	vldr	s19, [pc, #208]	; 8014f78 <powf+0x124>
 8014ea8:	eeb4 9a69 	vcmp.f32	s18, s19
 8014eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eb0:	d116      	bne.n	8014ee0 <powf+0x8c>
 8014eb2:	eef4 8a69 	vcmp.f32	s17, s19
 8014eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eba:	d057      	beq.n	8014f6c <powf+0x118>
 8014ebc:	eeb0 0a68 	vmov.f32	s0, s17
 8014ec0:	f7ff fa4e 	bl	8014360 <finitef>
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d0e8      	beq.n	8014e9a <powf+0x46>
 8014ec8:	eef4 8ae9 	vcmpe.f32	s17, s19
 8014ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed0:	d5e3      	bpl.n	8014e9a <powf+0x46>
 8014ed2:	f7fb f89b 	bl	801000c <__errno>
 8014ed6:	2321      	movs	r3, #33	; 0x21
 8014ed8:	6003      	str	r3, [r0, #0]
 8014eda:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8014f7c <powf+0x128>
 8014ede:	e7dc      	b.n	8014e9a <powf+0x46>
 8014ee0:	f7ff fa3e 	bl	8014360 <finitef>
 8014ee4:	bb50      	cbnz	r0, 8014f3c <powf+0xe8>
 8014ee6:	eeb0 0a49 	vmov.f32	s0, s18
 8014eea:	f7ff fa39 	bl	8014360 <finitef>
 8014eee:	b328      	cbz	r0, 8014f3c <powf+0xe8>
 8014ef0:	eeb0 0a68 	vmov.f32	s0, s17
 8014ef4:	f7ff fa34 	bl	8014360 <finitef>
 8014ef8:	b300      	cbz	r0, 8014f3c <powf+0xe8>
 8014efa:	eeb4 8a48 	vcmp.f32	s16, s16
 8014efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f02:	d706      	bvc.n	8014f12 <powf+0xbe>
 8014f04:	f7fb f882 	bl	801000c <__errno>
 8014f08:	2321      	movs	r3, #33	; 0x21
 8014f0a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8014f0e:	6003      	str	r3, [r0, #0]
 8014f10:	e7c3      	b.n	8014e9a <powf+0x46>
 8014f12:	f7fb f87b 	bl	801000c <__errno>
 8014f16:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8014f1a:	2322      	movs	r3, #34	; 0x22
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	6003      	str	r3, [r0, #0]
 8014f22:	d508      	bpl.n	8014f36 <powf+0xe2>
 8014f24:	eeb0 0a68 	vmov.f32	s0, s17
 8014f28:	f000 fce0 	bl	80158ec <rintf>
 8014f2c:	eeb4 0a68 	vcmp.f32	s0, s17
 8014f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f34:	d1d1      	bne.n	8014eda <powf+0x86>
 8014f36:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8014f80 <powf+0x12c>
 8014f3a:	e7ae      	b.n	8014e9a <powf+0x46>
 8014f3c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f44:	d1a9      	bne.n	8014e9a <powf+0x46>
 8014f46:	eeb0 0a49 	vmov.f32	s0, s18
 8014f4a:	f7ff fa09 	bl	8014360 <finitef>
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d0a3      	beq.n	8014e9a <powf+0x46>
 8014f52:	eeb0 0a68 	vmov.f32	s0, s17
 8014f56:	f7ff fa03 	bl	8014360 <finitef>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	d09d      	beq.n	8014e9a <powf+0x46>
 8014f5e:	f7fb f855 	bl	801000c <__errno>
 8014f62:	2322      	movs	r3, #34	; 0x22
 8014f64:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014f78 <powf+0x124>
 8014f68:	6003      	str	r3, [r0, #0]
 8014f6a:	e796      	b.n	8014e9a <powf+0x46>
 8014f6c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014f70:	e793      	b.n	8014e9a <powf+0x46>
 8014f72:	bf00      	nop
 8014f74:	2000057c 	.word	0x2000057c
 8014f78:	00000000 	.word	0x00000000
 8014f7c:	ff800000 	.word	0xff800000
 8014f80:	7f800000 	.word	0x7f800000

08014f84 <sqrtf>:
 8014f84:	b508      	push	{r3, lr}
 8014f86:	ed2d 8b02 	vpush	{d8}
 8014f8a:	eeb0 8a40 	vmov.f32	s16, s0
 8014f8e:	f000 fca3 	bl	80158d8 <__ieee754_sqrtf>
 8014f92:	4b0d      	ldr	r3, [pc, #52]	; (8014fc8 <sqrtf+0x44>)
 8014f94:	f993 3000 	ldrsb.w	r3, [r3]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	d011      	beq.n	8014fc0 <sqrtf+0x3c>
 8014f9c:	eeb4 8a48 	vcmp.f32	s16, s16
 8014fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa4:	d60c      	bvs.n	8014fc0 <sqrtf+0x3c>
 8014fa6:	eddf 8a09 	vldr	s17, [pc, #36]	; 8014fcc <sqrtf+0x48>
 8014faa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb2:	d505      	bpl.n	8014fc0 <sqrtf+0x3c>
 8014fb4:	f7fb f82a 	bl	801000c <__errno>
 8014fb8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014fbc:	2321      	movs	r3, #33	; 0x21
 8014fbe:	6003      	str	r3, [r0, #0]
 8014fc0:	ecbd 8b02 	vpop	{d8}
 8014fc4:	bd08      	pop	{r3, pc}
 8014fc6:	bf00      	nop
 8014fc8:	2000057c 	.word	0x2000057c
 8014fcc:	00000000 	.word	0x00000000

08014fd0 <__ieee754_expf>:
 8014fd0:	ee10 2a10 	vmov	r2, s0
 8014fd4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014fd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014fdc:	d902      	bls.n	8014fe4 <__ieee754_expf+0x14>
 8014fde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014fe2:	4770      	bx	lr
 8014fe4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8014fe8:	d106      	bne.n	8014ff8 <__ieee754_expf+0x28>
 8014fea:	eddf 7a51 	vldr	s15, [pc, #324]	; 8015130 <__ieee754_expf+0x160>
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	bf18      	it	ne
 8014ff2:	eeb0 0a67 	vmovne.f32	s0, s15
 8014ff6:	4770      	bx	lr
 8014ff8:	484e      	ldr	r0, [pc, #312]	; (8015134 <__ieee754_expf+0x164>)
 8014ffa:	4282      	cmp	r2, r0
 8014ffc:	dd04      	ble.n	8015008 <__ieee754_expf+0x38>
 8014ffe:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8015138 <__ieee754_expf+0x168>
 8015002:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015006:	4770      	bx	lr
 8015008:	2a00      	cmp	r2, #0
 801500a:	da03      	bge.n	8015014 <__ieee754_expf+0x44>
 801500c:	4a4b      	ldr	r2, [pc, #300]	; (801513c <__ieee754_expf+0x16c>)
 801500e:	4291      	cmp	r1, r2
 8015010:	f200 808a 	bhi.w	8015128 <__ieee754_expf+0x158>
 8015014:	4a4a      	ldr	r2, [pc, #296]	; (8015140 <__ieee754_expf+0x170>)
 8015016:	4291      	cmp	r1, r2
 8015018:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801501c:	d954      	bls.n	80150c8 <__ieee754_expf+0xf8>
 801501e:	4a49      	ldr	r2, [pc, #292]	; (8015144 <__ieee754_expf+0x174>)
 8015020:	4291      	cmp	r1, r2
 8015022:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8015026:	d836      	bhi.n	8015096 <__ieee754_expf+0xc6>
 8015028:	4947      	ldr	r1, [pc, #284]	; (8015148 <__ieee754_expf+0x178>)
 801502a:	4411      	add	r1, r2
 801502c:	ed91 7a00 	vldr	s14, [r1]
 8015030:	4946      	ldr	r1, [pc, #280]	; (801514c <__ieee754_expf+0x17c>)
 8015032:	440a      	add	r2, r1
 8015034:	edd2 7a00 	vldr	s15, [r2]
 8015038:	ee30 7a47 	vsub.f32	s14, s0, s14
 801503c:	f1c3 0201 	rsb	r2, r3, #1
 8015040:	1ad2      	subs	r2, r2, r3
 8015042:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015046:	ee60 6a00 	vmul.f32	s13, s0, s0
 801504a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015150 <__ieee754_expf+0x180>
 801504e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015154 <__ieee754_expf+0x184>
 8015052:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8015056:	eddf 5a40 	vldr	s11, [pc, #256]	; 8015158 <__ieee754_expf+0x188>
 801505a:	eee5 5a26 	vfma.f32	s11, s10, s13
 801505e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 801515c <__ieee754_expf+0x18c>
 8015062:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8015066:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015160 <__ieee754_expf+0x190>
 801506a:	eee5 5a26 	vfma.f32	s11, s10, s13
 801506e:	eeb0 5a40 	vmov.f32	s10, s0
 8015072:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8015076:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801507a:	eef0 6a45 	vmov.f32	s13, s10
 801507e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015082:	bb92      	cbnz	r2, 80150ea <__ieee754_expf+0x11a>
 8015084:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015088:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801508c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015090:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015094:	4770      	bx	lr
 8015096:	4b33      	ldr	r3, [pc, #204]	; (8015164 <__ieee754_expf+0x194>)
 8015098:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8015168 <__ieee754_expf+0x198>
 801509c:	4413      	add	r3, r2
 801509e:	edd3 7a00 	vldr	s15, [r3]
 80150a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80150a6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801516c <__ieee754_expf+0x19c>
 80150aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ae:	ee17 2a90 	vmov	r2, s15
 80150b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150b6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80150ba:	eeb0 7a40 	vmov.f32	s14, s0
 80150be:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015170 <__ieee754_expf+0x1a0>
 80150c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80150c6:	e7bc      	b.n	8015042 <__ieee754_expf+0x72>
 80150c8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80150cc:	d20b      	bcs.n	80150e6 <__ieee754_expf+0x116>
 80150ce:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015138 <__ieee754_expf+0x168>
 80150d2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80150d6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80150da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150de:	dd02      	ble.n	80150e6 <__ieee754_expf+0x116>
 80150e0:	ee30 0a06 	vadd.f32	s0, s0, s12
 80150e4:	4770      	bx	lr
 80150e6:	2200      	movs	r2, #0
 80150e8:	e7ad      	b.n	8015046 <__ieee754_expf+0x76>
 80150ea:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80150ee:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80150f2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80150f6:	bfb8      	it	lt
 80150f8:	3264      	addlt	r2, #100	; 0x64
 80150fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80150fe:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015102:	ee76 7a40 	vsub.f32	s15, s12, s0
 8015106:	ee17 3a90 	vmov	r3, s15
 801510a:	bfab      	itete	ge
 801510c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015110:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015114:	ee00 3a10 	vmovge	s0, r3
 8015118:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015174 <__ieee754_expf+0x1a4>
 801511c:	bfbc      	itt	lt
 801511e:	ee00 3a10 	vmovlt	s0, r3
 8015122:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015126:	4770      	bx	lr
 8015128:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015130 <__ieee754_expf+0x160>
 801512c:	4770      	bx	lr
 801512e:	bf00      	nop
 8015130:	00000000 	.word	0x00000000
 8015134:	42b17217 	.word	0x42b17217
 8015138:	7149f2ca 	.word	0x7149f2ca
 801513c:	42cff1b5 	.word	0x42cff1b5
 8015140:	3eb17218 	.word	0x3eb17218
 8015144:	3f851591 	.word	0x3f851591
 8015148:	08016520 	.word	0x08016520
 801514c:	08016528 	.word	0x08016528
 8015150:	3331bb4c 	.word	0x3331bb4c
 8015154:	b5ddea0e 	.word	0xb5ddea0e
 8015158:	388ab355 	.word	0x388ab355
 801515c:	bb360b61 	.word	0xbb360b61
 8015160:	3e2aaaab 	.word	0x3e2aaaab
 8015164:	08016518 	.word	0x08016518
 8015168:	3fb8aa3b 	.word	0x3fb8aa3b
 801516c:	3f317180 	.word	0x3f317180
 8015170:	3717f7d1 	.word	0x3717f7d1
 8015174:	0d800000 	.word	0x0d800000

08015178 <__ieee754_logf>:
 8015178:	ee10 3a10 	vmov	r3, s0
 801517c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015180:	d106      	bne.n	8015190 <__ieee754_logf+0x18>
 8015182:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015318 <__ieee754_logf+0x1a0>
 8015186:	eddf 7a65 	vldr	s15, [pc, #404]	; 801531c <__ieee754_logf+0x1a4>
 801518a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801518e:	4770      	bx	lr
 8015190:	2b00      	cmp	r3, #0
 8015192:	da02      	bge.n	801519a <__ieee754_logf+0x22>
 8015194:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015198:	e7f5      	b.n	8015186 <__ieee754_logf+0xe>
 801519a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801519e:	db02      	blt.n	80151a6 <__ieee754_logf+0x2e>
 80151a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151a4:	4770      	bx	lr
 80151a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80151aa:	bfb8      	it	lt
 80151ac:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8015320 <__ieee754_logf+0x1a8>
 80151b0:	485c      	ldr	r0, [pc, #368]	; (8015324 <__ieee754_logf+0x1ac>)
 80151b2:	bfbe      	ittt	lt
 80151b4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80151b8:	f06f 0118 	mvnlt.w	r1, #24
 80151bc:	ee17 3a90 	vmovlt	r3, s15
 80151c0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80151c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80151c8:	4418      	add	r0, r3
 80151ca:	bfa8      	it	ge
 80151cc:	2100      	movge	r1, #0
 80151ce:	3a7f      	subs	r2, #127	; 0x7f
 80151d0:	440a      	add	r2, r1
 80151d2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80151d6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80151da:	4319      	orrs	r1, r3
 80151dc:	ee00 1a10 	vmov	s0, r1
 80151e0:	4951      	ldr	r1, [pc, #324]	; (8015328 <__ieee754_logf+0x1b0>)
 80151e2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80151e6:	f103 000f 	add.w	r0, r3, #15
 80151ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80151ee:	4001      	ands	r1, r0
 80151f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80151f4:	bb89      	cbnz	r1, 801525a <__ieee754_logf+0xe2>
 80151f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80151fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151fe:	d10f      	bne.n	8015220 <__ieee754_logf+0xa8>
 8015200:	2a00      	cmp	r2, #0
 8015202:	f000 8085 	beq.w	8015310 <__ieee754_logf+0x198>
 8015206:	ee07 2a90 	vmov	s15, r2
 801520a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801532c <__ieee754_logf+0x1b4>
 801520e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015330 <__ieee754_logf+0x1b8>
 8015212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015216:	ee27 0a80 	vmul.f32	s0, s15, s0
 801521a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801521e:	4770      	bx	lr
 8015220:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015334 <__ieee754_logf+0x1bc>
 8015224:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015228:	eee0 7a66 	vfms.f32	s15, s0, s13
 801522c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015234:	b912      	cbnz	r2, 801523c <__ieee754_logf+0xc4>
 8015236:	ee30 0a47 	vsub.f32	s0, s0, s14
 801523a:	4770      	bx	lr
 801523c:	ee07 2a90 	vmov	s15, r2
 8015240:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801532c <__ieee754_logf+0x1b4>
 8015244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015248:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801524c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015250:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015330 <__ieee754_logf+0x1b8>
 8015254:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8015258:	4770      	bx	lr
 801525a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801525e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015262:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015338 <__ieee754_logf+0x1c0>
 8015266:	eddf 4a35 	vldr	s9, [pc, #212]	; 801533c <__ieee754_logf+0x1c4>
 801526a:	4935      	ldr	r1, [pc, #212]	; (8015340 <__ieee754_logf+0x1c8>)
 801526c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8015270:	4419      	add	r1, r3
 8015272:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8015276:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801527a:	430b      	orrs	r3, r1
 801527c:	2b00      	cmp	r3, #0
 801527e:	ee07 2a90 	vmov	s15, r2
 8015282:	ee26 5a06 	vmul.f32	s10, s12, s12
 8015286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801528a:	ee25 7a05 	vmul.f32	s14, s10, s10
 801528e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015344 <__ieee754_logf+0x1cc>
 8015292:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015296:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8015348 <__ieee754_logf+0x1d0>
 801529a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801529e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801534c <__ieee754_logf+0x1d4>
 80152a2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80152a6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8015350 <__ieee754_logf+0x1d8>
 80152aa:	eee7 4a87 	vfma.f32	s9, s15, s14
 80152ae:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015354 <__ieee754_logf+0x1dc>
 80152b2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80152b6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80152ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80152be:	dd1c      	ble.n	80152fa <__ieee754_logf+0x182>
 80152c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80152c4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80152c8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80152cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80152d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80152d4:	b922      	cbnz	r2, 80152e0 <__ieee754_logf+0x168>
 80152d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80152de:	4770      	bx	lr
 80152e0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801532c <__ieee754_logf+0x1b4>
 80152e4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80152e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80152f0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015330 <__ieee754_logf+0x1b8>
 80152f4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80152f8:	4770      	bx	lr
 80152fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80152fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015302:	2a00      	cmp	r2, #0
 8015304:	d0e9      	beq.n	80152da <__ieee754_logf+0x162>
 8015306:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801532c <__ieee754_logf+0x1b4>
 801530a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801530e:	e7ed      	b.n	80152ec <__ieee754_logf+0x174>
 8015310:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801531c <__ieee754_logf+0x1a4>
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	cc000000 	.word	0xcc000000
 801531c:	00000000 	.word	0x00000000
 8015320:	4c000000 	.word	0x4c000000
 8015324:	004afb20 	.word	0x004afb20
 8015328:	007ffff0 	.word	0x007ffff0
 801532c:	3717f7d1 	.word	0x3717f7d1
 8015330:	3f317180 	.word	0x3f317180
 8015334:	3eaaaaab 	.word	0x3eaaaaab
 8015338:	3e1cd04f 	.word	0x3e1cd04f
 801533c:	3e178897 	.word	0x3e178897
 8015340:	ffcf5c30 	.word	0xffcf5c30
 8015344:	3e638e29 	.word	0x3e638e29
 8015348:	3ecccccd 	.word	0x3ecccccd
 801534c:	3e3a3325 	.word	0x3e3a3325
 8015350:	3e924925 	.word	0x3e924925
 8015354:	3f2aaaab 	.word	0x3f2aaaab

08015358 <__ieee754_powf>:
 8015358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535c:	ee10 5a90 	vmov	r5, s1
 8015360:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015364:	ed2d 8b02 	vpush	{d8}
 8015368:	eeb0 8a40 	vmov.f32	s16, s0
 801536c:	eef0 8a60 	vmov.f32	s17, s1
 8015370:	f000 8291 	beq.w	8015896 <__ieee754_powf+0x53e>
 8015374:	ee10 8a10 	vmov	r8, s0
 8015378:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801537c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015380:	dc06      	bgt.n	8015390 <__ieee754_powf+0x38>
 8015382:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015386:	dd0a      	ble.n	801539e <__ieee754_powf+0x46>
 8015388:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801538c:	f000 8283 	beq.w	8015896 <__ieee754_powf+0x53e>
 8015390:	ecbd 8b02 	vpop	{d8}
 8015394:	48d8      	ldr	r0, [pc, #864]	; (80156f8 <__ieee754_powf+0x3a0>)
 8015396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801539a:	f7fb bd7d 	b.w	8010e98 <nanf>
 801539e:	f1b8 0f00 	cmp.w	r8, #0
 80153a2:	da1f      	bge.n	80153e4 <__ieee754_powf+0x8c>
 80153a4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80153a8:	da2e      	bge.n	8015408 <__ieee754_powf+0xb0>
 80153aa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80153ae:	f2c0 827b 	blt.w	80158a8 <__ieee754_powf+0x550>
 80153b2:	15fb      	asrs	r3, r7, #23
 80153b4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80153b8:	fa47 f603 	asr.w	r6, r7, r3
 80153bc:	fa06 f303 	lsl.w	r3, r6, r3
 80153c0:	42bb      	cmp	r3, r7
 80153c2:	f040 8271 	bne.w	80158a8 <__ieee754_powf+0x550>
 80153c6:	f006 0601 	and.w	r6, r6, #1
 80153ca:	f1c6 0602 	rsb	r6, r6, #2
 80153ce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80153d2:	d120      	bne.n	8015416 <__ieee754_powf+0xbe>
 80153d4:	2d00      	cmp	r5, #0
 80153d6:	f280 8264 	bge.w	80158a2 <__ieee754_powf+0x54a>
 80153da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80153de:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80153e2:	e00d      	b.n	8015400 <__ieee754_powf+0xa8>
 80153e4:	2600      	movs	r6, #0
 80153e6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80153ea:	d1f0      	bne.n	80153ce <__ieee754_powf+0x76>
 80153ec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80153f0:	f000 8251 	beq.w	8015896 <__ieee754_powf+0x53e>
 80153f4:	dd0a      	ble.n	801540c <__ieee754_powf+0xb4>
 80153f6:	2d00      	cmp	r5, #0
 80153f8:	f280 8250 	bge.w	801589c <__ieee754_powf+0x544>
 80153fc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80156fc <__ieee754_powf+0x3a4>
 8015400:	ecbd 8b02 	vpop	{d8}
 8015404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015408:	2602      	movs	r6, #2
 801540a:	e7ec      	b.n	80153e6 <__ieee754_powf+0x8e>
 801540c:	2d00      	cmp	r5, #0
 801540e:	daf5      	bge.n	80153fc <__ieee754_powf+0xa4>
 8015410:	eeb1 0a68 	vneg.f32	s0, s17
 8015414:	e7f4      	b.n	8015400 <__ieee754_powf+0xa8>
 8015416:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801541a:	d102      	bne.n	8015422 <__ieee754_powf+0xca>
 801541c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015420:	e7ee      	b.n	8015400 <__ieee754_powf+0xa8>
 8015422:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8015426:	eeb0 0a48 	vmov.f32	s0, s16
 801542a:	d108      	bne.n	801543e <__ieee754_powf+0xe6>
 801542c:	f1b8 0f00 	cmp.w	r8, #0
 8015430:	db05      	blt.n	801543e <__ieee754_powf+0xe6>
 8015432:	ecbd 8b02 	vpop	{d8}
 8015436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801543a:	f000 ba4d 	b.w	80158d8 <__ieee754_sqrtf>
 801543e:	f000 fa4e 	bl	80158de <fabsf>
 8015442:	b124      	cbz	r4, 801544e <__ieee754_powf+0xf6>
 8015444:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8015448:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801544c:	d117      	bne.n	801547e <__ieee754_powf+0x126>
 801544e:	2d00      	cmp	r5, #0
 8015450:	bfbc      	itt	lt
 8015452:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015456:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801545a:	f1b8 0f00 	cmp.w	r8, #0
 801545e:	dacf      	bge.n	8015400 <__ieee754_powf+0xa8>
 8015460:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015464:	ea54 0306 	orrs.w	r3, r4, r6
 8015468:	d104      	bne.n	8015474 <__ieee754_powf+0x11c>
 801546a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801546e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015472:	e7c5      	b.n	8015400 <__ieee754_powf+0xa8>
 8015474:	2e01      	cmp	r6, #1
 8015476:	d1c3      	bne.n	8015400 <__ieee754_powf+0xa8>
 8015478:	eeb1 0a40 	vneg.f32	s0, s0
 801547c:	e7c0      	b.n	8015400 <__ieee754_powf+0xa8>
 801547e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015482:	3801      	subs	r0, #1
 8015484:	ea56 0300 	orrs.w	r3, r6, r0
 8015488:	d104      	bne.n	8015494 <__ieee754_powf+0x13c>
 801548a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801548e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015492:	e7b5      	b.n	8015400 <__ieee754_powf+0xa8>
 8015494:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8015498:	dd6b      	ble.n	8015572 <__ieee754_powf+0x21a>
 801549a:	4b99      	ldr	r3, [pc, #612]	; (8015700 <__ieee754_powf+0x3a8>)
 801549c:	429c      	cmp	r4, r3
 801549e:	dc06      	bgt.n	80154ae <__ieee754_powf+0x156>
 80154a0:	2d00      	cmp	r5, #0
 80154a2:	daab      	bge.n	80153fc <__ieee754_powf+0xa4>
 80154a4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015704 <__ieee754_powf+0x3ac>
 80154a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80154ac:	e7a8      	b.n	8015400 <__ieee754_powf+0xa8>
 80154ae:	4b96      	ldr	r3, [pc, #600]	; (8015708 <__ieee754_powf+0x3b0>)
 80154b0:	429c      	cmp	r4, r3
 80154b2:	dd02      	ble.n	80154ba <__ieee754_powf+0x162>
 80154b4:	2d00      	cmp	r5, #0
 80154b6:	dcf5      	bgt.n	80154a4 <__ieee754_powf+0x14c>
 80154b8:	e7a0      	b.n	80153fc <__ieee754_powf+0xa4>
 80154ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80154be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80154c2:	eddf 6a92 	vldr	s13, [pc, #584]	; 801570c <__ieee754_powf+0x3b4>
 80154c6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80154ca:	eee0 6a67 	vfms.f32	s13, s0, s15
 80154ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80154d2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80154d6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80154da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154de:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8015710 <__ieee754_powf+0x3b8>
 80154e2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80154e6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8015714 <__ieee754_powf+0x3bc>
 80154ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 80154ee:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8015718 <__ieee754_powf+0x3c0>
 80154f2:	eef0 6a67 	vmov.f32	s13, s15
 80154f6:	eee0 6a07 	vfma.f32	s13, s0, s14
 80154fa:	ee16 3a90 	vmov	r3, s13
 80154fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015502:	f023 030f 	bic.w	r3, r3, #15
 8015506:	ee00 3a90 	vmov	s1, r3
 801550a:	eee0 0a47 	vfms.f32	s1, s0, s14
 801550e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015512:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8015516:	f025 050f 	bic.w	r5, r5, #15
 801551a:	ee07 5a10 	vmov	s14, r5
 801551e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015522:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015526:	ee07 3a90 	vmov	s15, r3
 801552a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801552e:	3e01      	subs	r6, #1
 8015530:	ea56 0200 	orrs.w	r2, r6, r0
 8015534:	ee07 5a10 	vmov	s14, r5
 8015538:	ee67 7a87 	vmul.f32	s15, s15, s14
 801553c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015540:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015544:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015548:	ee17 4a10 	vmov	r4, s14
 801554c:	bf08      	it	eq
 801554e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015552:	2c00      	cmp	r4, #0
 8015554:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015558:	f340 8184 	ble.w	8015864 <__ieee754_powf+0x50c>
 801555c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015560:	f340 80fc 	ble.w	801575c <__ieee754_powf+0x404>
 8015564:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015704 <__ieee754_powf+0x3ac>
 8015568:	ee28 0a27 	vmul.f32	s0, s16, s15
 801556c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015570:	e746      	b.n	8015400 <__ieee754_powf+0xa8>
 8015572:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8015576:	bf01      	itttt	eq
 8015578:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801571c <__ieee754_powf+0x3c4>
 801557c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015580:	f06f 0217 	mvneq.w	r2, #23
 8015584:	ee17 4a90 	vmoveq	r4, s15
 8015588:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801558c:	bf18      	it	ne
 801558e:	2200      	movne	r2, #0
 8015590:	3b7f      	subs	r3, #127	; 0x7f
 8015592:	4413      	add	r3, r2
 8015594:	4a62      	ldr	r2, [pc, #392]	; (8015720 <__ieee754_powf+0x3c8>)
 8015596:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801559a:	4294      	cmp	r4, r2
 801559c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80155a0:	dd06      	ble.n	80155b0 <__ieee754_powf+0x258>
 80155a2:	4a60      	ldr	r2, [pc, #384]	; (8015724 <__ieee754_powf+0x3cc>)
 80155a4:	4294      	cmp	r4, r2
 80155a6:	f340 80a4 	ble.w	80156f2 <__ieee754_powf+0x39a>
 80155aa:	3301      	adds	r3, #1
 80155ac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80155b0:	2400      	movs	r4, #0
 80155b2:	4a5d      	ldr	r2, [pc, #372]	; (8015728 <__ieee754_powf+0x3d0>)
 80155b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80155b8:	ee07 1a90 	vmov	s15, r1
 80155bc:	ed92 7a00 	vldr	s14, [r2]
 80155c0:	4a5a      	ldr	r2, [pc, #360]	; (801572c <__ieee754_powf+0x3d4>)
 80155c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80155c6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80155ca:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80155ce:	1049      	asrs	r1, r1, #1
 80155d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80155d4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80155d8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80155dc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80155e0:	ee06 1a10 	vmov	s12, r1
 80155e4:	ee65 4a26 	vmul.f32	s9, s10, s13
 80155e8:	ee36 7a47 	vsub.f32	s14, s12, s14
 80155ec:	ee14 7a90 	vmov	r7, s9
 80155f0:	4017      	ands	r7, r2
 80155f2:	ee05 7a90 	vmov	s11, r7
 80155f6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80155fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80155fe:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015730 <__ieee754_powf+0x3d8>
 8015602:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8015606:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801560a:	ee25 6a26 	vmul.f32	s12, s10, s13
 801560e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8015734 <__ieee754_powf+0x3dc>
 8015612:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8015738 <__ieee754_powf+0x3e0>
 801561a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801561e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801570c <__ieee754_powf+0x3b4>
 8015622:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015626:	eddf 6a45 	vldr	s13, [pc, #276]	; 801573c <__ieee754_powf+0x3e4>
 801562a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801562e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015740 <__ieee754_powf+0x3e8>
 8015632:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015636:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801563a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801563e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015642:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015646:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801564a:	eef0 7a45 	vmov.f32	s15, s10
 801564e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015656:	ee17 1a90 	vmov	r1, s15
 801565a:	4011      	ands	r1, r2
 801565c:	ee07 1a90 	vmov	s15, r1
 8015660:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015664:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8015668:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801566c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015670:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015674:	eeb0 6a47 	vmov.f32	s12, s14
 8015678:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801567c:	ee16 1a10 	vmov	r1, s12
 8015680:	4011      	ands	r1, r2
 8015682:	ee06 1a90 	vmov	s13, r1
 8015686:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801568a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8015744 <__ieee754_powf+0x3ec>
 801568e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8015748 <__ieee754_powf+0x3f0>
 8015692:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015696:	ee06 1a10 	vmov	s12, r1
 801569a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801569e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801574c <__ieee754_powf+0x3f4>
 80156a2:	492b      	ldr	r1, [pc, #172]	; (8015750 <__ieee754_powf+0x3f8>)
 80156a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80156a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80156ac:	edd1 7a00 	vldr	s15, [r1]
 80156b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156b4:	ee07 3a90 	vmov	s15, r3
 80156b8:	4b26      	ldr	r3, [pc, #152]	; (8015754 <__ieee754_powf+0x3fc>)
 80156ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80156be:	eef0 7a47 	vmov.f32	s15, s14
 80156c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80156c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80156ca:	edd4 0a00 	vldr	s1, [r4]
 80156ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80156d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80156d6:	ee17 3a90 	vmov	r3, s15
 80156da:	4013      	ands	r3, r2
 80156dc:	ee07 3a90 	vmov	s15, r3
 80156e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80156e4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80156e8:	eee6 6a65 	vfms.f32	s13, s12, s11
 80156ec:	ee77 7a66 	vsub.f32	s15, s14, s13
 80156f0:	e70f      	b.n	8015512 <__ieee754_powf+0x1ba>
 80156f2:	2401      	movs	r4, #1
 80156f4:	e75d      	b.n	80155b2 <__ieee754_powf+0x25a>
 80156f6:	bf00      	nop
 80156f8:	0801614c 	.word	0x0801614c
 80156fc:	00000000 	.word	0x00000000
 8015700:	3f7ffff7 	.word	0x3f7ffff7
 8015704:	7149f2ca 	.word	0x7149f2ca
 8015708:	3f800007 	.word	0x3f800007
 801570c:	3eaaaaab 	.word	0x3eaaaaab
 8015710:	3fb8aa3b 	.word	0x3fb8aa3b
 8015714:	36eca570 	.word	0x36eca570
 8015718:	3fb8aa00 	.word	0x3fb8aa00
 801571c:	4b800000 	.word	0x4b800000
 8015720:	001cc471 	.word	0x001cc471
 8015724:	005db3d6 	.word	0x005db3d6
 8015728:	08016530 	.word	0x08016530
 801572c:	fffff000 	.word	0xfffff000
 8015730:	3e6c3255 	.word	0x3e6c3255
 8015734:	3e53f142 	.word	0x3e53f142
 8015738:	3e8ba305 	.word	0x3e8ba305
 801573c:	3edb6db7 	.word	0x3edb6db7
 8015740:	3f19999a 	.word	0x3f19999a
 8015744:	3f76384f 	.word	0x3f76384f
 8015748:	3f763800 	.word	0x3f763800
 801574c:	369dc3a0 	.word	0x369dc3a0
 8015750:	08016540 	.word	0x08016540
 8015754:	08016538 	.word	0x08016538
 8015758:	3338aa3c 	.word	0x3338aa3c
 801575c:	f040 8092 	bne.w	8015884 <__ieee754_powf+0x52c>
 8015760:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8015758 <__ieee754_powf+0x400>
 8015764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015768:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801576c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015774:	f73f aef6 	bgt.w	8015564 <__ieee754_powf+0x20c>
 8015778:	15db      	asrs	r3, r3, #23
 801577a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801577e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015782:	4103      	asrs	r3, r0
 8015784:	4423      	add	r3, r4
 8015786:	4949      	ldr	r1, [pc, #292]	; (80158ac <__ieee754_powf+0x554>)
 8015788:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801578c:	3a7f      	subs	r2, #127	; 0x7f
 801578e:	4111      	asrs	r1, r2
 8015790:	ea23 0101 	bic.w	r1, r3, r1
 8015794:	ee07 1a10 	vmov	s14, r1
 8015798:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801579c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80157a0:	f1c2 0217 	rsb	r2, r2, #23
 80157a4:	4110      	asrs	r0, r2
 80157a6:	2c00      	cmp	r4, #0
 80157a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157ac:	bfb8      	it	lt
 80157ae:	4240      	neglt	r0, r0
 80157b0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80157b4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80158b0 <__ieee754_powf+0x558>
 80157b8:	ee17 3a10 	vmov	r3, s14
 80157bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80157c0:	f023 030f 	bic.w	r3, r3, #15
 80157c4:	ee07 3a10 	vmov	s14, r3
 80157c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157cc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80157d0:	eddf 7a38 	vldr	s15, [pc, #224]	; 80158b4 <__ieee754_powf+0x55c>
 80157d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157d8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80157dc:	eddf 6a36 	vldr	s13, [pc, #216]	; 80158b8 <__ieee754_powf+0x560>
 80157e0:	eeb0 0a67 	vmov.f32	s0, s15
 80157e4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80157e8:	eeb0 6a40 	vmov.f32	s12, s0
 80157ec:	eea7 6a66 	vfms.f32	s12, s14, s13
 80157f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80157f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80157f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80158bc <__ieee754_powf+0x564>
 80157fc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80158c0 <__ieee754_powf+0x568>
 8015800:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015804:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80158c4 <__ieee754_powf+0x56c>
 8015808:	eee6 6a07 	vfma.f32	s13, s12, s14
 801580c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80158c8 <__ieee754_powf+0x570>
 8015810:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015814:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80158cc <__ieee754_powf+0x574>
 8015818:	eee6 6a07 	vfma.f32	s13, s12, s14
 801581c:	eeb0 6a40 	vmov.f32	s12, s0
 8015820:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015824:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015828:	eeb0 7a46 	vmov.f32	s14, s12
 801582c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015830:	ee20 6a06 	vmul.f32	s12, s0, s12
 8015834:	eee0 7a27 	vfma.f32	s15, s0, s15
 8015838:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801583c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015840:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015844:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015848:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801584c:	ee10 3a10 	vmov	r3, s0
 8015850:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015858:	da1a      	bge.n	8015890 <__ieee754_powf+0x538>
 801585a:	f7fb fb23 	bl	8010ea4 <scalbnf>
 801585e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015862:	e5cd      	b.n	8015400 <__ieee754_powf+0xa8>
 8015864:	4a1a      	ldr	r2, [pc, #104]	; (80158d0 <__ieee754_powf+0x578>)
 8015866:	4293      	cmp	r3, r2
 8015868:	dd02      	ble.n	8015870 <__ieee754_powf+0x518>
 801586a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80158d4 <__ieee754_powf+0x57c>
 801586e:	e67b      	b.n	8015568 <__ieee754_powf+0x210>
 8015870:	d108      	bne.n	8015884 <__ieee754_powf+0x52c>
 8015872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015876:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801587e:	f6ff af7b 	blt.w	8015778 <__ieee754_powf+0x420>
 8015882:	e7f2      	b.n	801586a <__ieee754_powf+0x512>
 8015884:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015888:	f73f af76 	bgt.w	8015778 <__ieee754_powf+0x420>
 801588c:	2000      	movs	r0, #0
 801588e:	e78f      	b.n	80157b0 <__ieee754_powf+0x458>
 8015890:	ee00 3a10 	vmov	s0, r3
 8015894:	e7e3      	b.n	801585e <__ieee754_powf+0x506>
 8015896:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801589a:	e5b1      	b.n	8015400 <__ieee754_powf+0xa8>
 801589c:	eeb0 0a68 	vmov.f32	s0, s17
 80158a0:	e5ae      	b.n	8015400 <__ieee754_powf+0xa8>
 80158a2:	eeb0 0a48 	vmov.f32	s0, s16
 80158a6:	e5ab      	b.n	8015400 <__ieee754_powf+0xa8>
 80158a8:	2600      	movs	r6, #0
 80158aa:	e590      	b.n	80153ce <__ieee754_powf+0x76>
 80158ac:	007fffff 	.word	0x007fffff
 80158b0:	3f317218 	.word	0x3f317218
 80158b4:	35bfbe8c 	.word	0x35bfbe8c
 80158b8:	3f317200 	.word	0x3f317200
 80158bc:	3331bb4c 	.word	0x3331bb4c
 80158c0:	b5ddea0e 	.word	0xb5ddea0e
 80158c4:	388ab355 	.word	0x388ab355
 80158c8:	bb360b61 	.word	0xbb360b61
 80158cc:	3e2aaaab 	.word	0x3e2aaaab
 80158d0:	43160000 	.word	0x43160000
 80158d4:	0da24260 	.word	0x0da24260

080158d8 <__ieee754_sqrtf>:
 80158d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80158dc:	4770      	bx	lr

080158de <fabsf>:
 80158de:	ee10 3a10 	vmov	r3, s0
 80158e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158e6:	ee00 3a10 	vmov	s0, r3
 80158ea:	4770      	bx	lr

080158ec <rintf>:
 80158ec:	ee10 2a10 	vmov	r2, s0
 80158f0:	b513      	push	{r0, r1, r4, lr}
 80158f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80158f6:	397f      	subs	r1, #127	; 0x7f
 80158f8:	2916      	cmp	r1, #22
 80158fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80158fe:	dc47      	bgt.n	8015990 <rintf+0xa4>
 8015900:	b32b      	cbz	r3, 801594e <rintf+0x62>
 8015902:	2900      	cmp	r1, #0
 8015904:	ee10 3a10 	vmov	r3, s0
 8015908:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801590c:	da21      	bge.n	8015952 <rintf+0x66>
 801590e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8015912:	425b      	negs	r3, r3
 8015914:	4921      	ldr	r1, [pc, #132]	; (801599c <rintf+0xb0>)
 8015916:	0a5b      	lsrs	r3, r3, #9
 8015918:	0d12      	lsrs	r2, r2, #20
 801591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801591e:	0512      	lsls	r2, r2, #20
 8015920:	4313      	orrs	r3, r2
 8015922:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8015926:	ee07 3a90 	vmov	s15, r3
 801592a:	edd1 6a00 	vldr	s13, [r1]
 801592e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8015932:	ed8d 7a01 	vstr	s14, [sp, #4]
 8015936:	eddd 7a01 	vldr	s15, [sp, #4]
 801593a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801593e:	ee17 3a90 	vmov	r3, s15
 8015942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015946:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801594a:	ee00 3a10 	vmov	s0, r3
 801594e:	b002      	add	sp, #8
 8015950:	bd10      	pop	{r4, pc}
 8015952:	4a13      	ldr	r2, [pc, #76]	; (80159a0 <rintf+0xb4>)
 8015954:	410a      	asrs	r2, r1
 8015956:	4213      	tst	r3, r2
 8015958:	d0f9      	beq.n	801594e <rintf+0x62>
 801595a:	0854      	lsrs	r4, r2, #1
 801595c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8015960:	d006      	beq.n	8015970 <rintf+0x84>
 8015962:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015966:	ea23 0304 	bic.w	r3, r3, r4
 801596a:	fa42 f101 	asr.w	r1, r2, r1
 801596e:	430b      	orrs	r3, r1
 8015970:	4a0a      	ldr	r2, [pc, #40]	; (801599c <rintf+0xb0>)
 8015972:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8015976:	ed90 7a00 	vldr	s14, [r0]
 801597a:	ee07 3a90 	vmov	s15, r3
 801597e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015982:	edcd 7a01 	vstr	s15, [sp, #4]
 8015986:	ed9d 0a01 	vldr	s0, [sp, #4]
 801598a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801598e:	e7de      	b.n	801594e <rintf+0x62>
 8015990:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015994:	d3db      	bcc.n	801594e <rintf+0x62>
 8015996:	ee30 0a00 	vadd.f32	s0, s0, s0
 801599a:	e7d8      	b.n	801594e <rintf+0x62>
 801599c:	08016548 	.word	0x08016548
 80159a0:	007fffff 	.word	0x007fffff

080159a4 <_init>:
 80159a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a6:	bf00      	nop
 80159a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159aa:	bc08      	pop	{r3}
 80159ac:	469e      	mov	lr, r3
 80159ae:	4770      	bx	lr

080159b0 <_fini>:
 80159b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159b2:	bf00      	nop
 80159b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159b6:	bc08      	pop	{r3}
 80159b8:	469e      	mov	lr, r3
 80159ba:	4770      	bx	lr
