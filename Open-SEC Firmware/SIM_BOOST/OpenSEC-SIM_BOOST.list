
OpenSEC-SIM_BOOST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800fdd0  0800fdd0  0001fdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010970  08010970  00030564  2**0
                  CONTENTS
  4 .ARM          00000008  08010970  08010970  00020970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010978  08010978  00030564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010978  08010978  00020978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801097c  0801097c  0002097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000564  20000000  08010980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003300  20000564  08010ee4  00030564  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003864  08010ee4  00033864  2**0
                  ALLOC
 11 .erom_flash   00000800  0807b800  0807b800  0003b800  2**3
                  ALLOC
 12 .erom_ram     00000158  2001f800  2001f800  0003f800  2**2
                  ALLOC
 13 .bootflash    00000000  0807c000  0807c000  00030564  2**0
                  CONTENTS
 14 .appflash     00000000  0803d800  0803d800  00030564  2**0
                  CONTENTS
 15 .ARM.attributes 00000030  00000000  00000000  00030564  2**0
                  CONTENTS, READONLY
 16 .debug_info   00041b1a  00000000  00000000  00030594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007484  00000000  00000000  000720ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001e489  00000000  00000000  00079532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001678  00000000  00000000  000979c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003448  00000000  00000000  00099038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000310e9  00000000  00000000  0009c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00036f65  00000000  00000000  000cd569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0012c6d3  00000000  00000000  001044ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  00230ba1  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000061d0  00000000  00000000  00230bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000564 	.word	0x20000564
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fdb4 	.word	0x0800fdb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000568 	.word	0x20000568
 800021c:	0800fdb4 	.word	0x0800fdb4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a4 	b.w	8001058 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8083 	bne.w	8000eaa <__udivmoddi4+0x116>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4617      	mov	r7, r2
 8000da8:	d947      	bls.n	8000e3a <__udivmoddi4+0xa6>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b142      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000db0:	f1c2 0020 	rsb	r0, r2, #32
 8000db4:	fa24 f000 	lsr.w	r0, r4, r0
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4097      	lsls	r7, r2
 8000dbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc6:	0c23      	lsrs	r3, r4, #16
 8000dc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dcc:	fa1f fe87 	uxth.w	lr, r7
 8000dd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x60>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000de6:	f080 8119 	bcs.w	800101c <__udivmoddi4+0x288>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 8116 	bls.w	800101c <__udivmoddi4+0x288>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x8c>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e12:	f080 8105 	bcs.w	8001020 <__udivmoddi4+0x28c>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f240 8102 	bls.w	8001020 <__udivmoddi4+0x28c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	2600      	movs	r6, #0
 8000e2a:	b11d      	cbz	r5, 8000e34 <__udivmoddi4+0xa0>
 8000e2c:	40d4      	lsrs	r4, r2
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e9c5 4300 	strd	r4, r3, [r5]
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xaa>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d150      	bne.n	8000ee8 <__udivmoddi4+0x154>
 8000e46:	1bcb      	subs	r3, r1, r7
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	fa1f f887 	uxth.w	r8, r7
 8000e50:	2601      	movs	r6, #1
 8000e52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e56:	0c21      	lsrs	r1, r4, #16
 8000e58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb08 f30c 	mul.w	r3, r8, ip
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0xe4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0xe2>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	f200 80e9 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000e76:	4684      	mov	ip, r0
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	b2a3      	uxth	r3, r4
 8000e7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e88:	fb08 f800 	mul.w	r8, r8, r0
 8000e8c:	45a0      	cmp	r8, r4
 8000e8e:	d907      	bls.n	8000ea0 <__udivmoddi4+0x10c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x10a>
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	f200 80d9 	bhi.w	8001050 <__udivmoddi4+0x2bc>
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	eba4 0408 	sub.w	r4, r4, r8
 8000ea4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea8:	e7bf      	b.n	8000e2a <__udivmoddi4+0x96>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d909      	bls.n	8000ec2 <__udivmoddi4+0x12e>
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <__udivmoddi4+0x282>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	fab3 f683 	clz	r6, r3
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d14a      	bne.n	8000f60 <__udivmoddi4+0x1cc>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d302      	bcc.n	8000ed4 <__udivmoddi4+0x140>
 8000ece:	4282      	cmp	r2, r0
 8000ed0:	f200 80b8 	bhi.w	8001044 <__udivmoddi4+0x2b0>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	468c      	mov	ip, r1
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d0a8      	beq.n	8000e34 <__udivmoddi4+0xa0>
 8000ee2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ee6:	e7a5      	b.n	8000e34 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef0:	4097      	lsls	r7, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	4330      	orrs	r0, r6
 8000efe:	0c03      	lsrs	r3, r0, #16
 8000f00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f04:	fa1f f887 	uxth.w	r8, r7
 8000f08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f10:	fb06 f108 	mul.w	r1, r6, r8
 8000f14:	4299      	cmp	r1, r3
 8000f16:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x19c>
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f22:	f080 808d 	bcs.w	8001040 <__udivmoddi4+0x2ac>
 8000f26:	4299      	cmp	r1, r3
 8000f28:	f240 808a 	bls.w	8001040 <__udivmoddi4+0x2ac>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	443b      	add	r3, r7
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b281      	uxth	r1, r0
 8000f34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb00 f308 	mul.w	r3, r0, r8
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1c4>
 8000f48:	1879      	adds	r1, r7, r1
 8000f4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4e:	d273      	bcs.n	8001038 <__udivmoddi4+0x2a4>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d971      	bls.n	8001038 <__udivmoddi4+0x2a4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4439      	add	r1, r7
 8000f58:	1acb      	subs	r3, r1, r3
 8000f5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f5e:	e778      	b.n	8000e52 <__udivmoddi4+0xbe>
 8000f60:	f1c6 0c20 	rsb	ip, r6, #32
 8000f64:	fa03 f406 	lsl.w	r4, r3, r6
 8000f68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f72:	fa01 f306 	lsl.w	r3, r1, r6
 8000f76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	0c3b      	lsrs	r3, r7, #16
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fa1f f884 	uxth.w	r8, r4
 8000f8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f92:	fb09 fa08 	mul.w	sl, r9, r8
 8000f96:	458a      	cmp	sl, r1
 8000f98:	fa02 f206 	lsl.w	r2, r2, r6
 8000f9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x220>
 8000fa2:	1861      	adds	r1, r4, r1
 8000fa4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa8:	d248      	bcs.n	800103c <__udivmoddi4+0x2a8>
 8000faa:	458a      	cmp	sl, r1
 8000fac:	d946      	bls.n	800103c <__udivmoddi4+0x2a8>
 8000fae:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb2:	4421      	add	r1, r4
 8000fb4:	eba1 010a 	sub.w	r1, r1, sl
 8000fb8:	b2bf      	uxth	r7, r7
 8000fba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fc6:	fb00 f808 	mul.w	r8, r0, r8
 8000fca:	45b8      	cmp	r8, r7
 8000fcc:	d907      	bls.n	8000fde <__udivmoddi4+0x24a>
 8000fce:	19e7      	adds	r7, r4, r7
 8000fd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd4:	d22e      	bcs.n	8001034 <__udivmoddi4+0x2a0>
 8000fd6:	45b8      	cmp	r8, r7
 8000fd8:	d92c      	bls.n	8001034 <__udivmoddi4+0x2a0>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	4427      	add	r7, r4
 8000fde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fe2:	eba7 0708 	sub.w	r7, r7, r8
 8000fe6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fea:	454f      	cmp	r7, r9
 8000fec:	46c6      	mov	lr, r8
 8000fee:	4649      	mov	r1, r9
 8000ff0:	d31a      	bcc.n	8001028 <__udivmoddi4+0x294>
 8000ff2:	d017      	beq.n	8001024 <__udivmoddi4+0x290>
 8000ff4:	b15d      	cbz	r5, 800100e <__udivmoddi4+0x27a>
 8000ff6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ffa:	eb67 0701 	sbc.w	r7, r7, r1
 8000ffe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001002:	40f2      	lsrs	r2, r6
 8001004:	ea4c 0202 	orr.w	r2, ip, r2
 8001008:	40f7      	lsrs	r7, r6
 800100a:	e9c5 2700 	strd	r2, r7, [r5]
 800100e:	2600      	movs	r6, #0
 8001010:	4631      	mov	r1, r6
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e70b      	b.n	8000e34 <__udivmoddi4+0xa0>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e9      	b.n	8000df4 <__udivmoddi4+0x60>
 8001020:	4618      	mov	r0, r3
 8001022:	e6fd      	b.n	8000e20 <__udivmoddi4+0x8c>
 8001024:	4543      	cmp	r3, r8
 8001026:	d2e5      	bcs.n	8000ff4 <__udivmoddi4+0x260>
 8001028:	ebb8 0e02 	subs.w	lr, r8, r2
 800102c:	eb69 0104 	sbc.w	r1, r9, r4
 8001030:	3801      	subs	r0, #1
 8001032:	e7df      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001034:	4608      	mov	r0, r1
 8001036:	e7d2      	b.n	8000fde <__udivmoddi4+0x24a>
 8001038:	4660      	mov	r0, ip
 800103a:	e78d      	b.n	8000f58 <__udivmoddi4+0x1c4>
 800103c:	4681      	mov	r9, r0
 800103e:	e7b9      	b.n	8000fb4 <__udivmoddi4+0x220>
 8001040:	4666      	mov	r6, ip
 8001042:	e775      	b.n	8000f30 <__udivmoddi4+0x19c>
 8001044:	4630      	mov	r0, r6
 8001046:	e74a      	b.n	8000ede <__udivmoddi4+0x14a>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	4439      	add	r1, r7
 800104e:	e713      	b.n	8000e78 <__udivmoddi4+0xe4>
 8001050:	3802      	subs	r0, #2
 8001052:	443c      	add	r4, r7
 8001054:	e724      	b.n	8000ea0 <__udivmoddi4+0x10c>
 8001056:	bf00      	nop

08001058 <__aeabi_idiv0>:
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_InitTick+0x40>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b90b      	cbnz	r3, 8001068 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001064:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001068:	490d      	ldr	r1, [pc, #52]	; (80010a0 <HAL_InitTick+0x44>)
 800106a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106e:	4605      	mov	r5, r0
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	6808      	ldr	r0, [r1, #0]
 8001076:	fbb0 f0f3 	udiv	r0, r0, r3
 800107a:	f001 f875 	bl	8002168 <HAL_SYSTICK_Config>
 800107e:	4604      	mov	r4, r0
 8001080:	2800      	cmp	r0, #0
 8001082:	d1ef      	bne.n	8001064 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	2d0f      	cmp	r5, #15
 8001086:	d8ed      	bhi.n	8001064 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	4602      	mov	r2, r0
 800108a:	4629      	mov	r1, r5
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f001 f824 	bl	80020dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_InitTick+0x48>)
 8001096:	4620      	mov	r0, r4
 8001098:	601d      	str	r5, [r3, #0]
}
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000030 	.word	0x20000030
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_Init>:
{
 80010a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 f802 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ffd3 	bl	800105c <HAL_InitTick>
 80010b6:	b110      	cbz	r0, 80010be <HAL_Init+0x16>
    status = HAL_ERROR;
 80010b8:	2401      	movs	r4, #1
}
 80010ba:	4620      	mov	r0, r4
 80010bc:	bd10      	pop	{r4, pc}
 80010be:	4604      	mov	r4, r0
    HAL_MspInit();
 80010c0:	f007 fd5c 	bl	8008b7c <HAL_MspInit>
}
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}

080010c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <HAL_IncTick+0x10>)
 80010ca:	4904      	ldr	r1, [pc, #16]	; (80010dc <HAL_IncTick+0x14>)
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	6809      	ldr	r1, [r1, #0]
 80010d0:	440b      	add	r3, r1
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20001cbc 	.word	0x20001cbc
 80010dc:	20000000 	.word	0x20000000

080010e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010e0:	4b01      	ldr	r3, [pc, #4]	; (80010e8 <HAL_GetTick+0x8>)
 80010e2:	6818      	ldr	r0, [r3, #0]
}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20001cbc 	.word	0x20001cbc

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff fff6 	bl	80010e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80010f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80010f8:	d002      	beq.n	8001100 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_Delay+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	1b43      	subs	r3, r0, r5
 8001106:	42a3      	cmp	r3, r4
 8001108:	d3fa      	bcc.n	8001100 <HAL_Delay+0x14>
  {
  }
}
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	20000000 	.word	0x20000000

08001110 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8001112:	6813      	ldr	r3, [r2, #0]
 8001114:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001118:	4303      	orrs	r3, r0
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40010030 	.word	0x40010030

08001124 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	f023 0302 	bic.w	r3, r3, #2
 800112c:	4303      	orrs	r3, r0
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40010030 	.word	0x40010030

08001138 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001138:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800113a:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001144:	f7ff ffcc 	bl	80010e0 <HAL_GetTick>
 8001148:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800114a:	e004      	b.n	8001156 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800114c:	f7ff ffc8 	bl	80010e0 <HAL_GetTick>
 8001150:	1b40      	subs	r0, r0, r5
 8001152:	280a      	cmp	r0, #10
 8001154:	d804      	bhi.n	8001160 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	071b      	lsls	r3, r3, #28
 800115a:	d5f7      	bpl.n	800114c <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800115c:	2000      	movs	r0, #0
}
 800115e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
}
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	40010030 	.word	0x40010030

08001168 <HAL_ADC_MspInit>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <HAL_ADC_Init>:
{
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001174:	2800      	cmp	r0, #0
 8001176:	f000 80d6 	beq.w	8001326 <HAL_ADC_Init+0x1ba>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800117c:	4604      	mov	r4, r0
 800117e:	2d00      	cmp	r5, #0
 8001180:	f000 809f 	beq.w	80012c2 <HAL_ADC_Init+0x156>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001184:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001186:	6893      	ldr	r3, [r2, #8]
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	d505      	bpl.n	8001198 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800118c:	6893      	ldr	r3, [r2, #8]
 800118e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001192:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001196:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001198:	6893      	ldr	r3, [r2, #8]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	d419      	bmi.n	80011d2 <HAL_ADC_Init+0x66>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800119e:	4b7f      	ldr	r3, [pc, #508]	; (800139c <HAL_ADC_Init+0x230>)
 80011a0:	487f      	ldr	r0, [pc, #508]	; (80013a0 <HAL_ADC_Init+0x234>)
 80011a2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80011a4:	6891      	ldr	r1, [r2, #8]
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	fba0 0303 	umull	r0, r3, r0, r3
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80011b2:	3301      	adds	r3, #1
 80011b4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011be:	6091      	str	r1, [r2, #8]
 80011c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	b12b      	cbz	r3, 80011d2 <HAL_ADC_Init+0x66>
      wait_loop_index--;
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80011cc:	9b01      	ldr	r3, [sp, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011d2:	6893      	ldr	r3, [r2, #8]
 80011d4:	00de      	lsls	r6, r3, #3
 80011d6:	d466      	bmi.n	80012a6 <HAL_ADC_Init+0x13a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	f013 0f04 	tst.w	r3, #4
    tmp_hal_status = HAL_ERROR;
 80011ee:	f04f 0001 	mov.w	r0, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011f4:	d15e      	bne.n	80012b4 <HAL_ADC_Init+0x148>
 80011f6:	06dd      	lsls	r5, r3, #27
 80011f8:	d45c      	bmi.n	80012b4 <HAL_ADC_Init+0x148>
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001206:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001208:	07d9      	lsls	r1, r3, #31
 800120a:	d419      	bmi.n	8001240 <HAL_ADC_Init+0xd4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800120c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001210:	f000 80a1 	beq.w	8001356 <HAL_ADC_Init+0x1ea>
 8001214:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HAL_ADC_Init+0x238>)
 8001216:	429a      	cmp	r2, r3
 8001218:	f000 80a6 	beq.w	8001368 <HAL_ADC_Init+0x1fc>
 800121c:	4d62      	ldr	r5, [pc, #392]	; (80013a8 <HAL_ADC_Init+0x23c>)
 800121e:	4963      	ldr	r1, [pc, #396]	; (80013ac <HAL_ADC_Init+0x240>)
 8001220:	68ad      	ldr	r5, [r5, #8]
 8001222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	6889      	ldr	r1, [r1, #8]
 800122a:	432b      	orrs	r3, r5
 800122c:	430b      	orrs	r3, r1
 800122e:	07db      	lsls	r3, r3, #31
 8001230:	d406      	bmi.n	8001240 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001232:	495f      	ldr	r1, [pc, #380]	; (80013b0 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001234:	688b      	ldr	r3, [r1, #8]
 8001236:	6865      	ldr	r5, [r4, #4]
 8001238:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800123c:	432b      	orrs	r3, r5
 800123e:	608b      	str	r3, [r1, #8]
                hadc->Init.DataAlign                                                   |
 8001240:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8001244:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001246:	432b      	orrs	r3, r5
 8001248:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800124a:	7f65      	ldrb	r5, [r4, #29]
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800124c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8001250:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001254:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800125a:	d05f      	beq.n	800131c <HAL_ADC_Init+0x1b0>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800125c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800125e:	b121      	cbz	r1, 800126a <HAL_ADC_Init+0xfe>
                  | hadc->Init.ExternalTrigConvEdge
 8001260:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001262:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001266:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001268:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800126a:	68d6      	ldr	r6, [r2, #12]
 800126c:	4951      	ldr	r1, [pc, #324]	; (80013b4 <HAL_ADC_Init+0x248>)
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800126e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001270:	4031      	ands	r1, r6
 8001272:	430b      	orrs	r3, r1
 8001274:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001276:	6913      	ldr	r3, [r2, #16]
 8001278:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800127c:	432b      	orrs	r3, r5
 800127e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001280:	6893      	ldr	r3, [r2, #8]
 8001282:	075e      	lsls	r6, r3, #29
 8001284:	d523      	bpl.n	80012ce <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001286:	6893      	ldr	r3, [r2, #8]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001288:	6963      	ldr	r3, [r4, #20]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d04e      	beq.n	800132c <HAL_ADC_Init+0x1c0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800128e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001290:	f023 030f 	bic.w	r3, r3, #15
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001296:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001298:	f023 0303 	bic.w	r3, r3, #3
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80012a2:	b002      	add	sp, #8
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a6:	6893      	ldr	r3, [r2, #8]
 80012a8:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012b2:	d0a0      	beq.n	80011f6 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80012b6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b8:	f043 0310 	orr.w	r3, r3, #16
 80012bc:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80012be:	b002      	add	sp, #8
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80012c2:	f7ff ff51 	bl	8001168 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80012c6:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80012c8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80012cc:	e75a      	b.n	8001184 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ce:	6893      	ldr	r3, [r2, #8]
 80012d0:	071d      	lsls	r5, r3, #28
 80012d2:	d4d9      	bmi.n	8001288 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012d4:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012da:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80012dc:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012de:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012e2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012e4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012e8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012ec:	430b      	orrs	r3, r1
 80012ee:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012f0:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80012f2:	bb1d      	cbnz	r5, 800133c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80012fa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80012fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001302:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001306:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800130a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800130e:	2b01      	cmp	r3, #1
 8001310:	d033      	beq.n	800137a <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001312:	6913      	ldr	r3, [r2, #16]
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6113      	str	r3, [r2, #16]
 800131a:	e7b5      	b.n	8001288 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800131c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800131e:	3901      	subs	r1, #1
 8001320:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001324:	e79a      	b.n	800125c <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8001326:	2001      	movs	r0, #1
}
 8001328:	b002      	add	sp, #8
 800132a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800132c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800132e:	6a23      	ldr	r3, [r4, #32]
 8001330:	f021 010f 	bic.w	r1, r1, #15
 8001334:	3b01      	subs	r3, #1
 8001336:	430b      	orrs	r3, r1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	e7ac      	b.n	8001296 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001342:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001346:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800134a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800134e:	432b      	orrs	r3, r5
 8001350:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001354:	e7d9      	b.n	800130a <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001356:	4913      	ldr	r1, [pc, #76]	; (80013a4 <HAL_ADC_Init+0x238>)
 8001358:	6893      	ldr	r3, [r2, #8]
 800135a:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800135c:	430b      	orrs	r3, r1
 800135e:	07d9      	lsls	r1, r3, #31
 8001360:	f53f af6e 	bmi.w	8001240 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001364:	4914      	ldr	r1, [pc, #80]	; (80013b8 <HAL_ADC_Init+0x24c>)
 8001366:	e765      	b.n	8001234 <HAL_ADC_Init+0xc8>
 8001368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001370:	430b      	orrs	r3, r1
 8001372:	07db      	lsls	r3, r3, #31
 8001374:	f53f af64 	bmi.w	8001240 <HAL_ADC_Init+0xd4>
 8001378:	e7f4      	b.n	8001364 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 800137a:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 800137e:	6911      	ldr	r1, [r2, #16]
 8001380:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001382:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001386:	f021 0104 	bic.w	r1, r1, #4
 800138a:	4333      	orrs	r3, r6
 800138c:	430b      	orrs	r3, r1
 800138e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001390:	432b      	orrs	r3, r5
 8001392:	430b      	orrs	r3, r1
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6113      	str	r3, [r2, #16]
 800139a:	e775      	b.n	8001288 <HAL_ADC_Init+0x11c>
 800139c:	20000030 	.word	0x20000030
 80013a0:	053e2d63 	.word	0x053e2d63
 80013a4:	50000100 	.word	0x50000100
 80013a8:	50000400 	.word	0x50000400
 80013ac:	50000600 	.word	0x50000600
 80013b0:	50000700 	.word	0x50000700
 80013b4:	fff04007 	.word	0xfff04007
 80013b8:	50000300 	.word	0x50000300

080013bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013bc:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013be:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80013c0:	f007 f918 	bl	80085f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop

080013c8 <HAL_ADC_LevelOutOfWindowCallback>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <HAL_ADC_ErrorCallback>:
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <HAL_ADC_IRQHandler>:
{
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80013d2:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  uint32_t tmp_isr = hadc->Instance->ISR;
 80013d8:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80013da:	685f      	ldr	r7, [r3, #4]
{
 80013dc:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013de:	f000 80d2 	beq.w	8001586 <HAL_ADC_IRQHandler+0x1b6>
 80013e2:	48a2      	ldr	r0, [pc, #648]	; (800166c <HAL_ADC_IRQHandler+0x29c>)
 80013e4:	4aa2      	ldr	r2, [pc, #648]	; (8001670 <HAL_ADC_IRQHandler+0x2a0>)
 80013e6:	49a3      	ldr	r1, [pc, #652]	; (8001674 <HAL_ADC_IRQHandler+0x2a4>)
 80013e8:	4283      	cmp	r3, r0
 80013ea:	bf08      	it	eq
 80013ec:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013ee:	6895      	ldr	r5, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80013f0:	07b1      	lsls	r1, r6, #30
 80013f2:	f005 051f 	and.w	r5, r5, #31
 80013f6:	d502      	bpl.n	80013fe <HAL_ADC_IRQHandler+0x2e>
 80013f8:	07ba      	lsls	r2, r7, #30
 80013fa:	f100 80b6 	bmi.w	800156a <HAL_ADC_IRQHandler+0x19a>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80013fe:	0770      	lsls	r0, r6, #29
 8001400:	f140 8086 	bpl.w	8001510 <HAL_ADC_IRQHandler+0x140>
 8001404:	0779      	lsls	r1, r7, #29
 8001406:	f140 8083 	bpl.w	8001510 <HAL_ADC_IRQHandler+0x140>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800140a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800140c:	06d1      	lsls	r1, r2, #27
 800140e:	d403      	bmi.n	8001418 <HAL_ADC_IRQHandler+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001410:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001416:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800141e:	d121      	bne.n	8001464 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001420:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_ADC_IRQHandler+0x29c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	f000 80ec 	beq.w	8001600 <HAL_ADC_IRQHandler+0x230>
 8001428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142c:	4293      	cmp	r3, r2
 800142e:	f000 810f 	beq.w	8001650 <HAL_ADC_IRQHandler+0x280>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001432:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001434:	0490      	lsls	r0, r2, #18
 8001436:	d415      	bmi.n	8001464 <HAL_ADC_IRQHandler+0x94>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	0711      	lsls	r1, r2, #28
 800143c:	d512      	bpl.n	8001464 <HAL_ADC_IRQHandler+0x94>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	0752      	lsls	r2, r2, #29
 8001442:	f100 80fc 	bmi.w	800163e <HAL_ADC_IRQHandler+0x26e>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	f022 020c 	bic.w	r2, r2, #12
 800144c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800144e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001454:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001456:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001458:	04db      	lsls	r3, r3, #19
 800145a:	d403      	bmi.n	8001464 <HAL_ADC_IRQHandler+0x94>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001464:	4620      	mov	r0, r4
 8001466:	f007 f8d3 	bl	8008610 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	220c      	movs	r2, #12
 800146e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001470:	06b0      	lsls	r0, r6, #26
 8001472:	d554      	bpl.n	800151e <HAL_ADC_IRQHandler+0x14e>
 8001474:	06b9      	lsls	r1, r7, #26
 8001476:	d552      	bpl.n	800151e <HAL_ADC_IRQHandler+0x14e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001478:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800147a:	06d1      	lsls	r1, r2, #27
 800147c:	d403      	bmi.n	8001486 <HAL_ADC_IRQHandler+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800147e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001484:	65e2      	str	r2, [r4, #92]	; 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001486:	4979      	ldr	r1, [pc, #484]	; (800166c <HAL_ADC_IRQHandler+0x29c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800148a:	68d8      	ldr	r0, [r3, #12]
 800148c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800148e:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8001492:	f000 80bb 	beq.w	800160c <HAL_ADC_IRQHandler+0x23c>
 8001496:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800149a:	428b      	cmp	r3, r1
 800149c:	f000 80c2 	beq.w	8001624 <HAL_ADC_IRQHandler+0x254>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014a0:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80014a2:	b9d2      	cbnz	r2, 80014da <HAL_ADC_IRQHandler+0x10a>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80014a4:	018a      	lsls	r2, r1, #6
 80014a6:	f100 80a3 	bmi.w	80015f0 <HAL_ADC_IRQHandler+0x220>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	0650      	lsls	r0, r2, #25
 80014ae:	d514      	bpl.n	80014da <HAL_ADC_IRQHandler+0x10a>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80014b0:	0289      	lsls	r1, r1, #10
 80014b2:	d412      	bmi.n	80014da <HAL_ADC_IRQHandler+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	0712      	lsls	r2, r2, #28
 80014b8:	f100 80ce 	bmi.w	8001658 <HAL_ADC_IRQHandler+0x288>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014c2:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80014c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ca:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80014cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014ce:	05d8      	lsls	r0, r3, #23
 80014d0:	d403      	bmi.n	80014da <HAL_ADC_IRQHandler+0x10a>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014da:	4620      	mov	r0, r4
 80014dc:	f000 fd2e 	bl	8001f3c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	2260      	movs	r2, #96	; 0x60
 80014e4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80014e6:	0631      	lsls	r1, r6, #24
 80014e8:	d501      	bpl.n	80014ee <HAL_ADC_IRQHandler+0x11e>
 80014ea:	063a      	lsls	r2, r7, #24
 80014ec:	d459      	bmi.n	80015a2 <HAL_ADC_IRQHandler+0x1d2>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80014ee:	05f0      	lsls	r0, r6, #23
 80014f0:	d501      	bpl.n	80014f6 <HAL_ADC_IRQHandler+0x126>
 80014f2:	05f9      	lsls	r1, r7, #23
 80014f4:	d460      	bmi.n	80015b8 <HAL_ADC_IRQHandler+0x1e8>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80014f6:	05b2      	lsls	r2, r6, #22
 80014f8:	d501      	bpl.n	80014fe <HAL_ADC_IRQHandler+0x12e>
 80014fa:	05b8      	lsls	r0, r7, #22
 80014fc:	d445      	bmi.n	800158a <HAL_ADC_IRQHandler+0x1ba>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80014fe:	06f1      	lsls	r1, r6, #27
 8001500:	d501      	bpl.n	8001506 <HAL_ADC_IRQHandler+0x136>
 8001502:	06fa      	lsls	r2, r7, #27
 8001504:	d410      	bmi.n	8001528 <HAL_ADC_IRQHandler+0x158>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001506:	0571      	lsls	r1, r6, #21
 8001508:	d501      	bpl.n	800150e <HAL_ADC_IRQHandler+0x13e>
 800150a:	057a      	lsls	r2, r7, #21
 800150c:	d460      	bmi.n	80015d0 <HAL_ADC_IRQHandler+0x200>
}
 800150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001510:	0732      	lsls	r2, r6, #28
 8001512:	d5ad      	bpl.n	8001470 <HAL_ADC_IRQHandler+0xa0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001514:	0738      	lsls	r0, r7, #28
 8001516:	f53f af78 	bmi.w	800140a <HAL_ADC_IRQHandler+0x3a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800151a:	06b0      	lsls	r0, r6, #26
 800151c:	d4aa      	bmi.n	8001474 <HAL_ADC_IRQHandler+0xa4>
 800151e:	0672      	lsls	r2, r6, #25
 8001520:	d5e1      	bpl.n	80014e6 <HAL_ADC_IRQHandler+0x116>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001522:	0678      	lsls	r0, r7, #25
 8001524:	d5df      	bpl.n	80014e6 <HAL_ADC_IRQHandler+0x116>
 8001526:	e7a7      	b.n	8001478 <HAL_ADC_IRQHandler+0xa8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001528:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800152a:	b17a      	cbz	r2, 800154c <HAL_ADC_IRQHandler+0x17c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800152c:	2d00      	cmp	r5, #0
 800152e:	d07c      	beq.n	800162a <HAL_ADC_IRQHandler+0x25a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001534:	f000 808e 	beq.w	8001654 <HAL_ADC_IRQHandler+0x284>
 8001538:	484c      	ldr	r0, [pc, #304]	; (800166c <HAL_ADC_IRQHandler+0x29c>)
 800153a:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_ADC_IRQHandler+0x2a0>)
 800153c:	494d      	ldr	r1, [pc, #308]	; (8001674 <HAL_ADC_IRQHandler+0x2a4>)
 800153e:	4283      	cmp	r3, r0
 8001540:	bf08      	it	eq
 8001542:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001544:	6892      	ldr	r2, [r2, #8]
 8001546:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 800154a:	d00b      	beq.n	8001564 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800154c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001554:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff35 	bl	80013cc <HAL_ADC_ErrorCallback>
 8001562:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001564:	2210      	movs	r2, #16
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e7cd      	b.n	8001506 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800156a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800156c:	06db      	lsls	r3, r3, #27
 800156e:	d403      	bmi.n	8001578 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001570:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001576:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001578:	4620      	mov	r0, r4
 800157a:	f000 fce7 	bl	8001f4c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	e73b      	b.n	80013fe <HAL_ADC_IRQHandler+0x2e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001586:	4a3b      	ldr	r2, [pc, #236]	; (8001674 <HAL_ADC_IRQHandler+0x2a4>)
 8001588:	e731      	b.n	80013ee <HAL_ADC_IRQHandler+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800158a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001592:	4620      	mov	r0, r4
 8001594:	f000 fcd8 	bl	8001f48 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e7ad      	b.n	80014fe <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ff0c 	bl	80013c8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e79a      	b.n	80014ee <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80015b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015be:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80015c0:	4620      	mov	r0, r4
 80015c2:	f000 fcbf 	bl	8001f44 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e792      	b.n	80014f6 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80015d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015d6:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80015d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80015e4:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80015e6:	6019      	str	r1, [r3, #0]
}
 80015e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80015ec:	f000 bca8 	b.w	8001f40 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015f0:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80015f4:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80015f8:	4302      	orrs	r2, r0
 80015fa:	f47f af6e 	bne.w	80014da <HAL_ADC_IRQHandler+0x10a>
 80015fe:	e754      	b.n	80014aa <HAL_ADC_IRQHandler+0xda>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001600:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001604:	2d09      	cmp	r5, #9
 8001606:	d914      	bls.n	8001632 <HAL_ADC_IRQHandler+0x262>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001608:	68ca      	ldr	r2, [r1, #12]
 800160a:	e713      	b.n	8001434 <HAL_ADC_IRQHandler+0x64>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800160c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001610:	2d00      	cmp	r5, #0
 8001612:	f43f af45 	beq.w	80014a0 <HAL_ADC_IRQHandler+0xd0>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001616:	1fa9      	subs	r1, r5, #6
 8001618:	2901      	cmp	r1, #1
 800161a:	f67f af41 	bls.w	80014a0 <HAL_ADC_IRQHandler+0xd0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800161e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001622:	e73e      	b.n	80014a2 <HAL_ADC_IRQHandler+0xd2>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001624:	f8df c050 	ldr.w	ip, [pc, #80]	; 8001678 <HAL_ADC_IRQHandler+0x2a8>
 8001628:	e7f2      	b.n	8001610 <HAL_ADC_IRQHandler+0x240>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	07d0      	lsls	r0, r2, #31
 800162e:	d599      	bpl.n	8001564 <HAL_ADC_IRQHandler+0x194>
 8001630:	e78c      	b.n	800154c <HAL_ADC_IRQHandler+0x17c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001632:	f240 2221 	movw	r2, #545	; 0x221
 8001636:	40ea      	lsrs	r2, r5
 8001638:	07d2      	lsls	r2, r2, #31
 800163a:	d5e5      	bpl.n	8001608 <HAL_ADC_IRQHandler+0x238>
 800163c:	e6f9      	b.n	8001432 <HAL_ADC_IRQHandler+0x62>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001646:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6623      	str	r3, [r4, #96]	; 0x60
 800164e:	e709      	b.n	8001464 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001650:	4909      	ldr	r1, [pc, #36]	; (8001678 <HAL_ADC_IRQHandler+0x2a8>)
 8001652:	e7d7      	b.n	8001604 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_ADC_IRQHandler+0x2a4>)
 8001656:	e775      	b.n	8001544 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001660:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6623      	str	r3, [r4, #96]	; 0x60
 8001668:	e737      	b.n	80014da <HAL_ADC_IRQHandler+0x10a>
 800166a:	bf00      	nop
 800166c:	50000100 	.word	0x50000100
 8001670:	50000700 	.word	0x50000700
 8001674:	50000300 	.word	0x50000300
 8001678:	50000400 	.word	0x50000400

0800167c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800167e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001680:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001684:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001688:	d11d      	bne.n	80016c6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800168a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001690:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001692:	680a      	ldr	r2, [r1, #0]
 8001694:	f012 0f08 	tst.w	r2, #8
 8001698:	68ca      	ldr	r2, [r1, #12]
 800169a:	d01b      	beq.n	80016d4 <ADC_DMAConvCplt+0x58>
 800169c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80016a0:	d10d      	bne.n	80016be <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80016a2:	68ca      	ldr	r2, [r1, #12]
 80016a4:	0494      	lsls	r4, r2, #18
 80016a6:	d40a      	bmi.n	80016be <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b2:	04d1      	lsls	r1, r2, #19
 80016b4:	d403      	bmi.n	80016be <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 ffa6 	bl	8008610 <HAL_ADC_ConvCpltCallback>
}
 80016c4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016c6:	06d2      	lsls	r2, r2, #27
 80016c8:	d40a      	bmi.n	80016e0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80016cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80016d4:	0790      	lsls	r0, r2, #30
 80016d6:	d5e7      	bpl.n	80016a8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 ff99 	bl	8008610 <HAL_ADC_ConvCpltCallback>
 80016de:	e7f1      	b.n	80016c4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe73 	bl	80013cc <HAL_ADC_ErrorCallback>
}
 80016e6:	bd10      	pop	{r4, pc}

080016e8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80016ea:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016fc:	f7ff fe66 	bl	80013cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001700:	bd08      	pop	{r3, pc}
 8001702:	bf00      	nop

08001704 <HAL_ADC_ConfigChannel>:
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001706:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800170a:	b083      	sub	sp, #12
 800170c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800170e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001716:	f000 8150 	beq.w	80019ba <HAL_ADC_ConfigChannel+0x2b6>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800171c:	2001      	movs	r0, #1
 800171e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001722:	6894      	ldr	r4, [r2, #8]
 8001724:	0766      	lsls	r6, r4, #29
 8001726:	d450      	bmi.n	80017ca <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 8001728:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800172c:	09a6      	lsrs	r6, r4, #6
 800172e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8001732:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8001736:	f004 041f 	and.w	r4, r4, #31
 800173a:	5977      	ldr	r7, [r6, r5]
 800173c:	f04f 0c1f 	mov.w	ip, #31
 8001740:	fa0c fc04 	lsl.w	ip, ip, r4
 8001744:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001748:	ea27 070c 	bic.w	r7, r7, ip
 800174c:	40a0      	lsls	r0, r4
 800174e:	4338      	orrs	r0, r7
 8001750:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001752:	6890      	ldr	r0, [r2, #8]
 8001754:	0745      	lsls	r5, r0, #29
 8001756:	f140 80a5 	bpl.w	80018a4 <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800175a:	6890      	ldr	r0, [r2, #8]
 800175c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800175e:	6894      	ldr	r4, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001760:	07e4      	lsls	r4, r4, #31
 8001762:	d53b      	bpl.n	80017dc <HAL_ADC_ConfigChannel+0xd8>
 8001764:	4604      	mov	r4, r0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001766:	49c2      	ldr	r1, [pc, #776]	; (8001a70 <HAL_ADC_ConfigChannel+0x36c>)
 8001768:	420c      	tst	r4, r1
 800176a:	d02c      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0xc2>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800176c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001770:	f000 8121 	beq.w	80019b6 <HAL_ADC_ConfigChannel+0x2b2>
 8001774:	4dbf      	ldr	r5, [pc, #764]	; (8001a74 <HAL_ADC_ConfigChannel+0x370>)
 8001776:	49c0      	ldr	r1, [pc, #768]	; (8001a78 <HAL_ADC_ConfigChannel+0x374>)
 8001778:	48c0      	ldr	r0, [pc, #768]	; (8001a7c <HAL_ADC_ConfigChannel+0x378>)
 800177a:	42aa      	cmp	r2, r5
 800177c:	bf18      	it	ne
 800177e:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001780:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001782:	49bf      	ldr	r1, [pc, #764]	; (8001a80 <HAL_ADC_ConfigChannel+0x37c>)
 8001784:	428c      	cmp	r4, r1
 8001786:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 800178a:	f000 8119 	beq.w	80019c0 <HAL_ADC_ConfigChannel+0x2bc>
 800178e:	49bd      	ldr	r1, [pc, #756]	; (8001a84 <HAL_ADC_ConfigChannel+0x380>)
 8001790:	428c      	cmp	r4, r1
 8001792:	f000 8115 	beq.w	80019c0 <HAL_ADC_ConfigChannel+0x2bc>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001796:	49bc      	ldr	r1, [pc, #752]	; (8001a88 <HAL_ADC_ConfigChannel+0x384>)
 8001798:	428c      	cmp	r4, r1
 800179a:	f040 814d 	bne.w	8001a38 <HAL_ADC_ConfigChannel+0x334>
 800179e:	01c0      	lsls	r0, r0, #7
 80017a0:	d411      	bmi.n	80017c6 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80017a6:	f000 822c 	beq.w	8001c02 <HAL_ADC_ConfigChannel+0x4fe>
 80017aa:	4cb2      	ldr	r4, [pc, #712]	; (8001a74 <HAL_ADC_ConfigChannel+0x370>)
 80017ac:	49b2      	ldr	r1, [pc, #712]	; (8001a78 <HAL_ADC_ConfigChannel+0x374>)
 80017ae:	48b3      	ldr	r0, [pc, #716]	; (8001a7c <HAL_ADC_ConfigChannel+0x378>)
 80017b0:	42a2      	cmp	r2, r4
 80017b2:	bf0c      	ite	eq
 80017b4:	460a      	moveq	r2, r1
 80017b6:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017b8:	6891      	ldr	r1, [r2, #8]
 80017ba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80017be:	430d      	orrs	r5, r1
 80017c0:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 80017c4:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2000      	movs	r0, #0
}
 80017c8:	e003      	b.n	80017d2 <HAL_ADC_ConfigChannel+0xce>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80017d8:	b003      	add	sp, #12
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017dc:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80017de:	4cab      	ldr	r4, [pc, #684]	; (8001a8c <HAL_ADC_ConfigChannel+0x388>)
 80017e0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017e4:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8001aa0 <HAL_ADC_ConfigChannel+0x39c>
 80017e8:	f006 0718 	and.w	r7, r6, #24
 80017ec:	40fc      	lsrs	r4, r7
 80017ee:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80017f2:	4004      	ands	r4, r0
 80017f4:	ea25 0507 	bic.w	r5, r5, r7
 80017f8:	432c      	orrs	r4, r5
 80017fa:	4566      	cmp	r6, ip
 80017fc:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001800:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001802:	d1b0      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001804:	2f00      	cmp	r7, #0
 8001806:	f000 8104 	beq.w	8001a12 <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800180e:	2c00      	cmp	r4, #0
 8001810:	f000 819c 	beq.w	8001b4c <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001814:	fab4 f484 	clz	r4, r4
 8001818:	3401      	adds	r4, #1
 800181a:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800181e:	2c09      	cmp	r4, #9
 8001820:	f240 8194 	bls.w	8001b4c <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001828:	2d00      	cmp	r5, #0
 800182a:	f000 81f0 	beq.w	8001c0e <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800182e:	fab5 f585 	clz	r5, r5
 8001832:	3501      	adds	r5, #1
 8001834:	06ad      	lsls	r5, r5, #26
 8001836:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800183e:	2c00      	cmp	r4, #0
 8001840:	f000 81e3 	beq.w	8001c0a <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8001844:	fab4 f484 	clz	r4, r4
 8001848:	3401      	adds	r4, #1
 800184a:	f004 041f 	and.w	r4, r4, #31
 800184e:	2601      	movs	r6, #1
 8001850:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001854:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800185a:	2800      	cmp	r0, #0
 800185c:	f000 81d3 	beq.w	8001c06 <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8001860:	fab0 f480 	clz	r4, r0
 8001864:	3401      	adds	r4, #1
 8001866:	f004 041f 	and.w	r4, r4, #31
 800186a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800186e:	f1a4 001e 	sub.w	r0, r4, #30
 8001872:	0500      	lsls	r0, r0, #20
 8001874:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001878:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800187a:	0dc7      	lsrs	r7, r0, #23
 800187c:	f007 0704 	and.w	r7, r7, #4
 8001880:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8001884:	688e      	ldr	r6, [r1, #8]
 8001886:	597c      	ldr	r4, [r7, r5]
 8001888:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800188c:	f04f 0c07 	mov.w	ip, #7
 8001890:	fa0c fc00 	lsl.w	ip, ip, r0
 8001894:	ea24 040c 	bic.w	r4, r4, ip
 8001898:	fa06 f000 	lsl.w	r0, r6, r0
 800189c:	4320      	orrs	r0, r4
 800189e:	5178      	str	r0, [r7, r5]
 80018a0:	680c      	ldr	r4, [r1, #0]
}
 80018a2:	e760      	b.n	8001766 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018a4:	6890      	ldr	r0, [r2, #8]
 80018a6:	f010 0008 	ands.w	r0, r0, #8
 80018aa:	f040 8082 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018ae:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018b0:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018b2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80018b6:	f000 80f7 	beq.w	8001aa8 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ba:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 80018be:	f00c 0c04 	and.w	ip, ip, #4
 80018c2:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80018c6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80018ca:	f85c 5007 	ldr.w	r5, [ip, r7]
 80018ce:	f04f 0e07 	mov.w	lr, #7
 80018d2:	fa0e fe06 	lsl.w	lr, lr, r6
 80018d6:	40b4      	lsls	r4, r6
 80018d8:	ea25 050e 	bic.w	r5, r5, lr
 80018dc:	432c      	orrs	r4, r5
 80018de:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018e2:	6954      	ldr	r4, [r2, #20]
 80018e4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80018e8:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018ea:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ee:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018f0:	f1bc 0f04 	cmp.w	ip, #4
 80018f4:	d02e      	beq.n	8001954 <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80018fa:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001aa4 <HAL_ADC_ConfigChannel+0x3a0>
 80018fe:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8001902:	680f      	ldr	r7, [r1, #0]
 8001904:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001908:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 800190c:	694d      	ldr	r5, [r1, #20]
 800190e:	0076      	lsls	r6, r6, #1
 8001910:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8001914:	40b5      	lsls	r5, r6
 8001916:	ea47 070e 	orr.w	r7, r7, lr
 800191a:	433d      	orrs	r5, r7
 800191c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001920:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001924:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8001926:	698e      	ldr	r6, [r1, #24]
 8001928:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 800192c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8001930:	4335      	orrs	r5, r6
 8001932:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001936:	690e      	ldr	r6, [r1, #16]
 8001938:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 800193a:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 800193e:	2f01      	cmp	r7, #1
 8001940:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8001944:	bf08      	it	eq
 8001946:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 800194a:	4328      	orrs	r0, r5
 800194c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8001950:	6808      	ldr	r0, [r1, #0]
}
 8001952:	e704      	b.n	800175e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001954:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001956:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001958:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800195a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800195e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001962:	2d00      	cmp	r5, #0
 8001964:	f040 80b4 	bne.w	8001ad0 <HAL_ADC_ConfigChannel+0x3cc>
 8001968:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800196c:	42ac      	cmp	r4, r5
 800196e:	f000 8111 	beq.w	8001b94 <HAL_ADC_ConfigChannel+0x490>
 8001972:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001974:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001976:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800197a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800197e:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8001982:	42ae      	cmp	r6, r5
 8001984:	f000 812b 	beq.w	8001bde <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001988:	68a6      	ldr	r6, [r4, #8]
 800198a:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001990:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001994:	42ae      	cmp	r6, r5
 8001996:	f000 8111 	beq.w	8001bbc <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800199a:	68e6      	ldr	r6, [r4, #12]
 800199c:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019a0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80019a4:	42b5      	cmp	r5, r6
 80019a6:	f47f aeda 	bne.w	800175e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80019b0:	6020      	str	r0, [r4, #0]
 80019b2:	6808      	ldr	r0, [r1, #0]
}
 80019b4:	e6d3      	b.n	800175e <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019b6:	4930      	ldr	r1, [pc, #192]	; (8001a78 <HAL_ADC_ConfigChannel+0x374>)
 80019b8:	e6e2      	b.n	8001780 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80019ba:	2002      	movs	r0, #2
}
 80019bc:	b003      	add	sp, #12
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019c0:	0201      	lsls	r1, r0, #8
 80019c2:	f53f af00 	bmi.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019c6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80019ca:	d033      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x330>
 80019cc:	4930      	ldr	r1, [pc, #192]	; (8001a90 <HAL_ADC_ConfigChannel+0x38c>)
 80019ce:	428a      	cmp	r2, r1
 80019d0:	f47f aef9 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019d4:	4829      	ldr	r0, [pc, #164]	; (8001a7c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d6:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <HAL_ADC_ConfigChannel+0x390>)
 80019d8:	4c2f      	ldr	r4, [pc, #188]	; (8001a98 <HAL_ADC_ConfigChannel+0x394>)
 80019da:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019dc:	6881      	ldr	r1, [r0, #8]
 80019de:	0992      	lsrs	r2, r2, #6
 80019e0:	fba4 4202 	umull	r4, r2, r4, r2
 80019e4:	0992      	lsrs	r2, r2, #6
 80019e6:	3201      	adds	r2, #1
 80019e8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80019ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019f0:	430d      	orrs	r5, r1
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80019f8:	6085      	str	r5, [r0, #8]
 80019fa:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80019fc:	9a01      	ldr	r2, [sp, #4]
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	f43f aee1 	beq.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8001a04:	9a01      	ldr	r2, [sp, #4]
 8001a06:	3a01      	subs	r2, #1
 8001a08:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001a0a:	9a01      	ldr	r2, [sp, #4]
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	d1f9      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x300>
 8001a10:	e6d9      	b.n	80017c6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a12:	0e80      	lsrs	r0, r0, #26
 8001a14:	1c44      	adds	r4, r0, #1
 8001a16:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a1a:	2e09      	cmp	r6, #9
 8001a1c:	f200 8088 	bhi.w	8001b30 <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a20:	06a5      	lsls	r5, r4, #26
 8001a22:	2401      	movs	r4, #1
 8001a24:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001a28:	40b4      	lsls	r4, r6
 8001a2a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001a2e:	4325      	orrs	r5, r4
 8001a30:	0500      	lsls	r0, r0, #20
 8001a32:	e721      	b.n	8001878 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <HAL_ADC_ConfigChannel+0x374>)
 8001a36:	e7ce      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a38:	4918      	ldr	r1, [pc, #96]	; (8001a9c <HAL_ADC_ConfigChannel+0x398>)
 8001a3a:	428c      	cmp	r4, r1
 8001a3c:	f47f aec3 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a40:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001a44:	f47f aebf 	bne.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a48:	490a      	ldr	r1, [pc, #40]	; (8001a74 <HAL_ADC_ConfigChannel+0x370>)
 8001a4a:	428a      	cmp	r2, r1
 8001a4c:	f43f aebb 	beq.w	80017c6 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <HAL_ADC_ConfigChannel+0x378>)
 8001a52:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8001a56:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001a5a:	bf18      	it	ne
 8001a5c:	4621      	movne	r1, r4
 8001a5e:	688a      	ldr	r2, [r1, #8]
 8001a60:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001a64:	432a      	orrs	r2, r5
 8001a66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a6a:	608a      	str	r2, [r1, #8]
}
 8001a6c:	e6b1      	b.n	80017d2 <HAL_ADC_ConfigChannel+0xce>
 8001a6e:	bf00      	nop
 8001a70:	80080000 	.word	0x80080000
 8001a74:	50000100 	.word	0x50000100
 8001a78:	50000300 	.word	0x50000300
 8001a7c:	50000700 	.word	0x50000700
 8001a80:	c3210000 	.word	0xc3210000
 8001a84:	90c00010 	.word	0x90c00010
 8001a88:	c7520000 	.word	0xc7520000
 8001a8c:	0007ffff 	.word	0x0007ffff
 8001a90:	50000600 	.word	0x50000600
 8001a94:	20000030 	.word	0x20000030
 8001a98:	053e2d63 	.word	0x053e2d63
 8001a9c:	cb840000 	.word	0xcb840000
 8001aa0:	407f0000 	.word	0x407f0000
 8001aa4:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aa8:	0df5      	lsrs	r5, r6, #23
 8001aaa:	f102 0414 	add.w	r4, r2, #20
 8001aae:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001ab2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8001ab6:	592f      	ldr	r7, [r5, r4]
 8001ab8:	f04f 0c07 	mov.w	ip, #7
 8001abc:	fa0c f606 	lsl.w	r6, ip, r6
 8001ac0:	ea27 0606 	bic.w	r6, r7, r6
 8001ac4:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ac6:	6954      	ldr	r4, [r2, #20]
 8001ac8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001acc:	6154      	str	r4, [r2, #20]
}
 8001ace:	e70c      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001ad4:	b11d      	cbz	r5, 8001ade <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8001ad6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ada:	42ac      	cmp	r4, r5
 8001adc:	d05a      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ade:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001ae0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ae6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001aea:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001af2:	b11d      	cbz	r5, 8001afc <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8001af4:	fab5 f585 	clz	r5, r5
 8001af8:	42ae      	cmp	r6, r5
 8001afa:	d070      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001afc:	68a5      	ldr	r5, [r4, #8]
 8001afe:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b00:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b04:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001b0c:	b11d      	cbz	r5, 8001b16 <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 8001b0e:	fab5 f585 	clz	r5, r5
 8001b12:	42ae      	cmp	r6, r5
 8001b14:	d052      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b16:	68e5      	ldr	r5, [r4, #12]
 8001b18:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b1c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001b24:	2d00      	cmp	r5, #0
 8001b26:	f43f ae1a 	beq.w	800175e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8001b2a:	fab5 f585 	clz	r5, r5
 8001b2e:	e739      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b30:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001b34:	06a5      	lsls	r5, r4, #26
 8001b36:	381e      	subs	r0, #30
 8001b38:	2401      	movs	r4, #1
 8001b3a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8001b42:	0500      	lsls	r0, r0, #20
 8001b44:	4335      	orrs	r5, r6
 8001b46:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001b4a:	e695      	b.n	8001878 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d064      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001b54:	fab5 f585 	clz	r5, r5
 8001b58:	3501      	adds	r5, #1
 8001b5a:	06ad      	lsls	r5, r5, #26
 8001b5c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	d058      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8001b68:	fab4 f484 	clz	r4, r4
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	f004 041f 	and.w	r4, r4, #31
 8001b72:	2601      	movs	r6, #1
 8001b74:	fa06 f404 	lsl.w	r4, r6, r4
 8001b78:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d048      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8001b82:	fab0 f480 	clz	r4, r0
 8001b86:	3401      	adds	r4, #1
 8001b88:	f004 041f 	and.w	r4, r4, #31
 8001b8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001b90:	0520      	lsls	r0, r4, #20
 8001b92:	e671      	b.n	8001878 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8001b94:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001b96:	4614      	mov	r4, r2
 8001b98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001b9c:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba2:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8001ba4:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001ba6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001baa:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bae:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	d19b      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x3ea>
 8001bb6:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001bba:	e6e2      	b.n	8001982 <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001bc2:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bc4:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc6:	68e5      	ldr	r5, [r4, #12]
 8001bc8:	68e6      	ldr	r6, [r4, #12]
 8001bca:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bce:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd2:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd4:	2d00      	cmp	r5, #0
 8001bd6:	d1a3      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x41c>
 8001bd8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001bdc:	e6e2      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8001bde:	6838      	ldr	r0, [r7, #0]
 8001be0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001be4:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001be8:	68a5      	ldr	r5, [r4, #8]
 8001bea:	68a6      	ldr	r6, [r4, #8]
 8001bec:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bf0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf4:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	d185      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x404>
 8001bfc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001c00:	e6c8      	b.n	8001994 <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_ADC_ConfigChannel+0x520>)
 8001c04:	e5d8      	b.n	80017b8 <HAL_ADC_ConfigChannel+0xb4>
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <HAL_ADC_ConfigChannel+0x524>)
 8001c08:	e636      	b.n	8001878 <HAL_ADC_ConfigChannel+0x174>
 8001c0a:	2402      	movs	r4, #2
 8001c0c:	e622      	b.n	8001854 <HAL_ADC_ConfigChannel+0x150>
 8001c0e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001c12:	e612      	b.n	800183a <HAL_ADC_ConfigChannel+0x136>
 8001c14:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001c18:	e62e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x174>
 8001c1a:	2402      	movs	r4, #2
 8001c1c:	e7ac      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x474>
 8001c1e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001c22:	e79d      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x45c>
 8001c24:	50000300 	.word	0x50000300
 8001c28:	fe500000 	.word	0xfe500000

08001c2c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	07d1      	lsls	r1, r2, #31
 8001c32:	d501      	bpl.n	8001c38 <ADC_Enable+0xc>
  return HAL_OK;
 8001c34:	2000      	movs	r0, #0
}
 8001c36:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c38:	6899      	ldr	r1, [r3, #8]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <ADC_Enable+0x74>)
 8001c3c:	4211      	tst	r1, r2
{
 8001c3e:	b570      	push	{r4, r5, r6, lr}
 8001c40:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c42:	d122      	bne.n	8001c8a <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4d17      	ldr	r5, [pc, #92]	; (8001ca4 <ADC_Enable+0x78>)
 8001c48:	402a      	ands	r2, r5
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001c50:	f7ff fa46 	bl	80010e0 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c54:	6833      	ldr	r3, [r6, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8001c5a:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c5c:	d413      	bmi.n	8001c86 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c5e:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c60:	07d0      	lsls	r0, r2, #31
 8001c62:	d404      	bmi.n	8001c6e <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	402a      	ands	r2, r5
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6e:	f7ff fa37 	bl	80010e0 <HAL_GetTick>
 8001c72:	1b03      	subs	r3, r0, r4
 8001c74:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c76:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c78:	d902      	bls.n	8001c80 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	07d1      	lsls	r1, r2, #31
 8001c7e:	d504      	bpl.n	8001c8a <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	07d2      	lsls	r2, r2, #31
 8001c84:	d5eb      	bpl.n	8001c5e <ADC_Enable+0x32>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
}
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c92:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	bf00      	nop
 8001ca0:	8000003f 	.word	0x8000003f
 8001ca4:	7fffffc0 	.word	0x7fffffc0

08001ca8 <HAL_ADC_Start_IT>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca8:	6803      	ldr	r3, [r0, #0]
 8001caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001cae:	b570      	push	{r4, r5, r6, lr}
 8001cb0:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb2:	d06a      	beq.n	8001d8a <HAL_ADC_Start_IT+0xe2>
 8001cb4:	4855      	ldr	r0, [pc, #340]	; (8001e0c <HAL_ADC_Start_IT+0x164>)
 8001cb6:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_ADC_Start_IT+0x168>)
 8001cb8:	4956      	ldr	r1, [pc, #344]	; (8001e14 <HAL_ADC_Start_IT+0x16c>)
 8001cba:	4283      	cmp	r3, r0
 8001cbc:	bf18      	it	ne
 8001cbe:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cc0:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc2:	689d      	ldr	r5, [r3, #8]
 8001cc4:	f015 0504 	ands.w	r5, r5, #4
 8001cc8:	d15d      	bne.n	8001d86 <HAL_ADC_Start_IT+0xde>
    __HAL_LOCK(hadc);
 8001cca:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d059      	beq.n	8001d86 <HAL_ADC_Start_IT+0xde>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff ffa7 	bl	8001c2c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d155      	bne.n	8001d8e <HAL_ADC_Start_IT+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	4949      	ldr	r1, [pc, #292]	; (8001e0c <HAL_ADC_Start_IT+0x164>)
      ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf4:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cf6:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_ADC_Start_IT+0x130>
 8001cfe:	4a46      	ldr	r2, [pc, #280]	; (8001e18 <HAL_ADC_Start_IT+0x170>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d06e      	beq.n	8001de2 <HAL_ADC_Start_IT+0x13a>
 8001d04:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d0c:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d14:	bf1c      	itt	ne
 8001d16:	6e22      	ldrne	r2, [r4, #96]	; 0x60
 8001d18:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d1e:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 8001d20:	2200      	movs	r2, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d22:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hadc);
 8001d24:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d28:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8001d2a:	69a1      	ldr	r1, [r4, #24]
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d2c:	f022 021c 	bic.w	r2, r2, #28
 8001d30:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d32:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8001d34:	2908      	cmp	r1, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001d36:	bf0c      	ite	eq
 8001d38:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d3c:	f042 0204 	orrne.w	r2, r2, #4
 8001d40:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d44:	b91a      	cbnz	r2, 8001d4e <HAL_ADC_Start_IT+0xa6>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	f042 0210 	orr.w	r2, r2, #16
 8001d4c:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d4e:	42ab      	cmp	r3, r5
 8001d50:	d026      	beq.n	8001da0 <HAL_ADC_Start_IT+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d52:	2e09      	cmp	r6, #9
 8001d54:	d91e      	bls.n	8001d94 <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d5c:	65e2      	str	r2, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d5e:	68ea      	ldr	r2, [r5, #12]
 8001d60:	0192      	lsls	r2, r2, #6
 8001d62:	d50f      	bpl.n	8001d84 <HAL_ADC_Start_IT+0xdc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d64:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d6e:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8001d70:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d72:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8001d74:	d041      	beq.n	8001dfa <HAL_ADC_Start_IT+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	605a      	str	r2, [r3, #4]
}
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8001d86:	2002      	movs	r0, #2
}
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_ADC_Start_IT+0x168>)
 8001d8c:	e798      	b.n	8001cc0 <HAL_ADC_Start_IT+0x18>
      __HAL_UNLOCK(hadc);
 8001d8e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d94:	f240 2221 	movw	r2, #545	; 0x221
 8001d98:	fa22 f606 	lsr.w	r6, r2, r6
 8001d9c:	07f6      	lsls	r6, r6, #31
 8001d9e:	d5da      	bpl.n	8001d56 <HAL_ADC_Start_IT+0xae>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	0195      	lsls	r5, r2, #6
 8001da4:	d50f      	bpl.n	8001dc6 <HAL_ADC_Start_IT+0x11e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001da8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001db0:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8001db2:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001db4:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8001db6:	d018      	beq.n	8001dea <HAL_ADC_Start_IT+0x142>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dcc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001dd0:	f042 0204 	orr.w	r2, r2, #4
 8001dd4:	609a      	str	r2, [r3, #8]
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ddc:	2e00      	cmp	r6, #0
 8001dde:	d196      	bne.n	8001d0e <HAL_ADC_Start_IT+0x66>
 8001de0:	e791      	b.n	8001d06 <HAL_ADC_Start_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de2:	4d0e      	ldr	r5, [pc, #56]	; (8001e1c <HAL_ADC_Start_IT+0x174>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de4:	2e00      	cmp	r6, #0
 8001de6:	d192      	bne.n	8001d0e <HAL_ADC_Start_IT+0x66>
 8001de8:	e78d      	b.n	8001d06 <HAL_ADC_Start_IT+0x5e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dea:	f022 0220 	bic.w	r2, r2, #32
 8001dee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df6:	605a      	str	r2, [r3, #4]
              break;
 8001df8:	e7e5      	b.n	8001dc6 <HAL_ADC_Start_IT+0x11e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dfa:	f022 0220 	bic.w	r2, r2, #32
 8001dfe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e06:	605a      	str	r2, [r3, #4]
}
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	bf00      	nop
 8001e0c:	50000100 	.word	0x50000100
 8001e10:	50000300 	.word	0x50000300
 8001e14:	50000700 	.word	0x50000700
 8001e18:	50000500 	.word	0x50000500
 8001e1c:	50000400 	.word	0x50000400

08001e20 <HAL_ADC_Start_DMA>:
{
 8001e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e24:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e26:	6800      	ldr	r0, [r0, #0]
 8001e28:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8001e2c:	460f      	mov	r7, r1
 8001e2e:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e30:	d01f      	beq.n	8001e72 <HAL_ADC_Start_DMA+0x52>
 8001e32:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_ADC_Start_DMA+0x100>)
 8001e34:	4d3b      	ldr	r5, [pc, #236]	; (8001f24 <HAL_ADC_Start_DMA+0x104>)
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_ADC_Start_DMA+0x108>)
 8001e38:	4290      	cmp	r0, r2
 8001e3a:	bf18      	it	ne
 8001e3c:	461d      	movne	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e3e:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e40:	6880      	ldr	r0, [r0, #8]
 8001e42:	0742      	lsls	r2, r0, #29
 8001e44:	d412      	bmi.n	8001e6c <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8001e46:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d00e      	beq.n	8001e6c <HAL_ADC_Start_DMA+0x4c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e4e:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e52:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8001e56:	f04f 0301 	mov.w	r3, #1
 8001e5a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e5e:	d90a      	bls.n	8001e76 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8001e60:	2300      	movs	r3, #0
 8001e62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
}
 8001e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8001e6c:	2002      	movs	r0, #2
}
 8001e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e72:	4d2c      	ldr	r5, [pc, #176]	; (8001f24 <HAL_ADC_Start_DMA+0x104>)
 8001e74:	e7e3      	b.n	8001e3e <HAL_ADC_Start_DMA+0x1e>
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e76:	f240 2321 	movw	r3, #545	; 0x221
 8001e7a:	fa23 f308 	lsr.w	r3, r3, r8
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	f013 0501 	ands.w	r5, r3, #1
 8001e84:	d1ec      	bne.n	8001e60 <HAL_ADC_Start_DMA+0x40>
      tmp_hal_status = ADC_Enable(hadc);
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fed0 	bl	8001c2c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d13e      	bne.n	8001f0e <HAL_ADC_Start_DMA+0xee>
        ADC_STATE_CLR_SET(hadc->State,
 8001e90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e92:	6821      	ldr	r1, [r4, #0]
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_ADC_Start_DMA+0x100>)
        ADC_STATE_CLR_SET(hadc->State,
 8001e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	4291      	cmp	r1, r2
        ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea6:	d036      	beq.n	8001f16 <HAL_ADC_Start_DMA+0xf6>
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_ADC_Start_DMA+0x10c>)
 8001eaa:	4299      	cmp	r1, r3
 8001eac:	d033      	beq.n	8001f16 <HAL_ADC_Start_DMA+0xf6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001eb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001eb4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001eb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_ADC_Start_DMA+0x110>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ebc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ec0:	bf1c      	itt	ne
 8001ec2:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8001ec4:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_ADC_Start_DMA+0x114>)
 8001ecc:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_ADC_Start_DMA+0x118>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ed0:	6302      	str	r2, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed2:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed4:	221c      	movs	r2, #28
        __HAL_UNLOCK(hadc);
 8001ed6:	2300      	movs	r3, #0
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed8:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001eda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ede:	684b      	ldr	r3, [r1, #4]
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ee6:	68cd      	ldr	r5, [r1, #12]
 8001ee8:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eec:	4633      	mov	r3, r6
 8001eee:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ef0:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef2:	3140      	adds	r1, #64	; 0x40
 8001ef4:	f000 f9ea 	bl	80022cc <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ef8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001efa:	6893      	ldr	r3, [r2, #8]
 8001efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6093      	str	r3, [r2, #8]
}
 8001f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8001f0e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8001f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f16:	f1b8 0f00 	cmp.w	r8, #0
 8001f1a:	d1cc      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x96>
 8001f1c:	e7c7      	b.n	8001eae <HAL_ADC_Start_DMA+0x8e>
 8001f1e:	bf00      	nop
 8001f20:	50000100 	.word	0x50000100
 8001f24:	50000300 	.word	0x50000300
 8001f28:	50000700 	.word	0x50000700
 8001f2c:	50000500 	.word	0x50000500
 8001f30:	080013bd 	.word	0x080013bd
 8001f34:	0800167d 	.word	0x0800167d
 8001f38:	080016e9 	.word	0x080016e9

08001f3c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop

08001f40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <HAL_ADCEx_EndOfSamplingCallback>:
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f50:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f56:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001f58:	2b01      	cmp	r3, #1
{
 8001f5a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8001f5c:	d04d      	beq.n	8001ffa <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f5e:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f60:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8001f62:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f64:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f68:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8001f6a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f6e:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f70:	d00c      	beq.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8001f72:	4d4a      	ldr	r5, [pc, #296]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f74:	42aa      	cmp	r2, r5
 8001f76:	d03e      	beq.n	8001ff6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f7a:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	b01c      	add	sp, #112	; 0x70
 8001f88:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	075b      	lsls	r3, r3, #29
 8001f92:	d50c      	bpl.n	8001fae <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8001f94:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f96:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	b01c      	add	sp, #112	; 0x70
 8001faa:	bcf0      	pop	{r4, r5, r6, r7}
 8001fac:	4770      	bx	lr
 8001fae:	6893      	ldr	r3, [r2, #8]
 8001fb0:	075c      	lsls	r4, r3, #29
 8001fb2:	d4f0      	bmi.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fb4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001fb8:	d024      	beq.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d021      	beq.n	8002004 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc0:	2e00      	cmp	r6, #0
 8001fc2:	d153      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fc4:	4a37      	ldr	r2, [pc, #220]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc6:	4c35      	ldr	r4, [pc, #212]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001fc8:	6893      	ldr	r3, [r2, #8]
 8001fca:	4d37      	ldr	r5, [pc, #220]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fcc:	4937      	ldr	r1, [pc, #220]	; (80020ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001fce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fd2:	6093      	str	r3, [r2, #8]
 8001fd4:	68a4      	ldr	r4, [r4, #8]
 8001fd6:	68ab      	ldr	r3, [r5, #8]
 8001fd8:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	b37b      	cbz	r3, 8002046 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fe6:	6893      	ldr	r3, [r2, #8]
 8001fe8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fec:	f023 030f 	bic.w	r3, r3, #15
 8001ff0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e7d4      	b.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001ff8:	e7c9      	b.n	8001f8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8001ffa:	2302      	movs	r3, #2
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	b01c      	add	sp, #112	; 0x70
 8002000:	bcf0      	pop	{r4, r5, r6, r7}
 8002002:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002004:	b30e      	cbz	r6, 800204a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002006:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8002008:	684d      	ldr	r5, [r1, #4]
 800200a:	6893      	ldr	r3, [r2, #8]
 800200c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002010:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002014:	432b      	orrs	r3, r5
 8002016:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 800201a:	6093      	str	r3, [r2, #8]
 800201c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002022:	6894      	ldr	r4, [r2, #8]
 8002024:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002026:	4323      	orrs	r3, r4
 8002028:	43db      	mvns	r3, r3
 800202a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	b143      	cbz	r3, 8002046 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002034:	6894      	ldr	r4, [r2, #8]
 8002036:	688b      	ldr	r3, [r1, #8]
 8002038:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800203c:	431e      	orrs	r6, r3
 800203e:	f021 010f 	bic.w	r1, r1, #15
 8002042:	430e      	orrs	r6, r1
 8002044:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e7aa      	b.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800205a:	6891      	ldr	r1, [r2, #8]
 800205c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800205e:	430b      	orrs	r3, r1
 8002060:	43db      	mvns	r3, r3
 8002062:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	e7bb      	b.n	8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800206e:	684d      	ldr	r5, [r1, #4]
 8002070:	6893      	ldr	r3, [r2, #8]
 8002072:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002076:	4f0c      	ldr	r7, [pc, #48]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002078:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800207c:	432b      	orrs	r3, r5
 800207e:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8002082:	4d06      	ldr	r5, [pc, #24]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	4c09      	ldr	r4, [pc, #36]	; (80020ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002088:	68ad      	ldr	r5, [r5, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208e:	432b      	orrs	r3, r5
 8002090:	4323      	orrs	r3, r4
 8002092:	43db      	mvns	r3, r3
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	e7cb      	b.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 800209a:	bf00      	nop
 800209c:	50000400 	.word	0x50000400
 80020a0:	50000100 	.word	0x50000100
 80020a4:	50000700 	.word	0x50000700
 80020a8:	50000500 	.word	0x50000500
 80020ac:	50000600 	.word	0x50000600
 80020b0:	50000300 	.word	0x50000300

080020b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80020b6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ba:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020bc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80020c0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80020d4:	60cb      	str	r3, [r1, #12]
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_NVIC_SetPriority+0x68>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e6:	f1c3 0507 	rsb	r5, r3, #7
 80020ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ec:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	bf28      	it	cs
 80020f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f4:	2c06      	cmp	r4, #6
 80020f6:	d919      	bls.n	800212c <HAL_NVIC_SetPriority+0x50>
 80020f8:	3b03      	subs	r3, #3
 80020fa:	f04f 34ff 	mov.w	r4, #4294967295
 80020fe:	409c      	lsls	r4, r3
 8002100:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 34ff 	mov.w	r4, #4294967295
 8002108:	40ac      	lsls	r4, r5
 800210a:	ea21 0104 	bic.w	r1, r1, r4
 800210e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002110:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002112:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002116:	db0c      	blt.n	8002132 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800211c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002120:	0109      	lsls	r1, r1, #4
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002128:	bc30      	pop	{r4, r5}
 800212a:	4770      	bx	lr
 800212c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	4613      	mov	r3, r2
 8002130:	e7e8      	b.n	8002104 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_NVIC_SetPriority+0x6c>)
 8002134:	f000 000f 	and.w	r0, r0, #15
 8002138:	0109      	lsls	r1, r1, #4
 800213a:	4403      	add	r3, r0
 800213c:	b2c9      	uxtb	r1, r1
 800213e:	7619      	strb	r1, [r3, #24]
 8002140:	bc30      	pop	{r4, r5}
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00
 8002148:	e000ecfc 	.word	0xe000ecfc

0800214c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800214c:	2800      	cmp	r0, #0
 800214e:	db07      	blt.n	8002160 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_NVIC_EnableIRQ+0x18>)
 8002152:	f000 011f 	and.w	r1, r0, #31
 8002156:	2301      	movs	r3, #1
 8002158:	0940      	lsrs	r0, r0, #5
 800215a:	408b      	lsls	r3, r1
 800215c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	3801      	subs	r0, #1
 800216a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800216e:	d20e      	bcs.n	800218e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	20f0      	movs	r0, #240	; 0xf0
 800217a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002180:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002182:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002186:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	6019      	str	r1, [r3, #0]
 800218c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2001      	movs	r0, #1
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800219c:	2800      	cmp	r0, #0
 800219e:	d07d      	beq.n	800229c <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021a0:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_DMA_Init+0x104>)
 80021a2:	4603      	mov	r3, r0
 80021a4:	6800      	ldr	r0, [r0, #0]
 80021a6:	4290      	cmp	r0, r2
{
 80021a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021ac:	d962      	bls.n	8002274 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021ae:	493d      	ldr	r1, [pc, #244]	; (80022a4 <HAL_DMA_Init+0x108>)
 80021b0:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 80021b2:	4c3e      	ldr	r4, [pc, #248]	; (80022ac <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021b4:	4401      	add	r1, r0
 80021b6:	fba2 2101 	umull	r2, r1, r2, r1
 80021ba:	0909      	lsrs	r1, r1, #4
 80021bc:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021be:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	691e      	ldr	r6, [r3, #16]
 80021c4:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80021c6:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021cc:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80022c4 <HAL_DMA_Init+0x128>
 80021d0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80022a0 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d6:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 80021dc:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021e0:	4c31      	ldr	r4, [pc, #196]	; (80022a8 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 80021e2:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	69de      	ldr	r6, [r3, #28]
 80021e8:	6459      	str	r1, [r3, #68]	; 0x44
 80021ea:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021ec:	b2c5      	uxtb	r5, r0
 80021ee:	3d08      	subs	r5, #8
 80021f0:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021f8:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021fc:	4e2c      	ldr	r6, [pc, #176]	; (80022b0 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002200:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002204:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002208:	4540      	cmp	r0, r8
 800220a:	bf88      	it	hi
 800220c:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 800220e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002212:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002214:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80022c8 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8002218:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800221a:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800221e:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002222:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002226:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800222a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800222e:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002230:	d029      	beq.n	8002286 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002232:	6858      	ldr	r0, [r3, #4]
 8002234:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002236:	3801      	subs	r0, #1
 8002238:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800223a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800223e:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002242:	d826      	bhi.n	8002292 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002244:	491b      	ldr	r1, [pc, #108]	; (80022b4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002246:	481c      	ldr	r0, [pc, #112]	; (80022b8 <HAL_DMA_Init+0x11c>)
 8002248:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800224a:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800224c:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800224e:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002258:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800225a:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800225e:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002260:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002262:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8002264:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002266:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8002268:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800226c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002274:	4911      	ldr	r1, [pc, #68]	; (80022bc <HAL_DMA_Init+0x120>)
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8002278:	4c11      	ldr	r4, [pc, #68]	; (80022c0 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800227a:	4401      	add	r1, r0
 800227c:	fba2 2101 	umull	r2, r1, r2, r1
 8002280:	0909      	lsrs	r1, r1, #4
 8002282:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8002284:	e79b      	b.n	80021be <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800228a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800228e:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002292:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8002294:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002298:	65da      	str	r2, [r3, #92]	; 0x5c
 800229a:	e7e2      	b.n	8002262 <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 800229c:	2001      	movs	r0, #1
}
 800229e:	4770      	bx	lr
 80022a0:	40020407 	.word	0x40020407
 80022a4:	bffdfbf8 	.word	0xbffdfbf8
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	1000823f 	.word	0x1000823f
 80022b8:	40020940 	.word	0x40020940
 80022bc:	bffdfff8 	.word	0xbffdfff8
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020820 	.word	0x40020820
 80022c8:	40020880 	.word	0x40020880

080022cc <HAL_DMA_Start_IT>:
{
 80022cc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80022ce:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80022d2:	2c01      	cmp	r4, #1
 80022d4:	d053      	beq.n	800237e <HAL_DMA_Start_IT+0xb2>
  if (HAL_DMA_STATE_READY == hdma->State)
 80022d6:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80022da:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80022dc:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80022de:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80022e2:	d005      	beq.n	80022f0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80022e4:	2300      	movs	r3, #0
 80022e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80022ea:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80022ec:	2002      	movs	r0, #2
}
 80022ee:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80022f0:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f2:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f4:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fc:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80022fe:	6826      	ldr	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002300:	e9d0 c514 	ldrd	ip, r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE(hdma);
 8002304:	f026 0601 	bic.w	r6, r6, #1
 8002308:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800230a:	f8c7 c004 	str.w	ip, [r7, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800230e:	b115      	cbz	r5, 8002316 <HAL_DMA_Start_IT+0x4a>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002310:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8002314:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002316:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002318:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800231a:	f006 0c1f 	and.w	ip, r6, #31
 800231e:	2601      	movs	r6, #1
 8002320:	fa06 fc0c 	lsl.w	ip, r6, ip
 8002324:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002326:	f8c6 c004 	str.w	ip, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800232a:	6063      	str	r3, [r4, #4]
    if (NULL != hdma->XferHalfCpltCallback)
 800232c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232e:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8002330:	bf0b      	itete	eq
 8002332:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002334:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002336:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002338:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800233a:	b1bb      	cbz	r3, 800236c <HAL_DMA_Start_IT+0xa0>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f043 030e 	orr.w	r3, r3, #14
 8002342:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002344:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	03d2      	lsls	r2, r2, #15
 800234a:	d503      	bpl.n	8002354 <HAL_DMA_Start_IT+0x88>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002354:	b11d      	cbz	r5, 800235e <HAL_DMA_Start_IT+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2000      	movs	r0, #0
}
 8002368:	bcf0      	pop	{r4, r5, r6, r7}
 800236a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f043 030a 	orr.w	r3, r3, #10
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	e7e2      	b.n	8002344 <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 800237e:	2002      	movs	r0, #2
}
 8002380:	bcf0      	pop	{r4, r5, r6, r7}
 8002382:	4770      	bx	lr

08002384 <HAL_DMA_IRQHandler>:
{
 8002384:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002386:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 800238a:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800238c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800238e:	6805      	ldr	r5, [r0, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	409a      	lsls	r2, r3
 8002396:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8002398:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800239a:	d00e      	beq.n	80023ba <HAL_DMA_IRQHandler+0x36>
 800239c:	f014 0f04 	tst.w	r4, #4
 80023a0:	d00b      	beq.n	80023ba <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a2:	682b      	ldr	r3, [r5, #0]
 80023a4:	069b      	lsls	r3, r3, #26
 80023a6:	d403      	bmi.n	80023b0 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80023b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023b2:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80023b4:	b1cb      	cbz	r3, 80023ea <HAL_DMA_IRQHandler+0x66>
}
 80023b6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80023b8:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023ba:	2202      	movs	r2, #2
 80023bc:	409a      	lsls	r2, r3
 80023be:	420a      	tst	r2, r1
 80023c0:	d015      	beq.n	80023ee <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 80023c2:	f014 0f02 	tst.w	r4, #2
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	0699      	lsls	r1, r3, #26
 80023cc:	d406      	bmi.n	80023dc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ce:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80023d0:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023d2:	f023 030a 	bic.w	r3, r3, #10
 80023d6:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80023d8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 80023dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80023de:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e5      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x32>
}
 80023ea:	bc70      	pop	{r4, r5, r6}
 80023ec:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80023ee:	2208      	movs	r2, #8
 80023f0:	409a      	lsls	r2, r3
 80023f2:	420a      	tst	r2, r1
 80023f4:	d0f9      	beq.n	80023ea <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 80023f6:	0722      	lsls	r2, r4, #28
 80023f8:	d5f7      	bpl.n	80023ea <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fa:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80023fc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023fe:	f022 020e 	bic.w	r2, r2, #14
 8002402:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002404:	2201      	movs	r2, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800240a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800240c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002410:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8002418:	2900      	cmp	r1, #0
 800241a:	d0e6      	beq.n	80023ea <HAL_DMA_IRQHandler+0x66>
}
 800241c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800241e:	4708      	bx	r1

08002420 <HAL_FDCAN_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hfdcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_MspInit could be implemented in the user file
   */
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_FDCAN_Init>:
  if (hfdcan == NULL)
 8002424:	2800      	cmp	r0, #0
 8002426:	f000 8143 	beq.w	80026b0 <HAL_FDCAN_Init+0x28c>
{
 800242a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800242e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002432:	4604      	mov	r4, r0
 8002434:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002438:	2b00      	cmp	r3, #0
 800243a:	d073      	beq.n	8002524 <HAL_FDCAN_Init+0x100>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	6993      	ldr	r3, [r2, #24]
 8002440:	f023 0310 	bic.w	r3, r3, #16
 8002444:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8002446:	f7fe fe4b 	bl	80010e0 <HAL_GetTick>
 800244a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800244c:	e004      	b.n	8002458 <HAL_FDCAN_Init+0x34>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800244e:	f7fe fe47 	bl	80010e0 <HAL_GetTick>
 8002452:	1b43      	subs	r3, r0, r5
 8002454:	2b0a      	cmp	r3, #10
 8002456:	d85b      	bhi.n	8002510 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	0712      	lsls	r2, r2, #28
 800245e:	d4f6      	bmi.n	800244e <HAL_FDCAN_Init+0x2a>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8002468:	f7fe fe3a 	bl	80010e0 <HAL_GetTick>
 800246c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800246e:	e004      	b.n	800247a <HAL_FDCAN_Init+0x56>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002470:	f7fe fe36 	bl	80010e0 <HAL_GetTick>
 8002474:	1b40      	subs	r0, r0, r5
 8002476:	280a      	cmp	r0, #10
 8002478:	d84a      	bhi.n	8002510 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	6993      	ldr	r3, [r2, #24]
 800247e:	07db      	lsls	r3, r3, #31
 8002480:	d5f6      	bpl.n	8002470 <HAL_FDCAN_Init+0x4c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002482:	6993      	ldr	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8002484:	4993      	ldr	r1, [pc, #588]	; (80026d4 <HAL_FDCAN_Init+0x2b0>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002486:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 800248a:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800248c:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 800248e:	f000 810b 	beq.w	80026a8 <HAL_FDCAN_Init+0x284>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002492:	7c23      	ldrb	r3, [r4, #16]
 8002494:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002496:	6993      	ldr	r3, [r2, #24]
 8002498:	bf0c      	ite	eq
 800249a:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800249e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80024a2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80024a4:	7c63      	ldrb	r3, [r4, #17]
 80024a6:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024a8:	6993      	ldr	r3, [r2, #24]
 80024aa:	bf0c      	ite	eq
 80024ac:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80024b0:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80024b4:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80024b6:	7ca3      	ldrb	r3, [r4, #18]
 80024b8:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024ba:	6993      	ldr	r3, [r2, #24]
 80024bc:	bf0c      	ite	eq
 80024be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80024c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024c6:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024c8:	6993      	ldr	r3, [r2, #24]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80024ca:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80024ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d2:	432b      	orrs	r3, r5
 80024d4:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80024d6:	6993      	ldr	r3, [r2, #24]
 80024d8:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 80024dc:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024de:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80024e0:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024e2:	f023 0310 	bic.w	r3, r3, #16
 80024e6:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80024e8:	d021      	beq.n	800252e <HAL_FDCAN_Init+0x10a>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80024ea:	b321      	cbz	r1, 8002536 <HAL_FDCAN_Init+0x112>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80024ec:	2902      	cmp	r1, #2
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80024ee:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80024f0:	f000 80ec 	beq.w	80026cc <HAL_FDCAN_Init+0x2a8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024fa:	6913      	ldr	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024fc:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002504:	d117      	bne.n	8002536 <HAL_FDCAN_Init+0x112>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002506:	6993      	ldr	r3, [r2, #24]
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	e012      	b.n	8002536 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002510:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002512:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800251a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800251e:	2001      	movs	r0, #1
}
 8002520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8002524:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8002528:	f7ff ff7a 	bl	8002420 <HAL_FDCAN_MspInit>
 800252c:	e786      	b.n	800243c <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800252e:	6993      	ldr	r3, [r2, #24]
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002536:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800253a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800253c:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800253e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002540:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002542:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002546:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002548:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800254a:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800254c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800254e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002552:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002556:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002558:	d10e      	bne.n	8002578 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800255a:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800255e:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002562:	3b01      	subs	r3, #1
 8002564:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002566:	3d01      	subs	r5, #1
 8002568:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800256c:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800256e:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002570:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002572:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002576:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002578:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800257c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800257e:	4956      	ldr	r1, [pc, #344]	; (80026d8 <HAL_FDCAN_Init+0x2b4>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002580:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8002582:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002584:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8002588:	f000 8094 	beq.w	80026b4 <HAL_FDCAN_Init+0x290>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800258c:	4d53      	ldr	r5, [pc, #332]	; (80026dc <HAL_FDCAN_Init+0x2b8>)
 800258e:	4854      	ldr	r0, [pc, #336]	; (80026e0 <HAL_FDCAN_Init+0x2bc>)
 8002590:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <HAL_FDCAN_Init+0x2c0>)
 8002592:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002700 <HAL_FDCAN_Init+0x2dc>
 8002596:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8002704 <HAL_FDCAN_Init+0x2e0>
 800259a:	4f53      	ldr	r7, [pc, #332]	; (80026e8 <HAL_FDCAN_Init+0x2c4>)
 800259c:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002708 <HAL_FDCAN_Init+0x2e4>
 80025a0:	f8df e168 	ldr.w	lr, [pc, #360]	; 800270c <HAL_FDCAN_Init+0x2e8>
 80025a4:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8002710 <HAL_FDCAN_Init+0x2ec>
 80025a8:	4e50      	ldr	r6, [pc, #320]	; (80026ec <HAL_FDCAN_Init+0x2c8>)
 80025aa:	42aa      	cmp	r2, r5
 80025ac:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 80025b0:	f505 5561 	add.w	r5, r5, #14400	; 0x3840
 80025b4:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80025b8:	bf18      	it	ne
 80025ba:	4607      	movne	r7, r0
 80025bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80025c0:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 80025c4:	bf18      	it	ne
 80025c6:	4698      	movne	r8, r3
 80025c8:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 80025cc:	bf03      	ittte	eq
 80025ce:	46c6      	moveq	lr, r8
 80025d0:	46d4      	moveq	ip, sl
 80025d2:	4688      	moveq	r8, r1
 80025d4:	46a9      	movne	r9, r5
 80025d6:	f1a1 01b0 	sub.w	r1, r1, #176	; 0xb0
 80025da:	bf1c      	itt	ne
 80025dc:	4606      	movne	r6, r0
 80025de:	4619      	movne	r1, r3

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80025e0:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 80025e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80025e6:	6421      	str	r1, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80025e8:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 80025ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80025f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80025f4:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 80025f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80025fa:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80025fe:	1e70      	subs	r0, r6, #1
 8002600:	1a40      	subs	r0, r0, r1
 8002602:	f025 6970 	bic.w	r9, r5, #251658240	; 0xf000000
 8002606:	0885      	lsrs	r5, r0, #2
 8002608:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
 800260c:	3501      	adds	r5, #1
 800260e:	f101 0901 	add.w	r9, r1, #1
 8002612:	454e      	cmp	r6, r9
 8002614:	bf38      	it	cc
 8002616:	2501      	movcc	r5, #1
 8002618:	2817      	cmp	r0, #23
 800261a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800261e:	e9c4 8e12 	strd	r8, lr, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002622:	e9c4 c714 	strd	ip, r7, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002626:	f3c1 0380 	ubfx	r3, r1, #2, #1
 800262a:	d91a      	bls.n	8002662 <HAL_FDCAN_Init+0x23e>
 800262c:	454e      	cmp	r6, r9
 800262e:	bf2c      	ite	cs
 8002630:	2200      	movcs	r2, #0
 8002632:	2201      	movcc	r2, #1
 8002634:	b9aa      	cbnz	r2, 8002662 <HAL_FDCAN_Init+0x23e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002636:	460f      	mov	r7, r1
 8002638:	b10b      	cbz	r3, 800263e <HAL_FDCAN_Init+0x21a>
 800263a:	f847 2b04 	str.w	r2, [r7], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800263e:	1aed      	subs	r5, r5, r3
 8002640:	086a      	lsrs	r2, r5, #1
 8002642:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002646:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800264a:	2000      	movs	r0, #0
 800264c:	2100      	movs	r1, #0
 800264e:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002652:	4293      	cmp	r3, r2
 8002654:	d1fb      	bne.n	800264e <HAL_FDCAN_Init+0x22a>
 8002656:	f025 0301 	bic.w	r3, r5, #1
 800265a:	429d      	cmp	r5, r3
 800265c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8002660:	d01a      	beq.n	8002698 <HAL_FDCAN_Init+0x274>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002662:	460a      	mov	r2, r1
 8002664:	2300      	movs	r3, #0
 8002666:	f842 3b04 	str.w	r3, [r2], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800266a:	4296      	cmp	r6, r2
 800266c:	d914      	bls.n	8002698 <HAL_FDCAN_Init+0x274>
 800266e:	f101 0208 	add.w	r2, r1, #8
 8002672:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002674:	604b      	str	r3, [r1, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002676:	d90f      	bls.n	8002698 <HAL_FDCAN_Init+0x274>
 8002678:	f101 020c 	add.w	r2, r1, #12
 800267c:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800267e:	608b      	str	r3, [r1, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002680:	d90a      	bls.n	8002698 <HAL_FDCAN_Init+0x274>
 8002682:	f101 0210 	add.w	r2, r1, #16
 8002686:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002688:	60cb      	str	r3, [r1, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800268a:	d905      	bls.n	8002698 <HAL_FDCAN_Init+0x274>
 800268c:	f101 0214 	add.w	r2, r1, #20
 8002690:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002692:	610b      	str	r3, [r1, #16]
 8002694:	bf88      	it	hi
 8002696:	614b      	strhi	r3, [r1, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8002698:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800269a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800269c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800269e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 80026a2:	65a0      	str	r0, [r4, #88]	; 0x58
}
 80026a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_FDCAN_Init+0x2cc>)
 80026aa:	6861      	ldr	r1, [r4, #4]
 80026ac:	6019      	str	r1, [r3, #0]
 80026ae:	e6f0      	b.n	8002492 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
}
 80026b2:	4770      	bx	lr
 80026b4:	4f0f      	ldr	r7, [pc, #60]	; (80026f4 <HAL_FDCAN_Init+0x2d0>)
 80026b6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8002714 <HAL_FDCAN_Init+0x2f0>
 80026ba:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8002718 <HAL_FDCAN_Init+0x2f4>
 80026be:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800271c <HAL_FDCAN_Init+0x2f8>
 80026c2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002720 <HAL_FDCAN_Init+0x2fc>
 80026c6:	4e0c      	ldr	r6, [pc, #48]	; (80026f8 <HAL_FDCAN_Init+0x2d4>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <HAL_FDCAN_Init+0x2d8>)
 80026ca:	e789      	b.n	80025e0 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026cc:	f043 0320 	orr.w	r3, r3, #32
 80026d0:	6193      	str	r3, [r2, #24]
 80026d2:	e730      	b.n	8002536 <HAL_FDCAN_Init+0x112>
 80026d4:	40006400 	.word	0x40006400
 80026d8:	40006800 	.word	0x40006800
 80026dc:	40006c00 	.word	0x40006c00
 80026e0:	4000a678 	.word	0x4000a678
 80026e4:	4000a4b0 	.word	0x4000a4b0
 80026e8:	4000ad18 	.word	0x4000ad18
 80026ec:	4000adf0 	.word	0x4000adf0
 80026f0:	40006500 	.word	0x40006500
 80026f4:	4000a9c8 	.word	0x4000a9c8
 80026f8:	4000aaa0 	.word	0x4000aaa0
 80026fc:	4000a750 	.word	0x4000a750
 8002700:	4000ac28 	.word	0x4000ac28
 8002704:	4000ad00 	.word	0x4000ad00
 8002708:	4000a660 	.word	0x4000a660
 800270c:	4000a588 	.word	0x4000a588
 8002710:	4000ab10 	.word	0x4000ab10
 8002714:	4000a9b0 	.word	0x4000a9b0
 8002718:	4000a8d8 	.word	0x4000a8d8
 800271c:	4000a800 	.word	0x4000a800
 8002720:	4000a7c0 	.word	0x4000a7c0

08002724 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002724:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002728:	3b01      	subs	r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d905      	bls.n	800273a <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800272e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
}
 8002738:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800273a:	680b      	ldr	r3, [r1, #0]
{
 800273c:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800273e:	b983      	cbnz	r3, 8002762 <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002740:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 8002744:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 8002746:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 8002748:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800274a:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 800274c:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800274e:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 8002752:	432a      	orrs	r2, r5
 8002754:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 8002758:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 800275c:	4618      	mov	r0, r3
}
 800275e:	bc70      	pop	{r4, r5, r6}
 8002760:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002762:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002766:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002768:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800276a:	688d      	ldr	r5, [r1, #8]
 800276c:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800276e:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002772:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002776:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 800277a:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800277e:	2000      	movs	r0, #0
}
 8002780:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 8002782:	604b      	str	r3, [r1, #4]
}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8002788:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800278a:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 800278e:	2e01      	cmp	r6, #1
 8002790:	d006      	beq.n	80027a0 <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002792:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6603      	str	r3, [r0, #96]	; 0x60
}
 800279a:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
}
 800279e:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80027a0:	6806      	ldr	r6, [r0, #0]
 80027a2:	4615      	mov	r5, r2
 80027a4:	9a03      	ldr	r2, [sp, #12]
 80027a6:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80027aa:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80027ae:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 80027b2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80027b6:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 80027ba:	4319      	orrs	r1, r3
 80027bc:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 80027c0:	2000      	movs	r0, #0
}
 80027c2:	bc70      	pop	{r4, r5, r6}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80027c8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80027cc:	2a01      	cmp	r2, #1
{
 80027ce:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80027d0:	d005      	beq.n	80027de <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80027d2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80027d4:	f042 0204 	orr.w	r2, r2, #4
 80027d8:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
}
 80027dc:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027de:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027e6:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80027e8:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80027f0:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80027f2:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80027f8:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80027fa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80027fe:	2802      	cmp	r0, #2
 8002800:	d10e      	bne.n	8002820 <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
{
 8002802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002806:	681d      	ldr	r5, [r3, #0]
 8002808:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800280c:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8002810:	d00c      	beq.n	800282c <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002812:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
}
 800281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002820:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
}
 800282a:	4770      	bx	lr
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800282c:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002830:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002832:	f3c6 4c01 	ubfx	ip, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002836:	2c00      	cmp	r4, #0
 8002838:	d13c      	bne.n	80028b4 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800283a:	690c      	ldr	r4, [r1, #16]
 800283c:	688f      	ldr	r7, [r1, #8]
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 800283e:	680e      	ldr	r6, [r1, #0]
                   FDCAN_STANDARD_ID |
 8002840:	433c      	orrs	r4, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002842:	ea44 4886 	orr.w	r8, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002846:	e9d1 7406 	ldrd	r7, r4, [r1, #24]
 800284a:	694e      	ldr	r6, [r1, #20]
 800284c:	433c      	orrs	r4, r7
 800284e:	4334      	orrs	r4, r6
 8002850:	68ce      	ldr	r6, [r1, #12]
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002852:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002854:	ea44 0e06 	orr.w	lr, r4, r6
 8002858:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800285a:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800285e:	ea4e 6404 	orr.w	r4, lr, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002862:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002866:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 800286a:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800286e:	89cc      	ldrh	r4, [r1, #14]
 8002870:	4e14      	ldr	r6, [pc, #80]	; (80028c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8002872:	5d34      	ldrb	r4, [r6, r4]
 8002874:	b1ac      	cbz	r4, 80028a2 <HAL_FDCAN_AddMessageToTxFifoQ+0xaa>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002876:	7894      	ldrb	r4, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002878:	f892 8003 	ldrb.w	r8, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800287c:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800287e:	0424      	lsls	r4, r4, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002880:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002884:	f892 8001 	ldrb.w	r8, [r2, #1]
 8002888:	433c      	orrs	r4, r7
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800288a:	eb00 070e 	add.w	r7, r0, lr
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800288e:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002892:	60bc      	str	r4, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002894:	89cc      	ldrh	r4, [r1, #14]
 8002896:	5d34      	ldrb	r4, [r6, r4]
 8002898:	3004      	adds	r0, #4
 800289a:	42a0      	cmp	r0, r4
 800289c:	f102 0204 	add.w	r2, r2, #4
 80028a0:	d3e9      	bcc.n	8002876 <HAL_FDCAN_AddMessageToTxFifoQ+0x7e>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80028a2:	2201      	movs	r2, #1
 80028a4:	fa02 f20c 	lsl.w	r2, r2, ip
 80028a8:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    return HAL_OK;
 80028ac:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80028b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                   pTxHeader->TxFrameType |
 80028b4:	690c      	ldr	r4, [r1, #16]
 80028b6:	680f      	ldr	r7, [r1, #0]
 80028b8:	688e      	ldr	r6, [r1, #8]
 80028ba:	433c      	orrs	r4, r7
 80028bc:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028be:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
 80028c2:	e7c0      	b.n	8002846 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 80028c4:	0800fdd0 	.word	0x0800fdd0

080028c8 <HAL_FDCAN_GetRxMessage>:
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80028ca:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 80028ce:	2c02      	cmp	r4, #2
 80028d0:	d10c      	bne.n	80028ec <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80028d2:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80028d4:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80028d6:	d00f      	beq.n	80028f8 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80028d8:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 80028dc:	0724      	lsls	r4, r4, #28
 80028de:	d15c      	bne.n	800299a <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80028e0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
}
 80028ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80028ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
}
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80028f8:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 80028fc:	0725      	lsls	r5, r4, #28
 80028fe:	d0ef      	beq.n	80028e0 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002900:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002904:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002906:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800290a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800290e:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002912:	683c      	ldr	r4, [r7, #0]
 8002914:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8002918:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800291a:	2c00      	cmp	r4, #0
 800291c:	d14c      	bne.n	80029b8 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800291e:	683c      	ldr	r4, [r7, #0]
 8002920:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8002924:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002926:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002928:	f8df c094 	ldr.w	ip, [pc, #148]	; 80029c0 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800292c:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8002930:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002932:	683c      	ldr	r4, [r7, #0]
 8002934:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8002938:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800293a:	88bc      	ldrh	r4, [r7, #4]
 800293c:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800293e:	687c      	ldr	r4, [r7, #4]
 8002940:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8002944:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002946:	687d      	ldr	r5, [r7, #4]
 8002948:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 800294c:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800294e:	687d      	ldr	r5, [r7, #4]
 8002950:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8002954:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002956:	79fd      	ldrb	r5, [r7, #7]
 8002958:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800295c:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800295e:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002960:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002962:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002966:	0fed      	lsrs	r5, r5, #31
 8002968:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800296a:	b174      	cbz	r4, 800298a <HAL_FDCAN_GetRxMessage+0xc2>
 800296c:	1e5d      	subs	r5, r3, #1
 800296e:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8002970:	4623      	mov	r3, r4
 8002972:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8002976:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800297a:	89d6      	ldrh	r6, [r2, #14]
 800297c:	3b06      	subs	r3, #6
 800297e:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8002982:	1bdb      	subs	r3, r3, r7
 8002984:	429e      	cmp	r6, r3
 8002986:	d8f3      	bhi.n	8002970 <HAL_FDCAN_GetRxMessage+0xa8>
 8002988:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800298a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 800298c:	bf0c      	ite	eq
 800298e:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8002992:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8002996:	2000      	movs	r0, #0
}
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800299a:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800299e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80029a0:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80029a4:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80029a8:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80029ac:	683c      	ldr	r4, [r7, #0]
 80029ae:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80029b2:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80029b4:	2c00      	cmp	r4, #0
 80029b6:	d0b2      	beq.n	800291e <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80029b8:	683c      	ldr	r4, [r7, #0]
 80029ba:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 80029be:	e7b1      	b.n	8002924 <HAL_FDCAN_GetRxMessage+0x5c>
 80029c0:	0800fdd0 	.word	0x0800fdd0

080029c4 <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80029c4:	6803      	ldr	r3, [r0, #0]
  if (RxFifo == FDCAN_RX_FIFO0)
 80029c6:	2940      	cmp	r1, #64	; 0x40
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80029c8:	bf0c      	ite	eq
 80029ca:	f8d3 0090 	ldreq.w	r0, [r3, #144]	; 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80029ce:	f8d3 0098 	ldrne.w	r0, [r3, #152]	; 0x98
 80029d2:	f000 000f 	and.w	r0, r0, #15
}
 80029d6:	4770      	bx	lr

080029d8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 80029de:	f000 0007 	and.w	r0, r0, #7
 80029e2:	4770      	bx	lr

080029e4 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029e4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029e8:	3b01      	subs	r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d905      	bls.n	80029fa <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80029ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80029f6:	2001      	movs	r0, #1
}
 80029f8:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80029fa:	6803      	ldr	r3, [r0, #0]
{
 80029fc:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80029fe:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002a02:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002a04:	d03d      	beq.n	8002a82 <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002a06:	07c4      	lsls	r4, r0, #31
 8002a08:	d43b      	bmi.n	8002a82 <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a0a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002a0c:	f044 0401 	orr.w	r4, r4, #1
 8002a10:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002a12:	b1cd      	cbz	r5, 8002a48 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002a14:	07c5      	lsls	r5, r0, #31
 8002a16:	d517      	bpl.n	8002a48 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002a18:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8002a1a:	f040 0002 	orr.w	r0, r0, #2
 8002a1e:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002a20:	060c      	lsls	r4, r1, #24
 8002a22:	d504      	bpl.n	8002a2e <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002a24:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8002a28:	4310      	orrs	r0, r2
 8002a2a:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002a2e:	05c8      	lsls	r0, r1, #23
 8002a30:	d504      	bpl.n	8002a3c <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002a32:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002a36:	4302      	orrs	r2, r0
 8002a38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a3e:	4311      	orrs	r1, r2
    return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a44:	6559      	str	r1, [r3, #84]	; 0x54
}
 8002a46:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002a48:	f011 0f38 	tst.w	r1, #56	; 0x38
 8002a4c:	d001      	beq.n	8002a52 <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a4e:	0784      	lsls	r4, r0, #30
 8002a50:	d4e2      	bmi.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
 8002a52:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8002a56:	d131      	bne.n	8002abc <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002a58:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8002a5c:	d001      	beq.n	8002a62 <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002a5e:	0704      	lsls	r4, r0, #28
 8002a60:	d4da      	bmi.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
 8002a62:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8002a66:	d001      	beq.n	8002a6c <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002a68:	06c5      	lsls	r5, r0, #27
 8002a6a:	d4d5      	bmi.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
 8002a6c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8002a70:	d001      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002a72:	0684      	lsls	r4, r0, #26
 8002a74:	d4d0      	bmi.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
 8002a76:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8002a7a:	d0d1      	beq.n	8002a20 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002a7c:	0645      	lsls	r5, r0, #25
 8002a7e:	d5cf      	bpl.n	8002a20 <HAL_FDCAN_ActivateNotification+0x3c>
 8002a80:	e7ca      	b.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002a82:	f011 0f38 	tst.w	r1, #56	; 0x38
 8002a86:	d001      	beq.n	8002a8c <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002a88:	0784      	lsls	r4, r0, #30
 8002a8a:	d5be      	bpl.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
 8002a8c:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8002a90:	d117      	bne.n	8002ac2 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002a92:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8002a96:	d001      	beq.n	8002a9c <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002a98:	0704      	lsls	r4, r0, #28
 8002a9a:	d5b6      	bpl.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
 8002a9c:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8002aa0:	d001      	beq.n	8002aa6 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002aa2:	06c4      	lsls	r4, r0, #27
 8002aa4:	d5b1      	bpl.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
 8002aa6:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8002aaa:	d001      	beq.n	8002ab0 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002aac:	0684      	lsls	r4, r0, #26
 8002aae:	d5ac      	bpl.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
 8002ab0:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8002ab4:	d0ad      	beq.n	8002a12 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002ab6:	0644      	lsls	r4, r0, #25
 8002ab8:	d4ab      	bmi.n	8002a12 <HAL_FDCAN_ActivateNotification+0x2e>
 8002aba:	e7a6      	b.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002abc:	0745      	lsls	r5, r0, #29
 8002abe:	d4ab      	bmi.n	8002a18 <HAL_FDCAN_ActivateNotification+0x34>
 8002ac0:	e7ca      	b.n	8002a58 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002ac2:	0744      	lsls	r4, r0, #29
 8002ac4:	d5a1      	bpl.n	8002a0a <HAL_FDCAN_ActivateNotification+0x26>
 8002ac6:	e7e4      	b.n	8002a92 <HAL_FDCAN_ActivateNotification+0xae>

08002ac8 <HAL_FDCAN_TxEventFifoCallback>:
}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_FDCAN_RxFifo1Callback>:
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <HAL_FDCAN_TxFifoEmptyCallback>:
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <HAL_FDCAN_TxBufferCompleteCallback>:
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <HAL_FDCAN_TxBufferAbortCallback>:
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_FDCAN_TimestampWraparoundCallback>:
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <HAL_FDCAN_TimeoutOccurredCallback>:
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <HAL_FDCAN_HighPriorityMessageCallback>:
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_FDCAN_ErrorCallback>:
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <HAL_FDCAN_ErrorStatusCallback>:
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop

08002af0 <HAL_FDCAN_IRQHandler>:
{
 8002af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002afa:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002afe:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b02:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002b04:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002b08:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8002b0a:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b0e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b10:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b14:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b16:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b1a:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8002b1e:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b22:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b24:	0652      	lsls	r2, r2, #25
{
 8002b26:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b28:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b2c:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b30:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8002b34:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b38:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b3c:	d502      	bpl.n	8002b44 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b40:	0651      	lsls	r1, r2, #25
 8002b42:	d473      	bmi.n	8002c2c <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b46:	05d2      	lsls	r2, r2, #23
 8002b48:	d502      	bpl.n	8002b50 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4c:	05d0      	lsls	r0, r2, #23
 8002b4e:	d45d      	bmi.n	8002c0c <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8002b50:	f1b9 0f00 	cmp.w	r9, #0
 8002b54:	d14a      	bne.n	8002bec <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 8002b56:	f1b8 0f00 	cmp.w	r8, #0
 8002b5a:	d137      	bne.n	8002bcc <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8002b5c:	2f00      	cmp	r7, #0
 8002b5e:	d13e      	bne.n	8002bde <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b62:	0591      	lsls	r1, r2, #22
 8002b64:	d502      	bpl.n	8002b6c <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b68:	0592      	lsls	r2, r2, #22
 8002b6a:	d475      	bmi.n	8002c58 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6e:	0617      	lsls	r7, r2, #24
 8002b70:	d502      	bpl.n	8002b78 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b74:	0610      	lsls	r0, r2, #24
 8002b76:	d477      	bmi.n	8002c68 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7a:	0491      	lsls	r1, r2, #18
 8002b7c:	d502      	bpl.n	8002b84 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b80:	0492      	lsls	r2, r2, #18
 8002b82:	d459      	bmi.n	8002c38 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	0417      	lsls	r7, r2, #16
 8002b88:	d502      	bpl.n	8002b90 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002b8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8c:	0410      	lsls	r0, r2, #16
 8002b8e:	d45b      	bmi.n	8002c48 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b92:	0451      	lsls	r1, r2, #17
 8002b94:	d509      	bpl.n	8002baa <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002b96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b98:	0452      	lsls	r2, r2, #17
 8002b9a:	d506      	bpl.n	8002baa <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002b9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002ba2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba8:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8002baa:	b94e      	cbnz	r6, 8002bc0 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 8002bac:	b125      	cbz	r5, 8002bb8 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8002bb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bb4:	431d      	orrs	r5, r3
 8002bb6:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002bb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bba:	bb13      	cbnz	r3, 8002c02 <HAL_FDCAN_IRQHandler+0x112>
}
 8002bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002bc0:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff ff91 	bl	8002aec <HAL_FDCAN_ErrorStatusCallback>
 8002bca:	e7ef      	b.n	8002bac <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002bcc:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f003 ffae 	bl	8006b34 <HAL_FDCAN_RxFifo0Callback>
 8002bd8:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8002bda:	2f00      	cmp	r7, #0
 8002bdc:	d0c0      	beq.n	8002b60 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002bde:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002be0:	4639      	mov	r1, r7
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ff72 	bl	8002acc <HAL_FDCAN_RxFifo1Callback>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	e7b9      	b.n	8002b60 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002bec:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ff68 	bl	8002ac8 <HAL_FDCAN_TxEventFifoCallback>
 8002bf8:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8002bfa:	f1b8 0f00 	cmp.w	r8, #0
 8002bfe:	d0ad      	beq.n	8002b5c <HAL_FDCAN_IRQHandler+0x6c>
 8002c00:	e7e4      	b.n	8002bcc <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ff70 	bl	8002ae8 <HAL_FDCAN_ErrorCallback>
}
 8002c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c0c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c10:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c14:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c18:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff5b 	bl	8002ad8 <HAL_FDCAN_TxBufferAbortCallback>
 8002c22:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8002c24:	f1b9 0f00 	cmp.w	r9, #0
 8002c28:	d095      	beq.n	8002b56 <HAL_FDCAN_IRQHandler+0x66>
 8002c2a:	e7df      	b.n	8002bec <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002c30:	f7ff ff58 	bl	8002ae4 <HAL_FDCAN_HighPriorityMessageCallback>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	e785      	b.n	8002b44 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002c38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ff4c 	bl	8002adc <HAL_FDCAN_TimestampWraparoundCallback>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	e79d      	b.n	8002b84 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002c48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c4c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7ff ff46 	bl	8002ae0 <HAL_FDCAN_TimeoutOccurredCallback>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	e79b      	b.n	8002b90 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff ff36 	bl	8002ad0 <HAL_FDCAN_TxFifoEmptyCallback>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	e781      	b.n	8002b6c <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002c68:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c6c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002c70:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002c72:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff ff2c 	bl	8002ad4 <HAL_FDCAN_TxBufferCompleteCallback>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	e77b      	b.n	8002b78 <HAL_FDCAN_IRQHandler+0x88>

08002c80 <HAL_FDCAN_GetError>:
  return hfdcan->ErrorCode;
 8002c80:	6e00      	ldr	r0, [r0, #96]	; 0x60
}
 8002c82:	4770      	bx	lr

08002c84 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c88:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8002ddc <HAL_FLASH_Program+0x158>
 8002c8c:	f899 4000 	ldrb.w	r4, [r9]
 8002c90:	2c01      	cmp	r4, #1
 8002c92:	d04f      	beq.n	8002d34 <HAL_FLASH_Program+0xb0>
 8002c94:	469b      	mov	fp, r3
 8002c96:	2301      	movs	r3, #1
 8002c98:	4682      	mov	sl, r0
 8002c9a:	460f      	mov	r7, r1
 8002c9c:	4690      	mov	r8, r2
 8002c9e:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002ca2:	f7fe fa1d 	bl	80010e0 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002ca6:	4e4c      	ldr	r6, [pc, #304]	; (8002dd8 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002caa:	e005      	b.n	8002cb8 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002cac:	f7fe fa18 	bl	80010e0 <HAL_GetTick>
 8002cb0:	1b44      	subs	r4, r0, r5
 8002cb2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002cb6:	d837      	bhi.n	8002d28 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002cb8:	6933      	ldr	r3, [r6, #16]
 8002cba:	03d8      	lsls	r0, r3, #15
 8002cbc:	d4f6      	bmi.n	8002cac <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002cbe:	6934      	ldr	r4, [r6, #16]
 8002cc0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8002cc4:	401c      	ands	r4, r3
 8002cc6:	d147      	bne.n	8002d58 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cc8:	6933      	ldr	r3, [r6, #16]
 8002cca:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ccc:	bf44      	itt	mi
 8002cce:	2301      	movmi	r3, #1
 8002cd0:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002cd8:	f1ba 0f00 	cmp.w	sl, #0
 8002cdc:	d02d      	beq.n	8002d3a <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002cde:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d940      	bls.n	8002d68 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8002ce6:	f7fe f9fb 	bl	80010e0 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002cea:	4e3b      	ldr	r6, [pc, #236]	; (8002dd8 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8002cec:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002cee:	e005      	b.n	8002cfc <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002cf0:	f7fe f9f6 	bl	80010e0 <HAL_GetTick>
 8002cf4:	1b40      	subs	r0, r0, r5
 8002cf6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cfa:	d82b      	bhi.n	8002d54 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002cfc:	6933      	ldr	r3, [r6, #16]
 8002cfe:	03db      	lsls	r3, r3, #15
 8002d00:	d4f6      	bmi.n	8002cf0 <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002d02:	6933      	ldr	r3, [r6, #16]
 8002d04:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d152      	bne.n	8002db2 <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d0c:	6930      	ldr	r0, [r6, #16]
 8002d0e:	f010 0001 	ands.w	r0, r0, #1
 8002d12:	d002      	beq.n	8002d1a <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d14:	2201      	movs	r2, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 8002d1a:	b134      	cbz	r4, 8002d2a <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002d1c:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <HAL_FLASH_Program+0x154>)
 8002d1e:	6953      	ldr	r3, [r2, #20]
 8002d20:	ea23 0404 	bic.w	r4, r3, r4
 8002d24:	6154      	str	r4, [r2, #20]
 8002d26:	e000      	b.n	8002d2a <HAL_FLASH_Program+0xa6>
 8002d28:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f889 3000 	strb.w	r3, [r9]
}
 8002d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002d34:	2002      	movs	r0, #2
}
 8002d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d3a:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_FLASH_Program+0x154>)
 8002d3c:	6953      	ldr	r3, [r2, #20]
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002d44:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8002d48:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8002d4c:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002d4e:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8002d52:	e7c8      	b.n	8002ce6 <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e7e0      	b.n	8002d1a <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8002d58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8002d62:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8002d64:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 8002d66:	e7e0      	b.n	8002d2a <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002d68:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_FLASH_Program+0x154>)
 8002d6a:	6953      	ldr	r3, [r2, #20]
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8002d72:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d74:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
 8002d7a:	1dfa      	adds	r2, r7, #7
 8002d7c:	eba2 0208 	sub.w	r2, r2, r8
 8002d80:	2a0e      	cmp	r2, #14
 8002d82:	d91e      	bls.n	8002dc2 <HAL_FLASH_Program+0x13e>
 8002d84:	ea47 0208 	orr.w	r2, r7, r8
 8002d88:	0752      	lsls	r2, r2, #29
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_FLASH_Program+0x13e>
 8002d8c:	1aff      	subs	r7, r7, r3
 8002d8e:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8002d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d96:	18fa      	adds	r2, r7, r3
 8002d98:	3308      	adds	r3, #8
 8002d9a:	4543      	cmp	r3, r8
 8002d9c:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8002da0:	d1f7      	bne.n	8002d92 <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 8002da6:	f1ba 0f02 	cmp.w	sl, #2
 8002daa:	bf08      	it	eq
 8002dac:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 8002db0:	e799      	b.n	8002ce6 <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 8002db2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8002dbc:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8002dbe:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8002dc0:	e7ab      	b.n	8002d1a <HAL_FLASH_Program+0x96>
 8002dc2:	eba7 0708 	sub.w	r7, r7, r8
 8002dc6:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	51da      	str	r2, [r3, r7]
    src_addr++;
 8002dce:	3304      	adds	r3, #4
  while (row_index != 0U);
 8002dd0:	4598      	cmp	r8, r3
 8002dd2:	d1fa      	bne.n	8002dca <HAL_FLASH_Program+0x146>
 8002dd4:	e7e5      	b.n	8002da2 <HAL_FLASH_Program+0x11e>
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	20000008 	.word	0x20000008

08002de0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_FLASH_Unlock+0x1c>)
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	db01      	blt.n	8002dec <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2000      	movs	r0, #0
}
 8002dea:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002dec:	4904      	ldr	r1, [pc, #16]	; (8002e00 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002df0:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002df2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002df4:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	0fc0      	lsrs	r0, r0, #31
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	45670123 	.word	0x45670123
 8002e04:	cdef89ab 	.word	0xcdef89ab

08002e08 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_FLASH_Lock+0x14>)
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e10:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002e12:	6958      	ldr	r0, [r3, #20]
}
 8002e14:	43c0      	mvns	r0, r0
 8002e16:	0fc0      	lsrs	r0, r0, #31
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40022000 	.word	0x40022000

08002e20 <FLASH_WaitForLastOperation>:
{
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7fe f95c 	bl	80010e0 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002e28:	4e10      	ldr	r6, [pc, #64]	; (8002e6c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8002e2a:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002e2c:	e004      	b.n	8002e38 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8002e2e:	f7fe f957 	bl	80010e0 <HAL_GetTick>
 8002e32:	1b03      	subs	r3, r0, r4
 8002e34:	42ab      	cmp	r3, r5
 8002e36:	d80f      	bhi.n	8002e58 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002e38:	6933      	ldr	r3, [r6, #16]
 8002e3a:	03db      	lsls	r3, r3, #15
 8002e3c:	d4f7      	bmi.n	8002e2e <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002e3e:	6933      	ldr	r3, [r6, #16]
 8002e40:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8002e44:	4013      	ands	r3, r2
 8002e46:	d109      	bne.n	8002e5c <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e48:	6930      	ldr	r0, [r6, #16]
 8002e4a:	f010 0001 	ands.w	r0, r0, #1
 8002e4e:	d002      	beq.n	8002e56 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e50:	2201      	movs	r2, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	6132      	str	r2, [r6, #16]
}
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
}
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8002e5c:	4904      	ldr	r1, [pc, #16]	; (8002e70 <FLASH_WaitForLastOperation+0x50>)
 8002e5e:	684a      	ldr	r2, [r1, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8002e66:	6133      	str	r3, [r6, #16]
}
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	20000008 	.word	0x20000008

08002e74 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e78:	4f67      	ldr	r7, [pc, #412]	; (8003018 <HAL_FLASHEx_Erase+0x1a4>)
 8002e7a:	783b      	ldrb	r3, [r7, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d062      	beq.n	8002f46 <HAL_FLASHEx_Erase+0xd2>
 8002e80:	4682      	mov	sl, r0
 8002e82:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e88:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002e8a:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e8c:	f7ff ffc8 	bl	8002e20 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8002e90:	4606      	mov	r6, r0
 8002e92:	b120      	cbz	r0, 8002e9e <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e94:	2300      	movs	r3, #0
 8002e96:	703b      	strb	r3, [r7, #0]

  return status;
}
 8002e98:	4630      	mov	r0, r6
 8002e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ea0:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ea8:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002eaa:	d150      	bne.n	8002f4e <HAL_FLASHEx_Erase+0xda>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002eac:	0554      	lsls	r4, r2, #21
 8002eae:	f140 80a1 	bpl.w	8002ff4 <HAL_FLASHEx_Erase+0x180>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002eb2:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002eb4:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002ebc:	7739      	strb	r1, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ebe:	f8da 3000 	ldr.w	r3, [sl]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d050      	beq.n	8002f68 <HAL_FLASHEx_Erase+0xf4>
      *PageError = 0xFFFFFFFFU;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002ece:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8002ed2:	442b      	add	r3, r5
 8002ed4:	429d      	cmp	r5, r3
 8002ed6:	d261      	bcs.n	8002f9c <HAL_FLASHEx_Erase+0x128>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002ed8:	4c50      	ldr	r4, [pc, #320]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002eda:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8003020 <HAL_FLASHEx_Erase+0x1ac>
 8002ede:	e023      	b.n	8002f28 <HAL_FLASHEx_Erase+0xb4>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002ee0:	6963      	ldr	r3, [r4, #20]
 8002ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee6:	6163      	str	r3, [r4, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002ee8:	6962      	ldr	r2, [r4, #20]
 8002eea:	00eb      	lsls	r3, r5, #3
 8002eec:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8002ef0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ef8:	6963      	ldr	r3, [r4, #20]
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f0c:	f7ff ff88 	bl	8002e20 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002f10:	6963      	ldr	r3, [r4, #20]
 8002f12:	ea03 0309 	and.w	r3, r3, r9
 8002f16:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d165      	bne.n	8002fe8 <HAL_FLASHEx_Erase+0x174>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002f1c:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8002f20:	3501      	adds	r5, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	42ab      	cmp	r3, r5
 8002f26:	d939      	bls.n	8002f9c <HAL_FLASHEx_Erase+0x128>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002f28:	6a23      	ldr	r3, [r4, #32]
 8002f2a:	025b      	lsls	r3, r3, #9
 8002f2c:	d5d8      	bpl.n	8002ee0 <HAL_FLASHEx_Erase+0x6c>
    if ((Banks & FLASH_BANK_1) != 0U)
 8002f2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002f32:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002f36:	6963      	ldr	r3, [r4, #20]
 8002f38:	bf14      	ite	ne
 8002f3a:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002f3e:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8002f42:	6163      	str	r3, [r4, #20]
 8002f44:	e7d0      	b.n	8002ee8 <HAL_FLASHEx_Erase+0x74>
  __HAL_LOCK(&pFlash);
 8002f46:	2602      	movs	r6, #2
}
 8002f48:	4630      	mov	r0, r6
 8002f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	0555      	lsls	r5, r2, #21
 8002f58:	d54a      	bpl.n	8002ff0 <HAL_FLASHEx_Erase+0x17c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f5a:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002f5c:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002f64:	7739      	strb	r1, [r7, #28]
 8002f66:	e7aa      	b.n	8002ebe <HAL_FLASHEx_Erase+0x4a>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	0250      	lsls	r0, r2, #9
 8002f6e:	d443      	bmi.n	8002ff8 <HAL_FLASHEx_Erase+0x184>
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f76:	f042 0204 	orr.w	r2, r2, #4
 8002f7a:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f7c:	4c27      	ldr	r4, [pc, #156]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
 8002f7e:	6963      	ldr	r3, [r4, #20]
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f8a:	f7ff ff49 	bl	8002e20 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002f8e:	6963      	ldr	r3, [r4, #20]
 8002f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f94:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f98:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002f9a:	6163      	str	r3, [r4, #20]
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002f9c:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002f9e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8002fa2:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002fa4:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_FLASHEx_Erase+0x14e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
 8002faa:	6811      	ldr	r1, [r2, #0]
 8002fac:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	6811      	ldr	r1, [r2, #0]
 8002fb4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002fb8:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fba:	6811      	ldr	r1, [r2, #0]
 8002fbc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002fc0:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002fc2:	3b02      	subs	r3, #2
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d80c      	bhi.n	8002fe2 <HAL_FLASHEx_Erase+0x16e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fd8:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	773b      	strb	r3, [r7, #28]
}
 8002fe6:	e755      	b.n	8002e94 <HAL_FLASHEx_Erase+0x20>
          *PageError = page_index;
 8002fe8:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fec:	4606      	mov	r6, r0
          break;
 8002fee:	e7d5      	b.n	8002f9c <HAL_FLASHEx_Erase+0x128>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002ff0:	773c      	strb	r4, [r7, #28]
 8002ff2:	e764      	b.n	8002ebe <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002ff4:	7738      	strb	r0, [r7, #28]
 8002ff6:	e762      	b.n	8002ebe <HAL_FLASHEx_Erase+0x4a>
      FLASH_MassErase(pEraseInit->Banks);
 8002ff8:	f8da 2004 	ldr.w	r2, [sl, #4]
    if ((Banks & FLASH_BANK_1) != 0U)
 8002ffc:	07d1      	lsls	r1, r2, #31
 8002ffe:	d503      	bpl.n	8003008 <HAL_FLASHEx_Erase+0x194>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003000:	6959      	ldr	r1, [r3, #20]
 8003002:	f041 0104 	orr.w	r1, r1, #4
 8003006:	6159      	str	r1, [r3, #20]
    if ((Banks & FLASH_BANK_2) != 0U)
 8003008:	0792      	lsls	r2, r2, #30
 800300a:	d5b7      	bpl.n	8002f7c <HAL_FLASHEx_Erase+0x108>
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800300c:	4a03      	ldr	r2, [pc, #12]	; (800301c <HAL_FLASHEx_Erase+0x1a8>)
 800300e:	6953      	ldr	r3, [r2, #20]
 8003010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003014:	6153      	str	r3, [r2, #20]
 8003016:	e7b1      	b.n	8002f7c <HAL_FLASHEx_Erase+0x108>
 8003018:	20000008 	.word	0x20000008
 800301c:	40022000 	.word	0x40022000
 8003020:	fffffc05 	.word	0xfffffc05

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003028:	680e      	ldr	r6, [r1, #0]
{
 800302a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302c:	2e00      	cmp	r6, #0
 800302e:	f000 808b 	beq.w	8003148 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003032:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003208 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8003036:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003038:	2201      	movs	r2, #1
 800303a:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 800303e:	ea14 0c06 	ands.w	ip, r4, r6
 8003042:	d07c      	beq.n	800313e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003044:	684d      	ldr	r5, [r1, #4]
 8003046:	f025 0a10 	bic.w	sl, r5, #16
 800304a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800304e:	2a01      	cmp	r2, #1
 8003050:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003054:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003058:	d979      	bls.n	800314e <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 800305a:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800305e:	fa02 f208 	lsl.w	r2, r2, r8
 8003062:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003066:	fa04 f408 	lsl.w	r4, r4, r8
 800306a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 800306c:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800306e:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8003070:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003072:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003076:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	fa02 f208 	lsl.w	r2, r2, r8
 800307c:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800307e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8003080:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003082:	d55c      	bpl.n	800313e <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003084:	4c5a      	ldr	r4, [pc, #360]	; (80031f0 <HAL_GPIO_Init+0x1cc>)
 8003086:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	6622      	str	r2, [r4, #96]	; 0x60
 800308e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003090:	f023 0403 	bic.w	r4, r3, #3
 8003094:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003098:	f002 0201 	and.w	r2, r2, #1
 800309c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80030a0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80030ac:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030b8:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030bc:	d018      	beq.n	80030f0 <HAL_GPIO_Init+0xcc>
 80030be:	4a4d      	ldr	r2, [pc, #308]	; (80031f4 <HAL_GPIO_Init+0x1d0>)
 80030c0:	4290      	cmp	r0, r2
 80030c2:	f000 8084 	beq.w	80031ce <HAL_GPIO_Init+0x1aa>
 80030c6:	4a4c      	ldr	r2, [pc, #304]	; (80031f8 <HAL_GPIO_Init+0x1d4>)
 80030c8:	4290      	cmp	r0, r2
 80030ca:	f000 8085 	beq.w	80031d8 <HAL_GPIO_Init+0x1b4>
 80030ce:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <HAL_GPIO_Init+0x1d8>)
 80030d0:	4290      	cmp	r0, r2
 80030d2:	d076      	beq.n	80031c2 <HAL_GPIO_Init+0x19e>
 80030d4:	4a4a      	ldr	r2, [pc, #296]	; (8003200 <HAL_GPIO_Init+0x1dc>)
 80030d6:	4290      	cmp	r0, r2
 80030d8:	f000 8084 	beq.w	80031e4 <HAL_GPIO_Init+0x1c0>
 80030dc:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_GPIO_Init+0x1e0>)
 80030de:	4290      	cmp	r0, r2
 80030e0:	bf0c      	ite	eq
 80030e2:	f04f 0805 	moveq.w	r8, #5
 80030e6:	f04f 0806 	movne.w	r8, #6
 80030ea:	fa08 f209 	lsl.w	r2, r8, r9
 80030ee:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f0:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80030f2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80030f6:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fa:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80030fc:	bf54      	ite	pl
 80030fe:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003100:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8003104:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8003108:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310c:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 800310e:	bf54      	ite	pl
 8003110:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003112:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8003116:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311a:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800311e:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8003120:	bf54      	ite	pl
 8003122:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003124:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8003128:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 800312c:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003130:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8003132:	bf54      	ite	pl
 8003134:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8003136:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800313a:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 800313e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003140:	fa36 f203 	lsrs.w	r2, r6, r3
 8003144:	f47f af78 	bne.w	8003038 <HAL_GPIO_Init+0x14>
  }
}
 8003148:	b003      	add	sp, #12
 800314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800314e:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003150:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003154:	fa02 f208 	lsl.w	r2, r2, r8
 8003158:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315c:	68cf      	ldr	r7, [r1, #12]
 800315e:	fa07 f708 	lsl.w	r7, r7, r8
 8003162:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8003166:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003168:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800316a:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003172:	465c      	mov	r4, fp
 8003174:	409c      	lsls	r4, r3
 8003176:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8003178:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800317a:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317c:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003180:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003184:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003188:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800318c:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8003190:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003192:	f47f af6d 	bne.w	8003070 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8003196:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800319a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800319e:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80031a2:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	f04f 0a0f 	mov.w	sl, #15
 80031ac:	fa0a fb02 	lsl.w	fp, sl, r2
 80031b0:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031b4:	690c      	ldr	r4, [r1, #16]
 80031b6:	4094      	lsls	r4, r2
 80031b8:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80031bc:	f8c9 4020 	str.w	r4, [r9, #32]
 80031c0:	e756      	b.n	8003070 <HAL_GPIO_Init+0x4c>
 80031c2:	f04f 0803 	mov.w	r8, #3
 80031c6:	fa08 f209 	lsl.w	r2, r8, r9
 80031ca:	4317      	orrs	r7, r2
 80031cc:	e790      	b.n	80030f0 <HAL_GPIO_Init+0xcc>
 80031ce:	2201      	movs	r2, #1
 80031d0:	fa02 f209 	lsl.w	r2, r2, r9
 80031d4:	4317      	orrs	r7, r2
 80031d6:	e78b      	b.n	80030f0 <HAL_GPIO_Init+0xcc>
 80031d8:	f04f 0802 	mov.w	r8, #2
 80031dc:	fa08 f209 	lsl.w	r2, r8, r9
 80031e0:	4317      	orrs	r7, r2
 80031e2:	e785      	b.n	80030f0 <HAL_GPIO_Init+0xcc>
 80031e4:	f04f 0804 	mov.w	r8, #4
 80031e8:	fa08 f209 	lsl.w	r2, r8, r9
 80031ec:	4317      	orrs	r7, r2
 80031ee:	e77f      	b.n	80030f0 <HAL_GPIO_Init+0xcc>
 80031f0:	40021000 	.word	0x40021000
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48001000 	.word	0x48001000
 8003204:	48001400 	.word	0x48001400
 8003208:	40010400 	.word	0x40010400

0800320c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800320c:	6903      	ldr	r3, [r0, #16]
 800320e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003210:	bf14      	ite	ne
 8003212:	2001      	movne	r0, #1
 8003214:	2000      	moveq	r0, #0
 8003216:	4770      	bx	lr

08003218 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	b10a      	cbz	r2, 800321e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321a:	6181      	str	r1, [r0, #24]
 800321c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <HAL_HRTIM_MspInit>:
  UNUSED(hhrtim);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_HRTIM_MspInit could be implemented in the user file
   */
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <HAL_HRTIM_Init>:
  if(hhrtim == NULL)
 8003228:	2800      	cmp	r0, #0
 800322a:	d066      	beq.n	80032fa <HAL_HRTIM_Init+0xd2>
{
 800322c:	b510      	push	{r4, lr}
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800322e:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8003230:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003232:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003234:	07d2      	lsls	r2, r2, #31
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003236:	e9c0 3338 	strd	r3, r3, [r0, #224]	; 0xe0
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800323a:	e9c0 333a 	strd	r3, r3, [r0, #232]	; 0xe8
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800323e:	e9c0 333c 	strd	r3, r3, [r0, #240]	; 0xf0
{
 8003242:	b082      	sub	sp, #8
 8003244:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003246:	f880 10dd 	strb.w	r1, [r0, #221]	; 0xdd
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 800324a:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800324e:	d50f      	bpl.n	8003270 <HAL_HRTIM_Init+0x48>
    if (hhrtim->Instance == HRTIM1)
 8003250:	6801      	ldr	r1, [r0, #0]
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_HRTIM_Init+0xf0>)
 8003254:	4299      	cmp	r1, r3
 8003256:	d052      	beq.n	80032fe <HAL_HRTIM_Init+0xd6>
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003258:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800325c:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800325e:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 8003262:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003266:	4302      	orrs	r2, r0
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003268:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800326c:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800326e:	600b      	str	r3, [r1, #0]
  HAL_HRTIM_MspInit(hhrtim);
 8003270:	4620      	mov	r0, r4
 8003272:	f7ff ffd7 	bl	8003224 <HAL_HRTIM_MspInit>
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003276:	68a3      	ldr	r3, [r4, #8]
 8003278:	079b      	lsls	r3, r3, #30
 800327a:	d508      	bpl.n	800328e <HAL_HRTIM_Init+0x66>
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800327c:	6821      	ldr	r1, [r4, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800327e:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003280:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003286:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800328a:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800328c:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hhrtim);
 800328e:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003290:	2201      	movs	r2, #1
  return HAL_OK;
 8003292:	4618      	mov	r0, r3
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8003294:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003298:	e9c4 3308 	strd	r3, r3, [r4, #32]
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800329c:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80032a0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032a4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80032a8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80032ac:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032b0:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80032b4:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80032b8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032bc:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80032c0:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80032c4:	e9c4 3323 	strd	r3, r3, [r4, #140]	; 0x8c
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032c8:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032cc:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80032d0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032d4:	62a3      	str	r3, [r4, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80032d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80032da:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80032de:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80032e2:	e9c4 332f 	strd	r3, r3, [r4, #188]	; 0xbc
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80032e6:	e9c4 3331 	strd	r3, r3, [r4, #196]	; 0xc4
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80032ea:	e9c4 3333 	strd	r3, r3, [r4, #204]	; 0xcc
 80032ee:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80032f2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
}
 80032f6:	b002      	add	sp, #8
 80032f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
}
 80032fc:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80032fe:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8003302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003304:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	9b01      	ldr	r3, [sp, #4]
 8003314:	e7a0      	b.n	8003258 <HAL_HRTIM_Init+0x30>
 8003316:	bf00      	nop
 8003318:	40016800 	.word	0x40016800

0800331c <HAL_HRTIM_DLLCalibrationStart>:
{
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800331c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8003320:	2b01      	cmp	r3, #1
 8003322:	d030      	beq.n	8003386 <HAL_HRTIM_DLLCalibrationStart+0x6a>

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003324:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8003326:	2201      	movs	r2, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003328:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800332c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hhrtim);
 800332e:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8003332:	f1b1 3fff 	cmp.w	r1, #4294967295
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003336:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800333a:	d015      	beq.n	8003368 <HAL_HRTIM_DLLCalibrationStart+0x4c>
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800333c:	f042 0202 	orr.w	r2, r2, #2
 8003340:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8003344:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003348:	f022 020c 	bic.w	r2, r2, #12
 800334c:	4311      	orrs	r1, r2
 800334e:	f8c3 13cc 	str.w	r1, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8003352:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800335e:	2301      	movs	r3, #1
 8003360:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd

  return HAL_OK;
 8003364:	2000      	movs	r0, #0
 8003366:	4770      	bx	lr
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003368:	f022 0202 	bic.w	r2, r2, #2
 800336c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8003370:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800337c:	2301      	movs	r3, #1
 800337e:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8003382:	2000      	movs	r0, #0
 8003384:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8003386:	2002      	movs	r0, #2
}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8003392:	f7fd fea5 	bl	80010e0 <HAL_GetTick>
 8003396:	4606      	mov	r6, r0

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8003398:	1c68      	adds	r0, r5, #1
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	d10a      	bne.n	80033b4 <HAL_HRTIM_PollForDLLCalibration+0x28>
 800339e:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 80033a2:	03d9      	lsls	r1, r3, #15
 80033a4:	d5fb      	bpl.n	800339e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033a6:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80033a8:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033aa:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80033ae:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

  return HAL_OK;
}
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80033b4:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 80033b8:	03db      	lsls	r3, r3, #15
 80033ba:	d4f4      	bmi.n	80033a6 <HAL_HRTIM_PollForDLLCalibration+0x1a>
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7fd fe90 	bl	80010e0 <HAL_GetTick>
 80033c0:	1b80      	subs	r0, r0, r6
 80033c2:	42a8      	cmp	r0, r5
 80033c4:	d801      	bhi.n	80033ca <HAL_HRTIM_PollForDLLCalibration+0x3e>
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d1e6      	bne.n	8003398 <HAL_HRTIM_PollForDLLCalibration+0xc>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80033ca:	2307      	movs	r3, #7
 80033cc:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
        return HAL_TIMEOUT;
 80033d0:	2003      	movs	r0, #3
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}

080033d4 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80033d4:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033d6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d030      	beq.n	8003440 <HAL_HRTIM_TimeBaseConfig+0x6c>
  {
     return HAL_BUSY;
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80033de:	2302      	movs	r3, #2

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80033e0:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80033e2:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80033e6:	d01b      	beq.n	8003420 <HAL_HRTIM_TimeBaseConfig+0x4c>
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80033ee:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80033f2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80033f6:	f023 0307 	bic.w	r3, r3, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80033fa:	432b      	orrs	r3, r5
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80033fc:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003400:	4323      	orrs	r3, r4

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003402:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003406:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800340a:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800340e:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003412:	2301      	movs	r3, #1
 8003414:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8003418:	2400      	movs	r4, #0
}
 800341a:	4620      	mov	r0, r4
 800341c:	bc30      	pop	{r4, r5}
 800341e:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003420:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003422:	6895      	ldr	r5, [r2, #8]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003424:	680b      	ldr	r3, [r1, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003426:	68d4      	ldr	r4, [r2, #12]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003428:	f023 0307 	bic.w	r3, r3, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800342c:	432b      	orrs	r3, r5
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800342e:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003432:	4323      	orrs	r3, r4
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003434:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003438:	600b      	str	r3, [r1, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800343a:	614c      	str	r4, [r1, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800343c:	618a      	str	r2, [r1, #24]
}
 800343e:	e7e8      	b.n	8003412 <HAL_HRTIM_TimeBaseConfig+0x3e>
 8003440:	b2dc      	uxtb	r4, r3
}
 8003442:	4620      	mov	r0, r4
 8003444:	bc30      	pop	{r4, r5}
 8003446:	4770      	bx	lr

08003448 <HAL_HRTIM_ADCTriggerConfig>:
{
 8003448:	b470      	push	{r4, r5, r6}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800344a:	f890 40dd 	ldrb.w	r4, [r0, #221]	; 0xdd
 800344e:	2c02      	cmp	r4, #2
{
 8003450:	4603      	mov	r3, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003452:	b2e0      	uxtb	r0, r4
 8003454:	d056      	beq.n	8003504 <HAL_HRTIM_ADCTriggerConfig+0xbc>
  __HAL_LOCK(hhrtim);
 8003456:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
 800345a:	2801      	cmp	r0, #1
 800345c:	f000 80ef 	beq.w	800363e <HAL_HRTIM_ADCTriggerConfig+0x1f6>
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8003460:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hhrtim);
 8003462:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003464:	2002      	movs	r0, #2
  __HAL_LOCK(hhrtim);
 8003466:	f883 50dc 	strb.w	r5, [r3, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800346a:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
  switch (ADCTrigger)
 800346e:	2920      	cmp	r1, #32
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8003470:	f8d4 6380 	ldr.w	r6, [r4, #896]	; 0x380
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8003474:	f8d4 53fc 	ldr.w	r5, [r4, #1020]	; 0x3fc
  switch (ADCTrigger)
 8003478:	d818      	bhi.n	80034ac <HAL_HRTIM_ADCTriggerConfig+0x64>
 800347a:	2900      	cmp	r1, #0
 800347c:	f000 80f8 	beq.w	8003670 <HAL_HRTIM_ADCTriggerConfig+0x228>
 8003480:	1e48      	subs	r0, r1, #1
 8003482:	281f      	cmp	r0, #31
 8003484:	f200 80f4 	bhi.w	8003670 <HAL_HRTIM_ADCTriggerConfig+0x228>
 8003488:	e8df f000 	tbb	[pc, r0]
 800348c:	8cf28171 	.word	0x8cf28171
 8003490:	97f2f2f2 	.word	0x97f2f2f2
 8003494:	f2f2f2f2 	.word	0xf2f2f2f2
 8003498:	a2f2f2f2 	.word	0xa2f2f2f2
 800349c:	f2f2f2f2 	.word	0xf2f2f2f2
 80034a0:	f2f2f2f2 	.word	0xf2f2f2f2
 80034a4:	f2f2f2f2 	.word	0xf2f2f2f2
 80034a8:	5af2f2f2 	.word	0x5af2f2f2
 80034ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80034b0:	f000 80c8 	beq.w	8003644 <HAL_HRTIM_ADCTriggerConfig+0x1fc>
 80034b4:	d928      	bls.n	8003508 <HAL_HRTIM_ADCTriggerConfig+0xc0>
 80034b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80034ba:	f040 80b2 	bne.w	8003622 <HAL_HRTIM_ADCTriggerConfig+0x1da>
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80034be:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034c2:	e9d2 1200 	ldrd	r1, r2, [r2]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80034c6:	f020 40f8 	bic.w	r0, r0, #2080374784	; 0x7c000000
 80034ca:	f8c4 03f8 	str.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034ce:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
 80034d2:	0692      	lsls	r2, r2, #26
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80034d4:	0109      	lsls	r1, r1, #4
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034d6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 80034da:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80034de:	f401 01e0 	and.w	r1, r1, #7340032	; 0x700000
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034e2:	4302      	orrs	r2, r0
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80034e4:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034e6:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80034ea:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 80034ee:	2a07      	cmp	r2, #7
 80034f0:	f000 80a2 	beq.w	8003638 <HAL_HRTIM_ADCTriggerConfig+0x1f0>
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80034f4:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80034f8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hhrtim);
 80034fa:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80034fc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003500:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
}
 8003504:	bc70      	pop	{r4, r5, r6}
 8003506:	4770      	bx	lr
  switch (ADCTrigger)
 8003508:	2940      	cmp	r1, #64	; 0x40
 800350a:	d073      	beq.n	80035f4 <HAL_HRTIM_ADCTriggerConfig+0x1ac>
 800350c:	2980      	cmp	r1, #128	; 0x80
 800350e:	f040 8088 	bne.w	8003622 <HAL_HRTIM_ADCTriggerConfig+0x1da>
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8003512:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8003516:	e9d2 1200 	ldrd	r1, r2, [r2]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800351a:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 800351e:	f8c4 03f8 	str.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8003522:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
 8003526:	0412      	lsls	r2, r2, #16
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8003528:	0909      	lsrs	r1, r1, #4
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 800352a:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 800352e:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8003532:	f401 41e0 	and.w	r1, r1, #28672	; 0x7000
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8003536:	4302      	orrs	r2, r0
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8003538:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 800353a:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      break;
 800353e:	e7d4      	b.n	80034ea <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8003540:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003544:	e9d2 1200 	ldrd	r1, r2, [r2]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8003548:	f420 7078 	bic.w	r0, r0, #992	; 0x3e0
 800354c:	f8c4 03f8 	str.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003550:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
 8003554:	0152      	lsls	r2, r2, #5
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8003556:	0b09      	lsrs	r1, r1, #12
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003558:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 800355c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8003560:	f001 0170 	and.w	r1, r1, #112	; 0x70
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003564:	4302      	orrs	r2, r0
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8003566:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8003568:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      break;
 800356c:	e7bd      	b.n	80034ea <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 800356e:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8003572:	f426 26e0 	bic.w	r6, r6, #458752	; 0x70000
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8003576:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800357a:	f401 22e0 	and.w	r2, r1, #458752	; 0x70000
 800357e:	4316      	orrs	r6, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003580:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 8003584:	2a07      	cmp	r2, #7
 8003586:	d057      	beq.n	8003638 <HAL_HRTIM_ADCTriggerConfig+0x1f0>
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8003588:	f8c4 6380 	str.w	r6, [r4, #896]	; 0x380
 800358c:	e7b4      	b.n	80034f8 <HAL_HRTIM_ADCTriggerConfig+0xb0>
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800358e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003592:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8003596:	00ca      	lsls	r2, r1, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8003598:	f426 1660 	bic.w	r6, r6, #3670016	; 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800359c:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
 80035a0:	4316      	orrs	r6, r2
      break;
 80035a2:	e7ed      	b.n	8003580 <HAL_HRTIM_ADCTriggerConfig+0x138>
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 80035a4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80035a8:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 80035ac:	018a      	lsls	r2, r1, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 80035ae:	f026 76e0 	bic.w	r6, r6, #29360128	; 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 80035b2:	f002 72e0 	and.w	r2, r2, #29360128	; 0x1c00000
 80035b6:	4316      	orrs	r6, r2
      break;
 80035b8:	e7e2      	b.n	8003580 <HAL_HRTIM_ADCTriggerConfig+0x138>
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80035ba:	e9d2 1200 	ldrd	r1, r2, [r2]
 80035be:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80035c2:	024a      	lsls	r2, r1, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 80035c4:	f026 6660 	bic.w	r6, r6, #234881024	; 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 80035c8:	f002 6260 	and.w	r2, r2, #234881024	; 0xe000000
 80035cc:	4316      	orrs	r6, r2
      break;
 80035ce:	e7d7      	b.n	8003580 <HAL_HRTIM_ADCTriggerConfig+0x138>
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80035d0:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	; 0x3f8
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80035d4:	8850      	ldrh	r0, [r2, #2]
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80035d6:	6852      	ldr	r2, [r2, #4]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80035d8:	f021 011f 	bic.w	r1, r1, #31
 80035dc:	f8c4 13f8 	str.w	r1, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80035e0:	f8d4 13f8 	ldr.w	r1, [r4, #1016]	; 0x3f8
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	430a      	orrs	r2, r1
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80035ea:	f360 0502 	bfi	r5, r0, #0, #3
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80035ee:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      break;
 80035f2:	e77a      	b.n	80034ea <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80035f4:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 80035f8:	e9d2 1200 	ldrd	r1, r2, [r2]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80035fc:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003600:	f8c4 03f8 	str.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8003604:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
 8003608:	0292      	lsls	r2, r2, #10
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800360a:	0a09      	lsrs	r1, r1, #8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800360c:	f402 42f8 	and.w	r2, r2, #31744	; 0x7c00
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8003610:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8003614:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8003618:	4302      	orrs	r2, r0
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800361a:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800361c:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      break;
 8003620:	e763      	b.n	80034ea <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003622:	2207      	movs	r2, #7
 8003624:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003628:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 800362c:	2100      	movs	r1, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800362e:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 8003630:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003634:	f47f af5e 	bne.w	80034f4 <HAL_HRTIM_ADCTriggerConfig+0xac>
     return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
}
 800363a:	bc70      	pop	{r4, r5, r6}
 800363c:	4770      	bx	lr
     return HAL_BUSY;
 800363e:	2002      	movs	r0, #2
}
 8003640:	bc70      	pop	{r4, r5, r6}
 8003642:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8003644:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8003648:	e9d2 1200 	ldrd	r1, r2, [r2]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 800364c:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8003650:	f8c4 03f8 	str.w	r0, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8003654:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
 8003658:	0552      	lsls	r2, r2, #21
 800365a:	f002 7278 	and.w	r2, r2, #65011712	; 0x3e00000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 800365e:	f425 25e0 	bic.w	r5, r5, #458752	; 0x70000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8003662:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8003666:	4302      	orrs	r2, r0
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8003668:	430d      	orrs	r5, r1
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800366a:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      break;
 800366e:	e73c      	b.n	80034ea <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003670:	2207      	movs	r2, #7
 8003672:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003676:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 800367a:	2000      	movs	r0, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800367c:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 800367e:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003682:	d0d9      	beq.n	8003638 <HAL_HRTIM_ADCTriggerConfig+0x1f0>
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8003684:	290f      	cmp	r1, #15
 8003686:	f67f af7f 	bls.w	8003588 <HAL_HRTIM_ADCTriggerConfig+0x140>
 800368a:	e733      	b.n	80034f4 <HAL_HRTIM_ADCTriggerConfig+0xac>

0800368c <HAL_HRTIM_ADCPostScalerConfig>:
{
 800368c:	b410      	push	{r4}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800368e:	f890 40dd 	ldrb.w	r4, [r0, #221]	; 0xdd
 8003692:	2c02      	cmp	r4, #2
{
 8003694:	4603      	mov	r3, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003696:	b2e0      	uxtb	r0, r4
 8003698:	d040      	beq.n	800371c <HAL_HRTIM_ADCPostScalerConfig+0x90>
  __HAL_LOCK(hhrtim);
 800369a:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
 800369e:	2801      	cmp	r0, #1
 80036a0:	f000 80ac 	beq.w	80037fc <HAL_HRTIM_ADCPostScalerConfig+0x170>
 80036a4:	2401      	movs	r4, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036a6:	2002      	movs	r0, #2
  switch (ADCTrigger)
 80036a8:	2920      	cmp	r1, #32
  __HAL_LOCK(hhrtim);
 80036aa:	f883 40dc 	strb.w	r4, [r3, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036ae:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
  switch (ADCTrigger)
 80036b2:	d816      	bhi.n	80036e2 <HAL_HRTIM_ADCPostScalerConfig+0x56>
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d04f      	beq.n	8003758 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
 80036b8:	3901      	subs	r1, #1
 80036ba:	291f      	cmp	r1, #31
 80036bc:	d84c      	bhi.n	8003758 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
 80036be:	e8df f001 	tbb	[pc, r1]
 80036c2:	5d52      	.short	0x5d52
 80036c4:	4b4b694b 	.word	0x4b4b694b
 80036c8:	4b4b754b 	.word	0x4b4b754b
 80036cc:	4b4b4b4b 	.word	0x4b4b4b4b
 80036d0:	4b4b814b 	.word	0x4b4b814b
 80036d4:	4b4b4b4b 	.word	0x4b4b4b4b
 80036d8:	4b4b4b4b 	.word	0x4b4b4b4b
 80036dc:	4b4b4b4b 	.word	0x4b4b4b4b
 80036e0:	404b      	.short	0x404b
 80036e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80036e6:	f000 808d 	beq.w	8003804 <HAL_HRTIM_ADCPostScalerConfig+0x178>
 80036ea:	d91a      	bls.n	8003722 <HAL_HRTIM_ADCPostScalerConfig+0x96>
 80036ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80036f0:	d132      	bne.n	8003758 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	f8d0 1404 	ldr.w	r1, [r0, #1028]	; 0x404
 80036f8:	0612      	lsls	r2, r2, #24
 80036fa:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 80036fe:	f021 51f8 	bic.w	r1, r1, #520093696	; 0x1f000000
 8003702:	430a      	orrs	r2, r1
 8003704:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003708:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
 800370c:	2a07      	cmp	r2, #7
 800370e:	d071      	beq.n	80037f4 <HAL_HRTIM_ADCPostScalerConfig+0x168>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003710:	2201      	movs	r2, #1
  __HAL_UNLOCK(hhrtim);
 8003712:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003714:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003718:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
}
 800371c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003720:	4770      	bx	lr
  switch (ADCTrigger)
 8003722:	2940      	cmp	r1, #64	; 0x40
 8003724:	d05a      	beq.n	80037dc <HAL_HRTIM_ADCPostScalerConfig+0x150>
 8003726:	2980      	cmp	r1, #128	; 0x80
 8003728:	d116      	bne.n	8003758 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	f8d0 1404 	ldr.w	r1, [r0, #1028]	; 0x404
 8003730:	0312      	lsls	r2, r2, #12
 8003732:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 8003736:	f421 31f8 	bic.w	r1, r1, #126976	; 0x1f000
 800373a:	430a      	orrs	r2, r1
 800373c:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
      break;
 8003740:	e7e2      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	f8d0 1404 	ldr.w	r1, [r0, #1028]	; 0x404
 8003748:	f002 021f 	and.w	r2, r2, #31
 800374c:	f021 011f 	bic.w	r1, r1, #31
 8003750:	430a      	orrs	r2, r1
 8003752:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
      break;
 8003756:	e7d7      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003758:	2107      	movs	r1, #7
      __HAL_UNLOCK(hhrtim);
 800375a:	2200      	movs	r2, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800375c:	f883 10dd 	strb.w	r1, [r3, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8003760:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
      break;
 8003764:	e7d0      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	f8d0 1400 	ldr.w	r1, [r0, #1024]	; 0x400
 800376c:	f002 021f 	and.w	r2, r2, #31
 8003770:	f021 011f 	bic.w	r1, r1, #31
 8003774:	430a      	orrs	r2, r1
 8003776:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
      break;
 800377a:	e7c5      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	f8d0 1400 	ldr.w	r1, [r0, #1024]	; 0x400
 8003782:	0192      	lsls	r2, r2, #6
 8003784:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003788:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 800378c:	430a      	orrs	r2, r1
 800378e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
      break;
 8003792:	e7b9      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f8d0 1400 	ldr.w	r1, [r0, #1024]	; 0x400
 800379a:	0312      	lsls	r2, r2, #12
 800379c:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 80037a0:	f421 31f8 	bic.w	r1, r1, #126976	; 0x1f000
 80037a4:	430a      	orrs	r2, r1
 80037a6:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
      break;
 80037aa:	e7ad      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	f8d0 1400 	ldr.w	r1, [r0, #1024]	; 0x400
 80037b2:	0492      	lsls	r2, r2, #18
 80037b4:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 80037b8:	f421 01f8 	bic.w	r1, r1, #8126464	; 0x7c0000
 80037bc:	430a      	orrs	r2, r1
 80037be:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
      break;
 80037c2:	e7a1      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	f8d0 1400 	ldr.w	r1, [r0, #1024]	; 0x400
 80037ca:	0612      	lsls	r2, r2, #24
 80037cc:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 80037d0:	f021 51f8 	bic.w	r1, r1, #520093696	; 0x1f000000
 80037d4:	430a      	orrs	r2, r1
 80037d6:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
      break;
 80037da:	e795      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	f8d0 1404 	ldr.w	r1, [r0, #1028]	; 0x404
 80037e2:	0192      	lsls	r2, r2, #6
 80037e4:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80037e8:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80037ec:	430a      	orrs	r2, r1
 80037ee:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
      break;
 80037f2:	e789      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>
     return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
}
 80037f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037fa:	4770      	bx	lr
     return HAL_BUSY;
 80037fc:	2002      	movs	r0, #2
}
 80037fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003802:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	f8d0 1404 	ldr.w	r1, [r0, #1028]	; 0x404
 800380a:	0492      	lsls	r2, r2, #18
 800380c:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 8003810:	f421 01f8 	bic.w	r1, r1, #8126464	; 0x7c0000
 8003814:	430a      	orrs	r2, r1
 8003816:	f8c0 2404 	str.w	r2, [r0, #1028]	; 0x404
      break;
 800381a:	e775      	b.n	8003708 <HAL_HRTIM_ADCPostScalerConfig+0x7c>

0800381c <HAL_HRTIM_WaveformTimerConfig>:
{
 800381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003820:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8003824:	2b02      	cmp	r3, #2
{
 8003826:	4604      	mov	r4, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	d036      	beq.n	800389a <HAL_HRTIM_WaveformTimerConfig+0x7e>
  __HAL_LOCK(hhrtim);
 800382c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 8003830:	2b01      	cmp	r3, #1
 8003832:	d031      	beq.n	8003898 <HAL_HRTIM_WaveformTimerConfig+0x7c>
 8003834:	2001      	movs	r0, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003836:	2302      	movs	r3, #2
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003838:	2906      	cmp	r1, #6
  __HAL_LOCK(hhrtim);
 800383a:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800383e:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003842:	f000 80b2 	beq.w	80039aa <HAL_HRTIM_WaveformTimerConfig+0x18e>
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003846:	6826      	ldr	r6, [r4, #0]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003848:	6957      	ldr	r7, [r2, #20]
 800384a:	eb06 1ec1 	add.w	lr, r6, r1, lsl #7

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800384e:	2f20      	cmp	r7, #32
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003850:	f8de 3080 	ldr.w	r3, [lr, #128]	; 0x80
 8003854:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003858:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800385c:	f8de 0080 	ldr.w	r0, [lr, #128]	; 0x80
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003860:	f8de 50e8 	ldr.w	r5, [lr, #232]	; 0xe8
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003864:	f8de c0e4 	ldr.w	ip, [lr, #228]	; 0xe4
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003868:	f8d6 83a0 	ldr.w	r8, [r6, #928]	; 0x3a0
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800386c:	f020 0020 	bic.w	r0, r0, #32
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003870:	ea4f 1bc1 	mov.w	fp, r1, lsl #7
 8003874:	ea40 0007 	orr.w	r0, r0, r7
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8003878:	d011      	beq.n	800389e <HAL_HRTIM_WaveformTimerConfig+0x82>
 800387a:	6993      	ldr	r3, [r2, #24]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d00e      	beq.n	800389e <HAL_HRTIM_WaveformTimerConfig+0x82>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8003880:	2b03      	cmp	r3, #3
 8003882:	f000 8134 	beq.w	8003aee <HAL_HRTIM_WaveformTimerConfig+0x2d2>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8003886:	2b04      	cmp	r3, #4
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8003888:	bf06      	itte	eq
 800388a:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
 800388e:	f440 7080 	orreq.w	r0, r0, #256	; 0x100
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8003892:	f420 70d0 	bicne.w	r0, r0, #416	; 0x1a0
 8003896:	e006      	b.n	80038a6 <HAL_HRTIM_WaveformTimerConfig+0x8a>
     return HAL_BUSY;
 8003898:	2002      	movs	r0, #2
}
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 800389e:	f420 70c0 	bic.w	r0, r0, #384	; 0x180
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80038a2:	f040 0020 	orr.w	r0, r0, #32
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
  hrtim_timcr |= pTimerCfg->StartOnSync;

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80038a6:	e9d2 7307 	ldrd	r7, r3, [r2, #28]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80038aa:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80038ae:	4338      	orrs	r0, r7
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80038b0:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80038b4:	4318      	orrs	r0, r3
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
  hrtim_timcr |= pTimerCfg->DACSynchro;

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80038b6:	e9d2 7309 	ldrd	r7, r3, [r2, #36]	; 0x24
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80038ba:	f020 60c0 	bic.w	r0, r0, #100663296	; 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80038be:	4307      	orrs	r7, r0
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80038c0:	f027 6700 	bic.w	r7, r7, #134217728	; 0x8000000

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80038c4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80038c6:	433b      	orrs	r3, r7
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80038c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80038cc:	4303      	orrs	r3, r0

  if (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT)
 80038ce:	b920      	cbnz	r0, 80038da <HAL_HRTIM_WaveformTimerConfig+0xbe>
  {
    /* Timing unit Re-Synchronized Update */
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80038d0:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    hrtim_timcr &= ~(HRTIM_TIMCR_RSYNCU);
 80038d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    hrtim_timcr |= (pTimerCfg->ReSyncUpdate) << HRTIM_TIMCR_RSYNCU_Pos;
 80038d6:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
  }


  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80038da:	6b50      	ldr	r0, [r2, #52]	; 0x34
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
  hrtim_timcr |= pTimerCfg->PushPull;
 80038dc:	f8d2 a038 	ldr.w	sl, [r2, #56]	; 0x38

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80038e0:	6d97      	ldr	r7, [r2, #88]	; 0x58

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80038e2:	f8d2 9048 	ldr.w	r9, [r2, #72]	; 0x48
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80038e6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80038ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80038ee:	bf08      	it	eq
 80038f0:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80038f4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80038f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  hrtim_timcr |= pTimerCfg->PushPull;
 80038fa:	ea43 030a 	orr.w	r3, r3, sl
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80038fe:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003902:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800390a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800390e:	433b      	orrs	r3, r7
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003910:	4305      	orrs	r5, r0
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003912:	6c57      	ldr	r7, [r2, #68]	; 0x44
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003914:	6c10      	ldr	r0, [r2, #64]	; 0x40
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003916:	f42c 7c80 	bic.w	ip, ip, #256	; 0x100
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800391a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800391e:	4305      	orrs	r5, r0
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003920:	ea4c 0007 	orr.w	r0, ip, r7
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003924:	6d17      	ldr	r7, [r2, #80]	; 0x50
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003926:	f429 5c80 	bic.w	ip, r9, #4096	; 0x1000
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800392e:	f5bc 6f60 	cmp.w	ip, #3584	; 0xe00
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003932:	ea43 0307 	orr.w	r3, r3, r7
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003936:	f000 808a 	beq.w	8003a4e <HAL_HRTIM_WaveformTimerConfig+0x232>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800393a:	f420 50f0 	bic.w	r0, r0, #7680	; 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800393e:	ea49 0000 	orr.w	r0, r9, r0
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8003942:	6cd7      	ldr	r7, [r2, #76]	; 0x4c

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003944:	f8d2 c054 	ldr.w	ip, [r2, #84]	; 0x54
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8003948:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800394c:	4338      	orrs	r0, r7

  /* Set the timer burst mode */
  switch (TimerIdx)
 800394e:	2905      	cmp	r1, #5
 8003950:	d809      	bhi.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
 8003952:	e8df f001 	tbb	[pc, r1]
 8003956:	c6ae      	.short	0xc6ae
 8003958:	03b4bac0 	.word	0x03b4bac0
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 800395c:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 800395e:	f428 0880 	bic.w	r8, r8, #4194304	; 0x400000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8003962:	ea48 1887 	orr.w	r8, r8, r7, lsl #6
    break;
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003966:	44b3      	add	fp, r6
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003968:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800396c:	ebc1 07c1 	rsb	r7, r1, r1, lsl #3
 8003970:	f8cb 50e8 	str.w	r5, [fp, #232]	; 0xe8
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003974:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003978:	f8cb c0d4 	str.w	ip, [fp, #212]	; 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800397c:	f8c6 83a0 	str.w	r8, [r6, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003980:	e9d2 ec00 	ldrd	lr, ip, [r2]
 8003984:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8003988:	00bf      	lsls	r7, r7, #2
 800398a:	6912      	ldr	r2, [r2, #16]
 800398c:	3720      	adds	r7, #32
 800398e:	19e3      	adds	r3, r4, r7
 8003990:	f844 e007 	str.w	lr, [r4, r7]
 8003994:	e9c3 c501 	strd	ip, r5, [r3, #4]
 8003998:	e9c3 0203 	strd	r0, r2, [r3, #12]
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 800399c:	2905      	cmp	r1, #5
 800399e:	d84e      	bhi.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
 80039a0:	e8df f001 	tbb	[pc, r1]
 80039a4:	686f767d 	.word	0x686f767d
 80039a8:	5a61      	.short	0x5a61
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80039aa:	6825      	ldr	r5, [r4, #0]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80039ac:	6950      	ldr	r0, [r2, #20]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80039ae:	682b      	ldr	r3, [r5, #0]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80039b0:	f8d5 73a0 	ldr.w	r7, [r5, #928]	; 0x3a0
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80039b4:	f023 0320 	bic.w	r3, r3, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80039b8:	ea43 0100 	orr.w	r1, r3, r0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80039bc:	2820      	cmp	r0, #32
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80039be:	f021 03c0 	bic.w	r3, r1, #192	; 0xc0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80039c2:	d073      	beq.n	8003aac <HAL_HRTIM_WaveformTimerConfig+0x290>
 80039c4:	6990      	ldr	r0, [r2, #24]
 80039c6:	2802      	cmp	r0, #2
 80039c8:	d070      	beq.n	8003aac <HAL_HRTIM_WaveformTimerConfig+0x290>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80039ca:	2803      	cmp	r0, #3
 80039cc:	f000 8094 	beq.w	8003af8 <HAL_HRTIM_WaveformTimerConfig+0x2dc>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80039d0:	2804      	cmp	r0, #4
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80039d2:	bf0c      	ite	eq
 80039d4:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80039d8:	f021 03e0 	bicne.w	r3, r1, #224	; 0xe0
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80039dc:	e9d2 6007 	ldrd	r6, r0, [r2, #28]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80039e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80039e4:	4333      	orrs	r3, r6
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80039e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80039ea:	6a51      	ldr	r1, [r2, #36]	; 0x24
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80039ec:	4303      	orrs	r3, r0
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80039ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80039f2:	e9d2 600a 	ldrd	r6, r0, [r2, #40]	; 0x28
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80039f6:	430b      	orrs	r3, r1
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80039f8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80039fc:	4333      	orrs	r3, r6
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80039fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003a02:	6b51      	ldr	r1, [r2, #52]	; 0x34
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003a04:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003a08:	6b10      	ldr	r0, [r2, #48]	; 0x30
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003a0a:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003a0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003a12:	430b      	orrs	r3, r1
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003a14:	4338      	orrs	r0, r7
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003a16:	602b      	str	r3, [r5, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003a18:	f8c5 03a0 	str.w	r0, [r5, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003a1c:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8003a20:	e9d2 6000 	ldrd	r6, r0, [r2]
 8003a24:	6912      	ldr	r2, [r2, #16]
 8003a26:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8003a2a:	e9c4 6032 	strd	r6, r0, [r4, #200]	; 0xc8
 8003a2e:	e9c4 1334 	strd	r1, r3, [r4, #208]	; 0xd0
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003a32:	f8d5 3384 	ldr.w	r3, [r5, #900]	; 0x384
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f8c5 3384 	str.w	r3, [r5, #900]	; 0x384
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a3e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hhrtim);
 8003a40:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a42:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003a46:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
}
 8003a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003a4e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8003a52:	f47f af76 	bne.w	8003942 <HAL_HRTIM_WaveformTimerConfig+0x126>
 8003a56:	e770      	b.n	800393a <HAL_HRTIM_WaveformTimerConfig+0x11e>
      break;
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8003a58:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003a64:	e7eb      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003a66:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003a6a:	f043 0320 	orr.w	r3, r3, #32
 8003a6e:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003a72:	e7e4      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003a74:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003a78:	f043 0310 	orr.w	r3, r3, #16
 8003a7c:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003a80:	e7dd      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003a82:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003a86:	f043 0308 	orr.w	r3, r3, #8
 8003a8a:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003a8e:	e7d6      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003a90:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003a9c:	e7cf      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003a9e:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
 8003aa6:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003aaa:	e7c8      	b.n	8003a3e <HAL_HRTIM_WaveformTimerConfig+0x222>
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8003aac:	f043 0320 	orr.w	r3, r3, #32
 8003ab0:	e794      	b.n	80039dc <HAL_HRTIM_WaveformTimerConfig+0x1c0>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003ab2:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003ab4:	f428 3800 	bic.w	r8, r8, #131072	; 0x20000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003ab8:	ea48 0847 	orr.w	r8, r8, r7, lsl #1
      break;
 8003abc:	e753      	b.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003abe:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003ac0:	f428 1800 	bic.w	r8, r8, #2097152	; 0x200000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003ac4:	ea48 1847 	orr.w	r8, r8, r7, lsl #5
      break;
 8003ac8:	e74d      	b.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003aca:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003acc:	f428 1880 	bic.w	r8, r8, #1048576	; 0x100000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003ad0:	ea48 1807 	orr.w	r8, r8, r7, lsl #4
      break;
 8003ad4:	e747      	b.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003ad6:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003ad8:	f428 2800 	bic.w	r8, r8, #524288	; 0x80000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003adc:	ea48 08c7 	orr.w	r8, r8, r7, lsl #3
      break;
 8003ae0:	e741      	b.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003ae2:	6b17      	ldr	r7, [r2, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003ae4:	f428 2880 	bic.w	r8, r8, #262144	; 0x40000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003ae8:	ea48 0887 	orr.w	r8, r8, r7, lsl #2
      break;
 8003aec:	e73b      	b.n	8003966 <HAL_HRTIM_WaveformTimerConfig+0x14a>
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8003aee:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003af2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003af6:	e6d6      	b.n	80038a6 <HAL_HRTIM_WaveformTimerConfig+0x8a>
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8003af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8003afc:	e76e      	b.n	80039dc <HAL_HRTIM_WaveformTimerConfig+0x1c0>
 8003afe:	bf00      	nop

08003b00 <HAL_HRTIM_WaveformTimerControl>:
{
 8003b00:	b4f0      	push	{r4, r5, r6, r7}
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b02:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8003b06:	2b02      	cmp	r3, #2
{
 8003b08:	4604      	mov	r4, r0
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	d02e      	beq.n	8003b6c <HAL_HRTIM_WaveformTimerControl+0x6c>
    __HAL_LOCK(hhrtim);
 8003b0e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d029      	beq.n	8003b6a <HAL_HRTIM_WaveformTimerControl+0x6a>
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003b16:	6826      	ldr	r6, [r4, #0]
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b18:	2002      	movs	r0, #2
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003b1a:	eb06 13c1 	add.w	r3, r6, r1, lsl #7
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b1e:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8003b22:	e9d2 7500 	ldrd	r7, r5, [r2]
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003b26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8003b2a:	68d0      	ldr	r0, [r2, #12]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8003b2c:	f023 0310 	bic.w	r3, r3, #16
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8003b30:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8003b34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8003b38:	432b      	orrs	r3, r5
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8003b3e:	4303      	orrs	r3, r0
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8003b40:	6990      	ldr	r0, [r2, #24]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8003b42:	6895      	ldr	r5, [r2, #8]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8003b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8003b48:	2801      	cmp	r0, #1
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8003b4a:	ea43 0305 	orr.w	r3, r3, r5
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003b4e:	ea4f 15c1 	mov.w	r5, r1, lsl #7
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8003b52:	d01b      	beq.n	8003b8c <HAL_HRTIM_WaveformTimerControl+0x8c>
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8003b54:	1972      	adds	r2, r6, r5
 8003b56:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
  switch (TimerIdx)
 8003b5a:	2906      	cmp	r1, #6
 8003b5c:	d80e      	bhi.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
 8003b5e:	e8df f001 	tbb	[pc, r1]
 8003b62:	2e27      	.short	0x2e27
 8003b64:	07433c35 	.word	0x07433c35
 8003b68:	20          	.byte	0x20
 8003b69:	00          	.byte	0x00
       return HAL_BUSY;
 8003b6a:	2002      	movs	r0, #2
}
 8003b6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b6e:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8003b70:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b78:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
    __HAL_UNLOCK(hhrtim);
 8003b7c:	2000      	movs	r0, #0
    hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
    __HAL_UNLOCK(hhrtim);
 8003b84:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
}
 8003b88:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8a:	4770      	bx	lr
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8003b8c:	e9d2 0204 	ldrd	r0, r2, [r2, #16]
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8003b90:	f023 0304 	bic.w	r3, r3, #4
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8003b94:	4303      	orrs	r3, r0
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8003b96:	f023 0302 	bic.w	r3, r3, #2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8003b9a:	4313      	orrs	r3, r2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	e7d8      	b.n	8003b54 <HAL_HRTIM_WaveformTimerControl+0x54>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003ba2:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003bae:	e7e5      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003bb0:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003bbc:	e7de      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003bbe:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003bca:	e7d7      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003bcc:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003bd8:	e7d0      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003bda:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003bde:	f043 0310 	orr.w	r3, r3, #16
 8003be2:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003be6:	e7c9      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003be8:	f8d6 3384 	ldr.w	r3, [r6, #900]	; 0x384
 8003bec:	f043 0320 	orr.w	r3, r3, #32
 8003bf0:	f8c6 3384 	str.w	r3, [r6, #900]	; 0x384
      break;
 8003bf4:	e7c2      	b.n	8003b7c <HAL_HRTIM_WaveformTimerControl+0x7c>
 8003bf6:	bf00      	nop

08003bf8 <HAL_HRTIM_DeadTimeConfig>:
{
 8003bf8:	b4f0      	push	{r4, r5, r6, r7}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003bfa:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	b2dc      	uxtb	r4, r3
 8003c02:	d03b      	beq.n	8003c7c <HAL_HRTIM_DeadTimeConfig+0x84>
  __HAL_LOCK(hhrtim);
 8003c04:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d03a      	beq.n	8003c82 <HAL_HRTIM_DeadTimeConfig+0x8a>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003c12:	e9d2 6300 	ldrd	r6, r3, [r2]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003c16:	6895      	ldr	r5, [r2, #8]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8003c18:	6914      	ldr	r4, [r2, #16]
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8003c1a:	f406 57e0 	and.w	r7, r6, #7168	; 0x1c00
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003c1e:	f3c3 0608 	ubfx	r6, r3, #0, #9
 8003c22:	433e      	orrs	r6, r7
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003c24:	68d3      	ldr	r3, [r2, #12]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003c26:	6957      	ldr	r7, [r2, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003c28:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8003c2c:	432e      	orrs	r6, r5
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8003c2e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8003c32:	4334      	orrs	r4, r6
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8003c38:	6995      	ldr	r5, [r2, #24]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8003c3a:	6a16      	ldr	r6, [r2, #32]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003c3c:	4323      	orrs	r3, r4
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c3e:	6804      	ldr	r4, [r0, #0]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8003c40:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c44:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003c48:	69d4      	ldr	r4, [r2, #28]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <HAL_HRTIM_DeadTimeConfig+0x94>)
 8003c4c:	432b      	orrs	r3, r5
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8003c4e:	f006 4580 	and.w	r5, r6, #1073741824	; 0x40000000
 8003c52:	432b      	orrs	r3, r5
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003c54:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c58:	f8d1 50b8 	ldr.w	r5, [r1, #184]	; 0xb8
 8003c5c:	4323      	orrs	r3, r4
 8003c5e:	4c0c      	ldr	r4, [pc, #48]	; (8003c90 <HAL_HRTIM_DeadTimeConfig+0x98>)
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003c60:	ea02 4207 	and.w	r2, r2, r7, lsl #16
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c64:	402c      	ands	r4, r5
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003c66:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c68:	4323      	orrs	r3, r4
  __HAL_UNLOCK(hhrtim);
 8003c6a:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c6c:	2501      	movs	r5, #1
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003c6e:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
  return HAL_OK;
 8003c72:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003c74:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003c78:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
}
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	bcf0      	pop	{r4, r5, r6, r7}
 8003c80:	4770      	bx	lr
     return HAL_BUSY;
 8003c82:	2402      	movs	r4, #2
}
 8003c84:	4620      	mov	r0, r4
 8003c86:	bcf0      	pop	{r4, r5, r6, r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	01ff0000 	.word	0x01ff0000
 8003c90:	3c002000 	.word	0x3c002000

08003c94 <HAL_HRTIM_WaveformCompareConfig>:
{
 8003c94:	b430      	push	{r4, r5}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003c96:	f890 50dd 	ldrb.w	r5, [r0, #221]	; 0xdd
 8003c9a:	2d02      	cmp	r5, #2
{
 8003c9c:	4604      	mov	r4, r0
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003c9e:	b2e8      	uxtb	r0, r5
 8003ca0:	d026      	beq.n	8003cf0 <HAL_HRTIM_WaveformCompareConfig+0x5c>
  __HAL_LOCK(hhrtim);
 8003ca2:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
 8003ca6:	2801      	cmp	r0, #1
 8003ca8:	f000 8098 	beq.w	8003ddc <HAL_HRTIM_WaveformCompareConfig+0x148>
 8003cac:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003cae:	2002      	movs	r0, #2
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003cb0:	2906      	cmp	r1, #6
  __HAL_LOCK(hhrtim);
 8003cb2:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003cb6:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003cba:	f102 32ff 	add.w	r2, r2, #4294967295
 8003cbe:	d019      	beq.n	8003cf4 <HAL_HRTIM_WaveformCompareConfig+0x60>
    switch (CompareUnit)
 8003cc0:	2a07      	cmp	r2, #7
 8003cc2:	d805      	bhi.n	8003cd0 <HAL_HRTIM_WaveformCompareConfig+0x3c>
 8003cc4:	e8df f002 	tbb	[pc, r2]
 8003cc8:	39045f2c 	.word	0x39045f2c
 8003ccc:	40040404 	.word	0x40040404
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003cd0:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 8003cd2:	2300      	movs	r3, #0
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003cd4:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
        __HAL_UNLOCK(hhrtim);
 8003cd8:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003cdc:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	d027      	beq.n	8003d34 <HAL_HRTIM_WaveformCompareConfig+0xa0>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003ce4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hhrtim);
 8003ce6:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003ce8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003cec:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
}
 8003cf0:	bc30      	pop	{r4, r5}
 8003cf2:	4770      	bx	lr
    switch (CompareUnit)
 8003cf4:	2a07      	cmp	r2, #7
 8003cf6:	d8eb      	bhi.n	8003cd0 <HAL_HRTIM_WaveformCompareConfig+0x3c>
 8003cf8:	a101      	add	r1, pc, #4	; (adr r1, 8003d00 <HAL_HRTIM_WaveformCompareConfig+0x6c>)
 8003cfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003dbd 	.word	0x08003dbd
 8003d04:	08003dd5 	.word	0x08003dd5
 8003d08:	08003cd1 	.word	0x08003cd1
 8003d0c:	08003dc5 	.word	0x08003dc5
 8003d10:	08003cd1 	.word	0x08003cd1
 8003d14:	08003cd1 	.word	0x08003cd1
 8003d18:	08003cd1 	.word	0x08003cd1
 8003d1c:	08003dcd 	.word	0x08003dcd
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8003d28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003d2c:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d1d7      	bne.n	8003ce4 <HAL_HRTIM_WaveformCompareConfig+0x50>
     return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	bc30      	pop	{r4, r5}
 8003d38:	4770      	bx	lr
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8003d42:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
        break;
 8003d46:	e7c9      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	e9d3 5000 	ldrd	r5, r0, [r3]
 8003d4e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8003d52:	f8c1 50ac 	str.w	r5, [r1, #172]	; 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d04a      	beq.n	8003df0 <HAL_HRTIM_WaveformCompareConfig+0x15c>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003d5a:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003d5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d62:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003d66:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003d6a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003d6e:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8003d72:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003d76:	d01d      	beq.n	8003db4 <HAL_HRTIM_WaveformCompareConfig+0x120>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003d78:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8003d7c:	d1ae      	bne.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 8003d84:	e7aa      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	e9d3 5000 	ldrd	r5, r0, [r3]
 8003d8c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8003d90:	f8c1 50a4 	str.w	r5, [r1, #164]	; 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003d94:	b328      	cbz	r0, 8003de2 <HAL_HRTIM_WaveformCompareConfig+0x14e>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003d96:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003d9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003d9e:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003da2:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003da6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003daa:	ea42 0200 	orr.w	r2, r2, r0
 8003dae:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003db2:	d1e1      	bne.n	8003d78 <HAL_HRTIM_WaveformCompareConfig+0xe4>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dba:	e78f      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61d3      	str	r3, [r2, #28]
        break;
 8003dc2:	e78b      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003dca:	e787      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8003dd2:	e783      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8003dda:	e77f      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
     return HAL_BUSY;
 8003ddc:	2002      	movs	r0, #2
}
 8003dde:	bc30      	pop	{r4, r5}
 8003de0:	4770      	bx	lr
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003de2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8003de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8003dee:	e775      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003df0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8003df4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003df8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8003dfc:	e76e      	b.n	8003cdc <HAL_HRTIM_WaveformCompareConfig+0x48>
 8003dfe:	bf00      	nop

08003e00 <HAL_HRTIM_WaveformOutputConfig>:
{
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003e02:	f890 40dd 	ldrb.w	r4, [r0, #221]	; 0xdd
 8003e06:	2c02      	cmp	r4, #2
 8003e08:	b2e5      	uxtb	r5, r4
 8003e0a:	d05a      	beq.n	8003ec2 <HAL_HRTIM_WaveformOutputConfig+0xc2>
  __HAL_LOCK(hhrtim);
 8003e0c:	f890 40dc 	ldrb.w	r4, [r0, #220]	; 0xdc
 8003e10:	2c01      	cmp	r4, #1
 8003e12:	d07c      	beq.n	8003f0e <HAL_HRTIM_WaveformOutputConfig+0x10e>
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e14:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hhrtim);
 8003e16:	2601      	movs	r6, #1
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e18:	eb07 14c1 	add.w	r4, r7, r1, lsl #7
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e1c:	2502      	movs	r5, #2
  __HAL_LOCK(hhrtim);
 8003e1e:	f880 60dc 	strb.w	r6, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003e22:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
  switch (Output)
 8003e26:	2a40      	cmp	r2, #64	; 0x40
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e28:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	; 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003e2c:	f8d4 c0b8 	ldr.w	ip, [r4, #184]	; 0xb8
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e30:	ea4f 11c1 	mov.w	r1, r1, lsl #7
  switch (Output)
 8003e34:	d058      	beq.n	8003ee8 <HAL_HRTIM_WaveformOutputConfig+0xe8>
 8003e36:	d816      	bhi.n	8003e66 <HAL_HRTIM_WaveformOutputConfig+0x66>
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	2a1f      	cmp	r2, #31
 8003e3c:	d81c      	bhi.n	8003e78 <HAL_HRTIM_WaveformOutputConfig+0x78>
 8003e3e:	2a1f      	cmp	r2, #31
 8003e40:	d81a      	bhi.n	8003e78 <HAL_HRTIM_WaveformOutputConfig+0x78>
 8003e42:	e8df f002 	tbb	[pc, r2]
 8003e46:	4651      	.short	0x4651
 8003e48:	19195119 	.word	0x19195119
 8003e4c:	19194619 	.word	0x19194619
 8003e50:	19191919 	.word	0x19191919
 8003e54:	19195119 	.word	0x19195119
 8003e58:	19191919 	.word	0x19191919
 8003e5c:	19191919 	.word	0x19191919
 8003e60:	19191919 	.word	0x19191919
 8003e64:	4619      	.short	0x4619
 8003e66:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003e6a:	d032      	beq.n	8003ed2 <HAL_HRTIM_WaveformOutputConfig+0xd2>
 8003e6c:	d82b      	bhi.n	8003ec6 <HAL_HRTIM_WaveformOutputConfig+0xc6>
 8003e6e:	2a80      	cmp	r2, #128	; 0x80
 8003e70:	d02f      	beq.n	8003ed2 <HAL_HRTIM_WaveformOutputConfig+0xd2>
 8003e72:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003e76:	d037      	beq.n	8003ee8 <HAL_HRTIM_WaveformOutputConfig+0xe8>
 8003e78:	f06f 06fe 	mvn.w	r6, #254	; 0xfe
 8003e7c:	2400      	movs	r4, #0
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003e7e:	681a      	ldr	r2, [r3, #0]
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003e80:	68dd      	ldr	r5, [r3, #12]
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003e82:	ea0e 0606 	and.w	r6, lr, r6
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003e86:	40a2      	lsls	r2, r4
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003e88:	f8d3 e010 	ldr.w	lr, [r3, #16]
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003e8c:	4332      	orrs	r2, r6
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003e8e:	fa05 f604 	lsl.w	r6, r5, r4
 8003e92:	4332      	orrs	r2, r6
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003e94:	695d      	ldr	r5, [r3, #20]
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003e96:	fa0e f604 	lsl.w	r6, lr, r4
 8003e9a:	4332      	orrs	r2, r6
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003e9c:	699e      	ldr	r6, [r3, #24]
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003e9e:	40a5      	lsls	r5, r4
 8003ea0:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003ea2:	40a6      	lsls	r6, r4
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003ea4:	f1be 0f08 	cmp.w	lr, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003ea8:	ea42 0206 	orr.w	r2, r2, r6
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003eac:	d027      	beq.n	8003efe <HAL_HRTIM_WaveformOutputConfig+0xfe>
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003eae:	4439      	add	r1, r7
  __HAL_UNLOCK(hhrtim);
 8003eb0:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003eb2:	2401      	movs	r4, #1
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003eb4:	f8c1 20e4 	str.w	r2, [r1, #228]	; 0xe4
  return HAL_OK;
 8003eb8:	461d      	mov	r5, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003eba:	f880 40dd 	strb.w	r4, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003ebe:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Output)
 8003ec6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003eca:	d00d      	beq.n	8003ee8 <HAL_HRTIM_WaveformOutputConfig+0xe8>
 8003ecc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003ed0:	d1d2      	bne.n	8003e78 <HAL_HRTIM_WaveformOutputConfig+0x78>
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003ed2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003ed6:	187a      	adds	r2, r7, r1
      break;
 8003ed8:	f46f 067e 	mvn.w	r6, #16646144	; 0xfe0000
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003edc:	f8c2 40c4 	str.w	r4, [r2, #196]	; 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003ee0:	f8c2 50c8 	str.w	r5, [r2, #200]	; 0xc8
      shift = 16U;
 8003ee4:	2410      	movs	r4, #16
      break;
 8003ee6:	e7ca      	b.n	8003e7e <HAL_HRTIM_WaveformOutputConfig+0x7e>
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003ee8:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003eec:	187a      	adds	r2, r7, r1
      break;
 8003eee:	f06f 06fe 	mvn.w	r6, #254	; 0xfe
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003ef2:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003ef6:	f8c2 50c0 	str.w	r5, [r2, #192]	; 0xc0
  uint32_t shift = 0U;
 8003efa:	2400      	movs	r4, #0
      break;
 8003efc:	e7bf      	b.n	8003e7e <HAL_HRTIM_WaveformOutputConfig+0x7e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003efe:	f01c 2f02 	tst.w	ip, #33554944	; 0x2000200
 8003f02:	d1d4      	bne.n	8003eae <HAL_HRTIM_WaveformOutputConfig+0xae>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	fa03 f404 	lsl.w	r4, r3, r4
 8003f0a:	4322      	orrs	r2, r4
 8003f0c:	e7cf      	b.n	8003eae <HAL_HRTIM_WaveformOutputConfig+0xae>
     return HAL_BUSY;
 8003f0e:	2502      	movs	r5, #2
}
 8003f10:	4628      	mov	r0, r5
 8003f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f14 <HAL_HRTIM_WaveformOutputStart>:
  __HAL_LOCK(hhrtim);
 8003f14:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8003f18:	2a01      	cmp	r2, #1
 8003f1a:	d014      	beq.n	8003f46 <HAL_HRTIM_WaveformOutputStart+0x32>
 8003f1c:	4603      	mov	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f1e:	2202      	movs	r2, #2
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003f20:	6800      	ldr	r0, [r0, #0]
{
 8003f22:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f24:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003f28:	f8d0 2394 	ldr.w	r2, [r0, #916]	; 0x394
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003f2c:	2401      	movs	r4, #1
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003f2e:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hhrtim);
 8003f30:	2200      	movs	r2, #0
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8003f32:	f8c0 1394 	str.w	r1, [r0, #916]	; 0x394
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003f36:	f883 40dd 	strb.w	r4, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003f3a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  return HAL_OK;
 8003f3e:	4610      	mov	r0, r2
}
 8003f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f44:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8003f46:	2002      	movs	r0, #2
}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <HAL_HRTIM_WaveformOutputStop>:
  __HAL_LOCK(hhrtim);
 8003f4c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8003f50:	2a01      	cmp	r2, #1
 8003f52:	d014      	beq.n	8003f7e <HAL_HRTIM_WaveformOutputStop+0x32>
 8003f54:	4603      	mov	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f56:	2202      	movs	r2, #2
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8003f58:	6800      	ldr	r0, [r0, #0]
{
 8003f5a:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f5c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8003f60:	f8d0 2398 	ldr.w	r2, [r0, #920]	; 0x398
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003f64:	2401      	movs	r4, #1
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8003f66:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hhrtim);
 8003f68:	2200      	movs	r2, #0
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8003f6a:	f8c0 1398 	str.w	r1, [r0, #920]	; 0x398
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003f6e:	f883 40dd 	strb.w	r4, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003f72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  return HAL_OK;
 8003f76:	4610      	mov	r0, r2
}
 8003f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f7c:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8003f7e:	2002      	movs	r0, #2
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <HAL_HRTIM_WaveformCountStart>:
  __HAL_LOCK(hhrtim);
 8003f84:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	d012      	beq.n	8003fb2 <HAL_HRTIM_WaveformCountStart+0x2e>
 8003f8c:	4603      	mov	r3, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f8e:	2202      	movs	r2, #2
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003f90:	6800      	ldr	r0, [r0, #0]
{
 8003f92:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003f94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003f98:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003f9a:	2401      	movs	r4, #1
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003f9c:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hhrtim);
 8003f9e:	2200      	movs	r2, #0
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003fa0:	6001      	str	r1, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003fa2:	f883 40dd 	strb.w	r4, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003fa6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  return HAL_OK;
 8003faa:	4610      	mov	r0, r2
}
 8003fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb0:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8003fb2:	2002      	movs	r0, #2
}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <HAL_HRTIM_WaveformCountStop>:
  __HAL_LOCK(hhrtim);
 8003fb8:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	d013      	beq.n	8003fe8 <HAL_HRTIM_WaveformCountStop+0x30>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2202      	movs	r2, #2
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003fc4:	6800      	ldr	r0, [r0, #0]
{
 8003fc6:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003fc8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003fcc:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003fce:	2401      	movs	r4, #1
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003fd0:	ea22 0101 	bic.w	r1, r2, r1
  __HAL_UNLOCK(hhrtim);
 8003fd4:	2200      	movs	r2, #0
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003fd6:	6001      	str	r1, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003fd8:	f883 40dd 	strb.w	r4, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8003fdc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  return HAL_OK;
 8003fe0:	4610      	mov	r0, r2
}
 8003fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fe6:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8003fe8:	2002      	movs	r0, #2
}
 8003fea:	4770      	bx	lr

08003fec <HAL_HRTIM_WaveformCountStart_IT>:
  __HAL_LOCK(hhrtim);
 8003fec:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
 8003ff0:	2a01      	cmp	r2, #1
 8003ff2:	d050      	beq.n	8004096 <HAL_HRTIM_WaveformCountStart_IT+0xaa>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2002      	movs	r0, #2
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8003ff8:	681a      	ldr	r2, [r3, #0]
{
 8003ffa:	b430      	push	{r4, r5}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003ffc:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8004000:	f8d2 0390 	ldr.w	r0, [r2, #912]	; 0x390
 8004004:	685c      	ldr	r4, [r3, #4]
 8004006:	4320      	orrs	r0, r4
 8004008:	f8c2 0390 	str.w	r0, [r2, #912]	; 0x390
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800400c:	03c8      	lsls	r0, r1, #15
 800400e:	d504      	bpl.n	800401a <HAL_HRTIM_WaveformCountStart_IT+0x2e>
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8004010:	68d0      	ldr	r0, [r2, #12]
 8004012:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 8004016:	4320      	orrs	r0, r4
 8004018:	60d0      	str	r0, [r2, #12]
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800401a:	038d      	lsls	r5, r1, #14
 800401c:	d505      	bpl.n	800402a <HAL_HRTIM_WaveformCountStart_IT+0x3e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800401e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004022:	6a1c      	ldr	r4, [r3, #32]
 8004024:	4320      	orrs	r0, r4
 8004026:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800402a:	034c      	lsls	r4, r1, #13
 800402c:	d505      	bpl.n	800403a <HAL_HRTIM_WaveformCountStart_IT+0x4e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800402e:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8004032:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8004034:	4320      	orrs	r0, r4
 8004036:	f8c2 010c 	str.w	r0, [r2, #268]	; 0x10c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800403a:	0308      	lsls	r0, r1, #12
 800403c:	d505      	bpl.n	800404a <HAL_HRTIM_WaveformCountStart_IT+0x5e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800403e:	f8d2 018c 	ldr.w	r0, [r2, #396]	; 0x18c
 8004042:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8004044:	4320      	orrs	r0, r4
 8004046:	f8c2 018c 	str.w	r0, [r2, #396]	; 0x18c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800404a:	02cd      	lsls	r5, r1, #11
 800404c:	d505      	bpl.n	800405a <HAL_HRTIM_WaveformCountStart_IT+0x6e>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800404e:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8004052:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8004054:	4320      	orrs	r0, r4
 8004056:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800405a:	028c      	lsls	r4, r1, #10
 800405c:	d506      	bpl.n	800406c <HAL_HRTIM_WaveformCountStart_IT+0x80>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 800405e:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
 8004062:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8004066:	4320      	orrs	r0, r4
 8004068:	f8c2 028c 	str.w	r0, [r2, #652]	; 0x28c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800406c:	0248      	lsls	r0, r1, #9
 800406e:	d506      	bpl.n	800407e <HAL_HRTIM_WaveformCountStart_IT+0x92>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8004070:	f8d2 030c 	ldr.w	r0, [r2, #780]	; 0x30c
 8004074:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8004078:	4320      	orrs	r0, r4
 800407a:	f8c2 030c 	str.w	r0, [r2, #780]	; 0x30c
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800407e:	6810      	ldr	r0, [r2, #0]
  __HAL_UNLOCK(hhrtim);
 8004080:	2400      	movs	r4, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004082:	2501      	movs	r5, #1
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8004084:	4301      	orrs	r1, r0
 8004086:	6011      	str	r1, [r2, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004088:	f883 50dd 	strb.w	r5, [r3, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800408c:	f883 40dc 	strb.w	r4, [r3, #220]	; 0xdc
  return HAL_OK;}
 8004090:	4620      	mov	r0, r4
 8004092:	bc30      	pop	{r4, r5}
 8004094:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8004096:	2002      	movs	r0, #2
  return HAL_OK;}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop

0800409c <HAL_HRTIM_WaveformCountStop_IT>:
{
 800409c:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 800409e:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
{
 80040a2:	b083      	sub	sp, #12
 80040a4:	4602      	mov	r2, r0
  __HAL_LOCK(hhrtim);
 80040a6:	2b01      	cmp	r3, #1
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80040a8:	f240 107f 	movw	r0, #383	; 0x17f
 80040ac:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hhrtim);
 80040ae:	d05e      	beq.n	800416e <HAL_HRTIM_WaveformCountStop_IT+0xd2>
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80040b0:	6810      	ldr	r0, [r2, #0]
 80040b2:	6854      	ldr	r4, [r2, #4]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80040ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80040be:	ea23 0304 	bic.w	r3, r3, r4
 80040c2:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80040c6:	03cb      	lsls	r3, r1, #15
 80040c8:	d505      	bpl.n	80040d6 <HAL_HRTIM_WaveformCountStop_IT+0x3a>
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80040ca:	68c3      	ldr	r3, [r0, #12]
 80040cc:	f8d2 40c8 	ldr.w	r4, [r2, #200]	; 0xc8
 80040d0:	ea23 0304 	bic.w	r3, r3, r4
 80040d4:	60c3      	str	r3, [r0, #12]
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80040d6:	038c      	lsls	r4, r1, #14
 80040d8:	d506      	bpl.n	80040e8 <HAL_HRTIM_WaveformCountStop_IT+0x4c>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80040da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80040de:	6a14      	ldr	r4, [r2, #32]
 80040e0:	ea23 0304 	bic.w	r3, r3, r4
 80040e4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80040e8:	034b      	lsls	r3, r1, #13
 80040ea:	d506      	bpl.n	80040fa <HAL_HRTIM_WaveformCountStop_IT+0x5e>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80040ec:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80040f0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80040f2:	ea23 0304 	bic.w	r3, r3, r4
 80040f6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80040fa:	030c      	lsls	r4, r1, #12
 80040fc:	d506      	bpl.n	800410c <HAL_HRTIM_WaveformCountStop_IT+0x70>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80040fe:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
 8004102:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8004104:	ea23 0304 	bic.w	r3, r3, r4
 8004108:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800410c:	02cb      	lsls	r3, r1, #11
 800410e:	d506      	bpl.n	800411e <HAL_HRTIM_WaveformCountStop_IT+0x82>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8004110:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
 8004114:	6f54      	ldr	r4, [r2, #116]	; 0x74
 8004116:	ea23 0304 	bic.w	r3, r3, r4
 800411a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800411e:	028c      	lsls	r4, r1, #10
 8004120:	d507      	bpl.n	8004132 <HAL_HRTIM_WaveformCountStop_IT+0x96>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8004122:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8004126:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 800412a:	ea23 0304 	bic.w	r3, r3, r4
 800412e:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8004132:	024b      	lsls	r3, r1, #9
 8004134:	d507      	bpl.n	8004146 <HAL_HRTIM_WaveformCountStop_IT+0xaa>
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8004136:	f8d0 330c 	ldr.w	r3, [r0, #780]	; 0x30c
 800413a:	f8d2 40ac 	ldr.w	r4, [r2, #172]	; 0xac
 800413e:	ea23 0304 	bic.w	r3, r3, r4
 8004142:	f8c0 330c 	str.w	r3, [r0, #780]	; 0x30c
  do { delai--; } while (delai != 0U);
 8004146:	9b01      	ldr	r3, [sp, #4]
 8004148:	3b01      	subs	r3, #1
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f9      	bne.n	8004146 <HAL_HRTIM_WaveformCountStop_IT+0xaa>
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8004152:	6804      	ldr	r4, [r0, #0]
 8004154:	ea24 0101 	bic.w	r1, r4, r1
 8004158:	6001      	str	r1, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800415a:	2401      	movs	r4, #1
  return HAL_OK;
 800415c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hhrtim);
 800415e:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004162:	f882 40dd 	strb.w	r4, [r2, #221]	; 0xdd
}
 8004166:	b003      	add	sp, #12
 8004168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800416c:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 800416e:	2002      	movs	r0, #2
}
 8004170:	b003      	add	sp, #12
 8004172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_HRTIM_Fault1Callback>:
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <HAL_HRTIM_Fault2Callback>:
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <HAL_HRTIM_Fault3Callback>:
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <HAL_HRTIM_Fault4Callback>:
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop

08004188 <HAL_HRTIM_Fault5Callback>:
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <HAL_HRTIM_Fault6Callback>:
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop

08004190 <HAL_HRTIM_SystemFaultCallback>:
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_HRTIM_DLLCalibrationReadyCallback>:
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop

08004198 <HAL_HRTIM_BurstModePeriodCallback>:
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <HAL_HRTIM_SynchronizationEventCallback>:
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <HAL_HRTIM_RegistersUpdateCallback>:
}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop

080041a4 <HAL_HRTIM_RepetitionEventCallback>:
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop

080041a8 <HAL_HRTIM_Compare1EventCallback>:
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <HAL_HRTIM_Compare2EventCallback>:
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <HAL_HRTIM_Compare3EventCallback>:
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <HAL_HRTIM_Compare4EventCallback>:
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <HAL_HRTIM_Capture1EventCallback>:
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop

080041bc <HAL_HRTIM_Capture2EventCallback>:
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop

080041c0 <HAL_HRTIM_DelayedProtectionCallback>:
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <HAL_HRTIM_CounterResetCallback>:
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <HAL_HRTIM_Output1SetCallback>:
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop

080041cc <HAL_HRTIM_Output1ResetCallback>:
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop

080041d0 <HAL_HRTIM_Output2SetCallback>:
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop

080041d4 <HAL_HRTIM_Output2ResetCallback>:
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop

080041d8 <HAL_HRTIM_IRQHandler>:
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80041d8:	29ff      	cmp	r1, #255	; 0xff
{
 80041da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041de:	4607      	mov	r7, r0
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80041e0:	f000 8091 	beq.w	8004306 <HAL_HRTIM_IRQHandler+0x12e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80041e4:	2906      	cmp	r1, #6
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80041e6:	6803      	ldr	r3, [r0, #0]
 80041e8:	460d      	mov	r5, r1
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80041ea:	d050      	beq.n	800428e <HAL_HRTIM_IRQHandler+0xb6>
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80041ec:	1c4a      	adds	r2, r1, #1
 80041ee:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80041f2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80041f6:	6854      	ldr	r4, [r2, #4]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80041f8:	f8d3 608c 	ldr.w	r6, [r3, #140]	; 0x8c

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80041fc:	07e2      	lsls	r2, r4, #31
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80041fe:	ea4f 18c1 	mov.w	r8, r1, lsl #7
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8004202:	d502      	bpl.n	800420a <HAL_HRTIM_IRQHandler+0x32>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8004204:	07f2      	lsls	r2, r6, #31
 8004206:	f100 80ad 	bmi.w	8004364 <HAL_HRTIM_IRQHandler+0x18c>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800420a:	07a2      	lsls	r2, r4, #30
 800420c:	d502      	bpl.n	8004214 <HAL_HRTIM_IRQHandler+0x3c>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800420e:	07b3      	lsls	r3, r6, #30
 8004210:	f100 80b9 	bmi.w	8004386 <HAL_HRTIM_IRQHandler+0x1ae>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8004214:	0760      	lsls	r0, r4, #29
 8004216:	d502      	bpl.n	800421e <HAL_HRTIM_IRQHandler+0x46>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8004218:	0771      	lsls	r1, r6, #29
 800421a:	f100 80be 	bmi.w	800439a <HAL_HRTIM_IRQHandler+0x1c2>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800421e:	0722      	lsls	r2, r4, #28
 8004220:	d502      	bpl.n	8004228 <HAL_HRTIM_IRQHandler+0x50>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8004222:	0733      	lsls	r3, r6, #28
 8004224:	f100 80c3 	bmi.w	80043ae <HAL_HRTIM_IRQHandler+0x1d6>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8004228:	06e0      	lsls	r0, r4, #27
 800422a:	d502      	bpl.n	8004232 <HAL_HRTIM_IRQHandler+0x5a>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800422c:	06f1      	lsls	r1, r6, #27
 800422e:	f100 80c8 	bmi.w	80043c2 <HAL_HRTIM_IRQHandler+0x1ea>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8004232:	0662      	lsls	r2, r4, #25
 8004234:	d502      	bpl.n	800423c <HAL_HRTIM_IRQHandler+0x64>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8004236:	0673      	lsls	r3, r6, #25
 8004238:	f100 80cd 	bmi.w	80043d6 <HAL_HRTIM_IRQHandler+0x1fe>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 800423c:	0620      	lsls	r0, r4, #24
 800423e:	d502      	bpl.n	8004246 <HAL_HRTIM_IRQHandler+0x6e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8004240:	0631      	lsls	r1, r6, #24
 8004242:	f100 80d2 	bmi.w	80043ea <HAL_HRTIM_IRQHandler+0x212>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8004246:	05e2      	lsls	r2, r4, #23
 8004248:	d502      	bpl.n	8004250 <HAL_HRTIM_IRQHandler+0x78>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800424a:	05f3      	lsls	r3, r6, #23
 800424c:	f100 80d7 	bmi.w	80043fe <HAL_HRTIM_IRQHandler+0x226>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8004250:	05a0      	lsls	r0, r4, #22
 8004252:	d502      	bpl.n	800425a <HAL_HRTIM_IRQHandler+0x82>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8004254:	05b1      	lsls	r1, r6, #22
 8004256:	f100 80dd 	bmi.w	8004414 <HAL_HRTIM_IRQHandler+0x23c>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800425a:	0562      	lsls	r2, r4, #21
 800425c:	d502      	bpl.n	8004264 <HAL_HRTIM_IRQHandler+0x8c>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800425e:	0573      	lsls	r3, r6, #21
 8004260:	f100 80e3 	bmi.w	800442a <HAL_HRTIM_IRQHandler+0x252>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8004264:	0520      	lsls	r0, r4, #20
 8004266:	d502      	bpl.n	800426e <HAL_HRTIM_IRQHandler+0x96>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004268:	0531      	lsls	r1, r6, #20
 800426a:	f100 80e9 	bmi.w	8004440 <HAL_HRTIM_IRQHandler+0x268>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800426e:	04e2      	lsls	r2, r4, #19
 8004270:	d502      	bpl.n	8004278 <HAL_HRTIM_IRQHandler+0xa0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8004272:	04f3      	lsls	r3, r6, #19
 8004274:	f100 80ef 	bmi.w	8004456 <HAL_HRTIM_IRQHandler+0x27e>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8004278:	04a0      	lsls	r0, r4, #18
 800427a:	d502      	bpl.n	8004282 <HAL_HRTIM_IRQHandler+0xaa>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800427c:	04b1      	lsls	r1, r6, #18
 800427e:	f100 80f5 	bmi.w	800446c <HAL_HRTIM_IRQHandler+0x294>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8004282:	0462      	lsls	r2, r4, #17
 8004284:	d501      	bpl.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8004286:	0473      	lsls	r3, r6, #17
 8004288:	d472      	bmi.n	8004370 <HAL_HRTIM_IRQHandler+0x198>
}
 800428a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800428e:	f8d3 6388 	ldr.w	r6, [r3, #904]	; 0x388
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8004292:	f8d3 8390 	ldr.w	r8, [r3, #912]	; 0x390
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8004296:	685c      	ldr	r4, [r3, #4]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8004298:	68dd      	ldr	r5, [r3, #12]
  if((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 800429a:	03f1      	lsls	r1, r6, #15
 800429c:	d503      	bpl.n	80042a6 <HAL_HRTIM_IRQHandler+0xce>
    if((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 800429e:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80042a2:	f040 80ee 	bne.w	8004482 <HAL_HRTIM_IRQHandler+0x2aa>
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80042a6:	03b2      	lsls	r2, r6, #14
 80042a8:	d503      	bpl.n	80042b2 <HAL_HRTIM_IRQHandler+0xda>
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80042aa:	f418 3f00 	tst.w	r8, #131072	; 0x20000
 80042ae:	f040 80f5 	bne.w	800449c <HAL_HRTIM_IRQHandler+0x2c4>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80042b2:	07e3      	lsls	r3, r4, #31
 80042b4:	d502      	bpl.n	80042bc <HAL_HRTIM_IRQHandler+0xe4>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80042b6:	07ee      	lsls	r6, r5, #31
 80042b8:	f100 80f9 	bmi.w	80044ae <HAL_HRTIM_IRQHandler+0x2d6>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80042bc:	07a0      	lsls	r0, r4, #30
 80042be:	d502      	bpl.n	80042c6 <HAL_HRTIM_IRQHandler+0xee>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80042c0:	07a9      	lsls	r1, r5, #30
 80042c2:	f100 80fc 	bmi.w	80044be <HAL_HRTIM_IRQHandler+0x2e6>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80042c6:	0762      	lsls	r2, r4, #29
 80042c8:	d502      	bpl.n	80042d0 <HAL_HRTIM_IRQHandler+0xf8>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80042ca:	076b      	lsls	r3, r5, #29
 80042cc:	f100 80ff 	bmi.w	80044ce <HAL_HRTIM_IRQHandler+0x2f6>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80042d0:	0726      	lsls	r6, r4, #28
 80042d2:	d502      	bpl.n	80042da <HAL_HRTIM_IRQHandler+0x102>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80042d4:	0728      	lsls	r0, r5, #28
 80042d6:	f100 8102 	bmi.w	80044de <HAL_HRTIM_IRQHandler+0x306>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80042da:	06e1      	lsls	r1, r4, #27
 80042dc:	d502      	bpl.n	80042e4 <HAL_HRTIM_IRQHandler+0x10c>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80042de:	06ea      	lsls	r2, r5, #27
 80042e0:	f100 8105 	bmi.w	80044ee <HAL_HRTIM_IRQHandler+0x316>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80042e4:	06a3      	lsls	r3, r4, #26
 80042e6:	d502      	bpl.n	80042ee <HAL_HRTIM_IRQHandler+0x116>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80042e8:	06ae      	lsls	r6, r5, #26
 80042ea:	f100 8108 	bmi.w	80044fe <HAL_HRTIM_IRQHandler+0x326>
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80042ee:	0660      	lsls	r0, r4, #25
 80042f0:	d5cb      	bpl.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80042f2:	0669      	lsls	r1, r5, #25
 80042f4:	d5c9      	bpl.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2240      	movs	r2, #64	; 0x40
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80042fa:	4638      	mov	r0, r7
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80042fc:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80042fe:	2106      	movs	r1, #6
 8004300:	f7ff ff4e 	bl	80041a0 <HAL_HRTIM_RegistersUpdateCallback>
 8004304:	e7c1      	b.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004306:	6803      	ldr	r3, [r0, #0]
 8004308:	f8d3 4388 	ldr.w	r4, [r3, #904]	; 0x388
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800430c:	f8d3 5390 	ldr.w	r5, [r3, #912]	; 0x390
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8004310:	07e2      	lsls	r2, r4, #31
 8004312:	d502      	bpl.n	800431a <HAL_HRTIM_IRQHandler+0x142>
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8004314:	07ee      	lsls	r6, r5, #31
 8004316:	f100 80f9 	bmi.w	800450c <HAL_HRTIM_IRQHandler+0x334>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 800431a:	07a0      	lsls	r0, r4, #30
 800431c:	d502      	bpl.n	8004324 <HAL_HRTIM_IRQHandler+0x14c>
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800431e:	07a9      	lsls	r1, r5, #30
 8004320:	f100 80fa 	bmi.w	8004518 <HAL_HRTIM_IRQHandler+0x340>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004324:	0762      	lsls	r2, r4, #29
 8004326:	d502      	bpl.n	800432e <HAL_HRTIM_IRQHandler+0x156>
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8004328:	076b      	lsls	r3, r5, #29
 800432a:	f100 80fd 	bmi.w	8004528 <HAL_HRTIM_IRQHandler+0x350>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800432e:	0726      	lsls	r6, r4, #28
 8004330:	d502      	bpl.n	8004338 <HAL_HRTIM_IRQHandler+0x160>
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8004332:	0728      	lsls	r0, r5, #28
 8004334:	f100 8100 	bmi.w	8004538 <HAL_HRTIM_IRQHandler+0x360>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8004338:	06e1      	lsls	r1, r4, #27
 800433a:	d502      	bpl.n	8004342 <HAL_HRTIM_IRQHandler+0x16a>
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800433c:	06ea      	lsls	r2, r5, #27
 800433e:	f100 8103 	bmi.w	8004548 <HAL_HRTIM_IRQHandler+0x370>
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8004342:	0663      	lsls	r3, r4, #25
 8004344:	d502      	bpl.n	800434c <HAL_HRTIM_IRQHandler+0x174>
    if((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 8004346:	066e      	lsls	r6, r5, #25
 8004348:	f100 8106 	bmi.w	8004558 <HAL_HRTIM_IRQHandler+0x380>
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 800434c:	06a4      	lsls	r4, r4, #26
 800434e:	d59c      	bpl.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8004350:	06a8      	lsls	r0, r5, #26
 8004352:	d59a      	bpl.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2220      	movs	r2, #32
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8004358:	4638      	mov	r0, r7
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800435a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 800435e:	f7ff ff17 	bl	8004190 <HAL_HRTIM_SystemFaultCallback>
 8004362:	e792      	b.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8004364:	2201      	movs	r2, #1
 8004366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800436a:	f7ff ff1d 	bl	80041a8 <HAL_HRTIM_Compare1EventCallback>
 800436e:	e74c      	b.n	800420a <HAL_HRTIM_IRQHandler+0x32>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4443      	add	r3, r8
 8004374:	f44f 4280 	mov.w	r2, #16384	; 0x4000

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8004378:	4629      	mov	r1, r5
 800437a:	4638      	mov	r0, r7
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 800437c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8004380:	f7ff ff1e 	bl	80041c0 <HAL_HRTIM_DelayedProtectionCallback>
}
 8004384:	e781      	b.n	800428a <HAL_HRTIM_IRQHandler+0xb2>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4443      	add	r3, r8
 800438a:	2202      	movs	r2, #2
 800438c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8004390:	4629      	mov	r1, r5
 8004392:	4638      	mov	r0, r7
 8004394:	f7ff ff0a 	bl	80041ac <HAL_HRTIM_Compare2EventCallback>
 8004398:	e73c      	b.n	8004214 <HAL_HRTIM_IRQHandler+0x3c>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	4443      	add	r3, r8
 800439e:	2204      	movs	r2, #4
 80043a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80043a4:	4629      	mov	r1, r5
 80043a6:	4638      	mov	r0, r7
 80043a8:	f7ff ff02 	bl	80041b0 <HAL_HRTIM_Compare3EventCallback>
 80043ac:	e737      	b.n	800421e <HAL_HRTIM_IRQHandler+0x46>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4443      	add	r3, r8
 80043b2:	2208      	movs	r2, #8
 80043b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80043b8:	4629      	mov	r1, r5
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7ff fefa 	bl	80041b4 <HAL_HRTIM_Compare4EventCallback>
 80043c0:	e732      	b.n	8004228 <HAL_HRTIM_IRQHandler+0x50>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4443      	add	r3, r8
 80043c6:	2210      	movs	r2, #16
 80043c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80043cc:	4629      	mov	r1, r5
 80043ce:	4638      	mov	r0, r7
 80043d0:	f7ff fee8 	bl	80041a4 <HAL_HRTIM_RepetitionEventCallback>
 80043d4:	e72d      	b.n	8004232 <HAL_HRTIM_IRQHandler+0x5a>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4443      	add	r3, r8
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80043e0:	4629      	mov	r1, r5
 80043e2:	4638      	mov	r0, r7
 80043e4:	f7ff fedc 	bl	80041a0 <HAL_HRTIM_RegistersUpdateCallback>
 80043e8:	e728      	b.n	800423c <HAL_HRTIM_IRQHandler+0x64>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	4443      	add	r3, r8
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80043f4:	4629      	mov	r1, r5
 80043f6:	4638      	mov	r0, r7
 80043f8:	f7ff fede 	bl	80041b8 <HAL_HRTIM_Capture1EventCallback>
 80043fc:	e723      	b.n	8004246 <HAL_HRTIM_IRQHandler+0x6e>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	4443      	add	r3, r8
 8004402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800440a:	4629      	mov	r1, r5
 800440c:	4638      	mov	r0, r7
 800440e:	f7ff fed5 	bl	80041bc <HAL_HRTIM_Capture2EventCallback>
 8004412:	e71d      	b.n	8004250 <HAL_HRTIM_IRQHandler+0x78>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4443      	add	r3, r8
 8004418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8004420:	4629      	mov	r1, r5
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff fed0 	bl	80041c8 <HAL_HRTIM_Output1SetCallback>
 8004428:	e717      	b.n	800425a <HAL_HRTIM_IRQHandler+0x82>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	4443      	add	r3, r8
 800442e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8004436:	4629      	mov	r1, r5
 8004438:	4638      	mov	r0, r7
 800443a:	f7ff fec7 	bl	80041cc <HAL_HRTIM_Output1ResetCallback>
 800443e:	e711      	b.n	8004264 <HAL_HRTIM_IRQHandler+0x8c>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4443      	add	r3, r8
 8004444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800444c:	4629      	mov	r1, r5
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff febe 	bl	80041d0 <HAL_HRTIM_Output2SetCallback>
 8004454:	e70b      	b.n	800426e <HAL_HRTIM_IRQHandler+0x96>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4443      	add	r3, r8
 800445a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8004462:	4629      	mov	r1, r5
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff feb5 	bl	80041d4 <HAL_HRTIM_Output2ResetCallback>
 800446a:	e705      	b.n	8004278 <HAL_HRTIM_IRQHandler+0xa0>
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4443      	add	r3, r8
 8004470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8004478:	4629      	mov	r1, r5
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff fea2 	bl	80041c4 <HAL_HRTIM_CounterResetCallback>
 8004480:	e6ff      	b.n	8004282 <HAL_HRTIM_IRQHandler+0xaa>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8004482:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004486:	f8c3 138c 	str.w	r1, [r3, #908]	; 0x38c
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800448a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hhrtim);
 800448c:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_READY;
 800448e:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8004492:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8004496:	f7ff fe7d 	bl	8004194 <HAL_HRTIM_DLLCalibrationReadyCallback>
 800449a:	e704      	b.n	80042a6 <HAL_HRTIM_IRQHandler+0xce>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044a2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80044a6:	4638      	mov	r0, r7
 80044a8:	f7ff fe76 	bl	8004198 <HAL_HRTIM_BurstModePeriodCallback>
 80044ac:	e701      	b.n	80042b2 <HAL_HRTIM_IRQHandler+0xda>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044b4:	2106      	movs	r1, #6
 80044b6:	4638      	mov	r0, r7
 80044b8:	f7ff fe76 	bl	80041a8 <HAL_HRTIM_Compare1EventCallback>
 80044bc:	e6fe      	b.n	80042bc <HAL_HRTIM_IRQHandler+0xe4>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2202      	movs	r2, #2
 80044c2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044c4:	2106      	movs	r1, #6
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7ff fe70 	bl	80041ac <HAL_HRTIM_Compare2EventCallback>
 80044cc:	e6fb      	b.n	80042c6 <HAL_HRTIM_IRQHandler+0xee>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2204      	movs	r2, #4
 80044d2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044d4:	2106      	movs	r1, #6
 80044d6:	4638      	mov	r0, r7
 80044d8:	f7ff fe6a 	bl	80041b0 <HAL_HRTIM_Compare3EventCallback>
 80044dc:	e6f8      	b.n	80042d0 <HAL_HRTIM_IRQHandler+0xf8>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044e4:	2106      	movs	r1, #6
 80044e6:	4638      	mov	r0, r7
 80044e8:	f7ff fe64 	bl	80041b4 <HAL_HRTIM_Compare4EventCallback>
 80044ec:	e6f5      	b.n	80042da <HAL_HRTIM_IRQHandler+0x102>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2210      	movs	r2, #16
 80044f2:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044f4:	2106      	movs	r1, #6
 80044f6:	4638      	mov	r0, r7
 80044f8:	f7ff fe54 	bl	80041a4 <HAL_HRTIM_RepetitionEventCallback>
 80044fc:	e6f2      	b.n	80042e4 <HAL_HRTIM_IRQHandler+0x10c>
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2220      	movs	r2, #32
 8004502:	609a      	str	r2, [r3, #8]
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8004504:	4638      	mov	r0, r7
 8004506:	f7ff fe49 	bl	800419c <HAL_HRTIM_SynchronizationEventCallback>
 800450a:	e6f0      	b.n	80042ee <HAL_HRTIM_IRQHandler+0x116>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 800450c:	2201      	movs	r2, #1
 800450e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault1Callback(hhrtim);
 8004512:	f7ff fe31 	bl	8004178 <HAL_HRTIM_Fault1Callback>
 8004516:	e700      	b.n	800431a <HAL_HRTIM_IRQHandler+0x142>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2202      	movs	r2, #2
 800451c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault2Callback(hhrtim);
 8004520:	4638      	mov	r0, r7
 8004522:	f7ff fe2b 	bl	800417c <HAL_HRTIM_Fault2Callback>
 8004526:	e6fd      	b.n	8004324 <HAL_HRTIM_IRQHandler+0x14c>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2204      	movs	r2, #4
 800452c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault3Callback(hhrtim);
 8004530:	4638      	mov	r0, r7
 8004532:	f7ff fe25 	bl	8004180 <HAL_HRTIM_Fault3Callback>
 8004536:	e6fa      	b.n	800432e <HAL_HRTIM_IRQHandler+0x156>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2208      	movs	r2, #8
 800453c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault4Callback(hhrtim);
 8004540:	4638      	mov	r0, r7
 8004542:	f7ff fe1f 	bl	8004184 <HAL_HRTIM_Fault4Callback>
 8004546:	e6f7      	b.n	8004338 <HAL_HRTIM_IRQHandler+0x160>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2210      	movs	r2, #16
 800454c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault5Callback(hhrtim);
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff fe19 	bl	8004188 <HAL_HRTIM_Fault5Callback>
 8004556:	e6f4      	b.n	8004342 <HAL_HRTIM_IRQHandler+0x16a>
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
      HAL_HRTIM_Fault6Callback(hhrtim);
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff fe13 	bl	800418c <HAL_HRTIM_Fault6Callback>
 8004566:	e6f1      	b.n	800434c <HAL_HRTIM_IRQHandler+0x174>

08004568 <HAL_OPAMP_MspInit>:
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OPAMP_MspInit could be implemented in the user file
   */

  /* Example */
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop

0800456c <HAL_OPAMP_Init>:
  if (hopamp == NULL)
 800456c:	2800      	cmp	r0, #0
 800456e:	d07d      	beq.n	800466c <HAL_OPAMP_Init+0x100>
{
 8004570:	b570      	push	{r4, r5, r6, lr}
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004572:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004576:	2b05      	cmp	r3, #5
{
 8004578:	b082      	sub	sp, #8
 800457a:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800457c:	d057      	beq.n	800462e <HAL_OPAMP_Init+0xc2>
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800457e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004582:	2b02      	cmp	r3, #2
 8004584:	d053      	beq.n	800462e <HAL_OPAMP_Init+0xc2>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004586:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <HAL_OPAMP_Init+0x104>)
 8004588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	9b01      	ldr	r3, [sp, #4]
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800459a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800459e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045a2:	b90b      	cbnz	r3, 80045a8 <HAL_OPAMP_Init+0x3c>
      hopamp->Lock = HAL_UNLOCKED;
 80045a4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    HAL_OPAMP_MspInit(hopamp);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff ffdd 	bl	8004568 <HAL_OPAMP_MspInit>
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80045ae:	68a3      	ldr	r3, [r4, #8]
 80045b0:	f023 0220 	bic.w	r2, r3, #32
 80045b4:	2a40      	cmp	r2, #64	; 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80045b6:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80045b8:	d03c      	beq.n	8004634 <HAL_OPAMP_Init+0xc8>
      MODIFY_REG(hopamp->Instance->CSR,
 80045ba:	6860      	ldr	r0, [r4, #4]
 80045bc:	68e6      	ldr	r6, [r4, #12]
 80045be:	6811      	ldr	r1, [r2, #0]
 80045c0:	6925      	ldr	r5, [r4, #16]
 80045c2:	4303      	orrs	r3, r0
 80045c4:	4333      	orrs	r3, r6
 80045c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR,
 80045c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80045ca:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80045cc:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 80045d0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80045d2:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80045d4:	4333      	orrs	r3, r6
 80045d6:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 80045da:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80045dc:	432b      	orrs	r3, r5
 80045de:	4925      	ldr	r1, [pc, #148]	; (8004674 <HAL_OPAMP_Init+0x108>)
 80045e0:	6815      	ldr	r5, [r2, #0]
 80045e2:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80045e6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80045ea:	7d20      	ldrb	r0, [r4, #20]
 80045ec:	4029      	ands	r1, r5
 80045ee:	2801      	cmp	r0, #1
 80045f0:	ea43 0301 	orr.w	r3, r3, r1
 80045f4:	bf0c      	ite	eq
 80045f6:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80045fa:	2100      	movne	r1, #0
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004600:	6993      	ldr	r3, [r2, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db09      	blt.n	800461a <HAL_OPAMP_Init+0xae>
      MODIFY_REG(hopamp->Instance->TCMR,
 8004606:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 800460a:	6a20      	ldr	r0, [r4, #32]
 800460c:	6991      	ldr	r1, [r2, #24]
 800460e:	432b      	orrs	r3, r5
 8004610:	4303      	orrs	r3, r0
 8004612:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004616:	430b      	orrs	r3, r1
 8004618:	6193      	str	r3, [r2, #24]
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800461a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800461e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004622:	bb03      	cbnz	r3, 8004666 <HAL_OPAMP_Init+0xfa>
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004624:	2301      	movs	r3, #1
 8004626:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800462a:	b002      	add	sp, #8
 800462c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800462e:	2001      	movs	r0, #1
}
 8004630:	b002      	add	sp, #8
 8004632:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004634:	6866      	ldr	r6, [r4, #4]
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	6920      	ldr	r0, [r4, #16]
 800463a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800463c:	4333      	orrs	r3, r6
 800463e:	4303      	orrs	r3, r0
 8004640:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004644:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8004646:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004648:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 800464a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800464c:	4303      	orrs	r3, r0
 800464e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004650:	6816      	ldr	r6, [r2, #0]
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <HAL_OPAMP_Init+0x108>)
 8004654:	432b      	orrs	r3, r5
 8004656:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004658:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 800465c:	4031      	ands	r1, r6
 800465e:	7d20      	ldrb	r0, [r4, #20]
 8004660:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004664:	e7c3      	b.n	80045ee <HAL_OPAMP_Init+0x82>
    return status;
 8004666:	2000      	movs	r0, #0
}
 8004668:	b002      	add	sp, #8
 800466a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800466c:	2001      	movs	r0, #1
}
 800466e:	4770      	bx	lr
 8004670:	40021000 	.word	0x40021000
 8004674:	e0003e11 	.word	0xe0003e11

08004678 <HAL_OPAMP_Start>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004678:	b140      	cbz	r0, 800468c <HAL_OPAMP_Start+0x14>
  {
    status = HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800467a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800467e:	2a05      	cmp	r2, #5
 8004680:	4603      	mov	r3, r0
 8004682:	d003      	beq.n	800468c <HAL_OPAMP_Start+0x14>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004684:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8004688:	2a01      	cmp	r2, #1
 800468a:	d001      	beq.n	8004690 <HAL_OPAMP_Start+0x18>
    status = HAL_ERROR;
 800468c:	2001      	movs	r0, #1
    }


  }
  return status;
}
 800468e:	4770      	bx	lr
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004690:	6801      	ldr	r1, [r0, #0]
 8004692:	680a      	ldr	r2, [r1, #0]
{
 8004694:	b410      	push	{r4}
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004696:	f042 0201 	orr.w	r2, r2, #1
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800469a:	2404      	movs	r4, #4
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800469c:	600a      	str	r2, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800469e:	f883 403a 	strb.w	r4, [r3, #58]	; 0x3a
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2000      	movs	r0, #0
}
 80046a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <HAL_OPAMPEx_SelfCalibrateAll>:
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 80046ac:	b198      	cbz	r0, 80046d6 <HAL_OPAMPEx_SelfCalibrateAll+0x2a>
 80046ae:	b191      	cbz	r1, 80046d6 <HAL_OPAMPEx_SelfCalibrateAll+0x2a>
 80046b0:	b18a      	cbz	r2, 80046d6 <HAL_OPAMPEx_SelfCalibrateAll+0x2a>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
 80046b2:	b183      	cbz	r3, 80046d6 <HAL_OPAMPEx_SelfCalibrateAll+0x2a>
{
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	b09b      	sub	sp, #108	; 0x6c
 80046ba:	4604      	mov	r4, r0
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
 80046bc:	9824      	ldr	r0, [sp, #144]	; 0x90
 80046be:	b130      	cbz	r0, 80046ce <HAL_OPAMPEx_SelfCalibrateAll+0x22>
 80046c0:	9825      	ldr	r0, [sp, #148]	; 0x94
 80046c2:	b120      	cbz	r0, 80046ce <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#endif
     )
  {
    return HAL_ERROR;
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 80046c4:	f894 503a 	ldrb.w	r5, [r4, #58]	; 0x3a
 80046c8:	2d01      	cmp	r5, #1
 80046ca:	b2e8      	uxtb	r0, r5
 80046cc:	d005      	beq.n	80046da <HAL_OPAMPEx_SelfCalibrateAll+0x2e>
    return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
#endif

  }

  return HAL_OK;
}
 80046d0:	b01b      	add	sp, #108	; 0x6c
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80046d6:	2001      	movs	r0, #1
}
 80046d8:	4770      	bx	lr
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 80046da:	f891 503a 	ldrb.w	r5, [r1, #58]	; 0x3a
 80046de:	2d01      	cmp	r5, #1
 80046e0:	d1f6      	bne.n	80046d0 <HAL_OPAMPEx_SelfCalibrateAll+0x24>
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 80046e2:	f892 503a 	ldrb.w	r5, [r2, #58]	; 0x3a
 80046e6:	2d01      	cmp	r5, #1
 80046e8:	b2e8      	uxtb	r0, r5
 80046ea:	d1f0      	bne.n	80046ce <HAL_OPAMPEx_SelfCalibrateAll+0x22>
  else if (hopamp4->State != HAL_OPAMP_STATE_READY)
 80046ec:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a
 80046f0:	2d01      	cmp	r5, #1
 80046f2:	d1ed      	bne.n	80046d0 <HAL_OPAMPEx_SelfCalibrateAll+0x24>
  else if (hopamp5->State != HAL_OPAMP_STATE_READY)
 80046f4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80046f6:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
 80046fa:	2d01      	cmp	r5, #1
 80046fc:	b2e8      	uxtb	r0, r5
 80046fe:	d1e6      	bne.n	80046ce <HAL_OPAMPEx_SelfCalibrateAll+0x22>
  else if (hopamp6->State != HAL_OPAMP_STATE_READY)
 8004700:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8004702:	f895 503a 	ldrb.w	r5, [r5, #58]	; 0x3a
 8004706:	2d01      	cmp	r5, #1
 8004708:	d1e2      	bne.n	80046d0 <HAL_OPAMPEx_SelfCalibrateAll+0x24>
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 800470a:	f8d4 a000 	ldr.w	sl, [r4]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 800470e:	9824      	ldr	r0, [sp, #144]	; 0x90
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004710:	f8da 5000 	ldr.w	r5, [sl]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004714:	6806      	ldr	r6, [r0, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004716:	9825      	ldr	r0, [sp, #148]	; 0x94
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004718:	f8d1 e000 	ldr.w	lr, [r1]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 800471c:	f8d2 c000 	ldr.w	ip, [r2]
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004720:	681f      	ldr	r7, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004722:	6800      	ldr	r0, [r0, #0]
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004724:	f045 0502 	orr.w	r5, r5, #2
 8004728:	f8ca 5000 	str.w	r5, [sl]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 800472c:	f8de 5000 	ldr.w	r5, [lr]
 8004730:	f045 0502 	orr.w	r5, r5, #2
 8004734:	f8ce 5000 	str.w	r5, [lr]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004738:	f8dc 5000 	ldr.w	r5, [ip]
 800473c:	f045 0502 	orr.w	r5, r5, #2
 8004740:	f8cc 5000 	str.w	r5, [ip]
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004744:	683d      	ldr	r5, [r7, #0]
 8004746:	f045 0502 	orr.w	r5, r5, #2
 800474a:	603d      	str	r5, [r7, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 800474c:	6835      	ldr	r5, [r6, #0]
 800474e:	f045 0502 	orr.w	r5, r5, #2
 8004752:	6035      	str	r5, [r6, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004754:	6805      	ldr	r5, [r0, #0]
 8004756:	f045 0502 	orr.w	r5, r5, #2
 800475a:	6005      	str	r5, [r0, #0]
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 800475c:	f8da 5000 	ldr.w	r5, [sl]
 8004760:	f045 0510 	orr.w	r5, r5, #16
 8004764:	f8ca 5000 	str.w	r5, [sl]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004768:	f8de 5000 	ldr.w	r5, [lr]
 800476c:	f045 0510 	orr.w	r5, r5, #16
 8004770:	f8ce 5000 	str.w	r5, [lr]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004774:	f8dc 5000 	ldr.w	r5, [ip]
 8004778:	f045 0510 	orr.w	r5, r5, #16
 800477c:	f8cc 5000 	str.w	r5, [ip]
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004780:	683d      	ldr	r5, [r7, #0]
 8004782:	f045 0510 	orr.w	r5, r5, #16
 8004786:	603d      	str	r5, [r7, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004788:	6835      	ldr	r5, [r6, #0]
 800478a:	f045 0510 	orr.w	r5, r5, #16
 800478e:	6035      	str	r5, [r6, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004790:	6805      	ldr	r5, [r0, #0]
 8004792:	f045 0510 	orr.w	r5, r5, #16
 8004796:	6005      	str	r5, [r0, #0]
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004798:	f8da 5000 	ldr.w	r5, [sl]
 800479c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047a0:	f8ca 5000 	str.w	r5, [sl]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 80047a4:	f8de 5000 	ldr.w	r5, [lr]
 80047a8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047ac:	f8ce 5000 	str.w	r5, [lr]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 80047b0:	f8dc 5000 	ldr.w	r5, [ip]
 80047b4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047b8:	f8cc 5000 	str.w	r5, [ip]
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_CALON);
 80047bc:	683d      	ldr	r5, [r7, #0]
 80047be:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047c2:	603d      	str	r5, [r7, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
 80047c4:	6835      	ldr	r5, [r6, #0]
 80047c6:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047ca:	6035      	str	r5, [r6, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
 80047cc:	6805      	ldr	r5, [r0, #0]
 80047ce:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80047d2:	6005      	str	r5, [r0, #0]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047d4:	f8da 5000 	ldr.w	r5, [sl]
 80047d8:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 80047dc:	f8ca 5000 	str.w	r5, [sl]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047e0:	f8de 5000 	ldr.w	r5, [lr]
 80047e4:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 80047e8:	f8ce 5000 	str.w	r5, [lr]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047ec:	f8dc 5000 	ldr.w	r5, [ip]
 80047f0:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 80047f4:	f8cc 5000 	str.w	r5, [ip]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 80047f8:	683d      	ldr	r5, [r7, #0]
 80047fa:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 80047fe:	603d      	str	r5, [r7, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004800:	6835      	ldr	r5, [r6, #0]
 8004802:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 8004806:	6035      	str	r5, [r6, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8004808:	6805      	ldr	r5, [r0, #0]
 800480a:	f445 5540 	orr.w	r5, r5, #12288	; 0x3000
 800480e:	6005      	str	r5, [r0, #0]
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004810:	f8da 5000 	ldr.w	r5, [sl]
 8004814:	f045 0501 	orr.w	r5, r5, #1
 8004818:	f8ca 5000 	str.w	r5, [sl]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800481c:	f8de 5000 	ldr.w	r5, [lr]
 8004820:	f045 0501 	orr.w	r5, r5, #1
 8004824:	f8ce 5000 	str.w	r5, [lr]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004828:	f8dc 5000 	ldr.w	r5, [ip]
 800482c:	f045 0501 	orr.w	r5, r5, #1
 8004830:	f8cc 5000 	str.w	r5, [ip]
    SET_BIT(hopamp4->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004834:	683d      	ldr	r5, [r7, #0]
 8004836:	f045 0501 	orr.w	r5, r5, #1
 800483a:	603d      	str	r5, [r7, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800483c:	6835      	ldr	r5, [r6, #0]
    delta = 8UL;
 800483e:	9402      	str	r4, [sp, #8]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004840:	f045 0501 	orr.w	r5, r5, #1
 8004844:	6035      	str	r5, [r6, #0]
    trimmingvaluen6 = 16UL;
 8004846:	f04f 0810 	mov.w	r8, #16
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800484a:	6805      	ldr	r5, [r0, #0]
    delta = 8UL;
 800484c:	9104      	str	r1, [sp, #16]
    trimmingvaluen4 = 16UL;
 800484e:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004852:	f045 0501 	orr.w	r5, r5, #1
 8004856:	f04f 0904 	mov.w	r9, #4
 800485a:	6005      	str	r5, [r0, #0]
    delta = 8UL;
 800485c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004860:	4664      	mov	r4, ip
 8004862:	4671      	mov	r1, lr
 8004864:	46b4      	mov	ip, r6
 8004866:	4686      	mov	lr, r0
 8004868:	9205      	str	r2, [sp, #20]
 800486a:	4638      	mov	r0, r7
 800486c:	4652      	mov	r2, sl
    trimmingvaluen2 = 16UL;
 800486e:	f8cd 800c 	str.w	r8, [sp, #12]
    trimmingvaluen1 = 16UL;
 8004872:	46c3      	mov	fp, r8
    delta = 8UL;
 8004874:	2508      	movs	r5, #8
 8004876:	46c1      	mov	r9, r8
 8004878:	4646      	mov	r6, r8
 800487a:	4647      	mov	r7, r8
 800487c:	46c2      	mov	sl, r8
 800487e:	9306      	str	r3, [sp, #24]
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004880:	6813      	ldr	r3, [r2, #0]
 8004882:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004886:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 800488a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800488c:	680b      	ldr	r3, [r1, #0]
 800488e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004892:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
 8004896:	600b      	str	r3, [r1, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800489e:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 80048a2:	6023      	str	r3, [r4, #0]
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80048aa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80048ae:	6003      	str	r3, [r0, #0]
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80048b0:	f8dc 3000 	ldr.w	r3, [ip]
 80048b4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80048b8:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80048bc:	f8cc 3000 	str.w	r3, [ip]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 80048c0:	f8de 3000 	ldr.w	r3, [lr]
 80048c4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80048c8:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80048cc:	f8ce 3000 	str.w	r3, [lr]
      HAL_Delay(2);
 80048d0:	2002      	movs	r0, #2
 80048d2:	f7fc fc0b 	bl	80010ec <HAL_Delay>
      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048d6:	9b02      	ldr	r3, [sp, #8]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	005b      	lsls	r3, r3, #1
      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	680b      	ldr	r3, [r1, #0]
        trimmingvaluen1 += delta;
 80048e4:	bf4c      	ite	mi
 80048e6:	44a9      	addmi	r9, r5
        trimmingvaluen1 -= delta;
 80048e8:	eba9 0905 	subpl.w	r9, r9, r5
      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048ec:	005c      	lsls	r4, r3, #1
      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048ee:	9b05      	ldr	r3, [sp, #20]
 80048f0:	681c      	ldr	r4, [r3, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
        trimmingvaluen2 += delta;
 80048f4:	bf4c      	ite	mi
 80048f6:	44aa      	addmi	sl, r5
        trimmingvaluen2 -= delta;
 80048f8:	ebaa 0a05 	subpl.w	sl, sl, r5
      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048fc:	0058      	lsls	r0, r3, #1
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80048fe:	9b06      	ldr	r3, [sp, #24]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	6803      	ldr	r3, [r0, #0]
        trimmingvaluen3 += delta;
 8004904:	bf4c      	ite	mi
 8004906:	44ab      	addmi	fp, r5
        trimmingvaluen3 -= delta;
 8004908:	ebab 0b05 	subpl.w	fp, fp, r5
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800490c:	005b      	lsls	r3, r3, #1
      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800490e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004910:	f8d3 c000 	ldr.w	ip, [r3]
 8004914:	f8dc 3000 	ldr.w	r3, [ip]
        trimmingvaluen4 += delta;
 8004918:	bf4c      	ite	mi
 800491a:	1976      	addmi	r6, r6, r5
        trimmingvaluen4 -= delta;
 800491c:	1b76      	subpl	r6, r6, r5
      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800491e:	005b      	lsls	r3, r3, #1
      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004920:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004922:	f8d3 e000 	ldr.w	lr, [r3]
 8004926:	f8de 3000 	ldr.w	r3, [lr]
        trimmingvaluen5 += delta;
 800492a:	bf4c      	ite	mi
 800492c:	197f      	addmi	r7, r7, r5
        trimmingvaluen5 -= delta;
 800492e:	1b7f      	subpl	r7, r7, r5
      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004930:	005b      	lsls	r3, r3, #1
    while (delta != 0UL)
 8004932:	9b01      	ldr	r3, [sp, #4]
        trimmingvaluen6 += delta;
 8004934:	bf4c      	ite	mi
 8004936:	44a8      	addmi	r8, r5
        trimmingvaluen6 -= delta;
 8004938:	eba8 0805 	subpl.w	r8, r8, r5
    while (delta != 0UL)
 800493c:	3b01      	subs	r3, #1
      delta >>= 1;
 800493e:	ea4f 0555 	mov.w	r5, r5, lsr #1
    while (delta != 0UL)
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	d19c      	bne.n	8004880 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004946:	f8cd a00c 	str.w	sl, [sp, #12]
 800494a:	4692      	mov	sl, r2
 800494c:	9b06      	ldr	r3, [sp, #24]
 800494e:	f8da 5000 	ldr.w	r5, [sl]
 8004952:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800495a:	9a05      	ldr	r2, [sp, #20]
 800495c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004960:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 8004964:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8004968:	f8ca 5000 	str.w	r5, [sl]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 800496c:	680d      	ldr	r5, [r1, #0]
 800496e:	970c      	str	r7, [sp, #48]	; 0x30
 8004970:	46b3      	mov	fp, r6
 8004972:	4666      	mov	r6, ip
 8004974:	46a4      	mov	ip, r4
 8004976:	9c02      	ldr	r4, [sp, #8]
 8004978:	9202      	str	r2, [sp, #8]
 800497a:	9a03      	ldr	r2, [sp, #12]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 800497c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004980:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 8004984:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8004988:	600d      	str	r5, [r1, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800498a:	f8dc 5000 	ldr.w	r5, [ip]
 800498e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004990:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 8004994:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 8004998:	46b9      	mov	r9, r7
 800499a:	4607      	mov	r7, r0
 800499c:	f8cc 5000 	str.w	r5, [ip]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80049a0:	683d      	ldr	r5, [r7, #0]
 80049a2:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 80049a6:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80049aa:	603d      	str	r5, [r7, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80049ac:	6835      	ldr	r5, [r6, #0]
 80049ae:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 80049b2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80049b6:	6035      	str	r5, [r6, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 80049b8:	f8de 5000 	ldr.w	r5, [lr]
 80049bc:	f025 55f8 	bic.w	r5, r5, #520093696	; 0x1f000000
 80049c0:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 80049c4:	f8ce 5000 	str.w	r5, [lr]
    HAL_Delay(2);
 80049c8:	2002      	movs	r0, #2
 80049ca:	f7fc fb8f 	bl	80010ec <HAL_Delay>
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80049ce:	46da      	mov	sl, fp
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80049d0:	f8d4 b000 	ldr.w	fp, [r4]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80049d4:	9a03      	ldr	r2, [sp, #12]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80049d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80049d8:	f8db 0000 	ldr.w	r0, [fp]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80049dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80049de:	4653      	mov	r3, sl
 80049e0:	061b      	lsls	r3, r3, #24
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80049e2:	464f      	mov	r7, r9
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80049e4:	0612      	lsls	r2, r2, #24
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 80049e6:	9311      	str	r3, [sp, #68]	; 0x44
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80049e8:	063b      	lsls	r3, r7, #24
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80049ea:	062e      	lsls	r6, r5, #24
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80049ec:	9212      	str	r2, [sp, #72]	; 0x48
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 80049ee:	9313      	str	r3, [sp, #76]	; 0x4c
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80049f0:	060a      	lsls	r2, r1, #24
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 80049f2:	ea4f 6308 	mov.w	r3, r8, lsl #24
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80049f6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80049fa:	9214      	str	r2, [sp, #80]	; 0x50
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 80049fc:	9315      	str	r3, [sp, #84]	; 0x54
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80049fe:	9904      	ldr	r1, [sp, #16]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004a00:	9610      	str	r6, [sp, #64]	; 0x40
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a02:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8004a06:	d00b      	beq.n	8004a20 <HAL_OPAMPEx_SelfCalibrateAll+0x374>
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004a08:	f8db 0000 	ldr.w	r0, [fp]
      trimmingvaluen1++;
 8004a0c:	3501      	adds	r5, #1
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004a0e:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
 8004a12:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8004a16:	f8cb 0000 	str.w	r0, [fp]
 8004a1a:	0628      	lsls	r0, r5, #24
      trimmingvaluen1++;
 8004a1c:	950e      	str	r5, [sp, #56]	; 0x38
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004a1e:	9010      	str	r0, [sp, #64]	; 0x40
    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a20:	f8d1 a000 	ldr.w	sl, [r1]
 8004a24:	f8da 0000 	ldr.w	r0, [sl]
 8004a28:	0040      	lsls	r0, r0, #1
 8004a2a:	d50c      	bpl.n	8004a46 <HAL_OPAMPEx_SelfCalibrateAll+0x39a>
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004a2c:	f8da 0000 	ldr.w	r0, [sl]
      trimmingvaluen2++;
 8004a30:	9d03      	ldr	r5, [sp, #12]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004a32:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      trimmingvaluen2++;
 8004a36:	3501      	adds	r5, #1
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004a38:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8004a3c:	f8ca 0000 	str.w	r0, [sl]
 8004a40:	0628      	lsls	r0, r5, #24
      trimmingvaluen2++;
 8004a42:	9503      	str	r5, [sp, #12]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004a44:	9012      	str	r0, [sp, #72]	; 0x48
    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a46:	f8d2 e000 	ldr.w	lr, [r2]
 8004a4a:	f8de 0000 	ldr.w	r0, [lr]
 8004a4e:	0047      	lsls	r7, r0, #1
 8004a50:	d50c      	bpl.n	8004a6c <HAL_OPAMPEx_SelfCalibrateAll+0x3c0>
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004a52:	f8de 0000 	ldr.w	r0, [lr]
      trimmingvaluen3++;
 8004a56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004a58:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      trimmingvaluen3++;
 8004a5c:	3501      	adds	r5, #1
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004a5e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8004a62:	f8ce 0000 	str.w	r0, [lr]
 8004a66:	0628      	lsls	r0, r5, #24
      trimmingvaluen3++;
 8004a68:	950a      	str	r5, [sp, #40]	; 0x28
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004a6a:	9014      	str	r0, [sp, #80]	; 0x50
    if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a6c:	f8d3 c000 	ldr.w	ip, [r3]
 8004a70:	f8dc 0000 	ldr.w	r0, [ip]
 8004a74:	0046      	lsls	r6, r0, #1
 8004a76:	d50c      	bpl.n	8004a92 <HAL_OPAMPEx_SelfCalibrateAll+0x3e6>
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8004a78:	f8dc 0000 	ldr.w	r0, [ip]
      trimmingvaluen4++;
 8004a7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8004a7e:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      trimmingvaluen4++;
 8004a82:	3501      	adds	r5, #1
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8004a84:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8004a88:	f8cc 0000 	str.w	r0, [ip]
 8004a8c:	0628      	lsls	r0, r5, #24
      trimmingvaluen4++;
 8004a8e:	950b      	str	r5, [sp, #44]	; 0x2c
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8004a90:	9011      	str	r0, [sp, #68]	; 0x44
    if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004a92:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004a94:	6807      	ldr	r7, [r0, #0]
 8004a96:	6838      	ldr	r0, [r7, #0]
 8004a98:	0045      	lsls	r5, r0, #1
 8004a9a:	d50a      	bpl.n	8004ab2 <HAL_OPAMPEx_SelfCalibrateAll+0x406>
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8004a9c:	6838      	ldr	r0, [r7, #0]
      trimmingvaluen5++;
 8004a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8004aa0:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      trimmingvaluen5++;
 8004aa4:	3501      	adds	r5, #1
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8004aa6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8004aaa:	6038      	str	r0, [r7, #0]
 8004aac:	0628      	lsls	r0, r5, #24
      trimmingvaluen5++;
 8004aae:	950c      	str	r5, [sp, #48]	; 0x30
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8004ab0:	9013      	str	r0, [sp, #76]	; 0x4c
    if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004ab2:	9825      	ldr	r0, [sp, #148]	; 0x94
 8004ab4:	6806      	ldr	r6, [r0, #0]
 8004ab6:	6830      	ldr	r0, [r6, #0]
 8004ab8:	0040      	lsls	r0, r0, #1
 8004aba:	d50a      	bpl.n	8004ad2 <HAL_OPAMPEx_SelfCalibrateAll+0x426>
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8004abc:	6830      	ldr	r0, [r6, #0]
      trimmingvaluen6++;
 8004abe:	f108 0801 	add.w	r8, r8, #1
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8004ac2:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
 8004ac6:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
 8004aca:	6030      	str	r0, [r6, #0]
 8004acc:	ea4f 6008 	mov.w	r0, r8, lsl #24
 8004ad0:	9015      	str	r0, [sp, #84]	; 0x54
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004ad2:	f8db 0000 	ldr.w	r0, [fp]
    delta = 8UL;
 8004ad6:	9709      	str	r7, [sp, #36]	; 0x24
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004ad8:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004adc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004ae0:	f8cb 0000 	str.w	r0, [fp]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004ae4:	f8da 0000 	ldr.w	r0, [sl]
    delta = 8UL;
 8004ae8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004aec:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004af0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004af4:	f8ca 0000 	str.w	r0, [sl]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004af8:	f8de 0000 	ldr.w	r0, [lr]
    delta = 8UL;
 8004afc:	9402      	str	r4, [sp, #8]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004afe:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004b02:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004b06:	f8ce 0000 	str.w	r0, [lr]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b0a:	f8dc 0000 	ldr.w	r0, [ip]
    delta = 8UL;
 8004b0e:	9106      	str	r1, [sp, #24]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b10:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004b14:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004b18:	f8cc 0000 	str.w	r0, [ip]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b1c:	6838      	ldr	r0, [r7, #0]
    delta = 8UL;
 8004b1e:	9207      	str	r2, [sp, #28]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b20:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004b24:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004b28:	6038      	str	r0, [r7, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b2a:	6830      	ldr	r0, [r6, #0]
    delta = 8UL;
 8004b2c:	9308      	str	r3, [sp, #32]
    trimmingvaluep6 = 16UL;
 8004b2e:	f04f 0910 	mov.w	r9, #16
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b32:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8004b36:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    trimmingvaluep3 = 16UL;
 8004b3a:	e9cd 9904 	strd	r9, r9, [sp, #16]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b3e:	6030      	str	r0, [r6, #0]
    delta = 8UL;
 8004b40:	4667      	mov	r7, ip
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b42:	2004      	movs	r0, #4
    delta = 8UL;
 8004b44:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8004b48:	9001      	str	r0, [sp, #4]
    delta = 8UL;
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	4670      	mov	r0, lr
 8004b4e:	465a      	mov	r2, fp
 8004b50:	46b6      	mov	lr, r6
    trimmingvaluep1 = 16UL;
 8004b52:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    delta = 8UL;
 8004b56:	2508      	movs	r5, #8
 8004b58:	464e      	mov	r6, r9
 8004b5a:	46c8      	mov	r8, r9
 8004b5c:	464c      	mov	r4, r9
 8004b5e:	46ca      	mov	sl, r9
 8004b60:	46cb      	mov	fp, r9
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004b68:	ea43 43c4 	orr.w	r3, r3, r4, lsl #19
 8004b6c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004b6e:	680b      	ldr	r3, [r1, #0]
 8004b70:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004b74:	ea43 43c8 	orr.w	r3, r3, r8, lsl #19
 8004b78:	600b      	str	r3, [r1, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004b80:	ea43 43ca 	orr.w	r3, r3, sl, lsl #19
 8004b84:	6003      	str	r3, [r0, #0]
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004b8c:	ea43 43cb 	orr.w	r3, r3, fp, lsl #19
 8004b90:	603b      	str	r3, [r7, #0]
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004b92:	f8dc 3000 	ldr.w	r3, [ip]
 8004b96:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004b9a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8004b9e:	f8cc 3000 	str.w	r3, [ip]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004ba2:	f8de 3000 	ldr.w	r3, [lr]
 8004ba6:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004baa:	ea43 43c9 	orr.w	r3, r3, r9, lsl #19
 8004bae:	f8ce 3000 	str.w	r3, [lr]
      HAL_Delay(2);
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	f7fc fa9a 	bl	80010ec <HAL_Delay>
      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bb8:	9b02      	ldr	r3, [sp, #8]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	0059      	lsls	r1, r3, #1
      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bc0:	9b06      	ldr	r3, [sp, #24]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	680b      	ldr	r3, [r1, #0]
        trimmingvaluep1 += delta;
 8004bc6:	bf4c      	ite	mi
 8004bc8:	1964      	addmi	r4, r4, r5
        trimmingvaluep1 -= delta;
 8004bca:	1b64      	subpl	r4, r4, r5
      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bcc:	005b      	lsls	r3, r3, #1
      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bce:	9b07      	ldr	r3, [sp, #28]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	6803      	ldr	r3, [r0, #0]
        trimmingvaluep2 += delta;
 8004bd4:	bf4c      	ite	mi
 8004bd6:	44a8      	addmi	r8, r5
        trimmingvaluep2 -= delta;
 8004bd8:	eba8 0805 	subpl.w	r8, r8, r5
      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bdc:	005f      	lsls	r7, r3, #1
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bde:	9b08      	ldr	r3, [sp, #32]
 8004be0:	681f      	ldr	r7, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
        trimmingvaluep3 += delta;
 8004be4:	bf4c      	ite	mi
 8004be6:	44aa      	addmi	sl, r5
        trimmingvaluep3 -= delta;
 8004be8:	ebaa 0a05 	subpl.w	sl, sl, r5
      if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bec:	005b      	lsls	r3, r3, #1
      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004bee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004bf0:	f8d3 c000 	ldr.w	ip, [r3]
 8004bf4:	f8dc 3000 	ldr.w	r3, [ip]
        trimmingvaluep4 += delta;
 8004bf8:	bf4c      	ite	mi
 8004bfa:	44ab      	addmi	fp, r5
        trimmingvaluep4 -= delta;
 8004bfc:	ebab 0b05 	subpl.w	fp, fp, r5
      if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004c00:	005b      	lsls	r3, r3, #1
      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004c02:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004c04:	f8d3 e000 	ldr.w	lr, [r3]
 8004c08:	f8de 3000 	ldr.w	r3, [lr]
        trimmingvaluep5 += delta;
 8004c0c:	bf4c      	ite	mi
 8004c0e:	1976      	addmi	r6, r6, r5
        trimmingvaluep5 -= delta;
 8004c10:	1b76      	subpl	r6, r6, r5
      if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004c12:	005b      	lsls	r3, r3, #1
    while (delta != 0UL)
 8004c14:	9b01      	ldr	r3, [sp, #4]
        trimmingvaluep6 += delta;
 8004c16:	bf4c      	ite	mi
 8004c18:	44a9      	addmi	r9, r5
        trimmingvaluep6 -= delta;
 8004c1a:	eba9 0905 	subpl.w	r9, r9, r5
    while (delta != 0UL)
 8004c1e:	3b01      	subs	r3, #1
      delta >>= 1;
 8004c20:	ea4f 0555 	mov.w	r5, r5, lsr #1
    while (delta != 0UL)
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	d19c      	bne.n	8004b62 <HAL_OPAMPEx_SelfCalibrateAll+0x4b6>
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004c28:	f8cd b014 	str.w	fp, [sp, #20]
 8004c2c:	4693      	mov	fp, r2
 8004c2e:	960d      	str	r6, [sp, #52]	; 0x34
 8004c30:	4676      	mov	r6, lr
 8004c32:	4686      	mov	lr, r0
 8004c34:	f8db 0000 	ldr.w	r0, [fp]
 8004c38:	f8cd a010 	str.w	sl, [sp, #16]
 8004c3c:	4625      	mov	r5, r4
 8004c3e:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004c42:	468a      	mov	sl, r1
 8004c44:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
 8004c48:	f8cb 0000 	str.w	r0, [fp]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004c4c:	f8da 0000 	ldr.w	r0, [sl]
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8004c56:	940f      	str	r4, [sp, #60]	; 0x3c
 8004c58:	9c02      	ldr	r4, [sp, #8]
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5e:	9a07      	ldr	r2, [sp, #28]
 8004c60:	9218      	str	r2, [sp, #96]	; 0x60
 8004c62:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004c66:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c6a:	f8ca 0000 	str.w	r0, [sl]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004c6e:	f8de 0000 	ldr.w	r0, [lr]
 8004c72:	9a04      	ldr	r2, [sp, #16]
 8004c74:	f8cd c004 	str.w	ip, [sp, #4]
 8004c78:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004c7c:	46bc      	mov	ip, r7
 8004c7e:	ea40 40c2 	orr.w	r0, r0, r2, lsl #19
 8004c82:	f8ce 0000 	str.w	r0, [lr]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004c86:	f8dc 0000 	ldr.w	r0, [ip]
 8004c8a:	9906      	ldr	r1, [sp, #24]
 8004c8c:	9119      	str	r1, [sp, #100]	; 0x64
 8004c8e:	9905      	ldr	r1, [sp, #20]
 8004c90:	9f01      	ldr	r7, [sp, #4]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004c98:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004c9c:	ea40 40c1 	orr.w	r0, r0, r1, lsl #19
 8004ca0:	f8cc 0000 	str.w	r0, [ip]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004caa:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004cae:	6038      	str	r0, [r7, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004cb0:	6830      	ldr	r0, [r6, #0]
 8004cb2:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004cb6:	ea40 40c9 	orr.w	r0, r0, r9, lsl #19
 8004cba:	6030      	str	r0, [r6, #0]
    HAL_Delay(2);
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7fc fa15 	bl	80010ec <HAL_Delay>
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004cc4:	f8d4 e000 	ldr.w	lr, [r4]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004cc8:	9a04      	ldr	r2, [sp, #16]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004cca:	9905      	ldr	r1, [sp, #20]
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004ccc:	f8de 0000 	ldr.w	r0, [lr]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004cd0:	04de      	lsls	r6, r3, #19
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004cd4:	9606      	str	r6, [sp, #24]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004cd6:	04d2      	lsls	r2, r2, #19
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004cd8:	04db      	lsls	r3, r3, #19
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004cda:	9207      	str	r2, [sp, #28]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004cdc:	9316      	str	r3, [sp, #88]	; 0x58
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004cde:	04ca      	lsls	r2, r1, #19
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004ce0:	ea4f 43c9 	mov.w	r3, r9, lsl #19
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004ce4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004ce8:	9208      	str	r2, [sp, #32]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004cea:	9317      	str	r3, [sp, #92]	; 0x5c
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004cec:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
 8004cf0:	9b02      	ldr	r3, [sp, #8]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004cf2:	ea4f 4bc5 	mov.w	fp, r5, lsl #19
    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004cf6:	d00b      	beq.n	8004d10 <HAL_OPAMPEx_SelfCalibrateAll+0x664>
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004cf8:	f8de 0000 	ldr.w	r0, [lr]
      trimmingvaluep1++;
 8004cfc:	3501      	adds	r5, #1
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004cfe:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
 8004d02:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
      trimmingvaluep1++;
 8004d06:	950f      	str	r5, [sp, #60]	; 0x3c
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004d08:	f8ce 0000 	str.w	r0, [lr]
 8004d0c:	ea4f 4bc5 	mov.w	fp, r5, lsl #19
    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004d10:	680d      	ldr	r5, [r1, #0]
 8004d12:	9501      	str	r5, [sp, #4]
 8004d14:	6828      	ldr	r0, [r5, #0]
 8004d16:	0047      	lsls	r7, r0, #1
 8004d18:	d50a      	bpl.n	8004d30 <HAL_OPAMPEx_SelfCalibrateAll+0x684>
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004d1a:	6828      	ldr	r0, [r5, #0]
      trimmingvaluep2++;
 8004d1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004d1e:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
      trimmingvaluep2++;
 8004d22:	3601      	adds	r6, #1
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004d24:	ea40 40c6 	orr.w	r0, r0, r6, lsl #19
 8004d28:	6028      	str	r0, [r5, #0]
 8004d2a:	04f0      	lsls	r0, r6, #19
      trimmingvaluep2++;
 8004d2c:	9609      	str	r6, [sp, #36]	; 0x24
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004d2e:	9006      	str	r0, [sp, #24]
    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004d30:	f8d2 a000 	ldr.w	sl, [r2]
 8004d34:	f8da 0000 	ldr.w	r0, [sl]
 8004d38:	0046      	lsls	r6, r0, #1
 8004d3a:	d50c      	bpl.n	8004d56 <HAL_OPAMPEx_SelfCalibrateAll+0x6aa>
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004d3c:	f8da 0000 	ldr.w	r0, [sl]
      trimmingvaluep3++;
 8004d40:	9d04      	ldr	r5, [sp, #16]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004d42:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
      trimmingvaluep3++;
 8004d46:	3501      	adds	r5, #1
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004d48:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
 8004d4c:	f8ca 0000 	str.w	r0, [sl]
 8004d50:	04e8      	lsls	r0, r5, #19
      trimmingvaluep3++;
 8004d52:	9504      	str	r5, [sp, #16]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004d54:	9007      	str	r0, [sp, #28]
    if ((hopamp4->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004d56:	681e      	ldr	r6, [r3, #0]
 8004d58:	6830      	ldr	r0, [r6, #0]
 8004d5a:	0045      	lsls	r5, r0, #1
 8004d5c:	d50a      	bpl.n	8004d74 <HAL_OPAMPEx_SelfCalibrateAll+0x6c8>
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004d5e:	6830      	ldr	r0, [r6, #0]
      trimmingvaluep4++;
 8004d60:	9d05      	ldr	r5, [sp, #20]
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004d62:	f420 0078 	bic.w	r0, r0, #16252928	; 0xf80000
      trimmingvaluep4++;
 8004d66:	3501      	adds	r5, #1
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004d68:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
 8004d6c:	6030      	str	r0, [r6, #0]
 8004d6e:	04e8      	lsls	r0, r5, #19
      trimmingvaluep4++;
 8004d70:	9505      	str	r5, [sp, #20]
      MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004d72:	9008      	str	r0, [sp, #32]
    if ((hopamp5->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004d74:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004d76:	6805      	ldr	r5, [r0, #0]
 8004d78:	6828      	ldr	r0, [r5, #0]
 8004d7a:	0040      	lsls	r0, r0, #1
 8004d7c:	d50a      	bpl.n	8004d94 <HAL_OPAMPEx_SelfCalibrateAll+0x6e8>
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004d7e:	6828      	ldr	r0, [r5, #0]
      trimmingvaluep5++;
 8004d80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004d82:	f420 0c78 	bic.w	ip, r0, #16252928	; 0xf80000
      trimmingvaluep5++;
 8004d86:	3701      	adds	r7, #1
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004d88:	ea4c 40c7 	orr.w	r0, ip, r7, lsl #19
 8004d8c:	6028      	str	r0, [r5, #0]
 8004d8e:	04f8      	lsls	r0, r7, #19
      trimmingvaluep5++;
 8004d90:	970d      	str	r7, [sp, #52]	; 0x34
      MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004d92:	9016      	str	r0, [sp, #88]	; 0x58
    if ((hopamp6->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8004d94:	9825      	ldr	r0, [sp, #148]	; 0x94
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9002      	str	r0, [sp, #8]
 8004d9a:	6807      	ldr	r7, [r0, #0]
 8004d9c:	007f      	lsls	r7, r7, #1
 8004d9e:	d50a      	bpl.n	8004db6 <HAL_OPAMPEx_SelfCalibrateAll+0x70a>
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004da0:	6807      	ldr	r7, [r0, #0]
      trimmingvaluep6++;
 8004da2:	f109 0901 	add.w	r9, r9, #1
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004da6:	f427 0778 	bic.w	r7, r7, #16252928	; 0xf80000
 8004daa:	ea47 47c9 	orr.w	r7, r7, r9, lsl #19
 8004dae:	6007      	str	r7, [r0, #0]
 8004db0:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 8004db4:	9017      	str	r0, [sp, #92]	; 0x5c
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004db6:	f8de 7000 	ldr.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004dba:	9801      	ldr	r0, [sp, #4]
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8004dbc:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004dc0:	f8ce 7000 	str.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8004dc4:	6807      	ldr	r7, [r0, #0]
 8004dc6:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004dca:	6007      	str	r7, [r0, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004dcc:	f8da 7000 	ldr.w	r7, [sl]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
 8004dd0:	9802      	ldr	r0, [sp, #8]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8004dd2:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004dd6:	f8ca 7000 	str.w	r7, [sl]
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_CALON);
 8004dda:	6837      	ldr	r7, [r6, #0]
 8004ddc:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004de0:	6037      	str	r7, [r6, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
 8004de2:	682f      	ldr	r7, [r5, #0]
 8004de4:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004de8:	602f      	str	r7, [r5, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
 8004dea:	6807      	ldr	r7, [r0, #0]
 8004dec:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8004df0:	6007      	str	r7, [r0, #0]
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004df2:	f8de 7000 	ldr.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004df6:	9801      	ldr	r0, [sp, #4]
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004df8:	f027 0701 	bic.w	r7, r7, #1
 8004dfc:	f8ce 7000 	str.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e00:	6807      	ldr	r7, [r0, #0]
 8004e02:	f027 0701 	bic.w	r7, r7, #1
 8004e06:	6007      	str	r7, [r0, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e08:	f8da 7000 	ldr.w	r7, [sl]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e0c:	9802      	ldr	r0, [sp, #8]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e0e:	f027 0701 	bic.w	r7, r7, #1
 8004e12:	f8ca 7000 	str.w	r7, [sl]
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e16:	6837      	ldr	r7, [r6, #0]
 8004e18:	f027 0701 	bic.w	r7, r7, #1
 8004e1c:	6037      	str	r7, [r6, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e1e:	682f      	ldr	r7, [r5, #0]
 8004e20:	f027 0701 	bic.w	r7, r7, #1
 8004e24:	602f      	str	r7, [r5, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004e26:	6807      	ldr	r7, [r0, #0]
 8004e28:	f027 0701 	bic.w	r7, r7, #1
 8004e2c:	6007      	str	r7, [r0, #0]
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e2e:	f8de 7000 	ldr.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e32:	9801      	ldr	r0, [sp, #4]
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e34:	f027 0702 	bic.w	r7, r7, #2
 8004e38:	f8ce 7000 	str.w	r7, [lr]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e3c:	6807      	ldr	r7, [r0, #0]
 8004e3e:	f027 0702 	bic.w	r7, r7, #2
 8004e42:	6007      	str	r7, [r0, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e44:	f8da 7000 	ldr.w	r7, [sl]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e48:	9802      	ldr	r0, [sp, #8]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e4a:	f027 0702 	bic.w	r7, r7, #2
 8004e4e:	f8ca 7000 	str.w	r7, [sl]
    CLEAR_BIT(hopamp4->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e52:	6837      	ldr	r7, [r6, #0]
 8004e54:	f027 0702 	bic.w	r7, r7, #2
 8004e58:	6037      	str	r7, [r6, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e5a:	682f      	ldr	r7, [r5, #0]
 8004e5c:	f027 0702 	bic.w	r7, r7, #2
 8004e60:	602f      	str	r7, [r5, #0]
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004e62:	6807      	ldr	r7, [r0, #0]
 8004e64:	f027 0702 	bic.w	r7, r7, #2
 8004e68:	6007      	str	r7, [r0, #0]
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8004e6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004e6c:	f8de 7000 	ldr.w	r7, [lr]
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8004e70:	6360      	str	r0, [r4, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 8004e72:	9803      	ldr	r0, [sp, #12]
 8004e74:	6348      	str	r0, [r1, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8004e76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e78:	6350      	str	r0, [r2, #52]	; 0x34
    hopamp4->Init.TrimmingValueN = trimmingvaluen4;
 8004e7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004e7c:	6358      	str	r0, [r3, #52]	; 0x34
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004e7e:	f027 5cf8 	bic.w	ip, r7, #520093696	; 0x1f000000
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
 8004e82:	9824      	ldr	r0, [sp, #144]	; 0x90
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004e84:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004e86:	ea4c 0707 	orr.w	r7, ip, r7
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
 8004e8a:	4684      	mov	ip, r0
 8004e8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e8e:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
 8004e92:	9825      	ldr	r0, [sp, #148]	; 0x94
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004e94:	970e      	str	r7, [sp, #56]	; 0x38
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
 8004e96:	f8c0 8034 	str.w	r8, [r0, #52]	; 0x34
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 8004e9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004e9c:	6320      	str	r0, [r4, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8004e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea0:	6308      	str	r0, [r1, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8004ea2:	9804      	ldr	r0, [sp, #16]
 8004ea4:	6310      	str	r0, [r2, #48]	; 0x30
    hopamp4->Init.TrimmingValueP = trimmingvaluep4;
 8004ea6:	9805      	ldr	r0, [sp, #20]
 8004ea8:	6318      	str	r0, [r3, #48]	; 0x30
    hopamp5->Init.TrimmingValueP = trimmingvaluep5;
 8004eaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004eac:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
 8004eb0:	9825      	ldr	r0, [sp, #148]	; 0x94
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004eb2:	2710      	movs	r7, #16
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
 8004eb4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004eb8:	62e7      	str	r7, [r4, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004eba:	62cf      	str	r7, [r1, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004ebc:	62d7      	str	r7, [r2, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004ebe:	62df      	str	r7, [r3, #44]	; 0x2c
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004ec0:	9a01      	ldr	r2, [sp, #4]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004ec4:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8004ec8:	62c7      	str	r7, [r0, #44]	; 0x2c
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 8004eca:	f8ce 3000 	str.w	r3, [lr]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	9912      	ldr	r1, [sp, #72]	; 0x48
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8004ed2:	9802      	ldr	r0, [sp, #8]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8004ed4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8004edc:	f8da 3000 	ldr.w	r3, [sl]
 8004ee0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004ee2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8ca 3000 	str.w	r3, [sl]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004ef0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	6033      	str	r3, [r6, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004efc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004f00:	430b      	orrs	r3, r1
 8004f02:	602b      	str	r3, [r5, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
 8004f04:	6803      	ldr	r3, [r0, #0]
 8004f06:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004f08:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8004f10:	f8de 3000 	ldr.w	r3, [lr]
 8004f14:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f18:	ea43 030b 	orr.w	r3, r3, fp
 8004f1c:	f8ce 3000 	str.w	r3, [lr]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	9906      	ldr	r1, [sp, #24]
 8004f24:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 8004f2c:	f8da 3000 	ldr.w	r3, [sl]
 8004f30:	9a07      	ldr	r2, [sp, #28]
 8004f32:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8ca 3000 	str.w	r3, [sl]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	9a08      	ldr	r2, [sp, #32]
 8004f40:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f44:	4313      	orrs	r3, r2
 8004f46:	6033      	str	r3, [r6, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep5 << OPAMP_INPUT_NONINVERTING);
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f4c:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f50:	4313      	orrs	r3, r2
 8004f52:	602b      	str	r3, [r5, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
 8004f54:	6803      	ldr	r3, [r0, #0]
 8004f56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004f58:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7ff bbb5 	b.w	80046d0 <HAL_OPAMPEx_SelfCalibrateAll+0x24>
 8004f66:	bf00      	nop

08004f68 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f68:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004f6a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f6e:	b968      	cbnz	r0, 8004f8c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d014      	beq.n	8004fa4 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f7a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004f90:	d02f      	beq.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f9a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004f9c:	2000      	movs	r0, #0
}
 8004f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa2:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa4:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	; (800505c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004faa:	482d      	ldr	r0, [pc, #180]	; (8005060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004fb0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004fba:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004fbe:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc4:	2332      	movs	r3, #50	; 0x32
 8004fc6:	fb03 f304 	mul.w	r3, r3, r4
 8004fca:	fba0 0303 	umull	r0, r3, r0, r3
 8004fce:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fd2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd6:	d506      	bpl.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004fd8:	e000      	b.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x74>
 8004fda:	b123      	cbz	r3, 8004fe6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004fdc:	6951      	ldr	r1, [r2, #20]
 8004fde:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004fe0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe4:	d4f9      	bmi.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	055c      	lsls	r4, r3, #21
 8004fec:	d5d6      	bpl.n	8004f9c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004fee:	2003      	movs	r0, #3
 8004ff0:	e7c9      	b.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffa:	d009      	beq.n	8005010 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ffc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8005000:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005008:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800500a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800500e:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005010:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005016:	4812      	ldr	r0, [pc, #72]	; (8005060 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005018:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800501c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005020:	6811      	ldr	r1, [r2, #0]
 8005022:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005026:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800502a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800502c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800502e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005030:	2332      	movs	r3, #50	; 0x32
 8005032:	fb03 f304 	mul.w	r3, r3, r4
 8005036:	fba0 0303 	umull	r0, r3, r0, r3
 800503a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800503e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005042:	d5d0      	bpl.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005044:	e001      	b.n	800504a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0cd      	beq.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800504a:	6951      	ldr	r1, [r2, #20]
 800504c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800504e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005052:	d5c8      	bpl.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005054:	e7f7      	b.n	8005046 <HAL_PWREx_ControlVoltageScaling+0xde>
 8005056:	bf00      	nop
 8005058:	40007000 	.word	0x40007000
 800505c:	20000030 	.word	0x20000030
 8005060:	431bde83 	.word	0x431bde83

08005064 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005064:	4a02      	ldr	r2, [pc, #8]	; (8005070 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005066:	6893      	ldr	r3, [r2, #8]
 8005068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506c:	6093      	str	r3, [r2, #8]
}
 800506e:	4770      	bx	lr
 8005070:	40007000 	.word	0x40007000

08005074 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005074:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005076:	4c2b      	ldr	r4, [pc, #172]	; (8005124 <HAL_RCC_DeInit+0xb0>)
  tickstart = HAL_GetTick();
 8005078:	f7fc f832 	bl	80010e0 <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tickstart = HAL_GetTick();
 8005082:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005084:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005086:	e004      	b.n	8005092 <HAL_RCC_DeInit+0x1e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005088:	f7fc f82a 	bl	80010e0 <HAL_GetTick>
 800508c:	1b40      	subs	r0, r0, r5
 800508e:	2802      	cmp	r0, #2
 8005090:	d825      	bhi.n	80050de <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	055b      	lsls	r3, r3, #21
 8005096:	d5f7      	bpl.n	8005088 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8005098:	6863      	ldr	r3, [r4, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800509a:	4e22      	ldr	r6, [pc, #136]	; (8005124 <HAL_RCC_DeInit+0xb0>)
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800509c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050a0:	6063      	str	r3, [r4, #4]
  tickstart = HAL_GetTick();
 80050a2:	f7fc f81d 	bl	80010e0 <HAL_GetTick>
  RCC->CFGR = 0x00000001u;
 80050a6:	2301      	movs	r3, #1
 80050a8:	60a3      	str	r3, [r4, #8]
  tickstart = HAL_GetTick();
 80050aa:	4605      	mov	r5, r0
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f241 3488 	movw	r4, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80050b0:	e004      	b.n	80050bc <HAL_RCC_DeInit+0x48>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b2:	f7fc f815 	bl	80010e0 <HAL_GetTick>
 80050b6:	1b40      	subs	r0, r0, r5
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d810      	bhi.n	80050de <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80050bc:	68b3      	ldr	r3, [r6, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d1f5      	bne.n	80050b2 <HAL_RCC_DeInit+0x3e>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <HAL_RCC_DeInit+0xb4>)
  SystemCoreClock = HSI_VALUE;
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <HAL_RCC_DeInit+0xb8>)
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050ca:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HSI_VALUE;
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_RCC_DeInit+0xbc>)
 80050ce:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050d0:	f7fb ffc4 	bl	800105c <HAL_InitTick>
 80050d4:	4604      	mov	r4, r0
 80050d6:	b128      	cbz	r0, 80050e4 <HAL_RCC_DeInit+0x70>
  {
    return HAL_ERROR;
 80050d8:	2401      	movs	r4, #1

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  return HAL_OK;
}
 80050da:	4620      	mov	r0, r4
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80050de:	2403      	movs	r4, #3
}
 80050e0:	4620      	mov	r0, r4
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
  RCC->CR = RCC_CR_HSION;
 80050e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e8:	6033      	str	r3, [r6, #0]
  RCC->CR = RCC_CR_HSION;
 80050ea:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 80050ec:	f7fb fff8 	bl	80010e0 <HAL_GetTick>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f0:	4e0c      	ldr	r6, [pc, #48]	; (8005124 <HAL_RCC_DeInit+0xb0>)
  tickstart = HAL_GetTick();
 80050f2:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f4:	e004      	b.n	8005100 <HAL_RCC_DeInit+0x8c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fb fff3 	bl	80010e0 <HAL_GetTick>
 80050fa:	1b43      	subs	r3, r0, r5
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d8ee      	bhi.n	80050de <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005106:	d1f6      	bne.n	80050f6 <HAL_RCC_DeInit+0x82>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8005108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800510c:	f04f 32ff 	mov.w	r2, #4294967295
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8005110:	60f1      	str	r1, [r6, #12]
  CLEAR_REG(RCC->CIER);
 8005112:	61b3      	str	r3, [r6, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8005114:	6232      	str	r2, [r6, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005116:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800511a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800511e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return HAL_OK;
 8005122:	e7dd      	b.n	80050e0 <HAL_RCC_DeInit+0x6c>
 8005124:	40021000 	.word	0x40021000
 8005128:	20000004 	.word	0x20000004
 800512c:	20000030 	.word	0x20000030
 8005130:	00f42400 	.word	0x00f42400

08005134 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005134:	2800      	cmp	r0, #0
 8005136:	f000 81c3 	beq.w	80054c0 <HAL_RCC_OscConfig+0x38c>
{
 800513a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	6803      	ldr	r3, [r0, #0]
 8005140:	07d9      	lsls	r1, r3, #31
{
 8005142:	b082      	sub	sp, #8
 8005144:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	d52d      	bpl.n	80051a4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005148:	49b5      	ldr	r1, [pc, #724]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 800514a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800514c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005152:	2a0c      	cmp	r2, #12
 8005154:	f000 810a 	beq.w	800536c <HAL_RCC_OscConfig+0x238>
 8005158:	2a08      	cmp	r2, #8
 800515a:	f000 810c 	beq.w	8005376 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	f000 8133 	beq.w	80053ce <HAL_RCC_OscConfig+0x29a>
 8005168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800516c:	f000 819b 	beq.w	80054a6 <HAL_RCC_OscConfig+0x372>
 8005170:	4dab      	ldr	r5, [pc, #684]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 8005172:	682a      	ldr	r2, [r5, #0]
 8005174:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005178:	602a      	str	r2, [r5, #0]
 800517a:	682a      	ldr	r2, [r5, #0]
 800517c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005180:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 8128 	bne.w	80053d8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fb ffaa 	bl	80010e0 <HAL_GetTick>
 800518c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518e:	e005      	b.n	800519c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005190:	f7fb ffa6 	bl	80010e0 <HAL_GetTick>
 8005194:	1b80      	subs	r0, r0, r6
 8005196:	2864      	cmp	r0, #100	; 0x64
 8005198:	f200 813b 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	039f      	lsls	r7, r3, #14
 80051a0:	d4f6      	bmi.n	8005190 <HAL_RCC_OscConfig+0x5c>
 80051a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a4:	079e      	lsls	r6, r3, #30
 80051a6:	d528      	bpl.n	80051fa <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a8:	4a9d      	ldr	r2, [pc, #628]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 80051aa:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ac:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ae:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	f000 80ec 	beq.w	8005390 <HAL_RCC_OscConfig+0x25c>
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	f000 80ee 	beq.w	800539a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051be:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4d97      	ldr	r5, [pc, #604]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8116 	beq.w	80053f4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ce:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fb ff86 	bl	80010e0 <HAL_GetTick>
 80051d4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d6:	e005      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fb ff82 	bl	80010e0 <HAL_GetTick>
 80051dc:	1b80      	subs	r0, r0, r6
 80051de:	2802      	cmp	r0, #2
 80051e0:	f200 8117 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	0558      	lsls	r0, r3, #21
 80051e8:	d5f6      	bpl.n	80051d8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	686b      	ldr	r3, [r5, #4]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80051f6:	606b      	str	r3, [r5, #4]
 80051f8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	071a      	lsls	r2, r3, #28
 80051fc:	d519      	bpl.n	8005232 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051fe:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005200:	4d87      	ldr	r5, [pc, #540]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 809e 	beq.w	8005344 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005208:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fb ff64 	bl	80010e0 <HAL_GetTick>
 8005218:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521a:	e005      	b.n	8005228 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fb ff60 	bl	80010e0 <HAL_GetTick>
 8005220:	1b80      	subs	r0, r0, r6
 8005222:	2802      	cmp	r0, #2
 8005224:	f200 80f5 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005228:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800522c:	079f      	lsls	r7, r3, #30
 800522e:	d5f5      	bpl.n	800521c <HAL_RCC_OscConfig+0xe8>
 8005230:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005232:	0759      	lsls	r1, r3, #29
 8005234:	d541      	bpl.n	80052ba <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005236:	4b7a      	ldr	r3, [pc, #488]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 8005238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800523a:	00d2      	lsls	r2, r2, #3
 800523c:	f100 80ed 	bmi.w	800541a <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005246:	659a      	str	r2, [r3, #88]	; 0x58
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005252:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005254:	4e73      	ldr	r6, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x2f0>)
 8005256:	6833      	ldr	r3, [r6, #0]
 8005258:	05df      	lsls	r7, r3, #23
 800525a:	f140 8113 	bpl.w	8005484 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	2b01      	cmp	r3, #1
 8005262:	f000 80e3 	beq.w	800542c <HAL_RCC_OscConfig+0x2f8>
 8005266:	2b05      	cmp	r3, #5
 8005268:	f000 8169 	beq.w	800553e <HAL_RCC_OscConfig+0x40a>
 800526c:	4e6c      	ldr	r6, [pc, #432]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 800526e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800527a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800527e:	f022 0204 	bic.w	r2, r2, #4
 8005282:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 80d7 	bne.w	800543a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fb ff28 	bl	80010e0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005294:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005296:	e005      	b.n	80052a4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fb ff22 	bl	80010e0 <HAL_GetTick>
 800529c:	1bc0      	subs	r0, r0, r7
 800529e:	4540      	cmp	r0, r8
 80052a0:	f200 80b7 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80052a8:	079a      	lsls	r2, r3, #30
 80052aa:	d4f5      	bmi.n	8005298 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ac:	b125      	cbz	r5, 80052b8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ae:	4a5c      	ldr	r2, [pc, #368]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 80052b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ba:	069b      	lsls	r3, r3, #26
 80052bc:	d518      	bpl.n	80052f0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052be:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c0:	4d57      	ldr	r5, [pc, #348]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80ca 	beq.w	800545c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80052c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fb ff04 	bl	80010e0 <HAL_GetTick>
 80052d8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052da:	e005      	b.n	80052e8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052dc:	f7fb ff00 	bl	80010e0 <HAL_GetTick>
 80052e0:	1b80      	subs	r0, r0, r6
 80052e2:	2802      	cmp	r0, #2
 80052e4:	f200 8095 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052e8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80052ec:	079f      	lsls	r7, r3, #30
 80052ee:	d5f5      	bpl.n	80052dc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f0:	69e0      	ldr	r0, [r4, #28]
 80052f2:	b318      	cbz	r0, 800533c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f4:	4d4a      	ldr	r5, [pc, #296]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 80052f6:	68ab      	ldr	r3, [r5, #8]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	2b0c      	cmp	r3, #12
 80052fe:	f000 812c 	beq.w	800555a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005302:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005304:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800530a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800530c:	f000 80da 	beq.w	80054c4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005310:	68eb      	ldr	r3, [r5, #12]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005318:	68eb      	ldr	r3, [r5, #12]
 800531a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800531e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005322:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fb fedc 	bl	80010e0 <HAL_GetTick>
 8005328:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532a:	e004      	b.n	8005336 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532c:	f7fb fed8 	bl	80010e0 <HAL_GetTick>
 8005330:	1b00      	subs	r0, r0, r4
 8005332:	2802      	cmp	r0, #2
 8005334:	d86d      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005336:	682b      	ldr	r3, [r5, #0]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	d4f7      	bmi.n	800532c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800533c:	2000      	movs	r0, #0
}
 800533e:	b002      	add	sp, #8
 8005340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005344:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005350:	f7fb fec6 	bl	80010e0 <HAL_GetTick>
 8005354:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005356:	e004      	b.n	8005362 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005358:	f7fb fec2 	bl	80010e0 <HAL_GetTick>
 800535c:	1b80      	subs	r0, r0, r6
 800535e:	2802      	cmp	r0, #2
 8005360:	d857      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005362:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005366:	0798      	lsls	r0, r3, #30
 8005368:	d4f6      	bmi.n	8005358 <HAL_RCC_OscConfig+0x224>
 800536a:	e761      	b.n	8005230 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800536c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005370:	2903      	cmp	r1, #3
 8005372:	f47f aef4 	bne.w	800515e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	0392      	lsls	r2, r2, #14
 800537c:	f57f af12 	bpl.w	80051a4 <HAL_RCC_OscConfig+0x70>
 8005380:	6862      	ldr	r2, [r4, #4]
 8005382:	2a00      	cmp	r2, #0
 8005384:	f47f af0e 	bne.w	80051a4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005388:	2001      	movs	r0, #1
}
 800538a:	b002      	add	sp, #8
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005394:	2a02      	cmp	r2, #2
 8005396:	f47f af12 	bne.w	80051be <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539a:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	055d      	lsls	r5, r3, #21
 80053a0:	d502      	bpl.n	80053a8 <HAL_RCC_OscConfig+0x274>
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ef      	beq.n	8005388 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 80053aa:	6920      	ldr	r0, [r4, #16]
 80053ac:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053ae:	491e      	ldr	r1, [pc, #120]	; (8005428 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80053b8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053ba:	6808      	ldr	r0, [r1, #0]
 80053bc:	f7fb fe4e 	bl	800105c <HAL_InitTick>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1e1      	bne.n	8005388 <HAL_RCC_OscConfig+0x254>
 80053c4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c6:	071a      	lsls	r2, r3, #28
 80053c8:	f57f af33 	bpl.w	8005232 <HAL_RCC_OscConfig+0xfe>
 80053cc:	e717      	b.n	80051fe <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ce:	4a14      	ldr	r2, [pc, #80]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053d8:	f7fb fe82 	bl	80010e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053dc:	4e10      	ldr	r6, [pc, #64]	; (8005420 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80053de:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e0:	e004      	b.n	80053ec <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e2:	f7fb fe7d 	bl	80010e0 <HAL_GetTick>
 80053e6:	1b40      	subs	r0, r0, r5
 80053e8:	2864      	cmp	r0, #100	; 0x64
 80053ea:	d812      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ec:	6833      	ldr	r3, [r6, #0]
 80053ee:	039b      	lsls	r3, r3, #14
 80053f0:	d5f7      	bpl.n	80053e2 <HAL_RCC_OscConfig+0x2ae>
 80053f2:	e6d6      	b.n	80051a2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053fc:	f7fb fe70 	bl	80010e0 <HAL_GetTick>
 8005400:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005402:	682b      	ldr	r3, [r5, #0]
 8005404:	0559      	lsls	r1, r3, #21
 8005406:	d5dd      	bpl.n	80053c4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005408:	f7fb fe6a 	bl	80010e0 <HAL_GetTick>
 800540c:	1b80      	subs	r0, r0, r6
 800540e:	2802      	cmp	r0, #2
 8005410:	d9f7      	bls.n	8005402 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005412:	2003      	movs	r0, #3
}
 8005414:	b002      	add	sp, #8
 8005416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800541a:	2500      	movs	r5, #0
 800541c:	e71a      	b.n	8005254 <HAL_RCC_OscConfig+0x120>
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	40007000 	.word	0x40007000
 8005428:	20000004 	.word	0x20000004
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542c:	4a65      	ldr	r2, [pc, #404]	; (80055c4 <HAL_RCC_OscConfig+0x490>)
 800542e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800543a:	f7fb fe51 	bl	80010e0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800543e:	4f61      	ldr	r7, [pc, #388]	; (80055c4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005440:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005446:	e004      	b.n	8005452 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7fb fe4a 	bl	80010e0 <HAL_GetTick>
 800544c:	1b80      	subs	r0, r0, r6
 800544e:	4540      	cmp	r0, r8
 8005450:	d8df      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005456:	0799      	lsls	r1, r3, #30
 8005458:	d5f6      	bpl.n	8005448 <HAL_RCC_OscConfig+0x314>
 800545a:	e727      	b.n	80052ac <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800545c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005468:	f7fb fe3a 	bl	80010e0 <HAL_GetTick>
 800546c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800546e:	e004      	b.n	800547a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005470:	f7fb fe36 	bl	80010e0 <HAL_GetTick>
 8005474:	1b80      	subs	r0, r0, r6
 8005476:	2802      	cmp	r0, #2
 8005478:	d8cb      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800547a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800547e:	0798      	lsls	r0, r3, #30
 8005480:	d4f6      	bmi.n	8005470 <HAL_RCC_OscConfig+0x33c>
 8005482:	e735      	b.n	80052f0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800548c:	f7fb fe28 	bl	80010e0 <HAL_GetTick>
 8005490:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005492:	6833      	ldr	r3, [r6, #0]
 8005494:	05d8      	lsls	r0, r3, #23
 8005496:	f53f aee2 	bmi.w	800525e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7fb fe21 	bl	80010e0 <HAL_GetTick>
 800549e:	1bc0      	subs	r0, r0, r7
 80054a0:	2802      	cmp	r0, #2
 80054a2:	d9f6      	bls.n	8005492 <HAL_RCC_OscConfig+0x35e>
 80054a4:	e7b5      	b.n	8005412 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80054bc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054be:	e78b      	b.n	80053d8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80054c0:	2001      	movs	r0, #1
}
 80054c2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80054c4:	f7fb fe0c 	bl	80010e0 <HAL_GetTick>
 80054c8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ca:	e004      	b.n	80054d6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fb fe08 	bl	80010e0 <HAL_GetTick>
 80054d0:	1b80      	subs	r0, r0, r6
 80054d2:	2802      	cmp	r0, #2
 80054d4:	d89d      	bhi.n	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	0199      	lsls	r1, r3, #6
 80054da:	d4f7      	bmi.n	80054cc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054dc:	68e9      	ldr	r1, [r5, #12]
 80054de:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <HAL_RCC_OscConfig+0x494>)
 80054e0:	6a22      	ldr	r2, [r4, #32]
 80054e2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80054e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054e8:	400b      	ands	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80054f0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80054f4:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80054f8:	3801      	subs	r0, #1
 80054fa:	0849      	lsrs	r1, r1, #1
 80054fc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005500:	3901      	subs	r1, #1
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005508:	3a01      	subs	r2, #1
 800550a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800550e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005510:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005512:	4e2c      	ldr	r6, [pc, #176]	; (80055c4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8005514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005518:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800551a:	68eb      	ldr	r3, [r5, #12]
 800551c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005520:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005522:	f7fb fddd 	bl	80010e0 <HAL_GetTick>
 8005526:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005528:	e005      	b.n	8005536 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552a:	f7fb fdd9 	bl	80010e0 <HAL_GetTick>
 800552e:	1b00      	subs	r0, r0, r4
 8005530:	2802      	cmp	r0, #2
 8005532:	f63f af6e 	bhi.w	8005412 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	6833      	ldr	r3, [r6, #0]
 8005538:	019a      	lsls	r2, r3, #6
 800553a:	d5f6      	bpl.n	800552a <HAL_RCC_OscConfig+0x3f6>
 800553c:	e6fe      	b.n	800533c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_RCC_OscConfig+0x490>)
 8005540:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005544:	f042 0204 	orr.w	r2, r2, #4
 8005548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800554c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005558:	e76f      	b.n	800543a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800555a:	2801      	cmp	r0, #1
 800555c:	f43f aeef 	beq.w	800533e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005560:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	6a22      	ldr	r2, [r4, #32]
 8005564:	f003 0103 	and.w	r1, r3, #3
 8005568:	4291      	cmp	r1, r2
 800556a:	f47f af0d 	bne.w	8005388 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800556e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005570:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005574:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800557a:	f47f af05 	bne.w	8005388 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800557e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005580:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005584:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005588:	f47f aefe 	bne.w	8005388 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800558c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800558e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005592:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005596:	f47f aef7 	bne.w	8005388 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800559a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800559c:	0852      	lsrs	r2, r2, #1
 800559e:	3a01      	subs	r2, #1
 80055a0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055a4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80055a8:	f47f aeee 	bne.w	8005388 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80055ae:	0852      	lsrs	r2, r2, #1
 80055b0:	3a01      	subs	r2, #1
 80055b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80055ba:	bf14      	ite	ne
 80055bc:	2001      	movne	r0, #1
 80055be:	2000      	moveq	r0, #0
 80055c0:	e6bd      	b.n	800533e <HAL_RCC_OscConfig+0x20a>
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	019f800c 	.word	0x019f800c

080055cc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <HAL_RCC_GetSysClockFreq+0x54>)
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	f002 020c 	and.w	r2, r2, #12
 80055d4:	2a04      	cmp	r2, #4
 80055d6:	d021      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	f002 020c 	and.w	r2, r2, #12
 80055de:	2a08      	cmp	r2, #8
 80055e0:	d01c      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	f002 020c 	and.w	r2, r2, #12
 80055e8:	2a0c      	cmp	r2, #12
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80055ec:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80055ee:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055f0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f2:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f4:	68db      	ldr	r3, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f6:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055fa:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fe:	1c42      	adds	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005600:	4808      	ldr	r0, [pc, #32]	; (8005624 <HAL_RCC_GetSysClockFreq+0x58>)
 8005602:	fbb0 f0f2 	udiv	r0, r0, r2
 8005606:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetSysClockFreq+0x54>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005616:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800561a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <HAL_RCC_GetSysClockFreq+0x58>)
 800561e:	4770      	bx	lr
 8005620:	40021000 	.word	0x40021000
 8005624:	00f42400 	.word	0x00f42400

08005628 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005628:	2800      	cmp	r0, #0
 800562a:	f000 80e9 	beq.w	8005800 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800562e:	4a7c      	ldr	r2, [pc, #496]	; (8005820 <HAL_RCC_ClockConfig+0x1f8>)
{
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	428b      	cmp	r3, r1
 800563c:	460d      	mov	r5, r1
 800563e:	4604      	mov	r4, r0
 8005640:	d20c      	bcs.n	800565c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	f023 030f 	bic.w	r3, r3, #15
 8005648:	430b      	orrs	r3, r1
 800564a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564c:	6813      	ldr	r3, [r2, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	428b      	cmp	r3, r1
 8005654:	d002      	beq.n	800565c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
}
 8005658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	07de      	lsls	r6, r3, #31
 8005660:	d563      	bpl.n	800572a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	2a03      	cmp	r2, #3
 8005666:	f000 809a 	beq.w	800579e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566a:	4b6e      	ldr	r3, [pc, #440]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005670:	f000 8091 	beq.w	8005796 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005674:	055b      	lsls	r3, r3, #21
 8005676:	d5ee      	bpl.n	8005656 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005678:	f7ff ffa8 	bl	80055cc <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800567c:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCC_ClockConfig+0x200>)
 800567e:	4298      	cmp	r0, r3
 8005680:	f200 80c0 	bhi.w	8005804 <HAL_RCC_ClockConfig+0x1dc>
 8005684:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005686:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800568a:	4e66      	ldr	r6, [pc, #408]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 800568c:	68b3      	ldr	r3, [r6, #8]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	431a      	orrs	r2, r3
 8005694:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005696:	f7fb fd23 	bl	80010e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800569e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a0:	e004      	b.n	80056ac <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a2:	f7fb fd1d 	bl	80010e0 <HAL_GetTick>
 80056a6:	1bc0      	subs	r0, r0, r7
 80056a8:	4540      	cmp	r0, r8
 80056aa:	d871      	bhi.n	8005790 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ac:	68b3      	ldr	r3, [r6, #8]
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056b8:	d1f3      	bne.n	80056a2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	079f      	lsls	r7, r3, #30
 80056be:	d436      	bmi.n	800572e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80056c0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80056c4:	d103      	bne.n	80056ce <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056c6:	68b3      	ldr	r3, [r6, #8]
 80056c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056cc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ce:	4e54      	ldr	r6, [pc, #336]	; (8005820 <HAL_RCC_ClockConfig+0x1f8>)
 80056d0:	6833      	ldr	r3, [r6, #0]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	42ab      	cmp	r3, r5
 80056d8:	d846      	bhi.n	8005768 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	075a      	lsls	r2, r3, #29
 80056de:	d506      	bpl.n	80056ee <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e0:	4950      	ldr	r1, [pc, #320]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 80056e2:	68e0      	ldr	r0, [r4, #12]
 80056e4:	688a      	ldr	r2, [r1, #8]
 80056e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ea:	4302      	orrs	r2, r0
 80056ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ee:	071b      	lsls	r3, r3, #28
 80056f0:	d507      	bpl.n	8005702 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056f2:	4a4c      	ldr	r2, [pc, #304]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 80056f4:	6921      	ldr	r1, [r4, #16]
 80056f6:	6893      	ldr	r3, [r2, #8]
 80056f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80056fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005700:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005702:	f7ff ff63 	bl	80055cc <HAL_RCC_GetSysClockFreq>
 8005706:	4a47      	ldr	r2, [pc, #284]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 8005708:	4c48      	ldr	r4, [pc, #288]	; (800582c <HAL_RCC_ClockConfig+0x204>)
 800570a:	6892      	ldr	r2, [r2, #8]
 800570c:	4948      	ldr	r1, [pc, #288]	; (8005830 <HAL_RCC_ClockConfig+0x208>)
 800570e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005712:	4603      	mov	r3, r0
 8005714:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005716:	4847      	ldr	r0, [pc, #284]	; (8005834 <HAL_RCC_ClockConfig+0x20c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005718:	f002 021f 	and.w	r2, r2, #31
 800571c:	40d3      	lsrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005720:	6800      	ldr	r0, [r0, #0]
}
 8005722:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005726:	f7fb bc99 	b.w	800105c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572a:	0798      	lsls	r0, r3, #30
 800572c:	d5cf      	bpl.n	80056ce <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572e:	0758      	lsls	r0, r3, #29
 8005730:	d504      	bpl.n	800573c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005732:	493c      	ldr	r1, [pc, #240]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800573a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	0719      	lsls	r1, r3, #28
 800573e:	d506      	bpl.n	800574e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005740:	4a38      	ldr	r2, [pc, #224]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 8005742:	6893      	ldr	r3, [r2, #8]
 8005744:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005748:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800574c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574e:	4a35      	ldr	r2, [pc, #212]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 8005750:	68a1      	ldr	r1, [r4, #8]
 8005752:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005754:	4e32      	ldr	r6, [pc, #200]	; (8005820 <HAL_RCC_ClockConfig+0x1f8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	430b      	orrs	r3, r1
 800575c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800575e:	6833      	ldr	r3, [r6, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	42ab      	cmp	r3, r5
 8005766:	d9b8      	bls.n	80056da <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	f023 030f 	bic.w	r3, r3, #15
 800576e:	432b      	orrs	r3, r5
 8005770:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005772:	f7fb fcb5 	bl	80010e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005776:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800577a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	42ab      	cmp	r3, r5
 8005784:	d0a9      	beq.n	80056da <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005786:	f7fb fcab 	bl	80010e0 <HAL_GetTick>
 800578a:	1bc0      	subs	r0, r0, r7
 800578c:	4540      	cmp	r0, r8
 800578e:	d9f5      	bls.n	800577c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005790:	2003      	movs	r0, #3
}
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	039a      	lsls	r2, r3, #14
 8005798:	f53f af6e 	bmi.w	8005678 <HAL_RCC_ClockConfig+0x50>
 800579c:	e75b      	b.n	8005656 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579e:	4821      	ldr	r0, [pc, #132]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 80057a0:	6801      	ldr	r1, [r0, #0]
 80057a2:	0189      	lsls	r1, r1, #6
 80057a4:	f57f af57 	bpl.w	8005656 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057a8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057aa:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ac:	68c0      	ldr	r0, [r0, #12]
      if(pllfreq > 80000000U)
 80057ae:	4f1e      	ldr	r7, [pc, #120]	; (8005828 <HAL_RCC_ClockConfig+0x200>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057b0:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80057b4:	1c4e      	adds	r6, r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057b6:	4920      	ldr	r1, [pc, #128]	; (8005838 <HAL_RCC_ClockConfig+0x210>)
 80057b8:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057bc:	4e19      	ldr	r6, [pc, #100]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057be:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80057c2:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057c6:	68f0      	ldr	r0, [r6, #12]
 80057c8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80057cc:	3001      	adds	r0, #1
 80057ce:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80057d0:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80057d4:	42b9      	cmp	r1, r7
 80057d6:	d920      	bls.n	800581a <HAL_RCC_ClockConfig+0x1f2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057d8:	68b1      	ldr	r1, [r6, #8]
 80057da:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_ClockConfig+0x1c4>
 80057e0:	f013 0902 	ands.w	r9, r3, #2
 80057e4:	f43f af51 	beq.w	800568a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e8:	68a3      	ldr	r3, [r4, #8]
 80057ea:	b9b3      	cbnz	r3, 800581a <HAL_RCC_ClockConfig+0x1f2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ec:	490d      	ldr	r1, [pc, #52]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 80057ee:	688b      	ldr	r3, [r1, #8]
 80057f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057fa:	f04f 0980 	mov.w	r9, #128	; 0x80
 80057fe:	e744      	b.n	800568a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005800:	2001      	movs	r0, #1
}
 8005802:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005804:	4a07      	ldr	r2, [pc, #28]	; (8005824 <HAL_RCC_ClockConfig+0x1fc>)
 8005806:	6893      	ldr	r3, [r2, #8]
 8005808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005812:	6862      	ldr	r2, [r4, #4]
 8005814:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005818:	e737      	b.n	800568a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800581a:	f04f 0900 	mov.w	r9, #0
 800581e:	e734      	b.n	800568a <HAL_RCC_ClockConfig+0x62>
 8005820:	40022000 	.word	0x40022000
 8005824:	40021000 	.word	0x40021000
 8005828:	04c4b400 	.word	0x04c4b400
 800582c:	08010024 	.word	0x08010024
 8005830:	20000030 	.word	0x20000030
 8005834:	20000004 	.word	0x20000004
 8005838:	00f42400 	.word	0x00f42400

0800583c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x18>)
 800583e:	4a06      	ldr	r2, [pc, #24]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005840:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005842:	4906      	ldr	r1, [pc, #24]	; (800585c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005844:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005848:	6808      	ldr	r0, [r1, #0]
 800584a:	5cd3      	ldrb	r3, [r2, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
}
 8005850:	40d8      	lsrs	r0, r3
 8005852:	4770      	bx	lr
 8005854:	40021000 	.word	0x40021000
 8005858:	08010034 	.word	0x08010034
 800585c:	20000030 	.word	0x20000030

08005860 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005862:	4a06      	ldr	r2, [pc, #24]	; (800587c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005864:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005866:	4906      	ldr	r1, [pc, #24]	; (8005880 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005868:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800586c:	6808      	ldr	r0, [r1, #0]
 800586e:	5cd3      	ldrb	r3, [r2, r3]
 8005870:	f003 031f 	and.w	r3, r3, #31
}
 8005874:	40d8      	lsrs	r0, r3
 8005876:	4770      	bx	lr
 8005878:	40021000 	.word	0x40021000
 800587c:	08010034 	.word	0x08010034
 8005880:	20000030 	.word	0x20000030

08005884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005888:	6803      	ldr	r3, [r0, #0]
{
 800588a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588c:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005890:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005892:	d056      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005894:	4bb6      	ldr	r3, [pc, #728]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005896:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005898:	00d5      	lsls	r5, r2, #3
 800589a:	f140 813e 	bpl.w	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800589e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a0:	4db4      	ldr	r5, [pc, #720]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058aa:	f7fb fc19 	bl	80010e0 <HAL_GetTick>
 80058ae:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b0:	e005      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fb fc15 	bl	80010e0 <HAL_GetTick>
 80058b6:	1b83      	subs	r3, r0, r6
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f200 8139 	bhi.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	05d8      	lsls	r0, r3, #23
 80058c2:	d5f6      	bpl.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058c4:	4daa      	ldr	r5, [pc, #680]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80058c6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80058ce:	d027      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80058d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d025      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058d6:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058da:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80058de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058e6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058ea:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058f2:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80058f8:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058fc:	f140 8148 	bpl.w	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fb fbee 	bl	80010e0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005908:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590a:	e005      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590c:	f7fb fbe8 	bl	80010e0 <HAL_GetTick>
 8005910:	1b80      	subs	r0, r0, r6
 8005912:	4540      	cmp	r0, r8
 8005914:	f200 810c 	bhi.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005918:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	d5f5      	bpl.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005920:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005922:	4993      	ldr	r1, [pc, #588]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005924:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005928:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005932:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005934:	b127      	cbz	r7, 8005940 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005936:	4a8e      	ldr	r2, [pc, #568]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005938:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800593a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593e:	6593      	str	r3, [r2, #88]	; 0x58
 8005940:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005942:	07dd      	lsls	r5, r3, #31
 8005944:	d508      	bpl.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005946:	498a      	ldr	r1, [pc, #552]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005948:	6865      	ldr	r5, [r4, #4]
 800594a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800594e:	f022 0203 	bic.w	r2, r2, #3
 8005952:	432a      	orrs	r2, r5
 8005954:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005958:	0799      	lsls	r1, r3, #30
 800595a:	d508      	bpl.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800595c:	4984      	ldr	r1, [pc, #528]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800595e:	68a5      	ldr	r5, [r4, #8]
 8005960:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005964:	f022 020c 	bic.w	r2, r2, #12
 8005968:	432a      	orrs	r2, r5
 800596a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800596e:	075a      	lsls	r2, r3, #29
 8005970:	d508      	bpl.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005972:	497f      	ldr	r1, [pc, #508]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005974:	68e5      	ldr	r5, [r4, #12]
 8005976:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800597a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800597e:	432a      	orrs	r2, r5
 8005980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005984:	071f      	lsls	r7, r3, #28
 8005986:	d508      	bpl.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005988:	4979      	ldr	r1, [pc, #484]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800598a:	6925      	ldr	r5, [r4, #16]
 800598c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005990:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005994:	432a      	orrs	r2, r5
 8005996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800599a:	06de      	lsls	r6, r3, #27
 800599c:	d508      	bpl.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800599e:	4974      	ldr	r1, [pc, #464]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059a0:	6965      	ldr	r5, [r4, #20]
 80059a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059aa:	432a      	orrs	r2, r5
 80059ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059b0:	069d      	lsls	r5, r3, #26
 80059b2:	d508      	bpl.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b4:	496e      	ldr	r1, [pc, #440]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059b6:	69a5      	ldr	r5, [r4, #24]
 80059b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059c0:	432a      	orrs	r2, r5
 80059c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059c6:	0659      	lsls	r1, r3, #25
 80059c8:	d508      	bpl.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ca:	4969      	ldr	r1, [pc, #420]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059cc:	69e5      	ldr	r5, [r4, #28]
 80059ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059d6:	432a      	orrs	r2, r5
 80059d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059dc:	061a      	lsls	r2, r3, #24
 80059de:	d508      	bpl.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059e0:	4963      	ldr	r1, [pc, #396]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059e2:	6a25      	ldr	r5, [r4, #32]
 80059e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80059ec:	432a      	orrs	r2, r5
 80059ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f2:	05df      	lsls	r7, r3, #23
 80059f4:	d508      	bpl.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059f6:	495e      	ldr	r1, [pc, #376]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059fe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005a02:	432a      	orrs	r2, r5
 8005a04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a08:	039e      	lsls	r6, r3, #14
 8005a0a:	d508      	bpl.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a0c:	4958      	ldr	r1, [pc, #352]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a0e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005a10:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8005a14:	f022 0203 	bic.w	r2, r2, #3
 8005a18:	432a      	orrs	r2, r5
 8005a1a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a1e:	059d      	lsls	r5, r3, #22
 8005a20:	d508      	bpl.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a22:	4953      	ldr	r1, [pc, #332]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a24:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005a26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a2a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005a2e:	432a      	orrs	r2, r5
 8005a30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a34:	0559      	lsls	r1, r3, #21
 8005a36:	d50b      	bpl.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a38:	494d      	ldr	r1, [pc, #308]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005a3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a40:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005a44:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a46:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a4e:	d071      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a50:	051a      	lsls	r2, r3, #20
 8005a52:	d50b      	bpl.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a54:	4946      	ldr	r1, [pc, #280]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a56:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005a58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a5c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005a60:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a62:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a6a:	d068      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a6c:	04df      	lsls	r7, r3, #19
 8005a6e:	d50b      	bpl.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a70:	493f      	ldr	r1, [pc, #252]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a7c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a7e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a86:	d05f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a88:	049e      	lsls	r6, r3, #18
 8005a8a:	d50b      	bpl.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8c:	4938      	ldr	r1, [pc, #224]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005a8e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005a90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a94:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005a98:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aa2:	d056      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aa4:	045d      	lsls	r5, r3, #17
 8005aa6:	d50b      	bpl.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aa8:	4931      	ldr	r1, [pc, #196]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005aaa:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005aac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ab0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ab4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ab6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005abe:	d04d      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ac0:	0419      	lsls	r1, r3, #16
 8005ac2:	d50b      	bpl.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ac4:	492a      	ldr	r1, [pc, #168]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ac6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8005ac8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ad0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ad2:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ad6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ada:	d044      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005adc:	03da      	lsls	r2, r3, #15
 8005ade:	d50b      	bpl.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ae0:	4923      	ldr	r1, [pc, #140]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ae2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005ae4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005ae8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005aec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005aee:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005af2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005af6:	d03f      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005af8:	035b      	lsls	r3, r3, #13
 8005afa:	d50b      	bpl.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005afe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b00:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005b04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b08:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b0a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b12:	d036      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8005b14:	b002      	add	sp, #8
 8005b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b20:	659a      	str	r2, [r3, #88]	; 0x58
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005b2c:	2701      	movs	r7, #1
 8005b2e:	e6b7      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005b30:	2003      	movs	r0, #3
 8005b32:	e6ff      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b34:	68ca      	ldr	r2, [r1, #12]
 8005b36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b3a:	60ca      	str	r2, [r1, #12]
 8005b3c:	e788      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3e:	68ca      	ldr	r2, [r1, #12]
 8005b40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b44:	60ca      	str	r2, [r1, #12]
 8005b46:	e791      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b48:	68ca      	ldr	r2, [r1, #12]
 8005b4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b4e:	60ca      	str	r2, [r1, #12]
 8005b50:	e79a      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b52:	68ca      	ldr	r2, [r1, #12]
 8005b54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b58:	60ca      	str	r2, [r1, #12]
 8005b5a:	e7a3      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5c:	68ca      	ldr	r2, [r1, #12]
 8005b5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b62:	60ca      	str	r2, [r1, #12]
 8005b64:	e7ac      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b66:	68ca      	ldr	r2, [r1, #12]
 8005b68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b6c:	60ca      	str	r2, [r1, #12]
 8005b6e:	e7b5      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b78:	68ca      	ldr	r2, [r1, #12]
 8005b7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b7e:	60ca      	str	r2, [r1, #12]
 8005b80:	e7ba      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b82:	68d3      	ldr	r3, [r2, #12]
 8005b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b88:	60d3      	str	r3, [r2, #12]
}
 8005b8a:	b002      	add	sp, #8
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	4613      	mov	r3, r2
 8005b92:	e6c6      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08005b94 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	4604      	mov	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8005ba0:	2820      	cmp	r0, #32
 8005ba2:	d146      	bne.n	8005c32 <HAL_UART_Receive_DMA+0x9a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d042      	beq.n	8005c2e <HAL_UART_Receive_DMA+0x96>
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d040      	beq.n	8005c2e <HAL_UART_Receive_DMA+0x96>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8005bac:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d03e      	beq.n	8005c32 <HAL_UART_Receive_DMA+0x9a>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_UART_Receive_DMA+0xb4>)
    __HAL_LOCK(huart);
 8005bb8:	2001      	movs	r0, #1
 8005bba:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bbe:	429d      	cmp	r5, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	f04f 0000 	mov.w	r0, #0
 8005bc4:	66e0      	str	r0, [r4, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bc6:	d006      	beq.n	8005bd6 <HAL_UART_Receive_DMA+0x3e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bc8:	686b      	ldr	r3, [r5, #4]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	d503      	bpl.n	8005bd6 <HAL_UART_Receive_DMA+0x3e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bd4:	602b      	str	r3, [r5, #0]
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
 8005bd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  huart->pRxBuffPtr = pData;
 8005bd8:	65a1      	str	r1, [r4, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bda:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bdc:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  huart->RxXferSize = Size;
 8005be2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8005bea:	b180      	cbz	r0, 8005c0e <HAL_UART_Receive_DMA+0x76>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bec:	4f18      	ldr	r7, [pc, #96]	; (8005c50 <HAL_UART_Receive_DMA+0xb8>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bee:	f8df c068 	ldr.w	ip, [pc, #104]	; 8005c58 <HAL_UART_Receive_DMA+0xc0>

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bf2:	6386      	str	r6, [r0, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bfc:	4d15      	ldr	r5, [pc, #84]	; (8005c54 <HAL_UART_Receive_DMA+0xbc>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bfe:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c02:	e9c0 750c 	strd	r7, r5, [r0, #48]	; 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c06:	f7fc fb61 	bl	80022cc <HAL_DMA_Start_IT>
 8005c0a:	b9a0      	cbnz	r0, 8005c36 <HAL_UART_Receive_DMA+0x9e>
 8005c0c:	6825      	ldr	r5, [r4, #0]
      huart->gState = HAL_UART_STATE_READY;

      return HAL_ERROR;
    }
  }
  __HAL_UNLOCK(huart);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1a:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1c:	68ab      	ldr	r3, [r5, #8]
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c24:	68ab      	ldr	r3, [r5, #8]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2a:	60ab      	str	r3, [r5, #8]
}
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8005c2e:	2001      	movs	r0, #1
}
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005c32:	2002      	movs	r0, #2
}
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c36:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 8005c38:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8005c3a:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c3e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8005c42:	2001      	movs	r0, #1
      huart->gState = HAL_UART_STATE_READY;
 8005c44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40008000 	.word	0x40008000
 8005c50:	08005cf5 	.word	0x08005cf5
 8005c54:	08005c69 	.word	0x08005c69
 8005c58:	08005d11 	.word	0x08005d11

08005c5c <HAL_UART_RxCpltCallback>:
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop

08005c60 <HAL_UART_RxHalfCpltCallback>:
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop

08005c64 <HAL_UART_ErrorCallback>:
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop

08005c68 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c68:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c6a:	6803      	ldr	r3, [r0, #0]
{
 8005c6c:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c6e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c72:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	0612      	lsls	r2, r2, #24
 8005c7a:	d501      	bpl.n	8005c80 <UART_DMAError+0x18>
 8005c7c:	2c21      	cmp	r4, #33	; 0x21
 8005c7e:	d028      	beq.n	8005cd2 <UART_DMAError+0x6a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	0652      	lsls	r2, r2, #25
 8005c84:	d501      	bpl.n	8005c8a <UART_DMAError+0x22>
 8005c86:	2922      	cmp	r1, #34	; 0x22
 8005c88:	d008      	beq.n	8005c9c <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c8a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005c8e:	f043 0310 	orr.w	r3, r3, #16
 8005c92:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c96:	f7ff ffe5 	bl	8005c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9a:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005cb8:	2a01      	cmp	r2, #1
 8005cba:	d103      	bne.n	8005cc4 <UART_DMAError+0x5c>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f022 0210 	bic.w	r2, r2, #16
 8005cc2:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8005ccc:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8005cd0:	e7db      	b.n	8005c8a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ce0:	689a      	ldr	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8005ce2:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ce4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005ce8:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
}
 8005cee:	e7c7      	b.n	8005c80 <UART_DMAError+0x18>

08005cf0 <HAL_UARTEx_RxEventCallback>:
}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop

08005cf4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cf4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005cf6:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d002      	beq.n	8005d04 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cfe:	f7ff ffaf 	bl	8005c60 <HAL_UART_RxHalfCpltCallback>
}
 8005d02:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d04:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005d08:	0849      	lsrs	r1, r1, #1
 8005d0a:	f7ff fff1 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
}
 8005d0e:	bd08      	pop	{r3, pc}

08005d10 <UART_DMAReceiveCplt>:
{
 8005d10:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d12:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d14:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f013 0320 	ands.w	r3, r3, #32
 8005d1c:	d114      	bne.n	8005d48 <UART_DMAReceiveCplt+0x38>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d1e:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8005d20:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d24:	6813      	ldr	r3, [r2, #0]
 8005d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2a:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	6893      	ldr	r3, [r2, #8]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d34:	6893      	ldr	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8005d36:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d42:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d00a      	beq.n	8005d5e <UART_DMAReceiveCplt+0x4e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d002      	beq.n	8005d54 <UART_DMAReceiveCplt+0x44>
    HAL_UART_RxCpltCallback(huart);
 8005d4e:	f7ff ff85 	bl	8005c5c <HAL_UART_RxCpltCallback>
}
 8005d52:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d54:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005d58:	f7ff ffca 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
}
 8005d5c:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e7ef      	b.n	8005d48 <UART_DMAReceiveCplt+0x38>

08005d68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d6a:	07da      	lsls	r2, r3, #31
{
 8005d6c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d6e:	d506      	bpl.n	8005d7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d70:	6801      	ldr	r1, [r0, #0]
 8005d72:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005d74:	684a      	ldr	r2, [r1, #4]
 8005d76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005d7a:	4322      	orrs	r2, r4
 8005d7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7e:	079c      	lsls	r4, r3, #30
 8005d80:	d506      	bpl.n	8005d90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	6801      	ldr	r1, [r0, #0]
 8005d84:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005d86:	684a      	ldr	r2, [r1, #4]
 8005d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d8c:	4322      	orrs	r2, r4
 8005d8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d90:	0759      	lsls	r1, r3, #29
 8005d92:	d506      	bpl.n	8005da2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d94:	6801      	ldr	r1, [r0, #0]
 8005d96:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005d98:	684a      	ldr	r2, [r1, #4]
 8005d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d9e:	4322      	orrs	r2, r4
 8005da0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da2:	071a      	lsls	r2, r3, #28
 8005da4:	d506      	bpl.n	8005db4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da6:	6801      	ldr	r1, [r0, #0]
 8005da8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005daa:	684a      	ldr	r2, [r1, #4]
 8005dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005db0:	4322      	orrs	r2, r4
 8005db2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db4:	06dc      	lsls	r4, r3, #27
 8005db6:	d506      	bpl.n	8005dc6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	6801      	ldr	r1, [r0, #0]
 8005dba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005dbc:	688a      	ldr	r2, [r1, #8]
 8005dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dc2:	4322      	orrs	r2, r4
 8005dc4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc6:	0699      	lsls	r1, r3, #26
 8005dc8:	d506      	bpl.n	8005dd8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dca:	6801      	ldr	r1, [r0, #0]
 8005dcc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005dce:	688a      	ldr	r2, [r1, #8]
 8005dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd4:	4322      	orrs	r2, r4
 8005dd6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	065a      	lsls	r2, r3, #25
 8005dda:	d509      	bpl.n	8005df0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ddc:	6801      	ldr	r1, [r0, #0]
 8005dde:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005de0:	684a      	ldr	r2, [r1, #4]
 8005de2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005de6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	d00b      	beq.n	8005e08 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df0:	061b      	lsls	r3, r3, #24
 8005df2:	d506      	bpl.n	8005e02 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df4:	6802      	ldr	r2, [r0, #0]
 8005df6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005df8:	6853      	ldr	r3, [r2, #4]
 8005dfa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6053      	str	r3, [r2, #4]
}
 8005e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e06:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e08:	684a      	ldr	r2, [r1, #4]
 8005e0a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005e0c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005e10:	4322      	orrs	r2, r4
 8005e12:	604a      	str	r2, [r1, #4]
 8005e14:	e7ec      	b.n	8005df0 <UART_AdvFeatureConfig+0x88>
 8005e16:	bf00      	nop

08005e18 <UART_CheckIdleState>:
{
 8005e18:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	2300      	movs	r3, #0
{
 8005e1c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8005e22:	f7fb f95d 	bl	80010e0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005e2c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2e:	d40d      	bmi.n	8005e4c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	0752      	lsls	r2, r2, #29
 8005e34:	d431      	bmi.n	8005e9a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005e38:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8005e3a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8005e3e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 8005e42:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005e44:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	0292      	lsls	r2, r2, #10
 8005e50:	d4ee      	bmi.n	8005e30 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e52:	f7fb f945 	bl	80010e0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e56:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e58:	1b40      	subs	r0, r0, r5
 8005e5a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e5e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	d22c      	bcs.n	8005ebc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e62:	0750      	lsls	r0, r2, #29
 8005e64:	d5f2      	bpl.n	8005e4c <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	0511      	lsls	r1, r2, #20
 8005e6a:	d5ef      	bpl.n	8005e4c <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e70:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8005e7c:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7e:	f021 0101 	bic.w	r1, r1, #1
 8005e82:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005e84:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8005e86:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8005e8a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8005e8e:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8005e90:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e94:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	0258      	lsls	r0, r3, #9
 8005e9e:	d4ca      	bmi.n	8005e36 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea0:	f7fb f91e 	bl	80010e0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ea4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	1b40      	subs	r0, r0, r5
 8005ea8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005eac:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	d205      	bcs.n	8005ebc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eb0:	0751      	lsls	r1, r2, #29
 8005eb2:	d5f2      	bpl.n	8005e9a <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	0512      	lsls	r2, r2, #20
 8005eb8:	d5ef      	bpl.n	8005e9a <UART_CheckIdleState+0x82>
 8005eba:	e7d7      	b.n	8005e6c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8005ec4:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	f022 0201 	bic.w	r2, r2, #1
 8005eca:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005ecc:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8005ece:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005ed2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8005ed6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop

08005ee0 <HAL_UART_Init>:
  if (huart == NULL)
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	f000 81b5 	beq.w	8006250 <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8005eea:	b570      	push	{r4, r5, r6, lr}
 8005eec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d06c      	beq.n	8005fcc <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 8005ef2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef4:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef6:	49c0      	ldr	r1, [pc, #768]	; (80061f8 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	2224      	movs	r2, #36	; 0x24
 8005efa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005efe:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f00:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005f02:	f020 0001 	bic.w	r0, r0, #1
 8005f06:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f08:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f0a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f0c:	4332      	orrs	r2, r6
 8005f0e:	4302      	orrs	r2, r0
 8005f10:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f12:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f14:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f1e:	49b7      	ldr	r1, [pc, #732]	; (80061fc <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f20:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f24:	432a      	orrs	r2, r5
 8005f26:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f28:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f2c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f2e:	d052      	beq.n	8005fd6 <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f30:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f34:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005f38:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005f3c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f44:	49ae      	ldr	r1, [pc, #696]	; (8006200 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f46:	f022 020f 	bic.w	r2, r2, #15
 8005f4a:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f50:	d028      	beq.n	8005fa4 <HAL_UART_Init+0xc4>
 8005f52:	4aac      	ldr	r2, [pc, #688]	; (8006204 <HAL_UART_Init+0x324>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	f000 8091 	beq.w	800607c <HAL_UART_Init+0x19c>
 8005f5a:	4aab      	ldr	r2, [pc, #684]	; (8006208 <HAL_UART_Init+0x328>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	f000 8165 	beq.w	800622c <HAL_UART_Init+0x34c>
 8005f62:	4aaa      	ldr	r2, [pc, #680]	; (800620c <HAL_UART_Init+0x32c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	f000 80e4 	beq.w	8006132 <HAL_UART_Init+0x252>
 8005f6a:	4aa9      	ldr	r2, [pc, #676]	; (8006210 <HAL_UART_Init+0x330>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d111      	bne.n	8005f94 <HAL_UART_Init+0xb4>
 8005f70:	4ba8      	ldr	r3, [pc, #672]	; (8006214 <HAL_UART_Init+0x334>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7e:	f000 817d 	beq.w	800627c <HAL_UART_Init+0x39c>
 8005f82:	f200 8101 	bhi.w	8006188 <HAL_UART_Init+0x2a8>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 80e7 	beq.w	800615a <HAL_UART_Init+0x27a>
 8005f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f90:	f000 80dd 	beq.w	800614e <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 8005f94:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8005f98:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005f9a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8005f9e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa4:	4b9b      	ldr	r3, [pc, #620]	; (8006214 <HAL_UART_Init+0x334>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	f240 80d9 	bls.w	8006168 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005fba:	f000 8151 	beq.w	8006260 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbe:	f7ff fc4f 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f000 80d3 	beq.w	800616e <HAL_UART_Init+0x28e>
 8005fc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fca:	e081      	b.n	80060d0 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 8005fcc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005fd0:	f7ff fde0 	bl	8005b94 <HAL_UART_MspInit>
 8005fd4:	e78d      	b.n	8005ef2 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fd6:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005fda:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe6:	488b      	ldr	r0, [pc, #556]	; (8006214 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fe8:	f022 020f 	bic.w	r2, r2, #15
 8005fec:	430a      	orrs	r2, r1
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	f000 813c 	beq.w	8006278 <HAL_UART_Init+0x398>
 8006000:	d80c      	bhi.n	800601c <HAL_UART_Init+0x13c>
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8132 	beq.w	800626c <HAL_UART_Init+0x38c>
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600c:	d1c2      	bne.n	8005f94 <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7ff fadd 	bl	80055cc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006012:	2800      	cmp	r0, #0
 8006014:	f000 80ab 	beq.w	800616e <HAL_UART_Init+0x28e>
 8006018:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800601a:	e004      	b.n	8006026 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800601c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006020:	d1b8      	bne.n	8005f94 <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006026:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006028:	4b7b      	ldr	r3, [pc, #492]	; (8006218 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800602e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8006032:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006036:	42b3      	cmp	r3, r6
 8006038:	d3ac      	bcc.n	8005f94 <HAL_UART_Init+0xb4>
 800603a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800603e:	d8a9      	bhi.n	8005f94 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006040:	2600      	movs	r6, #0
 8006042:	2300      	movs	r3, #0
 8006044:	4631      	mov	r1, r6
 8006046:	f7fa fe57 	bl	8000cf8 <__aeabi_uldivmod>
 800604a:	020b      	lsls	r3, r1, #8
 800604c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006050:	0202      	lsls	r2, r0, #8
 8006052:	0868      	lsrs	r0, r5, #1
 8006054:	1810      	adds	r0, r2, r0
 8006056:	f143 0100 	adc.w	r1, r3, #0
 800605a:	462a      	mov	r2, r5
 800605c:	4633      	mov	r3, r6
 800605e:	f7fa fe4b 	bl	8000cf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_UART_Init+0x33c>)
 8006064:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006068:	429a      	cmp	r2, r3
 800606a:	d893      	bhi.n	8005f94 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 800606c:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800606e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8006072:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8006074:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8006078:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800607a:	e043      	b.n	8006104 <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607c:	4b65      	ldr	r3, [pc, #404]	; (8006214 <HAL_UART_Init+0x334>)
 800607e:	4a68      	ldr	r2, [pc, #416]	; (8006220 <HAL_UART_Init+0x340>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006084:	f003 030c 	and.w	r3, r3, #12
 8006088:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800608e:	d07f      	beq.n	8006190 <HAL_UART_Init+0x2b0>
    switch (clocksource)
 8006090:	2b08      	cmp	r3, #8
 8006092:	f63f af7f 	bhi.w	8005f94 <HAL_UART_Init+0xb4>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_UART_Init+0x1bc>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	08006163 	.word	0x08006163
 80060a0:	08005fbf 	.word	0x08005fbf
 80060a4:	0800612f 	.word	0x0800612f
 80060a8:	08005f95 	.word	0x08005f95
 80060ac:	08006155 	.word	0x08006155
 80060b0:	08005f95 	.word	0x08005f95
 80060b4:	08005f95 	.word	0x08005f95
 80060b8:	08005f95 	.word	0x08005f95
 80060bc:	080060cd 	.word	0x080060cd
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	f47f af67 	bne.w	8005f94 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80060ca:	d07a      	beq.n	80061c2 <HAL_UART_Init+0x2e2>
 80060cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d0:	6862      	ldr	r2, [r4, #4]
 80060d2:	4b51      	ldr	r3, [pc, #324]	; (8006218 <HAL_UART_Init+0x338>)
 80060d4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80060d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060dc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80060e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e6:	f1a3 0110 	sub.w	r1, r3, #16
 80060ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80060ee:	4291      	cmp	r1, r2
 80060f0:	f63f af50 	bhi.w	8005f94 <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80060f8:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80060fa:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80060fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006102:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d13a      	bne.n	8006180 <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800611a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006122:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006124:	601a      	str	r2, [r3, #0]
}
 8006126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 800612a:	f7ff be75 	b.w	8005e18 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 800612e:	483d      	ldr	r0, [pc, #244]	; (8006224 <HAL_UART_Init+0x344>)
 8006130:	e7ce      	b.n	80060d0 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006132:	4b38      	ldr	r3, [pc, #224]	; (8006214 <HAL_UART_Init+0x334>)
 8006134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006138:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	f000 809d 	beq.w	800627c <HAL_UART_Init+0x39c>
 8006142:	f200 8081 	bhi.w	8006248 <HAL_UART_Init+0x368>
 8006146:	b143      	cbz	r3, 800615a <HAL_UART_Init+0x27a>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	f47f af23 	bne.w	8005f94 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800614e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006152:	d07f      	beq.n	8006254 <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 8006154:	f7ff fa3a 	bl	80055cc <HAL_RCC_GetSysClockFreq>
        break;
 8006158:	e733      	b.n	8005fc2 <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800615e:	f000 8082 	beq.w	8006266 <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006162:	f7ff fb6b 	bl	800583c <HAL_RCC_GetPCLK1Freq>
        break;
 8006166:	e72c      	b.n	8005fc2 <HAL_UART_Init+0xe2>
 8006168:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <HAL_UART_Init+0x348>)
 800616a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800616c:	e78d      	b.n	800608a <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 800616e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006170:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006174:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8006176:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800617a:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0c4      	beq.n	800610a <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 8006180:	4620      	mov	r0, r4
 8006182:	f7ff fdf1 	bl	8005d68 <UART_AdvFeatureConfig>
 8006186:	e7c0      	b.n	800610a <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618c:	d09b      	beq.n	80060c6 <HAL_UART_Init+0x1e6>
 800618e:	e701      	b.n	8005f94 <HAL_UART_Init+0xb4>
    switch (clocksource)
 8006190:	2b08      	cmp	r3, #8
 8006192:	f63f aeff 	bhi.w	8005f94 <HAL_UART_Init+0xb4>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_UART_Init+0x2bc>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	08006267 	.word	0x08006267
 80061a0:	08006261 	.word	0x08006261
 80061a4:	080061c1 	.word	0x080061c1
 80061a8:	08005f95 	.word	0x08005f95
 80061ac:	08006255 	.word	0x08006255
 80061b0:	08005f95 	.word	0x08005f95
 80061b4:	08005f95 	.word	0x08005f95
 80061b8:	08005f95 	.word	0x08005f95
 80061bc:	080061c3 	.word	0x080061c3
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4818      	ldr	r0, [pc, #96]	; (8006224 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	4914      	ldr	r1, [pc, #80]	; (8006218 <HAL_UART_Init+0x338>)
 80061c6:	0853      	lsrs	r3, r2, #1
 80061c8:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 80061cc:	fbb0 f0f1 	udiv	r0, r0, r1
 80061d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80061d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80061d8:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061da:	f1a2 0110 	sub.w	r1, r2, #16
 80061de:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80061e2:	4299      	cmp	r1, r3
 80061e4:	f63f aed6 	bhi.w	8005f94 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e8:	f020 030f 	bic.w	r3, r0, #15
 80061ec:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ee:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	e77e      	b.n	80060f6 <HAL_UART_Init+0x216>
 80061f8:	cfff69f3 	.word	0xcfff69f3
 80061fc:	40008000 	.word	0x40008000
 8006200:	40013800 	.word	0x40013800
 8006204:	40004400 	.word	0x40004400
 8006208:	40004800 	.word	0x40004800
 800620c:	40004c00 	.word	0x40004c00
 8006210:	40005000 	.word	0x40005000
 8006214:	40021000 	.word	0x40021000
 8006218:	0800fdf4 	.word	0x0800fdf4
 800621c:	000ffcff 	.word	0x000ffcff
 8006220:	0800fde4 	.word	0x0800fde4
 8006224:	00f42400 	.word	0x00f42400
 8006228:	0800fde0 	.word	0x0800fde0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <HAL_UART_Init+0x3a8>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006236:	2b20      	cmp	r3, #32
 8006238:	d020      	beq.n	800627c <HAL_UART_Init+0x39c>
 800623a:	f63f af41 	bhi.w	80060c0 <HAL_UART_Init+0x1e0>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d08b      	beq.n	800615a <HAL_UART_Init+0x27a>
 8006242:	2b10      	cmp	r3, #16
 8006244:	d083      	beq.n	800614e <HAL_UART_Init+0x26e>
 8006246:	e6a5      	b.n	8005f94 <HAL_UART_Init+0xb4>
 8006248:	2bc0      	cmp	r3, #192	; 0xc0
 800624a:	f43f af3c 	beq.w	80060c6 <HAL_UART_Init+0x1e6>
 800624e:	e6a1      	b.n	8005f94 <HAL_UART_Init+0xb4>
}
 8006250:	2001      	movs	r0, #1
 8006252:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8006254:	f7ff f9ba 	bl	80055cc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006258:	2800      	cmp	r0, #0
 800625a:	d088      	beq.n	800616e <HAL_UART_Init+0x28e>
 800625c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800625e:	e7b0      	b.n	80061c2 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006260:	f7ff fafe 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
        break;
 8006264:	e7f8      	b.n	8006258 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006266:	f7ff fae9 	bl	800583c <HAL_RCC_GetPCLK1Freq>
        break;
 800626a:	e7f5      	b.n	8006258 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7ff fae6 	bl	800583c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006270:	2800      	cmp	r0, #0
 8006272:	f43f af7c 	beq.w	800616e <HAL_UART_Init+0x28e>
 8006276:	e6cf      	b.n	8006018 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006278:	4804      	ldr	r0, [pc, #16]	; (800628c <HAL_UART_Init+0x3ac>)
 800627a:	e6d4      	b.n	8006026 <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006280:	4802      	ldr	r0, [pc, #8]	; (800628c <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006282:	f47f af25 	bne.w	80060d0 <HAL_UART_Init+0x1f0>
 8006286:	e79c      	b.n	80061c2 <HAL_UART_Init+0x2e2>
 8006288:	40021000 	.word	0x40021000
 800628c:	00f42400 	.word	0x00f42400

08006290 <UART_WaitOnFlagUntilTimeout>:
{
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006298:	6804      	ldr	r4, [r0, #0]
 800629a:	4607      	mov	r7, r0
 800629c:	460e      	mov	r6, r1
 800629e:	4615      	mov	r5, r2
 80062a0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062a6:	d10a      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x2e>
 80062a8:	69e3      	ldr	r3, [r4, #28]
 80062aa:	ea36 0303 	bics.w	r3, r6, r3
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	429d      	cmp	r5, r3
 80062b6:	d0f7      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80062b8:	2000      	movs	r0, #0
}
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062be:	69e3      	ldr	r3, [r4, #28]
 80062c0:	ea36 0303 	bics.w	r3, r6, r3
 80062c4:	bf0c      	ite	eq
 80062c6:	2301      	moveq	r3, #1
 80062c8:	2300      	movne	r3, #0
 80062ca:	429d      	cmp	r5, r3
 80062cc:	d1f4      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fa ff07 	bl	80010e0 <HAL_GetTick>
 80062d2:	eba0 0009 	sub.w	r0, r0, r9
 80062d6:	4540      	cmp	r0, r8
 80062d8:	d820      	bhi.n	800631c <UART_WaitOnFlagUntilTimeout+0x8c>
 80062da:	f1b8 0f00 	cmp.w	r8, #0
 80062de:	d01d      	beq.n	800631c <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e0:	683c      	ldr	r4, [r7, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	075a      	lsls	r2, r3, #29
 80062e6:	d5dc      	bpl.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062e8:	69e3      	ldr	r3, [r4, #28]
 80062ea:	051b      	lsls	r3, r3, #20
 80062ec:	d5d9      	bpl.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f2:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062fa:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80062fe:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8006304:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006306:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8006308:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 800630a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800630e:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800631a:	e7ce      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006324:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006328:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 800632e:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006330:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8006332:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006334:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006338:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8006340:	e7bb      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0x2a>
 8006342:	bf00      	nop

08006344 <HAL_UART_Transmit>:
{
 8006344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006348:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800634a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800634e:	2820      	cmp	r0, #32
{
 8006350:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8006352:	d17b      	bne.n	800644c <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8006354:	4688      	mov	r8, r1
 8006356:	2900      	cmp	r1, #0
 8006358:	d048      	beq.n	80063ec <HAL_UART_Transmit+0xa8>
 800635a:	4617      	mov	r7, r2
 800635c:	2a00      	cmp	r2, #0
 800635e:	d045      	beq.n	80063ec <HAL_UART_Transmit+0xa8>
 8006360:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8006362:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8006366:	2b01      	cmp	r3, #1
 8006368:	d070      	beq.n	800644c <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800636a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800636c:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8006376:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 800637e:	f7fa feaf 	bl	80010e0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006382:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006384:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800638c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800638e:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006392:	d05f      	beq.n	8006454 <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8006394:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8006396:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800639a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800639c:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800639e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80063a2:	b1b3      	cbz	r3, 80063d2 <HAL_UART_Transmit+0x8e>
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	1c69      	adds	r1, r5, #1
 80063a8:	d124      	bne.n	80063f4 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063aa:	69d3      	ldr	r3, [r2, #28]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	d5fc      	bpl.n	80063aa <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 80063b0:	f1b8 0f00 	cmp.w	r8, #0
 80063b4:	d045      	beq.n	8006442 <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063b6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80063ba:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80063bc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80063c8:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e9      	bne.n	80063a6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d2:	9500      	str	r5, [sp, #0]
 80063d4:	4633      	mov	r3, r6
 80063d6:	2200      	movs	r2, #0
 80063d8:	2140      	movs	r1, #64	; 0x40
 80063da:	4620      	mov	r0, r4
 80063dc:	f7ff ff58 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d152      	bne.n	800648a <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 80063e4:	2320      	movs	r3, #32
 80063e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80063ea:	e000      	b.n	80063ee <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 80063ec:	2001      	movs	r0, #1
}
 80063ee:	b003      	add	sp, #12
 80063f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f4:	69d3      	ldr	r3, [r2, #28]
 80063f6:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 80063fa:	d1d9      	bne.n	80063b0 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fa fe70 	bl	80010e0 <HAL_GetTick>
 8006400:	1b80      	subs	r0, r0, r6
 8006402:	4285      	cmp	r5, r0
 8006404:	d32c      	bcc.n	8006460 <HAL_UART_Transmit+0x11c>
 8006406:	b35d      	cbz	r5, 8006460 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	075b      	lsls	r3, r3, #29
 800640e:	d5ca      	bpl.n	80063a6 <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006410:	69d3      	ldr	r3, [r2, #28]
 8006412:	0518      	lsls	r0, r3, #20
 8006414:	d5c7      	bpl.n	80063a6 <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800641a:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800641c:	6813      	ldr	r3, [r2, #0]
 800641e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006422:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006424:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006426:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	f021 0101 	bic.w	r1, r1, #1
 800642c:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 800642e:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8006430:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006434:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006438:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800643c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8006440:	e7d5      	b.n	80063ee <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006442:	f837 3b02 	ldrh.w	r3, [r7], #2
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	e7b6      	b.n	80063ba <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 800644c:	2002      	movs	r0, #2
}
 800644e:	b003      	add	sp, #12
 8006450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d19c      	bne.n	8006394 <HAL_UART_Transmit+0x50>
 800645a:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 800645c:	4698      	mov	r8, r3
 800645e:	e79a      	b.n	8006396 <HAL_UART_Transmit+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006468:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800646c:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646e:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8006472:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8006474:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006478:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800647c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006480:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800648a:	2003      	movs	r0, #3
 800648c:	e7af      	b.n	80063ee <HAL_UART_Transmit+0xaa>
 800648e:	bf00      	nop

08006490 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006490:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006494:	2a01      	cmp	r2, #1
 8006496:	d017      	beq.n	80064c8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006498:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800649a:	2124      	movs	r1, #36	; 0x24
{
 800649c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800649e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80064a2:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a4:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a6:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064a8:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064aa:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80064ae:	f024 0401 	bic.w	r4, r4, #1
 80064b2:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80064b4:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064b6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ba:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 80064be:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80064c0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80064c4:	bc30      	pop	{r4, r5}
 80064c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80064c8:	2002      	movs	r0, #2
}
 80064ca:	4770      	bx	lr

080064cc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064cc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	d033      	beq.n	800653c <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 80064d4:	4603      	mov	r3, r0
 80064d6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064d8:	681a      	ldr	r2, [r3, #0]
{
 80064da:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e2:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064e4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80064e6:	f020 0001 	bic.w	r0, r0, #1
 80064ea:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ec:	6890      	ldr	r0, [r2, #8]
 80064ee:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80064f2:	4301      	orrs	r1, r0
 80064f4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064f6:	b1f5      	cbz	r5, 8006536 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064f8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064fa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fc:	4810      	ldr	r0, [pc, #64]	; (8006540 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80064fe:	4f11      	ldr	r7, [pc, #68]	; (8006544 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006500:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006504:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006506:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006508:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800650a:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 800650c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800650e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006510:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006512:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006516:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800651e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006520:	2520      	movs	r5, #32
 8006522:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006526:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006528:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800652c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800652e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006532:	bcf0      	pop	{r4, r5, r6, r7}
 8006534:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006536:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006538:	4608      	mov	r0, r1
 800653a:	e7ee      	b.n	800651a <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800653c:	2002      	movs	r0, #2
}
 800653e:	4770      	bx	lr
 8006540:	0800fe14 	.word	0x0800fe14
 8006544:	0800fe0c 	.word	0x0800fe0c

08006548 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006548:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800654c:	2a01      	cmp	r2, #1
 800654e:	d033      	beq.n	80065b8 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8006550:	4603      	mov	r3, r0
 8006552:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006554:	681a      	ldr	r2, [r3, #0]
{
 8006556:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800655e:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006560:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006562:	f020 0001 	bic.w	r0, r0, #1
 8006566:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006568:	6890      	ldr	r0, [r2, #8]
 800656a:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800656e:	4301      	orrs	r1, r0
 8006570:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006572:	b1f5      	cbz	r5, 80065b2 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006574:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006576:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006578:	4810      	ldr	r0, [pc, #64]	; (80065bc <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800657a:	4f11      	ldr	r7, [pc, #68]	; (80065c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800657c:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006580:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006582:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006584:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006586:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006588:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800658a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800658c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800658e:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006592:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006596:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800659a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800659c:	2520      	movs	r5, #32
 800659e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065a2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80065a4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80065a8:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80065aa:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80065ae:	bcf0      	pop	{r4, r5, r6, r7}
 80065b0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80065b2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80065b4:	4608      	mov	r0, r1
 80065b6:	e7ee      	b.n	8006596 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80065b8:	2002      	movs	r0, #2
}
 80065ba:	4770      	bx	lr
 80065bc:	0800fe14 	.word	0x0800fe14
 80065c0:	0800fe0c 	.word	0x0800fe0c

080065c4 <analog_init>:
ADC_HandleTypeDef hadc5;

extern ConverterPhase_t phase;


void analog_init() {
 80065c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065c8:	b087      	sub	sp, #28

	//MSP init

	__HAL_RCC_ADC12_CLK_ENABLE();
 80065ca:	4b8d      	ldr	r3, [pc, #564]	; (8006800 <analog_init+0x23c>)
 80065cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80065d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80065da:	9201      	str	r2, [sp, #4]
 80065dc:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_ADC345_CLK_ENABLE();
 80065de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	9b02      	ldr	r3, [sp, #8]

	HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80065f0:	2200      	movs	r2, #0
 80065f2:	4611      	mov	r1, r2
 80065f4:	2012      	movs	r0, #18
 80065f6:	f7fb fd71 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80065fa:	2012      	movs	r0, #18
 80065fc:	f7fb fda6 	bl	800214c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8006600:	2200      	movs	r2, #0
 8006602:	4611      	mov	r1, r2
 8006604:	202f      	movs	r0, #47	; 0x2f
 8006606:	f7fb fd69 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800660a:	202f      	movs	r0, #47	; 0x2f
 800660c:	f7fb fd9e 	bl	800214c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC4_IRQn, 1, 0);
 8006610:	2200      	movs	r2, #0
 8006612:	2101      	movs	r1, #1
 8006614:	203d      	movs	r0, #61	; 0x3d
 8006616:	f7fb fd61 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800661a:	203d      	movs	r0, #61	; 0x3d
 800661c:	f7fb fd96 	bl	800214c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC5_IRQn, 2, 0);
 8006620:	2200      	movs	r2, #0
 8006622:	2102      	movs	r1, #2
 8006624:	203e      	movs	r0, #62	; 0x3e
 8006626:	f7fb fd59 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800662a:	203e      	movs	r0, #62	; 0x3e
 800662c:	f7fb fd8e 	bl	800214c <HAL_NVIC_EnableIRQ>

	//Initialize ADC's
	hadc1.Instance = ADC1;
 8006630:	4e74      	ldr	r6, [pc, #464]	; (8006804 <analog_init+0x240>)
 8006632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006636:	6033      	str	r3, [r6, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8006638:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800663c:	6071      	str	r1, [r6, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800663e:	2300      	movs	r3, #0
 8006640:	60b3      	str	r3, [r6, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006642:	60f3      	str	r3, [r6, #12]
	hadc1.Init.GainCompensation = 0;
 8006644:	6133      	str	r3, [r6, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006646:	6173      	str	r3, [r6, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006648:	f04f 0c04 	mov.w	ip, #4
 800664c:	f8c6 c018 	str.w	ip, [r6, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8006650:	7733      	strb	r3, [r6, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8006652:	7773      	strb	r3, [r6, #29]
	hadc1.Init.NbrOfConversion = 1;
 8006654:	2201      	movs	r2, #1
 8006656:	6232      	str	r2, [r6, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006658:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800665c:	f44f 64d4 	mov.w	r4, #1696	; 0x6a0
 8006660:	62f4      	str	r4, [r6, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006662:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006666:	6330      	str	r0, [r6, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006668:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800666c:	63f3      	str	r3, [r6, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 800666e:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40

	hadc2.Instance = ADC2;
 8006672:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006824 <analog_init+0x260>
 8006676:	4d64      	ldr	r5, [pc, #400]	; (8006808 <analog_init+0x244>)
 8006678:	f8c8 5000 	str.w	r5, [r8]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 800667c:	f8c8 1004 	str.w	r1, [r8, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006680:	f8c8 3008 	str.w	r3, [r8, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006684:	f8c8 300c 	str.w	r3, [r8, #12]
	hadc2.Init.GainCompensation = 0;
 8006688:	f8c8 3010 	str.w	r3, [r8, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800668c:	f8c8 3014 	str.w	r3, [r8, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006690:	f8c8 c018 	str.w	ip, [r8, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8006694:	f888 301c 	strb.w	r3, [r8, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8006698:	f888 301d 	strb.w	r3, [r8, #29]
	hadc2.Init.NbrOfConversion = 1;
 800669c:	f8c8 2020 	str.w	r2, [r8, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80066a0:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 80066a4:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80066a8:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80066ac:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80066b0:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80066b4:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40

	hadc3.Instance = ADC3;
 80066b8:	4d54      	ldr	r5, [pc, #336]	; (800680c <analog_init+0x248>)
 80066ba:	4f55      	ldr	r7, [pc, #340]	; (8006810 <analog_init+0x24c>)
 80066bc:	602f      	str	r7, [r5, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80066be:	6069      	str	r1, [r5, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80066c0:	60ab      	str	r3, [r5, #8]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066c2:	60eb      	str	r3, [r5, #12]
	hadc3.Init.GainCompensation = 0;
 80066c4:	612b      	str	r3, [r5, #16]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80066c6:	616b      	str	r3, [r5, #20]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066c8:	f8c5 c018 	str.w	ip, [r5, #24]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80066cc:	772b      	strb	r3, [r5, #28]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80066ce:	776b      	strb	r3, [r5, #29]
	hadc3.Init.NbrOfConversion = 1;
 80066d0:	622a      	str	r2, [r5, #32]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80066d2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 80066d6:	62ec      	str	r4, [r5, #44]	; 0x2c
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80066d8:	6328      	str	r0, [r5, #48]	; 0x30
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80066da:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80066de:	63eb      	str	r3, [r5, #60]	; 0x3c
	hadc3.Init.OversamplingMode = DISABLE;
 80066e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40

	hadc4.Instance = ADC4;
 80066e4:	4f4b      	ldr	r7, [pc, #300]	; (8006814 <analog_init+0x250>)
 80066e6:	f8df e140 	ldr.w	lr, [pc, #320]	; 8006828 <analog_init+0x264>
 80066ea:	f8c7 e000 	str.w	lr, [r7]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80066ee:	6079      	str	r1, [r7, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80066f0:	60bb      	str	r3, [r7, #8]
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066f2:	60fb      	str	r3, [r7, #12]
	hadc4.Init.GainCompensation = 0;
 80066f4:	613b      	str	r3, [r7, #16]
	hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80066f6:	617b      	str	r3, [r7, #20]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066f8:	f8c7 c018 	str.w	ip, [r7, #24]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 80066fc:	773b      	strb	r3, [r7, #28]
	hadc4.Init.ContinuousConvMode = DISABLE;
 80066fe:	777b      	strb	r3, [r7, #29]
	hadc4.Init.NbrOfConversion = 1;
 8006700:	623a      	str	r2, [r7, #32]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 8006702:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8006706:	62fc      	str	r4, [r7, #44]	; 0x2c
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006708:	6338      	str	r0, [r7, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = DISABLE;
 800670a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800670e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006712:	63f8      	str	r0, [r7, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 8006714:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	hadc5.Instance = ADC5;
 8006718:	4c3f      	ldr	r4, [pc, #252]	; (8006818 <analog_init+0x254>)
 800671a:	f8df c110 	ldr.w	ip, [pc, #272]	; 800682c <analog_init+0x268>
 800671e:	f8c4 c000 	str.w	ip, [r4]
	hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8006722:	6061      	str	r1, [r4, #4]
	hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8006724:	60a3      	str	r3, [r4, #8]
	hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006726:	60e3      	str	r3, [r4, #12]
	hadc5.Init.GainCompensation = 0;
 8006728:	6123      	str	r3, [r4, #16]
	hadc5.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800672a:	6162      	str	r2, [r4, #20]
	hadc5.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800672c:	2108      	movs	r1, #8
 800672e:	61a1      	str	r1, [r4, #24]
	hadc5.Init.LowPowerAutoWait = DISABLE;
 8006730:	7723      	strb	r3, [r4, #28]
	hadc5.Init.ContinuousConvMode = ENABLE;
 8006732:	7762      	strb	r2, [r4, #29]
	hadc5.Init.NbrOfConversion = 3;
 8006734:	2103      	movs	r1, #3
 8006736:	6221      	str	r1, [r4, #32]
	hadc5.Init.DiscontinuousConvMode = DISABLE;
 8006738:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800673c:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800673e:	6323      	str	r3, [r4, #48]	; 0x30
	hadc5.Init.DMAContinuousRequests = ENABLE;
 8006740:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	hadc5.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006744:	63e0      	str	r0, [r4, #60]	; 0x3c
	hadc5.Init.OversamplingMode = ENABLE;
 8006746:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800674a:	221c      	movs	r2, #28
 800674c:	6462      	str	r2, [r4, #68]	; 0x44
	hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	64a2      	str	r2, [r4, #72]	; 0x48
	hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8006752:	64e3      	str	r3, [r4, #76]	; 0x4c
	hadc5.Init.Oversampling.OversamplingStopReset =
 8006754:	f240 4101 	movw	r1, #1025	; 0x401
 8006758:	6521      	str	r1, [r4, #80]	; 0x50
			ADC_REGOVERSAMPLING_RESUMED_MODE;

	hdma_adc5.Instance = DMA1_Channel1;
 800675a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006830 <analog_init+0x26c>
 800675e:	492f      	ldr	r1, [pc, #188]	; (800681c <analog_init+0x258>)
 8006760:	f8c9 1000 	str.w	r1, [r9]
	hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8006764:	2127      	movs	r1, #39	; 0x27
 8006766:	f8c9 1004 	str.w	r1, [r9, #4]
	hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800676a:	f8c9 3008 	str.w	r3, [r9, #8]
	hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800676e:	f8c9 300c 	str.w	r3, [r9, #12]
	hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8006772:	f8c9 2010 	str.w	r2, [r9, #16]
	hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800677a:	f8c9 2014 	str.w	r2, [r9, #20]
	hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800677e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006782:	f8c9 2018 	str.w	r2, [r9, #24]
	hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8006786:	2220      	movs	r2, #32
 8006788:	f8c9 201c 	str.w	r2, [r9, #28]
	hdma_adc5.Init.Priority = DMA_PRIORITY_MEDIUM;
 800678c:	f8c9 0020 	str.w	r0, [r9, #32]

	ADC_MultiModeTypeDef multimode = { 0 };
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	9305      	str	r3, [sp, #20]
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8006794:	9303      	str	r3, [sp, #12]

	HAL_DMA_Init(&hdma_adc5);
 8006796:	4648      	mov	r0, r9
 8006798:	f7fb fd00 	bl	800219c <HAL_DMA_Init>
	__HAL_LINKDMA(&hadc5, DMA_Handle, hdma_adc5);
 800679c:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
 80067a0:	f8c9 4028 	str.w	r4, [r9, #40]	; 0x28

	HAL_ADC_Init(&hadc1);
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7fa fce1 	bl	800116c <HAL_ADC_Init>
	HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 80067aa:	a903      	add	r1, sp, #12
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7fb fbcf 	bl	8001f50 <HAL_ADCEx_MultiModeConfigChannel>
	HAL_ADC_Init(&hadc2);
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7fa fcda 	bl	800116c <HAL_ADC_Init>
	HAL_ADC_Init(&hadc3);
 80067b8:	4628      	mov	r0, r5
 80067ba:	f7fa fcd7 	bl	800116c <HAL_ADC_Init>
	HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode);
 80067be:	a903      	add	r1, sp, #12
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7fb fbc5 	bl	8001f50 <HAL_ADCEx_MultiModeConfigChannel>
	HAL_ADC_Init(&hadc4);
 80067c6:	4638      	mov	r0, r7
 80067c8:	f7fa fcd0 	bl	800116c <HAL_ADC_Init>
	HAL_ADC_Init(&hadc5);
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7fa fccd 	bl	800116c <HAL_ADC_Init>

	//Initialize channels.
	hw_adc_init();
 80067d2:	f003 fd99 	bl	800a308 <hw_adc_init>


	HAL_ADC_Start_IT(&hadc2);
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7fb fa66 	bl	8001ca8 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 80067dc:	4630      	mov	r0, r6
 80067de:	f7fb fa63 	bl	8001ca8 <HAL_ADC_Start_IT>

	HAL_ADC_Start_IT(&hadc3);
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7fb fa60 	bl	8001ca8 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc4);
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7fb fa5d 	bl	8001ca8 <HAL_ADC_Start_IT>

	HAL_ADC_Start_DMA(&hadc5, adc5data, 6);
 80067ee:	2206      	movs	r2, #6
 80067f0:	490b      	ldr	r1, [pc, #44]	; (8006820 <analog_init+0x25c>)
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7fb fb14 	bl	8001e20 <HAL_ADC_Start_DMA>
	//HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc4, ADC_DIFFERENTIAL_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED);
	//HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
}
 80067f8:	b007      	add	sp, #28
 80067fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067fe:	bf00      	nop
 8006800:	40021000 	.word	0x40021000
 8006804:	20001e70 	.word	0x20001e70
 8006808:	50000100 	.word	0x50000100
 800680c:	20001f54 	.word	0x20001f54
 8006810:	50000400 	.word	0x50000400
 8006814:	20001fc0 	.word	0x20001fc0
 8006818:	20001d8c 	.word	0x20001d8c
 800681c:	40020008 	.word	0x40020008
 8006820:	20001e58 	.word	0x20001e58
 8006824:	20001d20 	.word	0x20001d20
 8006828:	50000500 	.word	0x50000500
 800682c:	50000600 	.word	0x50000600
 8006830:	20001df8 	.word	0x20001df8

08006834 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 8006834:	b510      	push	{r4, lr}
	uint32_t tmp_isr = ADC1->ISR;
 8006836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800683a:	681c      	ldr	r4, [r3, #0]
	uint32_t tmp2_isr = ADC2->ISR;
 800683c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006840:	681b      	ldr	r3, [r3, #0]

	if (tmp2_isr & ADC_ISR_EOC) {
 8006842:	f013 0f04 	tst.w	r3, #4
 8006846:	d103      	bne.n	8006850 <ADC1_2_IRQHandler+0x1c>

		uint32_t raw = ADC2->DR;
		ADC2->ISR = ADC_ISR_EOC;
		control_convert_vhs(raw);
	}
	if (tmp_isr & ADC_ISR_EOC) {
 8006848:	f014 0f04 	tst.w	r4, #4
 800684c:	d107      	bne.n	800685e <ADC1_2_IRQHandler+0x2a>
		uint32_t raw = ADC1->DR;
		ADC1->ISR = ADC_ISR_EOC;
		control_convert_ihs(raw);
	}

}
 800684e:	bd10      	pop	{r4, pc}
		uint32_t raw = ADC2->DR;
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <ADC1_2_IRQHandler+0x3c>)
 8006852:	6c18      	ldr	r0, [r3, #64]	; 0x40
		ADC2->ISR = ADC_ISR_EOC;
 8006854:	2204      	movs	r2, #4
 8006856:	601a      	str	r2, [r3, #0]
		control_convert_vhs(raw);
 8006858:	f001 fdb4 	bl	80083c4 <control_convert_vhs>
 800685c:	e7f4      	b.n	8006848 <ADC1_2_IRQHandler+0x14>
		uint32_t raw = ADC1->DR;
 800685e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006862:	6c18      	ldr	r0, [r3, #64]	; 0x40
		ADC1->ISR = ADC_ISR_EOC;
 8006864:	2204      	movs	r2, #4
 8006866:	601a      	str	r2, [r3, #0]
		control_convert_ihs(raw);
 8006868:	f001 fe34 	bl	80084d4 <control_convert_ihs>
}
 800686c:	e7ef      	b.n	800684e <ADC1_2_IRQHandler+0x1a>
 800686e:	bf00      	nop
 8006870:	50000100 	.word	0x50000100

08006874 <ADC3_IRQHandler>:

void ADC3_IRQHandler(void) {
 8006874:	b508      	push	{r3, lr}
	uint32_t tmp_isr = ADC3->ISR;
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <ADC3_IRQHandler+0x1c>)
 8006878:	681b      	ldr	r3, [r3, #0]
	//uint32_t tmp_ier = ADC3->IER;

	if (tmp_isr & ADC_ISR_EOC) {
 800687a:	f013 0f04 	tst.w	r3, #4
 800687e:	d100      	bne.n	8006882 <ADC3_IRQHandler+0xe>

		uint32_t raw = ADC3->DR;
		ADC3->ISR = ADC_ISR_EOC;
		control_convert_vls(raw);
	}
}
 8006880:	bd08      	pop	{r3, pc}
		uint32_t raw = ADC3->DR;
 8006882:	4b03      	ldr	r3, [pc, #12]	; (8006890 <ADC3_IRQHandler+0x1c>)
 8006884:	6c18      	ldr	r0, [r3, #64]	; 0x40
		ADC3->ISR = ADC_ISR_EOC;
 8006886:	2204      	movs	r2, #4
 8006888:	601a      	str	r2, [r3, #0]
		control_convert_vls(raw);
 800688a:	f001 fd5b 	bl	8008344 <control_convert_vls>
}
 800688e:	e7f7      	b.n	8006880 <ADC3_IRQHandler+0xc>
 8006890:	50000400 	.word	0x50000400

08006894 <ADC4_IRQHandler>:

void ADC4_IRQHandler(void) {
 8006894:	b508      	push	{r3, lr}

	uint32_t tmp_isr = ADC4->ISR;
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <ADC4_IRQHandler+0x24>)
 8006898:	681a      	ldr	r2, [r3, #0]
	uint32_t tmp_ier = ADC4->IER;
 800689a:	685b      	ldr	r3, [r3, #4]

	if (tmp_isr & ADC_ISR_EOC) {
 800689c:	f012 0f04 	tst.w	r2, #4
 80068a0:	d100      	bne.n	80068a4 <ADC4_IRQHandler+0x10>

		control_convert_iind(raw);
		control_controlloop(&phase);
	}

}
 80068a2:	bd08      	pop	{r3, pc}
		uint32_t raw = ADC4->DR;
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <ADC4_IRQHandler+0x24>)
 80068a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
		ADC4->ISR = ADC_ISR_EOC;
 80068a8:	2204      	movs	r2, #4
 80068aa:	601a      	str	r2, [r3, #0]
		control_convert_iind(raw);
 80068ac:	f001 fdc8 	bl	8008440 <control_convert_iind>
		control_controlloop(&phase);
 80068b0:	4802      	ldr	r0, [pc, #8]	; (80068bc <ADC4_IRQHandler+0x28>)
 80068b2:	f001 fa33 	bl	8007d1c <control_controlloop>
}
 80068b6:	e7f4      	b.n	80068a2 <ADC4_IRQHandler+0xe>
 80068b8:	50000500 	.word	0x50000500
 80068bc:	20001edc 	.word	0x20001edc

080068c0 <ADC5_IRQHandler>:

void ADC5_IRQHandler(void) {
 80068c0:	b508      	push	{r3, lr}

	HAL_ADC_IRQHandler(&hadc5);
 80068c2:	4802      	ldr	r0, [pc, #8]	; (80068cc <ADC5_IRQHandler+0xc>)
 80068c4:	f7fa fd84 	bl	80013d0 <HAL_ADC_IRQHandler>
}
 80068c8:	bd08      	pop	{r3, pc}
 80068ca:	bf00      	nop
 80068cc:	20001d8c 	.word	0x20001d8c

080068d0 <buffer_append_str>:

#include "buffer.h"
#include <math.h>
#include <stdbool.h>

void buffer_append_str(uint8_t* buffer, char* str, int len, int32_t *index){
 80068d0:	b470      	push	{r4, r5, r6}
	for(int i = 0; i < len; i++){
 80068d2:	2400      	movs	r4, #0
 80068d4:	4294      	cmp	r4, r2
 80068d6:	da06      	bge.n	80068e6 <buffer_append_str+0x16>
		buffer[(*index)++] = str[i];
 80068d8:	681d      	ldr	r5, [r3, #0]
 80068da:	1c6e      	adds	r6, r5, #1
 80068dc:	601e      	str	r6, [r3, #0]
 80068de:	5d0e      	ldrb	r6, [r1, r4]
 80068e0:	5546      	strb	r6, [r0, r5]
	for(int i = 0; i < len; i++){
 80068e2:	3401      	adds	r4, #1
 80068e4:	e7f6      	b.n	80068d4 <buffer_append_str+0x4>
	}
}
 80068e6:	bc70      	pop	{r4, r5, r6}
 80068e8:	4770      	bx	lr

080068ea <buffer_append_int8>:

void buffer_append_int8(uint8_t* buffer, int8_t number, int32_t *index) {
 80068ea:	b410      	push	{r4}
	buffer[(*index)++] = number;
 80068ec:	6813      	ldr	r3, [r2, #0]
 80068ee:	1c5c      	adds	r4, r3, #1
 80068f0:	6014      	str	r4, [r2, #0]
 80068f2:	54c1      	strb	r1, [r0, r3]
}
 80068f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <buffer_append_uint8>:

void buffer_append_uint8(uint8_t* buffer, uint8_t number, int32_t *index) {
 80068fa:	b410      	push	{r4}
	buffer[(*index)++] = number;
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	1c5c      	adds	r4, r3, #1
 8006900:	6014      	str	r4, [r2, #0]
 8006902:	54c1      	strb	r1, [r0, r3]
}
 8006904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006908:	4770      	bx	lr

0800690a <buffer_append_int16>:

void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
 800690a:	b410      	push	{r4}
	buffer[(*index)++] = number >> 8;
 800690c:	6813      	ldr	r3, [r2, #0]
 800690e:	1c5c      	adds	r4, r3, #1
 8006910:	6014      	str	r4, [r2, #0]
 8006912:	120c      	asrs	r4, r1, #8
 8006914:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	1c5c      	adds	r4, r3, #1
 800691a:	6014      	str	r4, [r2, #0]
 800691c:	54c1      	strb	r1, [r0, r3]
}
 800691e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006922:	4770      	bx	lr

08006924 <buffer_append_uint16>:

void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
 8006924:	b410      	push	{r4}
	buffer[(*index)++] = number >> 8;
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	1c5c      	adds	r4, r3, #1
 800692a:	6014      	str	r4, [r2, #0]
 800692c:	0a0c      	lsrs	r4, r1, #8
 800692e:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8006930:	6813      	ldr	r3, [r2, #0]
 8006932:	1c5c      	adds	r4, r3, #1
 8006934:	6014      	str	r4, [r2, #0]
 8006936:	54c1      	strb	r1, [r0, r3]
}
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693c:	4770      	bx	lr

0800693e <buffer_append_uint32>:
	buffer[(*index)++] = number >> 16;
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
 800693e:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 24;
 8006940:	0e0c      	lsrs	r4, r1, #24
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	1c5d      	adds	r5, r3, #1
 8006946:	6015      	str	r5, [r2, #0]
 8006948:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 800694a:	0c0c      	lsrs	r4, r1, #16
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	1c5d      	adds	r5, r3, #1
 8006950:	6015      	str	r5, [r2, #0]
 8006952:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 8006954:	0a0c      	lsrs	r4, r1, #8
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	1c5d      	adds	r5, r3, #1
 800695a:	6015      	str	r5, [r2, #0]
 800695c:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	1c5c      	adds	r4, r3, #1
 8006962:	6014      	str	r4, [r2, #0]
 8006964:	54c1      	strb	r1, [r0, r3]
}
 8006966:	bc30      	pop	{r4, r5}
 8006968:	4770      	bx	lr

0800696a <buffer_append_float16>:

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 800696a:	b508      	push	{r3, lr}
 800696c:	460a      	mov	r2, r1
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 800696e:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006972:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006976:	ee10 3a10 	vmov	r3, s0
 800697a:	b219      	sxth	r1, r3
 800697c:	f7ff ffc5 	bl	800690a <buffer_append_int16>
}
 8006980:	bd08      	pop	{r3, pc}
	...

08006984 <buffer_append_float32_auto>:
 * 8388608.0 is 2^23, which scales the result to fit within 23 bits if sig_abs < 1.0.
 *
 * This should be a relatively fast and efficient way to serialize
 * floating point numbers in a fully defined manner.
 */
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 8006984:	b530      	push	{r4, r5, lr}
 8006986:	b083      	sub	sp, #12
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
	int e = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	9301      	str	r3, [sp, #4]
	float sig = frexpf(number, &e);
 8006990:	a801      	add	r0, sp, #4
 8006992:	f004 fc43 	bl	800b21c <frexpf>
	float sig_abs = fabsf(sig);
 8006996:	eef0 7ac0 	vabs.f32	s15, s0
	uint32_t sig_i = 0;

	if (sig_abs >= 0.5f) {
 800699a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800699e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a6:	db21      	blt.n	80069ec <buffer_append_float32_auto+0x68>
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 80069a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80069b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80069f8 <buffer_append_float32_auto+0x74>
 80069b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069bc:	ee17 3a90 	vmov	r3, s15
		e += 126;
 80069c0:	9a01      	ldr	r2, [sp, #4]
 80069c2:	327e      	adds	r2, #126	; 0x7e
 80069c4:	9201      	str	r2, [sp, #4]
	}

	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 80069c6:	9a01      	ldr	r2, [sp, #4]
 80069c8:	05d2      	lsls	r2, r2, #23
 80069ca:	f002 42ff 	and.w	r2, r2, #2139095040	; 0x7f800000
 80069ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069d2:	ea42 0103 	orr.w	r1, r2, r3
	if (sig < 0) {
 80069d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069de:	d407      	bmi.n	80069f0 <buffer_append_float32_auto+0x6c>
		//res |= 1 << 31;
		res |= 0x80000000;
	}

	buffer_append_uint32(buffer, res, index);
 80069e0:	462a      	mov	r2, r5
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff ffab 	bl	800693e <buffer_append_uint32>
}
 80069e8:	b003      	add	sp, #12
 80069ea:	bd30      	pop	{r4, r5, pc}
	uint32_t sig_i = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e7ea      	b.n	80069c6 <buffer_append_float32_auto+0x42>
		res |= 0x80000000;
 80069f0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80069f4:	e7f4      	b.n	80069e0 <buffer_append_float32_auto+0x5c>
 80069f6:	bf00      	nop
 80069f8:	4b000000 	.word	0x4b000000

080069fc <buffer_get_int8>:

int8_t buffer_get_int8(const uint8_t *buffer, int32_t *index) {
	int8_t res =	((uint8_t) buffer[*index]);
 80069fc:	680b      	ldr	r3, [r1, #0]
 80069fe:	56c0      	ldrsb	r0, [r0, r3]
	*index += 1;
 8006a00:	3301      	adds	r3, #1
 8006a02:	600b      	str	r3, [r1, #0]
	return res;
}
 8006a04:	4770      	bx	lr

08006a06 <buffer_get_int16>:
	*index += 1;
	return res;
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8006a06:	680a      	ldr	r2, [r1, #0]
 8006a08:	5c83      	ldrb	r3, [r0, r2]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	b21b      	sxth	r3, r3
					((uint16_t) buffer[*index + 1]);
 8006a0e:	4410      	add	r0, r2
 8006a10:	7840      	ldrb	r0, [r0, #1]
	*index += 2;
 8006a12:	3202      	adds	r2, #2
 8006a14:	600a      	str	r2, [r1, #0]
	return res;
}
 8006a16:	4318      	orrs	r0, r3
 8006a18:	4770      	bx	lr

08006a1a <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8006a1a:	b410      	push	{r4}
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8006a1c:	680b      	ldr	r3, [r1, #0]
 8006a1e:	5cc4      	ldrb	r4, [r0, r3]
					((uint16_t) buffer[*index + 1]);
 8006a20:	4418      	add	r0, r3
 8006a22:	7840      	ldrb	r0, [r0, #1]
	*index += 2;
 8006a24:	3302      	adds	r3, #2
 8006a26:	600b      	str	r3, [r1, #0]
	return res;
}
 8006a28:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8006a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <buffer_get_uint32>:
					((uint32_t) buffer[*index + 3]);
	*index += 4;
	return res;
}

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8006a32:	b430      	push	{r4, r5}
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8006a34:	680c      	ldr	r4, [r1, #0]
 8006a36:	5d05      	ldrb	r5, [r0, r4]
					((uint32_t) buffer[*index + 1]) << 16 |
 8006a38:	1903      	adds	r3, r0, r4
 8006a3a:	785a      	ldrb	r2, [r3, #1]
 8006a3c:	0412      	lsls	r2, r2, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8006a3e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
					((uint32_t) buffer[*index + 2]) << 8 |
 8006a42:	7898      	ldrb	r0, [r3, #2]
					((uint32_t) buffer[*index + 1]) << 16 |
 8006a44:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
					((uint32_t) buffer[*index + 3]);
 8006a48:	78d8      	ldrb	r0, [r3, #3]
	*index += 4;
 8006a4a:	3404      	adds	r4, #4
 8006a4c:	600c      	str	r4, [r1, #0]
	return res;
}
 8006a4e:	4310      	orrs	r0, r2
 8006a50:	bc30      	pop	{r4, r5}
 8006a52:	4770      	bx	lr

08006a54 <buffer_get_float16>:

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8006a54:	b508      	push	{r3, lr}
 8006a56:	ed2d 8b02 	vpush	{d8}
 8006a5a:	eeb0 8a40 	vmov.f32	s16, s0
    return (float)buffer_get_int16(buffer, index) / scale;
 8006a5e:	f7ff ffd2 	bl	8006a06 <buffer_get_int16>
 8006a62:	ee00 0a10 	vmov	s0, r0
 8006a66:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8006a6a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8006a6e:	ecbd 8b02 	vpop	{d8}
 8006a72:	bd08      	pop	{r3, pc}

08006a74 <buffer_get_float32_auto>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
    return (float)buffer_get_int32(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 8006a74:	b538      	push	{r3, r4, r5, lr}
	uint32_t res = buffer_get_uint32(buffer, index);
 8006a76:	f7ff ffdc 	bl	8006a32 <buffer_get_uint32>
 8006a7a:	4604      	mov	r4, r0

	int e = (res >> 23) & 0xFF;
 8006a7c:	f3c0 55c7 	ubfx	r5, r0, #23, #8
	uint32_t sig_i = res & 0x7FFFFF;
 8006a80:	f3c0 0016 	ubfx	r0, r0, #0, #23
	//bool neg = res & (1 << 31);
	bool neg = res & (0x80000000);
	

	float sig = 0.0;
	if (e != 0 || sig_i != 0) {
 8006a84:	b905      	cbnz	r5, 8006a88 <buffer_get_float32_auto+0x14>
 8006a86:	b1d0      	cbz	r0, 8006abe <buffer_get_float32_auto+0x4a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8006a88:	ee07 0a90 	vmov	s15, r0
 8006a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a90:	ee17 0a90 	vmov	r0, s15
 8006a94:	f7f9 fd90 	bl	80005b8 <__aeabi_f2d>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <buffer_get_float32_auto+0x58>)
 8006a9c:	f7f9 fde4 	bl	8000668 <__aeabi_dmul>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <buffer_get_float32_auto+0x5c>)
 8006aa4:	f7f9 fc2a 	bl	80002fc <__adddf3>
 8006aa8:	f7fa f8d6 	bl	8000c58 <__aeabi_d2f>
 8006aac:	ee00 0a10 	vmov	s0, r0
		e -= 126;
 8006ab0:	3d7e      	subs	r5, #126	; 0x7e
	}

	if (neg) {
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	db06      	blt.n	8006ac4 <buffer_get_float32_auto+0x50>
		sig = -sig;
	}

	return ldexpf(sig, e);
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f004 fbd6 	bl	800b268 <ldexpf>
}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
	float sig = 0.0;
 8006abe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006ad4 <buffer_get_float32_auto+0x60>
 8006ac2:	e7f6      	b.n	8006ab2 <buffer_get_float32_auto+0x3e>
		sig = -sig;
 8006ac4:	eeb1 0a40 	vneg.f32	s0, s0
 8006ac8:	e7f5      	b.n	8006ab6 <buffer_get_float32_auto+0x42>
 8006aca:	bf00      	nop
 8006acc:	3e700000 	.word	0x3e700000
 8006ad0:	3fe00000 	.word	0x3fe00000
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <modGetCanGetID>:
uint8_t modCANRxBuffer[MODCAN_RXBUFFER_SIZE];

extern ConverterPhase_t phase;
extern ConverterMueasurements_t meter;

uint16_t modGetCanGetID() {
 8006ad8:	b538      	push	{r3, r4, r5, lr}
	uint16_t id = 0;
	id |= (uint16_t) HAL_GPIO_ReadPin(ID0_GPIO_Port, ID0_Pin);
 8006ada:	2110      	movs	r1, #16
 8006adc:	4812      	ldr	r0, [pc, #72]	; (8006b28 <modGetCanGetID+0x50>)
 8006ade:	f7fc fb95 	bl	800320c <HAL_GPIO_ReadPin>
 8006ae2:	b284      	uxth	r4, r0
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID1_GPIO_Port, ID1_Pin) << 1);
 8006ae4:	4d11      	ldr	r5, [pc, #68]	; (8006b2c <modGetCanGetID+0x54>)
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7fc fb8f 	bl	800320c <HAL_GPIO_ReadPin>
 8006aee:	b280      	uxth	r0, r0
 8006af0:	0040      	lsls	r0, r0, #1
 8006af2:	b280      	uxth	r0, r0
 8006af4:	4304      	orrs	r4, r0
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID2_GPIO_Port, ID2_Pin) << 2);
 8006af6:	2102      	movs	r1, #2
 8006af8:	4628      	mov	r0, r5
 8006afa:	f7fc fb87 	bl	800320c <HAL_GPIO_ReadPin>
 8006afe:	b280      	uxth	r0, r0
 8006b00:	0080      	lsls	r0, r0, #2
 8006b02:	b280      	uxth	r0, r0
 8006b04:	4304      	orrs	r4, r0
	id |= (uint16_t) (HAL_GPIO_ReadPin(ID3_GPIO_Port, ID3_Pin) << 3);
 8006b06:	2104      	movs	r1, #4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7fc fb7f 	bl	800320c <HAL_GPIO_ReadPin>
 8006b0e:	b280      	uxth	r0, r0
 8006b10:	00c0      	lsls	r0, r0, #3
 8006b12:	b280      	uxth	r0, r0
 8006b14:	4320      	orrs	r0, r4
	id = (~id) & 0x0f;
 8006b16:	43c0      	mvns	r0, r0
 8006b18:	f000 000f 	and.w	r0, r0, #15

	id += (cansettings->generalCanId);
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <modGetCanGetID+0x58>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	891c      	ldrh	r4, [r3, #8]
 8006b22:	4420      	add	r0, r4

	return id;
}
 8006b24:	b280      	uxth	r0, r0
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	48000800 	.word	0x48000800
 8006b2c:	48000400 	.word	0x48000400
 8006b30:	20002540 	.word	0x20002540

08006b34 <HAL_FDCAN_RxFifo0Callback>:

	HAL_FDCAN_Start(&hfdcan2);

}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8006b34:	b510      	push	{r4, lr}
	if (RxFifo0ITs | FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
		while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan2, FDCAN_RX_FIFO0) > 0) {
 8006b36:	2140      	movs	r1, #64	; 0x40
 8006b38:	4810      	ldr	r0, [pc, #64]	; (8006b7c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8006b3a:	f7fb ff43 	bl	80029c4 <HAL_FDCAN_GetRxFifoFillLevel>
 8006b3e:	b1d8      	cbz	r0, 8006b78 <HAL_FDCAN_RxFifo0Callback+0x44>
			HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0,
					&(RXQue[rx_wr].rxmsg), (RXQue[rx_wr].data));
 8006b40:	4c0f      	ldr	r4, [pc, #60]	; (8006b80 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	3328      	adds	r3, #40	; 0x28
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <HAL_FDCAN_RxFifo0Callback+0x50>)
			HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0,
 8006b4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006b52:	4413      	add	r3, r2
 8006b54:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006b58:	2140      	movs	r1, #64	; 0x40
 8006b5a:	4808      	ldr	r0, [pc, #32]	; (8006b7c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8006b5c:	f7fb feb4 	bl	80028c8 <HAL_FDCAN_GetRxMessage>
			rx_wr++;
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	6023      	str	r3, [r4, #0]
			rx_available++;
 8006b66:	4908      	ldr	r1, [pc, #32]	; (8006b88 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8006b68:	680a      	ldr	r2, [r1, #0]
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	600a      	str	r2, [r1, #0]
			if (rx_wr >= MODCAN_TXBUFFER_SIZE) {
 8006b6e:	2b1f      	cmp	r3, #31
 8006b70:	dde1      	ble.n	8006b36 <HAL_FDCAN_RxFifo0Callback+0x2>
				rx_wr = 0;
 8006b72:	2200      	movs	r2, #0
 8006b74:	6022      	str	r2, [r4, #0]
 8006b76:	e7de      	b.n	8006b36 <HAL_FDCAN_RxFifo0Callback+0x2>
			}
		}
	}
}
 8006b78:	bd10      	pop	{r4, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200030c8 	.word	0x200030c8
 8006b80:	2000058c 	.word	0x2000058c
 8006b84:	20002ac8 	.word	0x20002ac8
 8006b88:	20000584 	.word	0x20000584

08006b8c <modCanHandleRxMsg>:

void modCanHandleRxMsg(modCanRxQue_t *rxmsg) {
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4604      	mov	r4, r0
	CAN_PACKET_ID packetid = (CAN_PACKET_ID) rxmsg->rxmsg.Identifier & 0xf;
 8006b90:	6802      	ldr	r2, [r0, #0]
 8006b92:	f002 030f 	and.w	r3, r2, #15
	uint16_t destinaitonId;

	if (rxmsg->rxmsg.IdType == FDCAN_STANDARD_ID) {
 8006b96:	6841      	ldr	r1, [r0, #4]
 8006b98:	b949      	cbnz	r1, 8006bae <modCanHandleRxMsg+0x22>
		destinaitonId = (uint16_t) rxmsg->rxmsg.Identifier & 0x7F0;
 8006b9a:	f402 62fe 	and.w	r2, r2, #2032	; 0x7f0
	} else {
		destinaitonId = (uint16_t) (rxmsg->rxmsg.Identifier & 0x7F00) >> 8;
	}

	uint32_t DLC = rxmsg->rxmsg.DataLength >> 16;
 8006b9e:	89e5      	ldrh	r5, [r4, #14]
	if (DLC > 8)
 8006ba0:	2d08      	cmp	r5, #8
 8006ba2:	d803      	bhi.n	8006bac <modCanHandleRxMsg+0x20>

	uint8_t commands_send;
	unsigned int rxbuf_len;
	uint16_t crc;

	if (destinaitonId == canid) {
 8006ba4:	4935      	ldr	r1, [pc, #212]	; (8006c7c <modCanHandleRxMsg+0xf0>)
 8006ba6:	8809      	ldrh	r1, [r1, #0]
 8006ba8:	4291      	cmp	r1, r2
 8006baa:	d003      	beq.n	8006bb4 <modCanHandleRxMsg+0x28>
		default:
		case CAN_PACKET_MSGCOUNT:
			break;
		}
	}
}
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
		destinaitonId = (uint16_t) (rxmsg->rxmsg.Identifier & 0x7F00) >> 8;
 8006bae:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006bb2:	e7f4      	b.n	8006b9e <modCanHandleRxMsg+0x12>
		switch (packetid) {
 8006bb4:	3b05      	subs	r3, #5
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d8f8      	bhi.n	8006bac <modCanHandleRxMsg+0x20>
 8006bba:	e8df f003 	tbb	[pc, r3]
 8006bbe:	0f02      	.short	0x0f02
 8006bc0:	4920      	.short	0x4920
			if ((rxmsg->data[0] + DLC) < MODCAN_RXBUFFER_SIZE) {
 8006bc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006bc6:	195a      	adds	r2, r3, r5
 8006bc8:	2aff      	cmp	r2, #255	; 0xff
 8006bca:	d8ef      	bhi.n	8006bac <modCanHandleRxMsg+0x20>
				memcpy(modCANRxBuffer + rxmsg->data[0], rxmsg->data + 1,
 8006bcc:	1e6a      	subs	r2, r5, #1
 8006bce:	f104 0129 	add.w	r1, r4, #41	; 0x29
 8006bd2:	482b      	ldr	r0, [pc, #172]	; (8006c80 <modCanHandleRxMsg+0xf4>)
 8006bd4:	4418      	add	r0, r3
 8006bd6:	f003 fc51 	bl	800a47c <memcpy>
 8006bda:	e7e7      	b.n	8006bac <modCanHandleRxMsg+0x20>
			rxbuf_ind = (unsigned int) rxmsg->data[0] << 8;
 8006bdc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
			rxbuf_ind |= rxmsg->data[1];
 8006be0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006be4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			if (rxbuf_ind < RX_CAN_BUFFER_SIZE) {
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bec:	d2de      	bcs.n	8006bac <modCanHandleRxMsg+0x20>
				memcpy(modCANRxBuffer + rxbuf_ind, rxmsg->data + 2,
 8006bee:	1eaa      	subs	r2, r5, #2
 8006bf0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8006bf4:	4822      	ldr	r0, [pc, #136]	; (8006c80 <modCanHandleRxMsg+0xf4>)
 8006bf6:	4418      	add	r0, r3
 8006bf8:	f003 fc40 	bl	800a47c <memcpy>
 8006bfc:	e7d6      	b.n	8006bac <modCanHandleRxMsg+0x20>
			modCANRxBufferLastID = rxmsg->data[0];
 8006bfe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <modCanHandleRxMsg+0xf8>)
 8006c04:	701a      	strb	r2, [r3, #0]
			commands_send = rxmsg->data[1];
 8006c06:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
			rxbuf_len = (unsigned int) rxmsg->data[2] << 8;
 8006c0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
			rxbuf_len |= (unsigned int) rxmsg->data[3];
 8006c0e:	f894 502b 	ldrb.w	r5, [r4, #43]	; 0x2b
 8006c12:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			crc = ((uint16_t) (rxmsg->data[4] << 8))
 8006c16:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
					| (uint16_t) rxmsg->data[5];
 8006c1a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			crc = ((uint16_t) (rxmsg->data[4] << 8))
 8006c1e:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
			if (rxbuf_len > RX_CAN_BUFFER_SIZE) {
 8006c22:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006c26:	d8c1      	bhi.n	8006bac <modCanHandleRxMsg+0x20>
			if (libCRCCalcCRC16(modCANRxBuffer, rxbuf_len) == crc) {
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4815      	ldr	r0, [pc, #84]	; (8006c80 <modCanHandleRxMsg+0xf4>)
 8006c2c:	f001 fd38 	bl	80086a0 <libCRCCalcCRC16>
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d1bb      	bne.n	8006bac <modCanHandleRxMsg+0x20>
				if (commands_send) {
 8006c34:	b126      	cbz	r6, 8006c40 <modCanHandleRxMsg+0xb4>
					modCommandsSendPacket(modCANRxBuffer, rxbuf_len);
 8006c36:	4629      	mov	r1, r5
 8006c38:	4811      	ldr	r0, [pc, #68]	; (8006c80 <modCanHandleRxMsg+0xf4>)
 8006c3a:	f000 fb2b 	bl	8007294 <modCommandsSendPacket>
 8006c3e:	e7b5      	b.n	8006bac <modCanHandleRxMsg+0x20>
					modCommandsSetSendFunction(modCANSendPacketWrapper);
 8006c40:	4811      	ldr	r0, [pc, #68]	; (8006c88 <modCanHandleRxMsg+0xfc>)
 8006c42:	f000 fb21 	bl	8007288 <modCommandsSetSendFunction>
					modCommandsProcessPacket(modCANRxBuffer, rxbuf_len);
 8006c46:	4629      	mov	r1, r5
 8006c48:	480d      	ldr	r0, [pc, #52]	; (8006c80 <modCanHandleRxMsg+0xf4>)
 8006c4a:	f000 fb5d 	bl	8007308 <modCommandsProcessPacket>
 8006c4e:	e7ad      	b.n	8006bac <modCanHandleRxMsg+0x20>
			modCANRxBufferLastID = rxmsg->data[0];
 8006c50:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <modCanHandleRxMsg+0xf8>)
 8006c56:	701a      	strb	r2, [r3, #0]
			commands_send = rxmsg->data[1];
 8006c58:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
			if (commands_send) {
 8006c5c:	b12b      	cbz	r3, 8006c6a <modCanHandleRxMsg+0xde>
				modCommandsSendPacket(rxmsg->data + 2, DLC - 2);
 8006c5e:	1ea9      	subs	r1, r5, #2
 8006c60:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8006c64:	f000 fb16 	bl	8007294 <modCommandsSendPacket>
 8006c68:	e7a0      	b.n	8006bac <modCanHandleRxMsg+0x20>
				modCommandsSetSendFunction(modCANSendPacketWrapper);
 8006c6a:	4807      	ldr	r0, [pc, #28]	; (8006c88 <modCanHandleRxMsg+0xfc>)
 8006c6c:	f000 fb0c 	bl	8007288 <modCommandsSetSendFunction>
				modCommandsProcessPacket(rxmsg->data + 2, DLC - 2);
 8006c70:	1ea9      	subs	r1, r5, #2
 8006c72:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8006c76:	f000 fb47 	bl	8007308 <modCommandsProcessPacket>
 8006c7a:	e797      	b.n	8006bac <modCanHandleRxMsg+0x20>
 8006c7c:	20000580 	.word	0x20000580
 8006c80:	20002234 	.word	0x20002234
 8006c84:	20002538 	.word	0x20002538
 8006c88:	08007251 	.word	0x08007251

08006c8c <modCANGetCANEXID>:
	 case CANIDStyleFoiler:
	 returnCANID = ((uint32_t) destinationID << 8) | ((uint32_t)packetID);
	 break;
	 }*/

	return ((destinationID << 8) & 0x7F00) | (packetID & 0x00FF);
 8006c8c:	0200      	lsls	r0, r0, #8
 8006c8e:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
}
 8006c92:	4308      	orrs	r0, r1
 8006c94:	4770      	bx	lr

08006c96 <modCANGetCANID>:
	 case CANIDStyleFoiler:
	 returnCANID = ((uint32_t) destinationID << 8) | ((uint32_t)packetID);
	 break;
	 }*/

	return ((destinationID << 4) & 0x7F0) | (packetID & 0x00F);
 8006c96:	0100      	lsls	r0, r0, #4
 8006c98:	f400 60fe 	and.w	r0, r0, #2032	; 0x7f0
 8006c9c:	f001 010f 	and.w	r1, r1, #15
}
 8006ca0:	4308      	orrs	r0, r1
 8006ca2:	4770      	bx	lr

08006ca4 <modCANinit>:
void modCANinit(modCanSettings_t *s) {
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	b088      	sub	sp, #32
	cansettings = s;
 8006caa:	4c55      	ldr	r4, [pc, #340]	; (8006e00 <modCANinit+0x15c>)
 8006cac:	6020      	str	r0, [r4, #0]
	canid = modGetCanGetID();
 8006cae:	f7ff ff13 	bl	8006ad8 <modGetCanGetID>
 8006cb2:	4b54      	ldr	r3, [pc, #336]	; (8006e04 <modCANinit+0x160>)
 8006cb4:	8018      	strh	r0, [r3, #0]
	if(cansettings->baudrate < 1){
 8006cb6:	f8d4 8000 	ldr.w	r8, [r4]
 8006cba:	f8d8 7000 	ldr.w	r7, [r8]
 8006cbe:	2f00      	cmp	r7, #0
 8006cc0:	f340 808b 	ble.w	8006dda <modCANinit+0x136>
	for (int i = 9; i < 25; i++) {
 8006cc4:	2509      	movs	r5, #9
	int S2 = 0;
 8006cc6:	2300      	movs	r3, #0
	int S1 = 0;
 8006cc8:	4618      	mov	r0, r3
	int pre = 0;
 8006cca:	461e      	mov	r6, r3
	for (int i = 9; i < 25; i++) {
 8006ccc:	2d18      	cmp	r5, #24
 8006cce:	dc28      	bgt.n	8006d22 <modCANinit+0x7e>
		pre = (int) round(clockspeed / (cansettings->baudrate * i));
 8006cd0:	fb05 f607 	mul.w	r6, r5, r7
 8006cd4:	4c4c      	ldr	r4, [pc, #304]	; (8006e08 <modCANinit+0x164>)
 8006cd6:	fb94 f6f6 	sdiv	r6, r4, r6
		S1 = (int) round((cansettings->samplepoint * (float) i) - 1);
 8006cda:	edd8 7a01 	vldr	s15, [r8, #4]
 8006cde:	ee07 5a10 	vmov	s14, r5
 8006ce2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cf2:	ee17 0a90 	vmov	r0, s15
 8006cf6:	f7f9 fc5f 	bl	80005b8 <__aeabi_f2d>
 8006cfa:	ec41 0b10 	vmov	d0, r0, r1
 8006cfe:	f008 f98f 	bl	800f020 <round>
 8006d02:	ec51 0b10 	vmov	r0, r1, d0
 8006d06:	f7f9 ff5f 	bl	8000bc8 <__aeabi_d2iz>
		S2 = i - S1 - 1;
 8006d0a:	1a2b      	subs	r3, r5, r0
 8006d0c:	3b01      	subs	r3, #1
		int ActualBuspeed = clockspeed / ((S1 + S2 + 1) * pre);
 8006d0e:	18c2      	adds	r2, r0, r3
 8006d10:	fb02 6206 	mla	r2, r2, r6, r6
 8006d14:	fb94 f4f2 	sdiv	r4, r4, r2
		if ((ActualBuspeed - cansettings->baudrate) < 1) {
 8006d18:	1be4      	subs	r4, r4, r7
 8006d1a:	2c00      	cmp	r4, #0
 8006d1c:	dd01      	ble.n	8006d22 <modCANinit+0x7e>
	for (int i = 9; i < 25; i++) {
 8006d1e:	3501      	adds	r5, #1
 8006d20:	e7d4      	b.n	8006ccc <modCANinit+0x28>
	hfdcan2.Instance = FDCAN2;
 8006d22:	4a3a      	ldr	r2, [pc, #232]	; (8006e0c <modCANinit+0x168>)
 8006d24:	493a      	ldr	r1, [pc, #232]	; (8006e10 <modCANinit+0x16c>)
 8006d26:	6011      	str	r1, [r2, #0]
	hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6051      	str	r1, [r2, #4]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8006d2c:	6091      	str	r1, [r2, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8006d2e:	60d1      	str	r1, [r2, #12]
	hfdcan2.Init.AutoRetransmission = ENABLE;
 8006d30:	2401      	movs	r4, #1
 8006d32:	7414      	strb	r4, [r2, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 8006d34:	7451      	strb	r1, [r2, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8006d36:	7491      	strb	r1, [r2, #18]
	hfdcan2.Init.NominalPrescaler = (uint32_t) pre;
 8006d38:	6156      	str	r6, [r2, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8006d3a:	6194      	str	r4, [r2, #24]
	hfdcan2.Init.NominalTimeSeg1 = (uint32_t) S1;
 8006d3c:	61d0      	str	r0, [r2, #28]
	hfdcan2.Init.NominalTimeSeg2 = (uint32_t) S2;
 8006d3e:	6213      	str	r3, [r2, #32]
	hfdcan2.Init.DataPrescaler = (uint32_t) pre;
 8006d40:	6256      	str	r6, [r2, #36]	; 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8006d42:	6294      	str	r4, [r2, #40]	; 0x28
	hfdcan2.Init.DataTimeSeg1 = (uint32_t) S1;
 8006d44:	62d0      	str	r0, [r2, #44]	; 0x2c
	hfdcan2.Init.DataTimeSeg2 = (uint32_t) S2;
 8006d46:	6313      	str	r3, [r2, #48]	; 0x30
	hfdcan2.Init.StdFiltersNbr = 1;
 8006d48:	6354      	str	r4, [r2, #52]	; 0x34
	hfdcan2.Init.ExtFiltersNbr = 1;
 8006d4a:	6394      	str	r4, [r2, #56]	; 0x38
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006d4c:	63d1      	str	r1, [r2, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK) {
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7fb fb68 	bl	8002424 <HAL_FDCAN_Init>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d143      	bne.n	8006de0 <modCANinit+0x13c>
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterIndex = 0;
 8006d5c:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8006d5e:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006d60:	2301      	movs	r3, #1
 8006d62:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterID1 = modCANGetCANID(canid, CAN_PACKET_FILL_RX_BUFFER);
 8006d64:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <modCANinit+0x160>)
 8006d66:	881c      	ldrh	r4, [r3, #0]
 8006d68:	2105      	movs	r1, #5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff ff93 	bl	8006c96 <modCANGetCANID>
 8006d70:	9006      	str	r0, [sp, #24]
	sFilterConfig.FilterID2 = modCANGetCANID(canid, CAN_PACKET_MSGCOUNT - 1);
 8006d72:	2108      	movs	r1, #8
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff ff8e 	bl	8006c96 <modCANGetCANID>
 8006d7a:	9007      	str	r0, [sp, #28]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8006d7c:	a902      	add	r1, sp, #8
 8006d7e:	4823      	ldr	r0, [pc, #140]	; (8006e0c <modCANinit+0x168>)
 8006d80:	f7fb fcd0 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8006d84:	bb78      	cbnz	r0, 8006de6 <modCANinit+0x142>
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8006d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d8a:	9302      	str	r3, [sp, #8]
	sFilterConfig.FilterIndex = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9303      	str	r3, [sp, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8006d90:	9304      	str	r3, [sp, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8006d92:	2301      	movs	r3, #1
 8006d94:	9305      	str	r3, [sp, #20]
	sFilterConfig.FilterID1 = modCANGetCANEXID(canid,
 8006d96:	4b1b      	ldr	r3, [pc, #108]	; (8006e04 <modCANinit+0x160>)
 8006d98:	881c      	ldrh	r4, [r3, #0]
 8006d9a:	2105      	movs	r1, #5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f7ff ff75 	bl	8006c8c <modCANGetCANEXID>
 8006da2:	9006      	str	r0, [sp, #24]
	sFilterConfig.FilterID2 = modCANGetCANEXID(canid, CAN_PACKET_MSGCOUNT - 1);
 8006da4:	2108      	movs	r1, #8
 8006da6:	4620      	mov	r0, r4
 8006da8:	f7ff ff70 	bl	8006c8c <modCANGetCANEXID>
 8006dac:	9007      	str	r0, [sp, #28]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8006dae:	a902      	add	r1, sp, #8
 8006db0:	4816      	ldr	r0, [pc, #88]	; (8006e0c <modCANinit+0x168>)
 8006db2:	f7fb fcb7 	bl	8002724 <HAL_FDCAN_ConfigFilter>
 8006db6:	b9c8      	cbnz	r0, 8006dec <modCANinit+0x148>
	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT,
 8006db8:	2301      	movs	r3, #1
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4812      	ldr	r0, [pc, #72]	; (8006e0c <modCANinit+0x168>)
 8006dc2:	f7fb fce1 	bl	8002788 <HAL_FDCAN_ConfigGlobalFilter>
 8006dc6:	b9a0      	cbnz	r0, 8006df2 <modCANinit+0x14e>
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2101      	movs	r1, #1
 8006dcc:	480f      	ldr	r0, [pc, #60]	; (8006e0c <modCANinit+0x168>)
 8006dce:	f7fb fe09 	bl	80029e4 <HAL_FDCAN_ActivateNotification>
 8006dd2:	b988      	cbnz	r0, 8006df8 <modCANinit+0x154>
	HAL_FDCAN_Start(&hfdcan2);
 8006dd4:	480d      	ldr	r0, [pc, #52]	; (8006e0c <modCANinit+0x168>)
 8006dd6:	f7fb fcf7 	bl	80027c8 <HAL_FDCAN_Start>
}
 8006dda:	b008      	add	sp, #32
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Error_Handler();
 8006de0:	f001 ff0a 	bl	8008bf8 <Error_Handler>
 8006de4:	e7b8      	b.n	8006d58 <modCANinit+0xb4>
		Error_Handler();
 8006de6:	f001 ff07 	bl	8008bf8 <Error_Handler>
 8006dea:	e7cc      	b.n	8006d86 <modCANinit+0xe2>
		Error_Handler();
 8006dec:	f001 ff04 	bl	8008bf8 <Error_Handler>
 8006df0:	e7e2      	b.n	8006db8 <modCANinit+0x114>
		Error_Handler();
 8006df2:	f001 ff01 	bl	8008bf8 <Error_Handler>
 8006df6:	e7e7      	b.n	8006dc8 <modCANinit+0x124>
		Error_Handler();
 8006df8:	f001 fefe 	bl	8008bf8 <Error_Handler>
 8006dfc:	e7ea      	b.n	8006dd4 <modCANinit+0x130>
 8006dfe:	bf00      	nop
 8006e00:	20002540 	.word	0x20002540
 8006e04:	20000580 	.word	0x20000580
 8006e08:	00029810 	.word	0x00029810
 8006e0c:	200030c8 	.word	0x200030c8
 8006e10:	40006800 	.word	0x40006800

08006e14 <modCANTransmitStandardID>:

void modCANTransmitStandardID(uint32_t id, uint8_t *data, uint8_t len) {
 8006e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e18:	b08b      	sub	sp, #44	; 0x2c
 8006e1a:	468e      	mov	lr, r1
 8006e1c:	4694      	mov	ip, r2
	FDCAN_TxHeaderTypeDef txmsg;
	if (len > 8)
 8006e1e:	2a08      	cmp	r2, #8
 8006e20:	d901      	bls.n	8006e26 <modCANTransmitStandardID+0x12>
		len = 8;
 8006e22:	f04f 0c08 	mov.w	ip, #8

	txmsg.TxFrameType = FDCAN_DATA_FRAME;
 8006e26:	2300      	movs	r3, #0
 8006e28:	9303      	str	r3, [sp, #12]
	txmsg.IdType = FDCAN_STANDARD_ID;
 8006e2a:	9302      	str	r3, [sp, #8]
	txmsg.MessageMarker = 0;
 8006e2c:	9309      	str	r3, [sp, #36]	; 0x24
	txmsg.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8006e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e32:	9205      	str	r2, [sp, #20]
	txmsg.FDFormat = FDCAN_FRAME_CLASSIC;
 8006e34:	9307      	str	r3, [sp, #28]
	txmsg.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8006e36:	9308      	str	r3, [sp, #32]
	txmsg.BitRateSwitch = FDCAN_BRS_OFF;
 8006e38:	9306      	str	r3, [sp, #24]
	txmsg.DataLength = (uint32_t) (len << 16);
 8006e3a:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8006e3e:	9304      	str	r3, [sp, #16]
	txmsg.Identifier = id;
 8006e40:	9001      	str	r0, [sp, #4]

	TXQue[tx_wr].txmsg = txmsg;
 8006e42:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8006e98 <modCANTransmitStandardID+0x84>
 8006e46:	f8d8 7000 	ldr.w	r7, [r8]
 8006e4a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8006e9c <modCANTransmitStandardID+0x88>
 8006e4e:	262c      	movs	r6, #44	; 0x2c
 8006e50:	fb06 f607 	mul.w	r6, r6, r7
 8006e54:	eb09 0406 	add.w	r4, r9, r6
 8006e58:	ad01      	add	r5, sp, #4
 8006e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	6023      	str	r3, [r4, #0]
	memcpy(TXQue[tx_wr].data, data, sizeof(uint8_t) * len);
 8006e66:	f106 0020 	add.w	r0, r6, #32
 8006e6a:	4448      	add	r0, r9
 8006e6c:	4662      	mov	r2, ip
 8006e6e:	4671      	mov	r1, lr
 8006e70:	3004      	adds	r0, #4
 8006e72:	f003 fb03 	bl	800a47c <memcpy>
	tx_wr++;
 8006e76:	3701      	adds	r7, #1
 8006e78:	f8c8 7000 	str.w	r7, [r8]
	tx_available++;
 8006e7c:	4a05      	ldr	r2, [pc, #20]	; (8006e94 <modCANTransmitStandardID+0x80>)
 8006e7e:	6813      	ldr	r3, [r2, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	6013      	str	r3, [r2, #0]
	if (tx_wr >= MODCAN_TXBUFFER_SIZE)
 8006e84:	2f1f      	cmp	r7, #31
 8006e86:	dd02      	ble.n	8006e8e <modCANTransmitStandardID+0x7a>
		tx_wr = 0;
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c8 2000 	str.w	r2, [r8]
}
 8006e8e:	b00b      	add	sp, #44	; 0x2c
 8006e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e94:	20000590 	.word	0x20000590
 8006e98:	20000598 	.word	0x20000598
 8006e9c:	20002548 	.word	0x20002548

08006ea0 <modCANtask>:
void modCANtask(void) {
 8006ea0:	b530      	push	{r4, r5, lr}
 8006ea2:	ed2d 8b02 	vpush	{d8}
 8006ea6:	b087      	sub	sp, #28
	if (HAL_FDCAN_GetError(&hfdcan2)) {
 8006ea8:	4868      	ldr	r0, [pc, #416]	; (800704c <modCANtask+0x1ac>)
 8006eaa:	f7fb fee9 	bl	8002c80 <HAL_FDCAN_GetError>
	LED3_GPIO_Port->BRR = LED3_Pin;
 8006eae:	4b68      	ldr	r3, [pc, #416]	; (8007050 <modCANtask+0x1b0>)
 8006eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t tnow = HAL_GetTick();
 8006eb6:	f7fa f913 	bl	80010e0 <HAL_GetTick>
	dt = tnow - lasttick;
 8006eba:	4a66      	ldr	r2, [pc, #408]	; (8007054 <modCANtask+0x1b4>)
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	1ac3      	subs	r3, r0, r3
 8006ec0:	4965      	ldr	r1, [pc, #404]	; (8007058 <modCANtask+0x1b8>)
 8006ec2:	600b      	str	r3, [r1, #0]
	lasttick = tnow;
 8006ec4:	6010      	str	r0, [r2, #0]
	if (tx_available) {
 8006ec6:	4b65      	ldr	r3, [pc, #404]	; (800705c <modCANtask+0x1bc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	b9ab      	cbnz	r3, 8006ef8 <modCANtask+0x58>
	if (rx_available) {
 8006ecc:	4b64      	ldr	r3, [pc, #400]	; (8007060 <modCANtask+0x1c0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d138      	bne.n	8006f46 <modCANtask+0xa6>
	if (modDelayTick1ms(&lasttick_canmsg_stat, 1000)) {
 8006ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ed8:	4862      	ldr	r0, [pc, #392]	; (8007064 <modCANtask+0x1c4>)
 8006eda:	f001 fbf7 	bl	80086cc <modDelayTick1ms>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d148      	bne.n	8006f74 <modCANtask+0xd4>
	if (modDelayTick1ms(&lasttick_canmsg_power, 500)) {
 8006ee2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006ee6:	4860      	ldr	r0, [pc, #384]	; (8007068 <modCANtask+0x1c8>)
 8006ee8:	f001 fbf0 	bl	80086cc <modDelayTick1ms>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d17a      	bne.n	8006fe6 <modCANtask+0x146>
}
 8006ef0:	b007      	add	sp, #28
 8006ef2:	ecbd 8b02 	vpop	{d8}
 8006ef6:	bd30      	pop	{r4, r5, pc}
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2)) {
 8006ef8:	4854      	ldr	r0, [pc, #336]	; (800704c <modCANtask+0x1ac>)
 8006efa:	f7fb fd6d 	bl	80029d8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d0e4      	beq.n	8006ecc <modCANtask+0x2c>
			LED3_GPIO_Port->BSRR = LED3_Pin;
 8006f02:	4b53      	ldr	r3, [pc, #332]	; (8007050 <modCANtask+0x1b0>)
 8006f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f08:	619a      	str	r2, [r3, #24]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &(TXQue[tx_rd].txmsg),
 8006f0a:	4c58      	ldr	r4, [pc, #352]	; (800706c <modCANtask+0x1cc>)
 8006f0c:	6821      	ldr	r1, [r4, #0]
					TXQue[tx_rd].data);
 8006f0e:	232c      	movs	r3, #44	; 0x2c
 8006f10:	fb03 f301 	mul.w	r3, r3, r1
 8006f14:	f103 0220 	add.w	r2, r3, #32
 8006f18:	4955      	ldr	r1, [pc, #340]	; (8007070 <modCANtask+0x1d0>)
 8006f1a:	440a      	add	r2, r1
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &(TXQue[tx_rd].txmsg),
 8006f1c:	3204      	adds	r2, #4
 8006f1e:	4419      	add	r1, r3
 8006f20:	484a      	ldr	r0, [pc, #296]	; (800704c <modCANtask+0x1ac>)
 8006f22:	f7fb fc69 	bl	80027f8 <HAL_FDCAN_AddMessageToTxFifoQ>
			tx_rd++;
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	6023      	str	r3, [r4, #0]
			tx_available--;
 8006f2c:	494b      	ldr	r1, [pc, #300]	; (800705c <modCANtask+0x1bc>)
 8006f2e:	680a      	ldr	r2, [r1, #0]
 8006f30:	3a01      	subs	r2, #1
 8006f32:	600a      	str	r2, [r1, #0]
			if (tx_rd >= MODCAN_TXBUFFER_SIZE) {
 8006f34:	2b1f      	cmp	r3, #31
 8006f36:	ddc9      	ble.n	8006ecc <modCANtask+0x2c>
				tx_rd = 0;
 8006f38:	2200      	movs	r2, #0
 8006f3a:	6022      	str	r2, [r4, #0]
 8006f3c:	e7c6      	b.n	8006ecc <modCANtask+0x2c>
				rx_rd = 0;
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6021      	str	r1, [r4, #0]
		} while (rx_available >= (MODCAN_TXBUFFER_SIZE - 10));
 8006f42:	2b15      	cmp	r3, #21
 8006f44:	ddc6      	ble.n	8006ed4 <modCANtask+0x34>
			LED3_GPIO_Port->BSRR = LED3_Pin;
 8006f46:	4b42      	ldr	r3, [pc, #264]	; (8007050 <modCANtask+0x1b0>)
 8006f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4c:	619a      	str	r2, [r3, #24]
			modCanHandleRxMsg(&RXQue[rx_rd]);
 8006f4e:	4c49      	ldr	r4, [pc, #292]	; (8007074 <modCANtask+0x1d4>)
 8006f50:	6820      	ldr	r0, [r4, #0]
 8006f52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f56:	4b48      	ldr	r3, [pc, #288]	; (8007078 <modCANtask+0x1d8>)
 8006f58:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8006f5c:	f7ff fe16 	bl	8006b8c <modCanHandleRxMsg>
			rx_rd++;
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	3201      	adds	r2, #1
 8006f64:	6022      	str	r2, [r4, #0]
			rx_available--;
 8006f66:	493e      	ldr	r1, [pc, #248]	; (8007060 <modCANtask+0x1c0>)
 8006f68:	680b      	ldr	r3, [r1, #0]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	600b      	str	r3, [r1, #0]
			if (rx_rd >= MODCAN_TXBUFFER_SIZE) {
 8006f6e:	2a1f      	cmp	r2, #31
 8006f70:	dde7      	ble.n	8006f42 <modCANtask+0xa2>
 8006f72:	e7e4      	b.n	8006f3e <modCANtask+0x9e>
		int32_t index = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	9303      	str	r3, [sp, #12]
		buffer_append_uint8(data, (uint8_t) phase.mode, &index);
 8006f78:	4c40      	ldr	r4, [pc, #256]	; (800707c <modCANtask+0x1dc>)
 8006f7a:	aa03      	add	r2, sp, #12
 8006f7c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8006f80:	a804      	add	r0, sp, #16
 8006f82:	f7ff fcba 	bl	80068fa <buffer_append_uint8>
		buffer_append_uint8(data, (uint8_t) phase.fault, &index);
 8006f86:	aa03      	add	r2, sp, #12
 8006f88:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8006f8c:	a804      	add	r0, sp, #16
 8006f8e:	f7ff fcb4 	bl	80068fa <buffer_append_uint8>
		buffer_append_uint8(data, (uint8_t) phase.enabled, &index);
 8006f92:	aa03      	add	r2, sp, #12
 8006f94:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006f98:	a804      	add	r0, sp, #16
 8006f9a:	f7ff fcae 	bl	80068fa <buffer_append_uint8>
		buffer_append_int8(data, (int8_t) meter.TemperatureAmbient, &index);
 8006f9e:	4c38      	ldr	r4, [pc, #224]	; (8007080 <modCANtask+0x1e0>)
 8006fa0:	edd4 7a05 	vldr	s15, [r4, #20]
 8006fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa8:	edcd 7a01 	vstr	s15, [sp, #4]
 8006fac:	aa03      	add	r2, sp, #12
 8006fae:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8006fb2:	a804      	add	r0, sp, #16
 8006fb4:	f7ff fc99 	bl	80068ea <buffer_append_int8>
		buffer_append_int8(data, (int8_t) meter.TemperatureHeatsink, &index);
 8006fb8:	edd4 7a04 	vldr	s15, [r4, #16]
 8006fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc0:	edcd 7a01 	vstr	s15, [sp, #4]
 8006fc4:	aa03      	add	r2, sp, #12
 8006fc6:	f99d 1004 	ldrsb.w	r1, [sp, #4]
 8006fca:	a804      	add	r0, sp, #16
 8006fcc:	f7ff fc8d 	bl	80068ea <buffer_append_int8>
		modCANTransmitStandardID(modCANGetCANID(canid, CAN_PACKET_status), data,
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4b2c      	ldr	r3, [pc, #176]	; (8007084 <modCANtask+0x1e4>)
 8006fd4:	8818      	ldrh	r0, [r3, #0]
 8006fd6:	f7ff fe5e 	bl	8006c96 <modCANGetCANID>
 8006fda:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8006fde:	a904      	add	r1, sp, #16
 8006fe0:	f7ff ff18 	bl	8006e14 <modCANTransmitStandardID>
 8006fe4:	e77d      	b.n	8006ee2 <modCANtask+0x42>
		int32_t index = 0;
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	9503      	str	r5, [sp, #12]
		buffer_append_float16(data, meter.Vlow, 2.5e2f, &index);
 8006fea:	eddf 8a27 	vldr	s17, [pc, #156]	; 8007088 <modCANtask+0x1e8>
 8006fee:	4c24      	ldr	r4, [pc, #144]	; (8007080 <modCANtask+0x1e0>)
 8006ff0:	a903      	add	r1, sp, #12
 8006ff2:	eef0 0a68 	vmov.f32	s1, s17
 8006ff6:	ed94 0a02 	vldr	s0, [r4, #8]
 8006ffa:	a804      	add	r0, sp, #16
 8006ffc:	f7ff fcb5 	bl	800696a <buffer_append_float16>
		buffer_append_float16(data, meter.Iind, 2.0e3f, &index);
 8007000:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800708c <modCANtask+0x1ec>
 8007004:	a903      	add	r1, sp, #12
 8007006:	eef0 0a48 	vmov.f32	s1, s16
 800700a:	ed94 0a00 	vldr	s0, [r4]
 800700e:	a804      	add	r0, sp, #16
 8007010:	f7ff fcab 	bl	800696a <buffer_append_float16>
		buffer_append_float16(data, meter.Vhigh, 2.5e2f, &index);
 8007014:	a903      	add	r1, sp, #12
 8007016:	eef0 0a68 	vmov.f32	s1, s17
 800701a:	ed94 0a03 	vldr	s0, [r4, #12]
 800701e:	a804      	add	r0, sp, #16
 8007020:	f7ff fca3 	bl	800696a <buffer_append_float16>
		buffer_append_float16(data, meter.Ihigh, 2.0e3f, &index);
 8007024:	a903      	add	r1, sp, #12
 8007026:	eef0 0a48 	vmov.f32	s1, s16
 800702a:	ed94 0a01 	vldr	s0, [r4, #4]
 800702e:	a804      	add	r0, sp, #16
 8007030:	f7ff fc9b 	bl	800696a <buffer_append_float16>
		modCANTransmitStandardID(modCANGetCANID(canid, CAN_PACKET_Power), data,
 8007034:	4629      	mov	r1, r5
 8007036:	4b13      	ldr	r3, [pc, #76]	; (8007084 <modCANtask+0x1e4>)
 8007038:	8818      	ldrh	r0, [r3, #0]
 800703a:	f7ff fe2c 	bl	8006c96 <modCANGetCANID>
 800703e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8007042:	a904      	add	r1, sp, #16
 8007044:	f7ff fee6 	bl	8006e14 <modCANTransmitStandardID>
}
 8007048:	e752      	b.n	8006ef0 <modCANtask+0x50>
 800704a:	bf00      	nop
 800704c:	200030c8 	.word	0x200030c8
 8007050:	48000400 	.word	0x48000400
 8007054:	20002030 	.word	0x20002030
 8007058:	20002544 	.word	0x20002544
 800705c:	20000590 	.word	0x20000590
 8007060:	20000584 	.word	0x20000584
 8007064:	20002334 	.word	0x20002334
 8007068:	2000253c 	.word	0x2000253c
 800706c:	20000594 	.word	0x20000594
 8007070:	20002548 	.word	0x20002548
 8007074:	20000588 	.word	0x20000588
 8007078:	20002ac8 	.word	0x20002ac8
 800707c:	20001edc 	.word	0x20001edc
 8007080:	200033d0 	.word	0x200033d0
 8007084:	20000580 	.word	0x20000580
 8007088:	437a0000 	.word	0x437a0000
 800708c:	44fa0000 	.word	0x44fa0000

08007090 <modCANTransmitExtID>:

void modCANTransmitExtID(uint32_t id, uint8_t *data, uint8_t len) {
 8007090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007094:	b08b      	sub	sp, #44	; 0x2c
 8007096:	468e      	mov	lr, r1
 8007098:	4694      	mov	ip, r2
	FDCAN_TxHeaderTypeDef txmsg;

	if (len > 8)
 800709a:	2a08      	cmp	r2, #8
 800709c:	d901      	bls.n	80070a2 <modCANTransmitExtID+0x12>
		len = 8;
 800709e:	f04f 0c08 	mov.w	ip, #8

	txmsg.TxFrameType = FDCAN_DATA_FRAME;
 80070a2:	2300      	movs	r3, #0
 80070a4:	9303      	str	r3, [sp, #12]
	txmsg.IdType = FDCAN_EXTENDED_ID;
 80070a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80070aa:	9202      	str	r2, [sp, #8]
	txmsg.MessageMarker = 0;
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
	txmsg.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 80070ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070b2:	9205      	str	r2, [sp, #20]
	txmsg.FDFormat = FDCAN_FRAME_CLASSIC;
 80070b4:	9307      	str	r3, [sp, #28]
	txmsg.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80070b6:	9308      	str	r3, [sp, #32]
	txmsg.BitRateSwitch = FDCAN_BRS_OFF;
 80070b8:	9306      	str	r3, [sp, #24]
	txmsg.DataLength = (uint32_t) (len << 16);
 80070ba:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80070be:	9304      	str	r3, [sp, #16]
	txmsg.Identifier = id;
 80070c0:	9001      	str	r0, [sp, #4]

	TXQue[tx_wr].txmsg = txmsg;
 80070c2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8007118 <modCANTransmitExtID+0x88>
 80070c6:	f8d8 7000 	ldr.w	r7, [r8]
 80070ca:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800711c <modCANTransmitExtID+0x8c>
 80070ce:	262c      	movs	r6, #44	; 0x2c
 80070d0:	fb06 f607 	mul.w	r6, r6, r7
 80070d4:	eb09 0406 	add.w	r4, r9, r6
 80070d8:	ad01      	add	r5, sp, #4
 80070da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	6023      	str	r3, [r4, #0]
	memcpy(TXQue[tx_wr].data, data, sizeof(uint8_t) * len);
 80070e6:	f106 0020 	add.w	r0, r6, #32
 80070ea:	4448      	add	r0, r9
 80070ec:	4662      	mov	r2, ip
 80070ee:	4671      	mov	r1, lr
 80070f0:	3004      	adds	r0, #4
 80070f2:	f003 f9c3 	bl	800a47c <memcpy>
	tx_wr++;
 80070f6:	3701      	adds	r7, #1
 80070f8:	f8c8 7000 	str.w	r7, [r8]
	tx_available++;
 80070fc:	4a05      	ldr	r2, [pc, #20]	; (8007114 <modCANTransmitExtID+0x84>)
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	6013      	str	r3, [r2, #0]
	if (tx_wr >= MODCAN_TXBUFFER_SIZE)
 8007104:	2f1f      	cmp	r7, #31
 8007106:	dd02      	ble.n	800710e <modCANTransmitExtID+0x7e>
		tx_wr = 0;
 8007108:	2200      	movs	r2, #0
 800710a:	f8c8 2000 	str.w	r2, [r8]
}
 800710e:	b00b      	add	sp, #44	; 0x2c
 8007110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007114:	20000590 	.word	0x20000590
 8007118:	20000598 	.word	0x20000598
 800711c:	20002548 	.word	0x20002548

08007120 <modCANSendBuffer>:

void modCANSendBuffer(uint8_t controllerID, uint8_t *data, unsigned int len,
		bool send) {
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	4680      	mov	r8, r0
 8007128:	460f      	mov	r7, r1
 800712a:	4616      	mov	r6, r2
 800712c:	4699      	mov	r9, r3
	uint8_t send_buffer[8];

	if (len <= 6) {
 800712e:	2a06      	cmp	r2, #6
 8007130:	d902      	bls.n	8007138 <modCANSendBuffer+0x18>
		modCANTransmitExtID(
				modCANGetCANEXID(controllerID, CAN_PACKET_PROCESS_SHORT_BUFFER),
				send_buffer, (uint8_t) ind);
	} else {
		unsigned int end_a = 0;
		for (unsigned int i = 0; i < len; i += 7) {
 8007132:	2100      	movs	r1, #0
		unsigned int end_a = 0;
 8007134:	460c      	mov	r4, r1
 8007136:	e026      	b.n	8007186 <modCANSendBuffer+0x66>
		send_buffer[ind++] = (uint8_t) canid & 0xFF;
 8007138:	4b44      	ldr	r3, [pc, #272]	; (800724c <modCANSendBuffer+0x12c>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f88d 3000 	strb.w	r3, [sp]
		send_buffer[ind++] = send;
 8007140:	f88d 9001 	strb.w	r9, [sp, #1]
		memcpy(send_buffer + ind, data, len);
 8007144:	f10d 0002 	add.w	r0, sp, #2
 8007148:	f003 f998 	bl	800a47c <memcpy>
		ind += len;
 800714c:	3602      	adds	r6, #2
		modCANTransmitExtID(
 800714e:	2108      	movs	r1, #8
 8007150:	4640      	mov	r0, r8
 8007152:	f7ff fd9b 	bl	8006c8c <modCANGetCANEXID>
 8007156:	b2f2      	uxtb	r2, r6
 8007158:	4669      	mov	r1, sp
 800715a:	f7ff ff99 	bl	8007090 <modCANTransmitExtID>
 800715e:	e071      	b.n	8007244 <modCANSendBuffer+0x124>
			send_buffer[0] = (uint8_t) i;

			if ((i + 7) <= len) {
				memcpy(send_buffer + 1, data + i, send_len);
			} else {
				send_len = (uint8_t) (len - i);
 8007160:	b2f5      	uxtb	r5, r6
 8007162:	1aad      	subs	r5, r5, r2
 8007164:	b2ed      	uxtb	r5, r5
				memcpy(send_buffer + 1, data + i, send_len);
 8007166:	462a      	mov	r2, r5
 8007168:	4439      	add	r1, r7
 800716a:	f10d 0001 	add.w	r0, sp, #1
 800716e:	f003 f985 	bl	800a47c <memcpy>
			}

			modCANTransmitExtID(
 8007172:	2105      	movs	r1, #5
 8007174:	4640      	mov	r0, r8
 8007176:	f7ff fd89 	bl	8006c8c <modCANGetCANEXID>
 800717a:	3501      	adds	r5, #1
 800717c:	b2ea      	uxtb	r2, r5
 800717e:	4669      	mov	r1, sp
 8007180:	f7ff ff86 	bl	8007090 <modCANTransmitExtID>
		for (unsigned int i = 0; i < len; i += 7) {
 8007184:	4621      	mov	r1, r4
 8007186:	42b1      	cmp	r1, r6
 8007188:	d226      	bcs.n	80071d8 <modCANSendBuffer+0xb8>
			if (i > 255) {
 800718a:	29ff      	cmp	r1, #255	; 0xff
 800718c:	d824      	bhi.n	80071d8 <modCANSendBuffer+0xb8>
			end_a = i + 7;
 800718e:	1dcc      	adds	r4, r1, #7
			send_buffer[0] = (uint8_t) i;
 8007190:	b2ca      	uxtb	r2, r1
 8007192:	f88d 2000 	strb.w	r2, [sp]
			if ((i + 7) <= len) {
 8007196:	42a6      	cmp	r6, r4
 8007198:	d3e2      	bcc.n	8007160 <modCANSendBuffer+0x40>
				memcpy(send_buffer + 1, data + i, send_len);
 800719a:	187b      	adds	r3, r7, r1
 800719c:	587a      	ldr	r2, [r7, r1]
 800719e:	f8cd 2001 	str.w	r2, [sp, #1]
 80071a2:	889a      	ldrh	r2, [r3, #4]
 80071a4:	799b      	ldrb	r3, [r3, #6]
 80071a6:	f8ad 2005 	strh.w	r2, [sp, #5]
 80071aa:	f88d 3007 	strb.w	r3, [sp, #7]
			uint8_t send_len = 7;
 80071ae:	2507      	movs	r5, #7
 80071b0:	e7df      	b.n	8007172 <modCANSendBuffer+0x52>
			send_buffer[1] = i & 0xFF;

			if ((i + 6) <= len) {
				memcpy(send_buffer + 2, data + i, send_len);
			} else {
				send_len = (uint8_t) (len - i);
 80071b2:	b2f5      	uxtb	r5, r6
 80071b4:	1aad      	subs	r5, r5, r2
 80071b6:	b2ed      	uxtb	r5, r5
				memcpy(send_buffer + 2, data + i, send_len);
 80071b8:	462a      	mov	r2, r5
 80071ba:	1939      	adds	r1, r7, r4
 80071bc:	f10d 0002 	add.w	r0, sp, #2
 80071c0:	f003 f95c 	bl	800a47c <memcpy>
			}

			modCANTransmitExtID(
 80071c4:	2106      	movs	r1, #6
 80071c6:	4640      	mov	r0, r8
 80071c8:	f7ff fd60 	bl	8006c8c <modCANGetCANEXID>
 80071cc:	1caa      	adds	r2, r5, #2
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	4669      	mov	r1, sp
 80071d2:	f7ff ff5d 	bl	8007090 <modCANTransmitExtID>
		for (unsigned int i = end_a; i < len; i += 6) {
 80071d6:	4654      	mov	r4, sl
 80071d8:	42b4      	cmp	r4, r6
 80071da:	d213      	bcs.n	8007204 <modCANSendBuffer+0xe4>
			send_buffer[0] = (uint8_t) (i >> 8);
 80071dc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80071e0:	f88d 3000 	strb.w	r3, [sp]
			send_buffer[1] = i & 0xFF;
 80071e4:	b2e2      	uxtb	r2, r4
 80071e6:	f88d 2001 	strb.w	r2, [sp, #1]
			if ((i + 6) <= len) {
 80071ea:	f104 0a06 	add.w	sl, r4, #6
 80071ee:	45b2      	cmp	sl, r6
 80071f0:	d8df      	bhi.n	80071b2 <modCANSendBuffer+0x92>
				memcpy(send_buffer + 2, data + i, send_len);
 80071f2:	193b      	adds	r3, r7, r4
 80071f4:	593a      	ldr	r2, [r7, r4]
 80071f6:	f8cd 2002 	str.w	r2, [sp, #2]
 80071fa:	889b      	ldrh	r3, [r3, #4]
 80071fc:	f8ad 3006 	strh.w	r3, [sp, #6]
			uint8_t send_len = 6;
 8007200:	2506      	movs	r5, #6
 8007202:	e7df      	b.n	80071c4 <modCANSendBuffer+0xa4>
							CAN_PACKET_FILL_RX_BUFFER_LONG), send_buffer,
					(uint8_t) (send_len + 2));
		}

		uint32_t ind = 0;
		send_buffer[ind++] = (uint8_t) (canid >> 4);
 8007204:	4b11      	ldr	r3, [pc, #68]	; (800724c <modCANSendBuffer+0x12c>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	f3c3 1307 	ubfx	r3, r3, #4, #8
 800720c:	f88d 3000 	strb.w	r3, [sp]
		send_buffer[ind++] = send;
 8007210:	f88d 9001 	strb.w	r9, [sp, #1]
		send_buffer[ind++] = (uint8_t) (len >> 8);
 8007214:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007218:	f88d 3002 	strb.w	r3, [sp, #2]
		send_buffer[ind++] = len & 0xFF;
 800721c:	f88d 6003 	strb.w	r6, [sp, #3]
		unsigned short crc = libCRCCalcCRC16(data, len);
 8007220:	4631      	mov	r1, r6
 8007222:	4638      	mov	r0, r7
 8007224:	f001 fa3c 	bl	80086a0 <libCRCCalcCRC16>
		send_buffer[ind++] = (uint8_t) (crc >> 8);
 8007228:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800722c:	f88d 3004 	strb.w	r3, [sp, #4]
		send_buffer[ind++] = (uint8_t) (crc & 0xFF);
 8007230:	f88d 0005 	strb.w	r0, [sp, #5]

		// Old ID method
		//modCANTransmitExtID(controllerID | ((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
		modCANTransmitExtID(
 8007234:	2107      	movs	r1, #7
 8007236:	4640      	mov	r0, r8
 8007238:	f7ff fd28 	bl	8006c8c <modCANGetCANEXID>
 800723c:	2206      	movs	r2, #6
 800723e:	4669      	mov	r1, sp
 8007240:	f7ff ff26 	bl	8007090 <modCANTransmitExtID>
				modCANGetCANEXID(controllerID, CAN_PACKET_PROCESS_RX_BUFFER),
				send_buffer, (uint8_t) ind++);
	}
}
 8007244:	b002      	add	sp, #8
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	bf00      	nop
 800724c:	20000580 	.word	0x20000580

08007250 <modCANSendPacketWrapper>:

void modCANSendPacketWrapper(unsigned char *data, unsigned int length) {
 8007250:	b508      	push	{r3, lr}
 8007252:	460a      	mov	r2, r1
	modCANSendBuffer(modCANRxBufferLastID, data, length, true);
 8007254:	2301      	movs	r3, #1
 8007256:	4601      	mov	r1, r0
 8007258:	4802      	ldr	r0, [pc, #8]	; (8007264 <modCANSendPacketWrapper+0x14>)
 800725a:	7800      	ldrb	r0, [r0, #0]
 800725c:	f7ff ff60 	bl	8007120 <modCANSendBuffer>
}
 8007260:	bd08      	pop	{r3, pc}
 8007262:	bf00      	nop
 8007264:	20002538 	.word	0x20002538

08007268 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void) {
 8007268:	b508      	push	{r3, lr}

	HAL_FDCAN_IRQHandler(&hfdcan2);
 800726a:	4802      	ldr	r0, [pc, #8]	; (8007274 <FDCAN2_IT0_IRQHandler+0xc>)
 800726c:	f7fb fc40 	bl	8002af0 <HAL_FDCAN_IRQHandler>

}
 8007270:	bd08      	pop	{r3, pc}
 8007272:	bf00      	nop
 8007274:	200030c8 	.word	0x200030c8

08007278 <FDCAN2_IT1_IRQHandler>:

void FDCAN2_IT1_IRQHandler(void) {
 8007278:	b508      	push	{r3, lr}

	HAL_FDCAN_IRQHandler(&hfdcan2);
 800727a:	4802      	ldr	r0, [pc, #8]	; (8007284 <FDCAN2_IT1_IRQHandler+0xc>)
 800727c:	f7fb fc38 	bl	8002af0 <HAL_FDCAN_IRQHandler>

}
 8007280:	bd08      	pop	{r3, pc}
 8007282:	bf00      	nop
 8007284:	200030c8 	.word	0x200030c8

08007288 <modCommandsSetSendFunction>:
	//modCommandsGeneralState  = generalState;
	jumpBootloaderTrue = false;
}

void modCommandsSetSendFunction(void(*func)(unsigned char *data, unsigned int len)) {
	modCommandsSendFunction = func;
 8007288:	4b01      	ldr	r3, [pc, #4]	; (8007290 <modCommandsSetSendFunction+0x8>)
 800728a:	6018      	str	r0, [r3, #0]
}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	2000099c 	.word	0x2000099c

08007294 <modCommandsSendPacket>:

void modCommandsSendPacket(unsigned char *data, unsigned int len) {
 8007294:	b508      	push	{r3, lr}
	if (modCommandsSendFunction) {
 8007296:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <modCommandsSendPacket+0xc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	b103      	cbz	r3, 800729e <modCommandsSendPacket+0xa>
		modCommandsSendFunction(data, len);
 800729c:	4798      	blx	r3
	}
}
 800729e:	bd08      	pop	{r3, pc}
 80072a0:	2000099c 	.word	0x2000099c

080072a4 <modCommandsPrintf>:
	
	if(modDelayTick1ms(&delaytick,1000) && jumpBootloaderTrue)
		modFlashJumpToBootloader();
}

void modCommandsPrintf(const char* format, ...) {
 80072a4:	b40f      	push	{r0, r1, r2, r3}
 80072a6:	b500      	push	{lr}
 80072a8:	b083      	sub	sp, #12
 80072aa:	ab04      	add	r3, sp, #16
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list arg;
	va_start (arg, format);
 80072b0:	9301      	str	r3, [sp, #4]
	int len;
	static char print_buffer[255];

	print_buffer[0] = COMM_PRINT;
 80072b2:	480b      	ldr	r0, [pc, #44]	; (80072e0 <modCommandsPrintf+0x3c>)
 80072b4:	2115      	movs	r1, #21
 80072b6:	f800 1b01 	strb.w	r1, [r0], #1
	len = vsnprintf(print_buffer+1, 254, format, arg);
 80072ba:	21fe      	movs	r1, #254	; 0xfe
 80072bc:	f004 ffce 	bl	800c25c <vsniprintf>
	va_end (arg);

	if(len > 0) {
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dc04      	bgt.n	80072ce <modCommandsPrintf+0x2a>
		modCommandsSendPacket((unsigned char*)print_buffer, (len<254)? len+1: 255);
	}
}
 80072c4:	b003      	add	sp, #12
 80072c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ca:	b004      	add	sp, #16
 80072cc:	4770      	bx	lr
		modCommandsSendPacket((unsigned char*)print_buffer, (len<254)? len+1: 255);
 80072ce:	28fe      	cmp	r0, #254	; 0xfe
 80072d0:	bfa8      	it	ge
 80072d2:	20fe      	movge	r0, #254	; 0xfe
 80072d4:	1c41      	adds	r1, r0, #1
 80072d6:	4802      	ldr	r0, [pc, #8]	; (80072e0 <modCommandsPrintf+0x3c>)
 80072d8:	f7ff ffdc 	bl	8007294 <modCommandsSendPacket>
}
 80072dc:	e7f2      	b.n	80072c4 <modCommandsPrintf+0x20>
 80072de:	bf00      	nop
 80072e0:	200009a0 	.word	0x200009a0

080072e4 <modCommandsJumpToMainApplication>:
  __ASM volatile ("dsb 0xF":::"memory");
 80072e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072e8:	4905      	ldr	r1, [pc, #20]	; (8007300 <modCommandsJumpToMainApplication+0x1c>)
 80072ea:	68ca      	ldr	r2, [r1, #12]
 80072ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <modCommandsJumpToMainApplication+0x20>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60cb      	str	r3, [r1, #12]
 80072f6:	f3bf 8f4f 	dsb	sy
    __NOP();
 80072fa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80072fc:	e7fd      	b.n	80072fa <modCommandsJumpToMainApplication+0x16>
 80072fe:	bf00      	nop
 8007300:	e000ed00 	.word	0xe000ed00
 8007304:	05fa0004 	.word	0x05fa0004

08007308 <modCommandsProcessPacket>:
	if (!len) {
 8007308:	2900      	cmp	r1, #0
 800730a:	f000 8465 	beq.w	8007bd8 <modCommandsProcessPacket+0x8d0>
void modCommandsProcessPacket(unsigned char *data, unsigned int len) {
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	ed2d 8b04 	vpush	{d8-d9}
 8007314:	b083      	sub	sp, #12
	int32_t ind = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	9301      	str	r3, [sp, #4]
	packet_id = (COMM_PACKET_ID) data[0];
 800731a:	4604      	mov	r4, r0
 800731c:	f814 5b01 	ldrb.w	r5, [r4], #1
	last_packet_id =packet_id;
 8007320:	4b8b      	ldr	r3, [pc, #556]	; (8007550 <modCommandsProcessPacket+0x248>)
 8007322:	701d      	strb	r5, [r3, #0]
	len--;
 8007324:	1e4e      	subs	r6, r1, #1
	switch (packet_id) {
 8007326:	2d69      	cmp	r5, #105	; 0x69
 8007328:	f200 8085 	bhi.w	8007436 <modCommandsProcessPacket+0x12e>
 800732c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007330:	0092006a 	.word	0x0092006a
 8007334:	00b0009a 	.word	0x00b0009a
 8007338:	008300c6 	.word	0x008300c6
 800733c:	00830083 	.word	0x00830083
 8007340:	00830083 	.word	0x00830083
 8007344:	00830083 	.word	0x00830083
 8007348:	01200083 	.word	0x01200083
 800734c:	01c001c0 	.word	0x01c001c0
 8007350:	00830083 	.word	0x00830083
 8007354:	00830083 	.word	0x00830083
 8007358:	00830269 	.word	0x00830269
 800735c:	00830083 	.word	0x00830083
 8007360:	00830083 	.word	0x00830083
 8007364:	00830083 	.word	0x00830083
 8007368:	026f0083 	.word	0x026f0083
 800736c:	00830083 	.word	0x00830083
 8007370:	00830083 	.word	0x00830083
 8007374:	00830271 	.word	0x00830271
 8007378:	00830083 	.word	0x00830083
 800737c:	00830083 	.word	0x00830083
 8007380:	00830083 	.word	0x00830083
 8007384:	00830083 	.word	0x00830083
 8007388:	00830083 	.word	0x00830083
 800738c:	00830083 	.word	0x00830083
 8007390:	00830083 	.word	0x00830083
 8007394:	00830278 	.word	0x00830278
 8007398:	00830083 	.word	0x00830083
 800739c:	00830083 	.word	0x00830083
 80073a0:	00830083 	.word	0x00830083
 80073a4:	00830083 	.word	0x00830083
 80073a8:	00830083 	.word	0x00830083
 80073ac:	00830083 	.word	0x00830083
 80073b0:	00830083 	.word	0x00830083
 80073b4:	00830083 	.word	0x00830083
 80073b8:	00830083 	.word	0x00830083
 80073bc:	00830083 	.word	0x00830083
 80073c0:	00830083 	.word	0x00830083
 80073c4:	028c0083 	.word	0x028c0083
 80073c8:	0083035f 	.word	0x0083035f
 80073cc:	00830083 	.word	0x00830083
 80073d0:	00830083 	.word	0x00830083
 80073d4:	00830083 	.word	0x00830083
 80073d8:	00830083 	.word	0x00830083
 80073dc:	00830083 	.word	0x00830083
 80073e0:	00830083 	.word	0x00830083
 80073e4:	00830083 	.word	0x00830083
 80073e8:	00830083 	.word	0x00830083
 80073ec:	00830083 	.word	0x00830083
 80073f0:	00830083 	.word	0x00830083
 80073f4:	00830083 	.word	0x00830083
 80073f8:	00830426 	.word	0x00830426
 80073fc:	00830083 	.word	0x00830083
 8007400:	043f0083 	.word	0x043f0083
			modCommandsSendBuffer[ind++] = COMM_FW_VERSION;
 8007404:	4b53      	ldr	r3, [pc, #332]	; (8007554 <modCommandsProcessPacket+0x24c>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
			modCommandsSendBuffer[ind++] = FW_VERSION_MAJOR;
 800740a:	2101      	movs	r1, #1
 800740c:	7059      	strb	r1, [r3, #1]
			modCommandsSendBuffer[ind++] = FW_VERSION_MINOR;
 800740e:	709a      	strb	r2, [r3, #2]
			strcpy((char*)(modCommandsSendBuffer + ind), HW_NAME);
 8007410:	4a51      	ldr	r2, [pc, #324]	; (8007558 <modCommandsProcessPacket+0x250>)
 8007412:	ca03      	ldmia	r2!, {r0, r1}
 8007414:	f8c3 0003 	str.w	r0, [r3, #3]
 8007418:	f8c3 1007 	str.w	r1, [r3, #7]
			memcpy(modCommandsSendBuffer + ind, (void*) UID_BASE, 12);
 800741c:	4c4f      	ldr	r4, [pc, #316]	; (800755c <modCommandsProcessPacket+0x254>)
 800741e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007420:	f8c3 000b 	str.w	r0, [r3, #11]
 8007424:	f8c3 100f 	str.w	r1, [r3, #15]
 8007428:	f8c3 2013 	str.w	r2, [r3, #19]
			ind += 12;
 800742c:	2117      	movs	r1, #23
 800742e:	9101      	str	r1, [sp, #4]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff ff2f 	bl	8007294 <modCommandsSendPacket>
	if(modDelayTick1ms(&delaytick,1000) && jumpBootloaderTrue)
 8007436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800743a:	4849      	ldr	r0, [pc, #292]	; (8007560 <modCommandsProcessPacket+0x258>)
 800743c:	f001 f946 	bl	80086cc <modDelayTick1ms>
 8007440:	b120      	cbz	r0, 800744c <modCommandsProcessPacket+0x144>
 8007442:	4b48      	ldr	r3, [pc, #288]	; (8007564 <modCommandsProcessPacket+0x25c>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 83c3 	bne.w	8007bd2 <modCommandsProcessPacket+0x8ca>
}
 800744c:	b003      	add	sp, #12
 800744e:	ecbd 8b04 	vpop	{d8-d9}
 8007452:	bdf0      	pop	{r4, r5, r6, r7, pc}
			jumpBootloaderTrue = true;
 8007454:	4b43      	ldr	r3, [pc, #268]	; (8007564 <modCommandsProcessPacket+0x25c>)
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
			delaytick = HAL_GetTick();
 800745a:	f7f9 fe41 	bl	80010e0 <HAL_GetTick>
 800745e:	4b40      	ldr	r3, [pc, #256]	; (8007560 <modCommandsProcessPacket+0x258>)
 8007460:	6018      	str	r0, [r3, #0]
			break;
 8007462:	e7e8      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			main_halt_risky();
 8007464:	f001 fbc0 	bl	8008be8 <main_halt_risky>
			ind = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	9301      	str	r3, [sp, #4]
			flash_res = modFlashEraseNewAppData(buffer_get_uint32(data, &ind));
 800746c:	a901      	add	r1, sp, #4
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff fadf 	bl	8006a32 <buffer_get_uint32>
 8007474:	f001 fa20 	bl	80088b8 <modFlashEraseNewAppData>
 8007478:	4603      	mov	r3, r0
			modCommandsSendBuffer[ind++] = COMM_ERASE_NEW_APP;
 800747a:	4836      	ldr	r0, [pc, #216]	; (8007554 <modCommandsProcessPacket+0x24c>)
 800747c:	2102      	movs	r1, #2
 800747e:	7001      	strb	r1, [r0, #0]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? true : false;
 8007480:	9101      	str	r1, [sp, #4]
 8007482:	fab3 f383 	clz	r3, r3
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	7043      	strb	r3, [r0, #1]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800748a:	f7ff ff03 	bl	8007294 <modCommandsSendPacket>
			break;
 800748e:	e7d2      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			new_app_offset = buffer_get_uint32(data, &ind);
 8007490:	a901      	add	r1, sp, #4
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff facd 	bl	8006a32 <buffer_get_uint32>
			flash_res = modFlashWriteNewAppData(new_app_offset, data + ind, len - ind);
 8007498:	9901      	ldr	r1, [sp, #4]
 800749a:	1a72      	subs	r2, r6, r1
 800749c:	4421      	add	r1, r4
 800749e:	f001 fa4b 	bl	8008938 <modFlashWriteNewAppData>
 80074a2:	4603      	mov	r3, r0
			modCommandsSendBuffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 80074a4:	482b      	ldr	r0, [pc, #172]	; (8007554 <modCommandsProcessPacket+0x24c>)
 80074a6:	2203      	movs	r2, #3
 80074a8:	7002      	strb	r2, [r0, #0]
			modCommandsSendBuffer[ind++] = flash_res == HAL_OK ? 1 : 0;
 80074aa:	2102      	movs	r1, #2
 80074ac:	9101      	str	r1, [sp, #4]
 80074ae:	fab3 f383 	clz	r3, r3
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	7043      	strb	r3, [r0, #1]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 80074b6:	f7ff feed 	bl	8007294 <modCommandsSendPacket>
			break;
 80074ba:	e7bc      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			modCommandsSendBuffer[ind++] = COMM_GET_VALUES;
 80074bc:	2301      	movs	r3, #1
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	4c24      	ldr	r4, [pc, #144]	; (8007554 <modCommandsProcessPacket+0x24c>)
 80074c2:	2304      	movs	r3, #4
 80074c4:	7023      	strb	r3, [r4, #0]
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Iind , &ind);
 80074c6:	4d28      	ldr	r5, [pc, #160]	; (8007568 <modCommandsProcessPacket+0x260>)
 80074c8:	eb0d 0103 	add.w	r1, sp, r3
 80074cc:	ed95 0a00 	vldr	s0, [r5]
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7ff fa57 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Ihigh, &ind);
 80074d6:	a901      	add	r1, sp, #4
 80074d8:	ed95 0a01 	vldr	s0, [r5, #4]
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff fa51 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Ilow, &ind);
 80074e2:	a901      	add	r1, sp, #4
 80074e4:	ed95 0a06 	vldr	s0, [r5, #24]
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fa4b 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Vlow, &ind);
 80074ee:	a901      	add	r1, sp, #4
 80074f0:	ed95 0a02 	vldr	s0, [r5, #8]
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff fa45 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Vhigh, &ind);
 80074fa:	a901      	add	r1, sp, #4
 80074fc:	ed95 0a03 	vldr	s0, [r5, #12]
 8007500:	4620      	mov	r0, r4
 8007502:	f7ff fa3f 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.TemperatureAmbient, &ind);
 8007506:	a901      	add	r1, sp, #4
 8007508:	ed95 0a05 	vldr	s0, [r5, #20]
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff fa39 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.TemperatureHeatsink, &ind);
 8007512:	a901      	add	r1, sp, #4
 8007514:	ed95 0a04 	vldr	s0, [r5, #16]
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff fa33 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, meter.Eff, &ind);
 800751e:	a901      	add	r1, sp, #4
 8007520:	ed95 0a08 	vldr	s0, [r5, #32]
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff fa2d 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_uint8(modCommandsSendBuffer, phase.mode,  &ind);
 800752a:	4d10      	ldr	r5, [pc, #64]	; (800756c <modCommandsProcessPacket+0x264>)
 800752c:	aa01      	add	r2, sp, #4
 800752e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff f9e1 	bl	80068fa <buffer_append_uint8>
			buffer_append_uint8(modCommandsSendBuffer, phase.fault,  &ind);
 8007538:	aa01      	add	r2, sp, #4
 800753a:	f895 1029 	ldrb.w	r1, [r5, #41]	; 0x29
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff f9db 	bl	80068fa <buffer_append_uint8>
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	4620      	mov	r0, r4
 8007548:	f7ff fea4 	bl	8007294 <modCommandsSendPacket>
			break;
 800754c:	e773      	b.n	8007436 <modCommandsProcessPacket+0x12e>
 800754e:	bf00      	nop
 8007550:	2000312d 	.word	0x2000312d
 8007554:	2000059c 	.word	0x2000059c
 8007558:	0800fe1c 	.word	0x0800fe1c
 800755c:	1fff7590 	.word	0x1fff7590
 8007560:	20003130 	.word	0x20003130
 8007564:	2000312c 	.word	0x2000312c
 8007568:	200033d0 	.word	0x200033d0
 800756c:	20001edc 	.word	0x20001edc
			main_halt_risky();
 8007570:	f001 fb3a 	bl	8008be8 <main_halt_risky>
			acktiveConfig->settings.HighSideVoltageLimitSoft    = 1.0e3f * buffer_get_float32_auto(data,&ind);
 8007574:	a901      	add	r1, sp, #4
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fa7c 	bl	8006a74 <buffer_get_float32_auto>
 800757c:	4ead      	ldr	r6, [pc, #692]	; (8007834 <modCommandsProcessPacket+0x52c>)
 800757e:	6833      	ldr	r3, [r6, #0]
 8007580:	ed9f 8aad 	vldr	s16, [pc, #692]	; 8007838 <modCommandsProcessPacket+0x530>
 8007584:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007588:	ed83 0a45 	vstr	s0, [r3, #276]	; 0x114
			acktiveConfig->settings.LowSideVoltageLimitSoft     = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800758c:	a901      	add	r1, sp, #4
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff fa70 	bl	8006a74 <buffer_get_float32_auto>
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	ee20 0a08 	vmul.f32	s0, s0, s16
 800759a:	ed83 0a46 	vstr	s0, [r3, #280]	; 0x118
			acktiveConfig->settings.HighSideCurrentLimitSoft    = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800759e:	a901      	add	r1, sp, #4
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fa67 	bl	8006a74 <buffer_get_float32_auto>
 80075a6:	6833      	ldr	r3, [r6, #0]
 80075a8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075ac:	ed83 0a47 	vstr	s0, [r3, #284]	; 0x11c
			acktiveConfig->settings.LowSideCurrentMaxLimitSoft  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 80075b0:	a901      	add	r1, sp, #4
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff fa5e 	bl	8006a74 <buffer_get_float32_auto>
 80075b8:	6833      	ldr	r3, [r6, #0]
 80075ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075be:	ed83 0a48 	vstr	s0, [r3, #288]	; 0x120
			acktiveConfig->settings.PhaseHighSideEnableCurrent  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 80075c2:	a901      	add	r1, sp, #4
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff fa55 	bl	8006a74 <buffer_get_float32_auto>
 80075ca:	6833      	ldr	r3, [r6, #0]
 80075cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075d0:	ed83 0a4a 	vstr	s0, [r3, #296]	; 0x128
			acktiveConfig->settings.LowSideCurrentMinLimitSoft  = 1.0e3f * buffer_get_float32_auto(data,&ind);
 80075d4:	a901      	add	r1, sp, #4
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff fa4c 	bl	8006a74 <buffer_get_float32_auto>
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80075e2:	ed83 0a49 	vstr	s0, [r3, #292]	; 0x124
			acktiveConfig->settings.outputEnable = buffer_get_int8(data,&ind);
 80075e6:	a901      	add	r1, sp, #4
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fa07 	bl	80069fc <buffer_get_int8>
 80075ee:	6837      	ldr	r7, [r6, #0]
 80075f0:	3800      	subs	r0, #0
 80075f2:	bf18      	it	ne
 80075f4:	2001      	movne	r0, #1
 80075f6:	f887 012c 	strb.w	r0, [r7, #300]	; 0x12c
			acktiveConfig->settings.meterfilterCoeficient = buffer_get_float32_auto(data,&ind);
 80075fa:	a901      	add	r1, sp, #4
 80075fc:	4620      	mov	r0, r4
 80075fe:	f7ff fa39 	bl	8006a74 <buffer_get_float32_auto>
 8007602:	ed87 0a44 	vstr	s0, [r7, #272]	; 0x110
			acktiveConfig->mpptsettings.PO_Stepsize = buffer_get_float32_auto(data,&ind);
 8007606:	6837      	ldr	r7, [r6, #0]
 8007608:	a901      	add	r1, sp, #4
 800760a:	4620      	mov	r0, r4
 800760c:	f7ff fa32 	bl	8006a74 <buffer_get_float32_auto>
 8007610:	ed87 0a4c 	vstr	s0, [r7, #304]	; 0x130
			acktiveConfig->mpptsettings.PO_Timestep = (uint32_t)buffer_get_uint16(data, &ind);
 8007614:	a901      	add	r1, sp, #4
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff f9ff 	bl	8006a1a <buffer_get_uint16>
 800761c:	6837      	ldr	r7, [r6, #0]
 800761e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
			acktiveConfig->mpptsettings.PO_maxgradient = buffer_get_float32_auto(data,&ind);
 8007622:	a901      	add	r1, sp, #4
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff fa25 	bl	8006a74 <buffer_get_float32_auto>
 800762a:	ed87 0a4e 	vstr	s0, [r7, #312]	; 0x138
			acktiveConfig->mpptsettings.jump_PowerThreshold = buffer_get_float32_auto(data,&ind);
 800762e:	6837      	ldr	r7, [r6, #0]
 8007630:	a901      	add	r1, sp, #4
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff fa1e 	bl	8006a74 <buffer_get_float32_auto>
 8007638:	ed87 0a51 	vstr	s0, [r7, #324]	; 0x144
			acktiveConfig->mpptsettings.jump_RangeMax = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800763c:	a901      	add	r1, sp, #4
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff fa18 	bl	8006a74 <buffer_get_float32_auto>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	ee20 0a08 	vmul.f32	s0, s0, s16
 800764a:	ed83 0a4f 	vstr	s0, [r3, #316]	; 0x13c
			acktiveConfig->mpptsettings.jump_RangeMin = 1.0e3f * buffer_get_float32_auto(data,&ind);
 800764e:	a901      	add	r1, sp, #4
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff fa0f 	bl	8006a74 <buffer_get_float32_auto>
 8007656:	6833      	ldr	r3, [r6, #0]
 8007658:	ee20 8a08 	vmul.f32	s16, s0, s16
 800765c:	ed83 8a50 	vstr	s16, [r3, #320]	; 0x140
			acktiveConfig->mpptsettings.jump_Rate 		= buffer_get_uint16(data, &ind);
 8007660:	a901      	add	r1, sp, #4
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff f9d9 	bl	8006a1a <buffer_get_uint16>
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
			acktiveConfig->cansettings.baudrate			= buffer_get_uint16(data, &ind);
 800766e:	a901      	add	r1, sp, #4
 8007670:	4620      	mov	r0, r4
 8007672:	f7ff f9d2 	bl	8006a1a <buffer_get_uint16>
 8007676:	6833      	ldr	r3, [r6, #0]
 8007678:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
			acktiveConfig->cansettings.samplepoint		= buffer_get_float32_auto(data,&ind)/100.0;
 800767c:	a901      	add	r1, sp, #4
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff f9f8 	bl	8006a74 <buffer_get_float32_auto>
 8007684:	6836      	ldr	r6, [r6, #0]
 8007686:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800783c <modCommandsProcessPacket+0x534>
 800768a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800768e:	edc6 7a54 	vstr	s15, [r6, #336]	; 0x150
			acktiveConfig->cansettings.generalCanId		= buffer_get_uint16(data, &ind);
 8007692:	a901      	add	r1, sp, #4
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff f9c0 	bl	8006a1a <buffer_get_uint16>
 800769a:	f8a6 0154 	strh.w	r0, [r6, #340]	; 0x154
			modCommandsSendBuffer[ind++] = packet_id;
 800769e:	2101      	movs	r1, #1
 80076a0:	9101      	str	r1, [sp, #4]
 80076a2:	4867      	ldr	r0, [pc, #412]	; (8007840 <modCommandsProcessPacket+0x538>)
 80076a4:	7005      	strb	r5, [r0, #0]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 80076a6:	f7ff fdf5 	bl	8007294 <modCommandsSendPacket>
			main_init_after_config();
 80076aa:	f001 fa53 	bl	8008b54 <main_init_after_config>
			break;
 80076ae:	e6c2      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			if(packet_id == COMM_GET_MCCONF_DEFAULT){
 80076b0:	2d0f      	cmp	r5, #15
 80076b2:	f000 80a3 	beq.w	80077fc <modCommandsProcessPacket+0x4f4>
			modCommandsSendBuffer[ind++] = packet_id;
 80076b6:	2301      	movs	r3, #1
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	4c61      	ldr	r4, [pc, #388]	; (8007840 <modCommandsProcessPacket+0x538>)
 80076bc:	7025      	strb	r5, [r4, #0]
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.HighSideVoltageLimitSoft    ,&ind);
 80076be:	4e5d      	ldr	r6, [pc, #372]	; (8007834 <modCommandsProcessPacket+0x52c>)
 80076c0:	6833      	ldr	r3, [r6, #0]
 80076c2:	ed93 0a45 	vldr	s0, [r3, #276]	; 0x114
 80076c6:	ed9f 8a5f 	vldr	s16, [pc, #380]	; 8007844 <modCommandsProcessPacket+0x53c>
 80076ca:	a901      	add	r1, sp, #4
 80076cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff f957 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideVoltageLimitSoft     ,&ind);
 80076d6:	6833      	ldr	r3, [r6, #0]
 80076d8:	ed93 0a46 	vldr	s0, [r3, #280]	; 0x118
 80076dc:	a901      	add	r1, sp, #4
 80076de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80076e2:	4620      	mov	r0, r4
 80076e4:	f7ff f94e 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.HighSideCurrentLimitSoft    ,&ind);
 80076e8:	6833      	ldr	r3, [r6, #0]
 80076ea:	ed93 0a47 	vldr	s0, [r3, #284]	; 0x11c
 80076ee:	a901      	add	r1, sp, #4
 80076f0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7ff f945 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideCurrentMaxLimitSoft  ,&ind);
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	ed93 0a48 	vldr	s0, [r3, #288]	; 0x120
 8007700:	a901      	add	r1, sp, #4
 8007702:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007706:	4620      	mov	r0, r4
 8007708:	f7ff f93c 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.PhaseHighSideEnableCurrent ,&ind);
 800770c:	6833      	ldr	r3, [r6, #0]
 800770e:	ed93 0a4a 	vldr	s0, [r3, #296]	; 0x128
 8007712:	a901      	add	r1, sp, #4
 8007714:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007718:	4620      	mov	r0, r4
 800771a:	f7ff f933 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer,1.0e-3f*acktiveConfig->settings.LowSideCurrentMinLimitSoft ,&ind);
 800771e:	6833      	ldr	r3, [r6, #0]
 8007720:	ed93 0a49 	vldr	s0, [r3, #292]	; 0x124
 8007724:	a901      	add	r1, sp, #4
 8007726:	ee20 0a08 	vmul.f32	s0, s0, s16
 800772a:	4620      	mov	r0, r4
 800772c:	f7ff f92a 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_int8		(modCommandsSendBuffer,acktiveConfig->settings.outputEnable          	 ,&ind);
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	aa01      	add	r2, sp, #4
 8007734:	f993 112c 	ldrsb.w	r1, [r3, #300]	; 0x12c
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff f8d6 	bl	80068ea <buffer_append_int8>
			buffer_append_float32_auto(modCommandsSendBuffer,acktiveConfig->settings.meterfilterCoeficient           ,&ind);
 800773e:	6833      	ldr	r3, [r6, #0]
 8007740:	a901      	add	r1, sp, #4
 8007742:	ed93 0a44 	vldr	s0, [r3, #272]	; 0x110
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff f91c 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_Stepsize,&ind);
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	a901      	add	r1, sp, #4
 8007750:	ed93 0a4c 	vldr	s0, [r3, #304]	; 0x130
 8007754:	4620      	mov	r0, r4
 8007756:	f7ff f915 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_uint16	(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_Timestep, &ind);
 800775a:	6833      	ldr	r3, [r6, #0]
 800775c:	aa01      	add	r2, sp, #4
 800775e:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
 8007762:	4620      	mov	r0, r4
 8007764:	f7ff f8de 	bl	8006924 <buffer_append_uint16>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.PO_maxgradient,&ind);
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	a901      	add	r1, sp, #4
 800776c:	ed93 0a4e 	vldr	s0, [r3, #312]	; 0x138
 8007770:	4620      	mov	r0, r4
 8007772:	f7ff f907 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->mpptsettings.jump_PowerThreshold,&ind);
 8007776:	6833      	ldr	r3, [r6, #0]
 8007778:	a901      	add	r1, sp, #4
 800777a:	ed93 0a51 	vldr	s0, [r3, #324]	; 0x144
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff f900 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, 1.0e-3f*acktiveConfig->mpptsettings.jump_RangeMax,&ind);
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	ed93 0a4f 	vldr	s0, [r3, #316]	; 0x13c
 800778a:	a901      	add	r1, sp, #4
 800778c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff f8f7 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, 1.0e-3f*acktiveConfig->mpptsettings.jump_RangeMin,&ind);
 8007796:	6833      	ldr	r3, [r6, #0]
 8007798:	ed93 0a50 	vldr	s0, [r3, #320]	; 0x140
 800779c:	a901      	add	r1, sp, #4
 800779e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff f8ee 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_uint16(modCommandsSendBuffer, acktiveConfig->mpptsettings.jump_Rate,&ind);
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	aa01      	add	r2, sp, #4
 80077ac:	f8b3 1148 	ldrh.w	r1, [r3, #328]	; 0x148
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7ff f8b7 	bl	8006924 <buffer_append_uint16>
			buffer_append_uint16(modCommandsSendBuffer,  acktiveConfig->cansettings.baudrate,&ind);
 80077b6:	6833      	ldr	r3, [r6, #0]
 80077b8:	aa01      	add	r2, sp, #4
 80077ba:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff f8b0 	bl	8006924 <buffer_append_uint16>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->cansettings.samplepoint*100.0f, &ind);
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	ed93 0a54 	vldr	s0, [r3, #336]	; 0x150
 80077ca:	a901      	add	r1, sp, #4
 80077cc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800783c <modCommandsProcessPacket+0x534>
 80077d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff f8d5 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_uint16(modCommandsSendBuffer,  acktiveConfig->cansettings.generalCanId,&ind);
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	aa01      	add	r2, sp, #4
 80077de:	f8b3 1154 	ldrh.w	r1, [r3, #340]	; 0x154
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff f89e 	bl	8006924 <buffer_append_uint16>
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 80077e8:	9901      	ldr	r1, [sp, #4]
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff fd52 	bl	8007294 <modCommandsSendPacket>
			if(packet_id == COMM_GET_MCCONF_DEFAULT){
 80077f0:	2d0f      	cmp	r5, #15
 80077f2:	f47f ae20 	bne.w	8007436 <modCommandsProcessPacket+0x12e>
				main_init_after_config();
 80077f6:	f001 f9ad 	bl	8008b54 <main_init_after_config>
 80077fa:	e61c      	b.n	8007436 <modCommandsProcessPacket+0x12e>
				modConfigLoadDefaultConfig();
 80077fc:	f000 fa4c 	bl	8007c98 <modConfigLoadDefaultConfig>
 8007800:	e759      	b.n	80076b6 <modCommandsProcessPacket+0x3ae>
		  data[len] = '\0';
 8007802:	2300      	movs	r3, #0
 8007804:	5443      	strb	r3, [r0, r1]
		  terminal_process_string((char*)data);
 8007806:	4620      	mov	r0, r4
 8007808:	f002 f882 	bl	8009910 <terminal_process_string>
			break;
 800780c:	e613      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			modCommandsJumpToMainApplication();
 800780e:	f7ff fd69 	bl	80072e4 <modCommandsJumpToMainApplication>
			modCANSendBuffer(data[0], data + 1, len - 1, false);
 8007812:	2300      	movs	r3, #0
 8007814:	1e8a      	subs	r2, r1, #2
 8007816:	1c81      	adds	r1, r0, #2
 8007818:	7840      	ldrb	r0, [r0, #1]
 800781a:	f7ff fc81 	bl	8007120 <modCANSendBuffer>
			break;
 800781e:	e60a      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			modConfigStoreConfig();
 8007820:	f000 fa16 	bl	8007c50 <modConfigStoreConfig>
			modCommandsSendBuffer[ind++] = packet_id;
 8007824:	2101      	movs	r1, #1
 8007826:	9101      	str	r1, [sp, #4]
 8007828:	4805      	ldr	r0, [pc, #20]	; (8007840 <modCommandsProcessPacket+0x538>)
 800782a:	7005      	strb	r5, [r0, #0]
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 800782c:	f7ff fd32 	bl	8007294 <modCommandsSendPacket>
			break;
 8007830:	e601      	b.n	8007436 <modCommandsProcessPacket+0x12e>
 8007832:	bf00      	nop
 8007834:	20003490 	.word	0x20003490
 8007838:	447a0000 	.word	0x447a0000
 800783c:	42c80000 	.word	0x42c80000
 8007840:	2000059c 	.word	0x2000059c
 8007844:	3a83126f 	.word	0x3a83126f
			main_halt_risky();
 8007848:	f001 f9ce 	bl	8008be8 <main_halt_risky>
			ind = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	9301      	str	r3, [sp, #4]
			memcpy(acktiveConfig->calData.HardwareName, data + ind, 32);
 8007850:	4dc6      	ldr	r5, [pc, #792]	; (8007b6c <modCommandsProcessPacket+0x864>)
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	6826      	ldr	r6, [r4, #0]
 8007856:	6860      	ldr	r0, [r4, #4]
 8007858:	68a1      	ldr	r1, [r4, #8]
 800785a:	68e2      	ldr	r2, [r4, #12]
 800785c:	601e      	str	r6, [r3, #0]
 800785e:	6058      	str	r0, [r3, #4]
 8007860:	6099      	str	r1, [r3, #8]
 8007862:	60da      	str	r2, [r3, #12]
 8007864:	6926      	ldr	r6, [r4, #16]
 8007866:	6960      	ldr	r0, [r4, #20]
 8007868:	69a1      	ldr	r1, [r4, #24]
 800786a:	69e2      	ldr	r2, [r4, #28]
 800786c:	611e      	str	r6, [r3, #16]
 800786e:	6158      	str	r0, [r3, #20]
 8007870:	6199      	str	r1, [r3, #24]
 8007872:	61da      	str	r2, [r3, #28]
			ind += 32;
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	f103 0220 	add.w	r2, r3, #32
			memcpy(acktiveConfig->calData.HardwhareVersionString, data + ind, 8);
 800787a:	682e      	ldr	r6, [r5, #0]
 800787c:	18a0      	adds	r0, r4, r2
 800787e:	58a1      	ldr	r1, [r4, r2]
 8007880:	6842      	ldr	r2, [r0, #4]
 8007882:	6231      	str	r1, [r6, #32]
 8007884:	6272      	str	r2, [r6, #36]	; 0x24
			ind += 8;
 8007886:	f103 0228 	add.w	r2, r3, #40	; 0x28
			memcpy(acktiveConfig->calData.SerialString, data + ind, 8);
 800788a:	18a0      	adds	r0, r4, r2
 800788c:	58a1      	ldr	r1, [r4, r2]
 800788e:	6842      	ldr	r2, [r0, #4]
 8007890:	62b1      	str	r1, [r6, #40]	; 0x28
 8007892:	62f2      	str	r2, [r6, #44]	; 0x2c
			ind += 8;
 8007894:	3330      	adds	r3, #48	; 0x30
 8007896:	9301      	str	r3, [sp, #4]
			acktiveConfig->calData.InputCurrentGain     = buffer_get_float32_auto(data, &ind);
 8007898:	a901      	add	r1, sp, #4
 800789a:	4620      	mov	r0, r4
 800789c:	f7ff f8ea 	bl	8006a74 <buffer_get_float32_auto>
 80078a0:	ed86 0a0d 	vstr	s0, [r6, #52]	; 0x34
			acktiveConfig->calData.InputCurrentOffset   = buffer_get_float32_auto(data, &ind);
 80078a4:	682e      	ldr	r6, [r5, #0]
 80078a6:	a901      	add	r1, sp, #4
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7ff f8e3 	bl	8006a74 <buffer_get_float32_auto>
 80078ae:	ed86 0a0e 	vstr	s0, [r6, #56]	; 0x38
			acktiveConfig->calData.InputVoltageGain     = buffer_get_float32_auto(data, &ind);
 80078b2:	682e      	ldr	r6, [r5, #0]
 80078b4:	a901      	add	r1, sp, #4
 80078b6:	4620      	mov	r0, r4
 80078b8:	f7ff f8dc 	bl	8006a74 <buffer_get_float32_auto>
 80078bc:	ed86 0a0f 	vstr	s0, [r6, #60]	; 0x3c
			acktiveConfig->calData.InputVoltageOffset   = buffer_get_float32_auto(data, &ind);
 80078c0:	682e      	ldr	r6, [r5, #0]
 80078c2:	a901      	add	r1, sp, #4
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7ff f8d5 	bl	8006a74 <buffer_get_float32_auto>
 80078ca:	ed86 0a10 	vstr	s0, [r6, #64]	; 0x40
			acktiveConfig->calData.OutputCurrentGain    = buffer_get_float32_auto(data, &ind);
 80078ce:	682e      	ldr	r6, [r5, #0]
 80078d0:	a901      	add	r1, sp, #4
 80078d2:	4620      	mov	r0, r4
 80078d4:	f7ff f8ce 	bl	8006a74 <buffer_get_float32_auto>
 80078d8:	ed86 0a11 	vstr	s0, [r6, #68]	; 0x44
			acktiveConfig->calData.OutputCurrentOffset  = buffer_get_float32_auto(data, &ind);
 80078dc:	682e      	ldr	r6, [r5, #0]
 80078de:	a901      	add	r1, sp, #4
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff f8c7 	bl	8006a74 <buffer_get_float32_auto>
 80078e6:	ed86 0a12 	vstr	s0, [r6, #72]	; 0x48
			acktiveConfig->calData.OutputVoltageGain    = buffer_get_float32_auto(data, &ind);
 80078ea:	682e      	ldr	r6, [r5, #0]
 80078ec:	a901      	add	r1, sp, #4
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff f8c0 	bl	8006a74 <buffer_get_float32_auto>
 80078f4:	ed86 0a13 	vstr	s0, [r6, #76]	; 0x4c
			acktiveConfig->calData.OutputVoltageOffset  = buffer_get_float32_auto(data, &ind);
 80078f8:	682e      	ldr	r6, [r5, #0]
 80078fa:	a901      	add	r1, sp, #4
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7ff f8b9 	bl	8006a74 <buffer_get_float32_auto>
 8007902:	ed86 0a14 	vstr	s0, [r6, #80]	; 0x50
			acktiveConfig->calData.Temperature_B        = buffer_get_float32_auto(data, &ind);
 8007906:	682e      	ldr	r6, [r5, #0]
 8007908:	a901      	add	r1, sp, #4
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff f8b2 	bl	8006a74 <buffer_get_float32_auto>
 8007910:	ed86 0a15 	vstr	s0, [r6, #84]	; 0x54
			acktiveConfig->calData.Temperature_R        = buffer_get_float32_auto(data, &ind);
 8007914:	682e      	ldr	r6, [r5, #0]
 8007916:	a901      	add	r1, sp, #4
 8007918:	4620      	mov	r0, r4
 800791a:	f7ff f8ab 	bl	8006a74 <buffer_get_float32_auto>
 800791e:	ed86 0a16 	vstr	s0, [r6, #88]	; 0x58
			acktiveConfig->calData.Temperature_Ref      = buffer_get_float32_auto(data, &ind);
 8007922:	682e      	ldr	r6, [r5, #0]
 8007924:	a901      	add	r1, sp, #4
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff f8a4 	bl	8006a74 <buffer_get_float32_auto>
 800792c:	ed86 0a17 	vstr	s0, [r6, #92]	; 0x5c
			acktiveConfig->calData.ADC_delay            = buffer_get_float32_auto(data, &ind);
 8007930:	682e      	ldr	r6, [r5, #0]
 8007932:	a901      	add	r1, sp, #4
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff f89d 	bl	8006a74 <buffer_get_float32_auto>
 800793a:	ed86 0a18 	vstr	s0, [r6, #96]	; 0x60
			acktiveConfig->calData.SwitchingFrequency   = buffer_get_float32_auto(data, &ind);
 800793e:	682e      	ldr	r6, [r5, #0]
 8007940:	a901      	add	r1, sp, #4
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff f896 	bl	8006a74 <buffer_get_float32_auto>
 8007948:	ed86 0a19 	vstr	s0, [r6, #100]	; 0x64
			acktiveConfig->calData.ControllerFrequency  = buffer_get_float32_auto(data, &ind);
 800794c:	682e      	ldr	r6, [r5, #0]
 800794e:	a901      	add	r1, sp, #4
 8007950:	4620      	mov	r0, r4
 8007952:	f7ff f88f 	bl	8006a74 <buffer_get_float32_auto>
 8007956:	ed86 0a1a 	vstr	s0, [r6, #104]	; 0x68
			acktiveConfig->calData.DeadTimeRising       = buffer_get_float32_auto(data, &ind);
 800795a:	682e      	ldr	r6, [r5, #0]
 800795c:	a901      	add	r1, sp, #4
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff f888 	bl	8006a74 <buffer_get_float32_auto>
 8007964:	ed86 0a1b 	vstr	s0, [r6, #108]	; 0x6c
			acktiveConfig->calData.DeadtimeFalling      = buffer_get_float32_auto(data, &ind);
 8007968:	682e      	ldr	r6, [r5, #0]
 800796a:	a901      	add	r1, sp, #4
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff f881 	bl	8006a74 <buffer_get_float32_auto>
 8007972:	ed86 0a1c 	vstr	s0, [r6, #112]	; 0x70
			acktiveConfig->calData.L                    = buffer_get_float32_auto(data, &ind);
 8007976:	682e      	ldr	r6, [r5, #0]
 8007978:	a901      	add	r1, sp, #4
 800797a:	4620      	mov	r0, r4
 800797c:	f7ff f87a 	bl	8006a74 <buffer_get_float32_auto>
 8007980:	ed86 0a1d 	vstr	s0, [r6, #116]	; 0x74
			acktiveConfig->calData.Clow                 = buffer_get_float32_auto(data, &ind);
 8007984:	682e      	ldr	r6, [r5, #0]
 8007986:	a901      	add	r1, sp, #4
 8007988:	4620      	mov	r0, r4
 800798a:	f7ff f873 	bl	8006a74 <buffer_get_float32_auto>
 800798e:	ed86 0a1e 	vstr	s0, [r6, #120]	; 0x78
			acktiveConfig->calData.Chigh                = buffer_get_float32_auto(data, &ind);
 8007992:	682e      	ldr	r6, [r5, #0]
 8007994:	a901      	add	r1, sp, #4
 8007996:	4620      	mov	r0, r4
 8007998:	f7ff f86c 	bl	8006a74 <buffer_get_float32_auto>
 800799c:	ed86 0a1f 	vstr	s0, [r6, #124]	; 0x7c
			acktiveConfig->calData.RLint                = buffer_get_float32_auto(data, &ind);
 80079a0:	682e      	ldr	r6, [r5, #0]
 80079a2:	a901      	add	r1, sp, #4
 80079a4:	4620      	mov	r0, r4
 80079a6:	f7ff f865 	bl	8006a74 <buffer_get_float32_auto>
 80079aa:	ed86 0a20 	vstr	s0, [r6, #128]	; 0x80
			acktiveConfig->calData.Q                    = buffer_get_float32_auto(data, &ind);
 80079ae:	682e      	ldr	r6, [r5, #0]
 80079b0:	a901      	add	r1, sp, #4
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7ff f85e 	bl	8006a74 <buffer_get_float32_auto>
 80079b8:	ed86 0a21 	vstr	s0, [r6, #132]	; 0x84
			acktiveConfig->calData.Klim                 = buffer_get_float32_auto(data, &ind);
 80079bc:	682e      	ldr	r6, [r5, #0]
 80079be:	a901      	add	r1, sp, #4
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff f857 	bl	8006a74 <buffer_get_float32_auto>
 80079c6:	ed86 0a22 	vstr	s0, [r6, #136]	; 0x88
			acktiveConfig->calData.calibrated           = buffer_get_int8(data, &ind);
 80079ca:	a901      	add	r1, sp, #4
 80079cc:	4620      	mov	r0, r4
 80079ce:	f7ff f815 	bl	80069fc <buffer_get_int8>
 80079d2:	682c      	ldr	r4, [r5, #0]
 80079d4:	3800      	subs	r0, #0
 80079d6:	bf18      	it	ne
 80079d8:	2001      	movne	r0, #1
 80079da:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
			acktiveConfig->calData.calcrc =  libCRCCalcCRC16((unsigned char *) &(acktiveConfig->calData), sizeof(CalibrationData_t) - sizeof(uint16_t) - 2);
 80079de:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fe5c 	bl	80086a0 <libCRCCalcCRC16>
 80079e8:	f8a4 010c 	strh.w	r0, [r4, #268]	; 0x10c
			break;
 80079ec:	e523      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			modCommandsSendBuffer[ind++] = packet_id;
 80079ee:	2301      	movs	r3, #1
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	4c5f      	ldr	r4, [pc, #380]	; (8007b70 <modCommandsProcessPacket+0x868>)
 80079f4:	7025      	strb	r5, [r4, #0]
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwareName, 32, &ind); //char HardwareName[32];
 80079f6:	4d5d      	ldr	r5, [pc, #372]	; (8007b6c <modCommandsProcessPacket+0x864>)
 80079f8:	ab01      	add	r3, sp, #4
 80079fa:	2220      	movs	r2, #32
 80079fc:	6829      	ldr	r1, [r5, #0]
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7fe ff66 	bl	80068d0 <buffer_append_str>
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.HardwhareVersionString, 8, &ind); //char HardwhareVersionString[8];
 8007a04:	6829      	ldr	r1, [r5, #0]
 8007a06:	ab01      	add	r3, sp, #4
 8007a08:	2208      	movs	r2, #8
 8007a0a:	3120      	adds	r1, #32
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f7fe ff5f 	bl	80068d0 <buffer_append_str>
			buffer_append_str(modCommandsSendBuffer, acktiveConfig->calData.SerialString, 8, &ind); //char SerialString[8];
 8007a12:	6829      	ldr	r1, [r5, #0]
 8007a14:	ab01      	add	r3, sp, #4
 8007a16:	2208      	movs	r2, #8
 8007a18:	3128      	adds	r1, #40	; 0x28
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7fe ff58 	bl	80068d0 <buffer_append_str>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputCurrentGain, &ind);
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	a901      	add	r1, sp, #4
 8007a24:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f7fe ffab 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputCurrentOffset, &ind);
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	a901      	add	r1, sp, #4
 8007a32:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7fe ffa4 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputVoltageGain, &ind);
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	a901      	add	r1, sp, #4
 8007a40:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8007a44:	4620      	mov	r0, r4
 8007a46:	f7fe ff9d 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.InputVoltageOffset, &ind);
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	a901      	add	r1, sp, #4
 8007a4e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7fe ff96 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputCurrentGain, &ind);
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	a901      	add	r1, sp, #4
 8007a5c:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7fe ff8f 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputCurrentOffset, &ind);
 8007a66:	682b      	ldr	r3, [r5, #0]
 8007a68:	a901      	add	r1, sp, #4
 8007a6a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f7fe ff88 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputVoltageGain, &ind);
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	a901      	add	r1, sp, #4
 8007a78:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f7fe ff81 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.OutputVoltageOffset, &ind);
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	a901      	add	r1, sp, #4
 8007a86:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7fe ff7a 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_B, &ind);
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	a901      	add	r1, sp, #4
 8007a94:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7fe ff73 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_R, &ind);
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	a901      	add	r1, sp, #4
 8007aa2:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7fe ff6c 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Temperature_Ref, &ind);
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	a901      	add	r1, sp, #4
 8007ab0:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7fe ff65 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.ADC_delay, &ind);
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	a901      	add	r1, sp, #4
 8007abe:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fe ff5e 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.SwitchingFrequency, &ind);
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	a901      	add	r1, sp, #4
 8007acc:	ed93 0a19 	vldr	s0, [r3, #100]	; 0x64
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7fe ff57 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.ControllerFrequency, &ind);
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	a901      	add	r1, sp, #4
 8007ada:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7fe ff50 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.DeadTimeRising, &ind);
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	a901      	add	r1, sp, #4
 8007ae8:	ed93 0a1b 	vldr	s0, [r3, #108]	; 0x6c
 8007aec:	4620      	mov	r0, r4
 8007aee:	f7fe ff49 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.DeadtimeFalling, &ind);
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	a901      	add	r1, sp, #4
 8007af6:	ed93 0a1c 	vldr	s0, [r3, #112]	; 0x70
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7fe ff42 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.L, &ind);
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	a901      	add	r1, sp, #4
 8007b04:	ed93 0a1d 	vldr	s0, [r3, #116]	; 0x74
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7fe ff3b 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Clow, &ind);
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	a901      	add	r1, sp, #4
 8007b12:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7fe ff34 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Chigh, &ind);
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	a901      	add	r1, sp, #4
 8007b20:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
 8007b24:	4620      	mov	r0, r4
 8007b26:	f7fe ff2d 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.RLint, &ind);
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	a901      	add	r1, sp, #4
 8007b2e:	ed93 0a20 	vldr	s0, [r3, #128]	; 0x80
 8007b32:	4620      	mov	r0, r4
 8007b34:	f7fe ff26 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Q, &ind);
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	a901      	add	r1, sp, #4
 8007b3c:	ed93 0a21 	vldr	s0, [r3, #132]	; 0x84
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7fe ff1f 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_float32_auto(modCommandsSendBuffer, acktiveConfig->calData.Klim, &ind);
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	a901      	add	r1, sp, #4
 8007b4a:	ed93 0a22 	vldr	s0, [r3, #136]	; 0x88
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7fe ff18 	bl	8006984 <buffer_append_float32_auto>
			buffer_append_int8(modCommandsSendBuffer, acktiveConfig->calData.calibrated, &ind);
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	aa01      	add	r2, sp, #4
 8007b58:	f993 1030 	ldrsb.w	r1, [r3, #48]	; 0x30
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7fe fec4 	bl	80068ea <buffer_append_int8>
			modCommandsSendPacket(modCommandsSendBuffer, ind);
 8007b62:	9901      	ldr	r1, [sp, #4]
 8007b64:	4620      	mov	r0, r4
 8007b66:	f7ff fb95 	bl	8007294 <modCommandsSendPacket>
			break;
 8007b6a:	e464      	b.n	8007436 <modCommandsProcessPacket+0x12e>
 8007b6c:	20003490 	.word	0x20003490
 8007b70:	2000059c 	.word	0x2000059c
 8007b74:	42c80000 	.word	0x42c80000
 8007b78:	447a0000 	.word	0x447a0000
			start = 1.0e3f*buffer_get_float16(data, 1.0e2f,&ind);
 8007b7c:	ed1f 9a03 	vldr	s18, [pc, #-12]	; 8007b74 <modCommandsProcessPacket+0x86c>
 8007b80:	a901      	add	r1, sp, #4
 8007b82:	eeb0 0a49 	vmov.f32	s0, s18
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7fe ff64 	bl	8006a54 <buffer_get_float16>
 8007b8c:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 8007b78 <modCommandsProcessPacket+0x870>
 8007b90:	ee20 8a28 	vmul.f32	s16, s0, s17
			end   = 1.0e3f*buffer_get_float16(data, 1.0e2f,&ind);
 8007b94:	a901      	add	r1, sp, #4
 8007b96:	eeb0 0a49 	vmov.f32	s0, s18
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7fe ff5a 	bl	8006a54 <buffer_get_float16>
			modMpptStartSweep(start,end);
 8007ba0:	ee60 0a28 	vmul.f32	s1, s0, s17
 8007ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ba8:	f001 fa3e 	bl	8009028 <modMpptStartSweep>
			break;
 8007bac:	e443      	b.n	8007436 <modCommandsProcessPacket+0x12e>
			tempfloat = 1000.0*buffer_get_float16(data, 1.0e2f,&ind);
 8007bae:	a901      	add	r1, sp, #4
 8007bb0:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8007b74 <modCommandsProcessPacket+0x86c>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7fe ff4d 	bl	8006a54 <buffer_get_float16>
 8007bba:	ed1f 8a11 	vldr	s16, [pc, #-68]	; 8007b78 <modCommandsProcessPacket+0x870>
 8007bbe:	ee20 8a08 	vmul.f32	s16, s0, s16
			modMpptSetMode(MpptMode_ConstantVoltage);
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f001 fa4e 	bl	8009064 <modMpptSetMode>
			control_set_setpoint(tempfloat);
 8007bc8:	eeb0 0a48 	vmov.f32	s0, s16
 8007bcc:	f000 fd34 	bl	8008638 <control_set_setpoint>
 8007bd0:	e431      	b.n	8007436 <modCommandsProcessPacket+0x12e>
		modFlashJumpToBootloader();
 8007bd2:	f000 ff1b 	bl	8008a0c <modFlashJumpToBootloader>
 8007bd6:	e439      	b.n	800744c <modCommandsProcessPacket+0x144>
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <modCommandsSendSweep>:

void modCommandsJumpToMainApplication(void) {
	NVIC_SystemReset();
}

void modCommandsSendSweep(){
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	b082      	sub	sp, #8
	int32_t ind = 0;
 8007be0:	2400      	movs	r4, #0
 8007be2:	9401      	str	r4, [sp, #4]
	buffer_append_uint8(modCommandsSendBuffer, CONM_MPPT_GET_SWEEP,&ind);
 8007be4:	4d15      	ldr	r5, [pc, #84]	; (8007c3c <modCommandsSendSweep+0x60>)
 8007be6:	aa01      	add	r2, sp, #4
 8007be8:	2164      	movs	r1, #100	; 0x64
 8007bea:	4628      	mov	r0, r5
 8007bec:	f7fe fe85 	bl	80068fa <buffer_append_uint8>
	buffer_append_uint8(modCommandsSendBuffer, (uint8_t) MPPT_SWEEP_SIZE,&ind);
 8007bf0:	aa01      	add	r2, sp, #4
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7fe fe80 	bl	80068fa <buffer_append_uint8>
	for(int i =0; i < MPPT_SWEEP_SIZE; i++){
 8007bfa:	2c7f      	cmp	r4, #127	; 0x7f
 8007bfc:	dc18      	bgt.n	8007c30 <modCommandsSendSweep+0x54>
		buffer_append_float16(modCommandsSendBuffer, mppt_vs[i], 1.0e2f,&ind);
 8007bfe:	00a6      	lsls	r6, r4, #2
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <modCommandsSendSweep+0x64>)
 8007c02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c06:	4d0d      	ldr	r5, [pc, #52]	; (8007c3c <modCommandsSendSweep+0x60>)
 8007c08:	a901      	add	r1, sp, #4
 8007c0a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8007c44 <modCommandsSendSweep+0x68>
 8007c0e:	ed93 0a00 	vldr	s0, [r3]
 8007c12:	4628      	mov	r0, r5
 8007c14:	f7fe fea9 	bl	800696a <buffer_append_float16>
		buffer_append_float16(modCommandsSendBuffer, mppt_is[i], 1.0e3f,&ind);
 8007c18:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <modCommandsSendSweep+0x6c>)
 8007c1a:	4433      	add	r3, r6
 8007c1c:	a901      	add	r1, sp, #4
 8007c1e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8007c4c <modCommandsSendSweep+0x70>
 8007c22:	ed93 0a00 	vldr	s0, [r3]
 8007c26:	4628      	mov	r0, r5
 8007c28:	f7fe fe9f 	bl	800696a <buffer_append_float16>
	for(int i =0; i < MPPT_SWEEP_SIZE; i++){
 8007c2c:	3401      	adds	r4, #1
 8007c2e:	e7e4      	b.n	8007bfa <modCommandsSendSweep+0x1e>
	}
	modCommandsSendPacket(modCommandsSendBuffer, ind);
 8007c30:	9901      	ldr	r1, [sp, #4]
 8007c32:	4802      	ldr	r0, [pc, #8]	; (8007c3c <modCommandsSendSweep+0x60>)
 8007c34:	f7ff fb2e 	bl	8007294 <modCommandsSendPacket>
}
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	2000059c 	.word	0x2000059c
 8007c40:	20002034 	.word	0x20002034
 8007c44:	42c80000 	.word	0x42c80000
 8007c48:	20002338 	.word	0x20002338
 8007c4c:	447a0000 	.word	0x447a0000

08007c50 <modConfigStoreConfig>:
		}
	}
}


bool modConfigStoreConfig(void) {
 8007c50:	b508      	push	{r3, lr}
	storedConfig = config;
 8007c52:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8007c56:	4905      	ldr	r1, [pc, #20]	; (8007c6c <modConfigStoreConfig+0x1c>)
 8007c58:	4805      	ldr	r0, [pc, #20]	; (8007c70 <modConfigStoreConfig+0x20>)
 8007c5a:	f002 fc0f 	bl	800a47c <memcpy>
  __ASM volatile ("isb 0xF":::"memory");
 8007c5e:	f3bf 8f6f 	isb	sy
	__ISB();
	eeprom_save();
 8007c62:	f000 fdd1 	bl	8008808 <eeprom_save>
	return false;
}
 8007c66:	2000      	movs	r0, #0
 8007c68:	bd08      	pop	{r3, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20003134 	.word	0x20003134
 8007c70:	2001f800 	.word	0x2001f800

08007c74 <modConfigLoadConfig>:

//Load config from flash
bool modConfigLoadConfig() {
 8007c74:	b508      	push	{r3, lr}
	eeprom_load();
 8007c76:	f000 fd9b 	bl	80087b0 <eeprom_load>
	config = storedConfig;
 8007c7a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8007c7e:	4903      	ldr	r1, [pc, #12]	; (8007c8c <modConfigLoadConfig+0x18>)
 8007c80:	4803      	ldr	r0, [pc, #12]	; (8007c90 <modConfigLoadConfig+0x1c>)
 8007c82:	f002 fbfb 	bl	800a47c <memcpy>
	return true;
}
 8007c86:	2001      	movs	r0, #1
 8007c88:	bd08      	pop	{r3, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2001f800 	.word	0x2001f800
 8007c90:	20003134 	.word	0x20003134

08007c94 <modConfigStoreDefaultConfig>:
};

bool modConfigStoreDefaultConfig(void) {
	//modConfigStoreAndLoadDefaultConfig();
	return true;
}
 8007c94:	2001      	movs	r0, #1
 8007c96:	4770      	bx	lr

08007c98 <modConfigLoadDefaultConfig>:


void modConfigLoadDefaultConfig() {
 8007c98:	b4f0      	push	{r4, r5, r6, r7}
	memcpy(&config.cansettings, &defaultConvig.cansettings, sizeof(modCanSettings_t));
 8007c9a:	4c0f      	ldr	r4, [pc, #60]	; (8007cd8 <modConfigLoadDefaultConfig+0x40>)
 8007c9c:	4d0f      	ldr	r5, [pc, #60]	; (8007cdc <modConfigLoadDefaultConfig+0x44>)
 8007c9e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8007ca2:	f505 72a6 	add.w	r2, r5, #332	; 0x14c
 8007ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ca8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&config.mpptsettings, &defaultConvig.mpptsettings, sizeof(modMPPTsettings_t));
 8007cac:	f504 7698 	add.w	r6, r4, #304	; 0x130
 8007cb0:	f505 7798 	add.w	r7, r5, #304	; 0x130
 8007cb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007cb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007cb8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007cbc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	memcpy(&config.settings, &defaultConvig.settings, sizeof(ConverterSettings_t));
 8007cc0:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8007cc4:	f505 7588 	add.w	r5, r5, #272	; 0x110
 8007cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ccc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007cd4:	bcf0      	pop	{r4, r5, r6, r7}
 8007cd6:	4770      	bx	lr
 8007cd8:	20003134 	.word	0x20003134
 8007cdc:	20000234 	.word	0x20000234

08007ce0 <modConfigStoreAndLoadDefaultConfig>:
bool modConfigStoreAndLoadDefaultConfig(void) {
 8007ce0:	b508      	push	{r3, lr}
	modConfigLoadDefaultConfig();
 8007ce2:	f7ff ffd9 	bl	8007c98 <modConfigLoadDefaultConfig>
	return modConfigStoreConfig();
 8007ce6:	f7ff ffb3 	bl	8007c50 <modConfigStoreConfig>
};
 8007cea:	bd08      	pop	{r3, pc}

08007cec <modConfigInit>:
modConfig_t* modConfigInit(void) {
 8007cec:	b510      	push	{r4, lr}
	bool valid = eeprom_init();
 8007cee:	f000 fd6b 	bl	80087c8 <eeprom_init>
	if(valid){
 8007cf2:	b140      	cbz	r0, 8007d06 <modConfigInit+0x1a>
		config = storedConfig;
 8007cf4:	4c07      	ldr	r4, [pc, #28]	; (8007d14 <modConfigInit+0x28>)
 8007cf6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8007cfa:	4907      	ldr	r1, [pc, #28]	; (8007d18 <modConfigInit+0x2c>)
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f002 fbbd 	bl	800a47c <memcpy>
		return &config;
 8007d02:	4620      	mov	r0, r4
}
 8007d04:	bd10      	pop	{r4, pc}
		if(modConfigStoreAndLoadDefaultConfig() == false){
 8007d06:	f7ff ffeb 	bl	8007ce0 <modConfigStoreAndLoadDefaultConfig>
 8007d0a:	b908      	cbnz	r0, 8007d10 <modConfigInit+0x24>
			return &config;
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <modConfigInit+0x28>)
 8007d0e:	e7f9      	b.n	8007d04 <modConfigInit+0x18>
			return (modConfig_t*)0x0;
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7f7      	b.n	8007d04 <modConfigInit+0x18>
 8007d14:	20003134 	.word	0x20003134
 8007d18:	2001f800 	.word	0x2001f800

08007d1c <control_controlloop>:

	HAL_Delay(100);
}


void control_controlloop(ConverterPhase_t* p){
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	4604      	mov	r4, r0

	//Reset the mode variable.
	p->mode = PhaseMode_CIV;
 8007d20:	2300      	movs	r3, #0
 8007d22:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

	//Calculate converter input and output currents
	p->Power = (p->Ihigh*p->Vhigh)*1.0e-6f;
 8007d26:	ed90 5a02 	vldr	s10, [r0, #8]
 8007d2a:	edd0 3a01 	vldr	s7, [r0, #4]
 8007d2e:	ee65 5a23 	vmul.f32	s11, s10, s7
 8007d32:	eddf 7ace 	vldr	s15, [pc, #824]	; 800806c <control_controlloop+0x350>
 8007d36:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8007d3a:	edc0 5a08 	vstr	s11, [r0, #32]

	//Ipv observer
	float dvdt = (p->Vlow - p->Vlowm1) / (float)Ts;
 8007d3e:	ed90 7a03 	vldr	s14, [r0, #12]
 8007d42:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8007d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d4a:	4bc9      	ldr	r3, [pc, #804]	; (8008070 <control_controlloop+0x354>)
 8007d4c:	edd3 4a00 	vldr	s9, [r3]
 8007d50:	eec7 6aa4 	vdiv.f32	s13, s15, s9

	p->Vlowm1 = p->Vlow;
 8007d54:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
	float Ilowest = cal.Clow*dvdt + p->Iind;
 8007d58:	4bc6      	ldr	r3, [pc, #792]	; (8008074 <control_controlloop+0x358>)
 8007d5a:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8007d5e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007d62:	edd0 7a00 	vldr	s15, [r0]
 8007d66:	ee36 6a27 	vadd.f32	s12, s12, s15
	EMA(p->Ilow, Ilowest, CURRENT_PV_FORGETING_FACTOR);
 8007d6a:	edd0 6a04 	vldr	s13, [r0, #16]
 8007d6e:	ed9f 4ac2 	vldr	s8, [pc, #776]	; 8008078 <control_controlloop+0x35c>
 8007d72:	ee66 6a84 	vmul.f32	s13, s13, s8
 8007d76:	ed9f 4ac1 	vldr	s8, [pc, #772]	; 800807c <control_controlloop+0x360>
 8007d7a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007d7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007d82:	edc0 6a04 	vstr	s13, [r0, #16]

	if(p->Power){
 8007d86:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8e:	f000 8091 	beq.w	8007eb4 <control_controlloop+0x198>
		p->eff = (p->Power)/(p->Ilow*p->Vlow*1.0e-6f);
 8007d92:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007d96:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 800806c <control_controlloop+0x350>
 8007d9a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007d9e:	ee85 4a86 	vdiv.f32	s8, s11, s12
 8007da2:	ed80 4a09 	vstr	s8, [r0, #36]	; 0x24
	float Vn = 0.0f;
	float Ilim = 0.0f;

#ifdef HW_TOPOLOGY_BOOST

	float Vnn = p->Vsp - (p->Ilow *(ControllerR+cal.RLint));
 8007da6:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
 8007daa:	4bb2      	ldr	r3, [pc, #712]	; (8008074 <control_controlloop+0x358>)
 8007dac:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8007db0:	4ab3      	ldr	r2, [pc, #716]	; (8008080 <control_controlloop+0x364>)
 8007db2:	edd2 2a00 	vldr	s5, [r2]
 8007db6:	ee36 6a22 	vadd.f32	s12, s12, s5
 8007dba:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007dbe:	ee75 6ae6 	vsub.f32	s13, s11, s13

	Ilim = p->Iindlim;
 8007dc2:	edd4 5a0e 	vldr	s11, [r4, #56]	; 0x38

	//Output voltage limit
	float Ioutlim = 0.8f * cal.Klim * cal.Chigh*(p->Vhighlim - p->Vhigh)/(Ts) + p->Ihigh;
 8007dc6:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8007dca:	ed9f 4aae 	vldr	s8, [pc, #696]	; 8008084 <control_controlloop+0x368>
 8007dce:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007dd2:	ed93 4a1f 	vldr	s8, [r3, #124]	; 0x7c
 8007dd6:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007dda:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
 8007dde:	ee34 4a63 	vsub.f32	s8, s8, s7
 8007de2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007de6:	ee86 4a24 	vdiv.f32	s8, s12, s9
 8007dea:	ee35 5a04 	vadd.f32	s10, s10, s8

	bool ioutlimited = false;
	if(Ioutlim > p->Ihighlim){
 8007dee:	ed94 4a0f 	vldr	s8, [r4, #60]	; 0x3c
 8007df2:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8007df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfa:	d45e      	bmi.n	8007eba <control_controlloop+0x19e>
	float Ioutlim = 0.8f * cal.Klim * cal.Chigh*(p->Vhighlim - p->Vhigh)/(Ts) + p->Ihigh;
 8007dfc:	eeb0 4a45 	vmov.f32	s8, s10
	bool ioutlimited = false;
 8007e00:	2300      	movs	r3, #0
		Ioutlim =  p->Ihighlim;
		ioutlimited=true;
	}

	float Ilimmaxvout = Ioutlim/(1.0f-p->dutycycle);
 8007e02:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
 8007e06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007e0a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007e0e:	ee84 5a06 	vdiv.f32	s10, s8, s12

	//Limit the input current to hifgher than 0, to prefent current undershoot.

	if(Ilimmaxvout < 0.0){
 8007e12:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	d450      	bmi.n	8007ebe <control_controlloop+0x1a2>
		Ilimmaxvout = 0.0f;
	}

	if(Ilim > Ilimmaxvout){
 8007e1c:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8007e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e24:	d506      	bpl.n	8007e34 <control_controlloop+0x118>
		Ilim = Ilimmaxvout;
		if(ioutlimited){
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d04c      	beq.n	8007ec4 <control_controlloop+0x1a8>
			p->mode = PhaseMode_COC;
 8007e2a:	2304      	movs	r3, #4
 8007e2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		Ilim = Ilimmaxvout;
 8007e30:	eef0 5a45 	vmov.f32	s11, s10
		}else{
			p->mode = PhaseMode_COV;
		}
	}

	p->Ilimvout = Ilim / 1000.0f;
 8007e34:	ed9f 5a94 	vldr	s10, [pc, #592]	; 8008088 <control_controlloop+0x36c>
 8007e38:	ee85 6a85 	vdiv.f32	s12, s11, s10
 8007e3c:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48


	//Current limit
	//float Vnlimup = -p->Vlow - (settings.RLint * p->Iind) + ((settings.Klim * settings.L /Ts)*(settings.PhaseCurrentMin - p->Iind) );
	//float Vnlimlo = -p->Vlow - (settings.RLint * p->Iind) + ((settings.Klim * settings.L /Ts)*(Ilim - p->Iind) );
	float Vnlimup = +p->Vlow + (cal.RLint * p->Iind) - (cal.Klim*cal.L*(settings.LowSideCurrentMinLimitSoft - p->Iind)/Ts);
 8007e40:	4b8c      	ldr	r3, [pc, #560]	; (8008074 <control_controlloop+0x358>)
 8007e42:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8007e46:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007e4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007e4e:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8007e52:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
 8007e56:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007e5a:	4b8c      	ldr	r3, [pc, #560]	; (800808c <control_controlloop+0x370>)
 8007e5c:	ed93 5a05 	vldr	s10, [r3, #20]
 8007e60:	ee35 3a67 	vsub.f32	s6, s10, s15
 8007e64:	ee26 3a03 	vmul.f32	s6, s12, s6
 8007e68:	ee83 4a24 	vdiv.f32	s8, s6, s9
 8007e6c:	ee37 4a44 	vsub.f32	s8, s14, s8
	float Vnlimlo = +p->Vlow + (cal.RLint * p->Iind) - (cal.Klim*cal.L*(Ilim - p->Iind)/Ts );
 8007e70:	ee35 3ae7 	vsub.f32	s6, s11, s15
 8007e74:	ee26 6a03 	vmul.f32	s12, s12, s6
 8007e78:	ee86 3a24 	vdiv.f32	s6, s12, s9
 8007e7c:	ee37 7a43 	vsub.f32	s14, s14, s6


	Vn = Vnn + (p->Iind*ControllerR);
 8007e80:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007e84:	ee77 7aa6 	vadd.f32	s15, s15, s13

	//Limit Vnn to limit phase current
	if(Vn > Vnlimup){
 8007e88:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8007e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e90:	d504      	bpl.n	8007e9c <control_controlloop+0x180>
		Vn = Vnlimup;
		p->mode = PhaseMode_MinInputCurrent;
 8007e92:	2302      	movs	r3, #2
 8007e94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		Vn = Vnlimup;
 8007e98:	eef0 7a44 	vmov.f32	s15, s8
	}

	if(Vn < Vnlimlo){
 8007e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea4:	d514      	bpl.n	8007ed0 <control_controlloop+0x1b4>
		Vn = Vnlimlo;
		if(p->mode == PhaseMode_CIV)
 8007ea6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007eaa:	b9db      	cbnz	r3, 8007ee4 <control_controlloop+0x1c8>
			p->mode = PhaseMode_CIC;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007eb2:	e017      	b.n	8007ee4 <control_controlloop+0x1c8>
		p->eff = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6243      	str	r3, [r0, #36]	; 0x24
 8007eb8:	e775      	b.n	8007da6 <control_controlloop+0x8a>
		ioutlimited=true;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7a1      	b.n	8007e02 <control_controlloop+0xe6>
		Ilimmaxvout = 0.0f;
 8007ebe:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8008090 <control_controlloop+0x374>
 8007ec2:	e7ab      	b.n	8007e1c <control_controlloop+0x100>
			p->mode = PhaseMode_COV;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		Ilim = Ilimmaxvout;
 8007eca:	eef0 5a45 	vmov.f32	s11, s10
 8007ece:	e7b1      	b.n	8007e34 <control_controlloop+0x118>
	}else{
		if(p->mode != PhaseMode_MinInputCurrent)
 8007ed0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	f000 80b8 	beq.w	800804a <control_controlloop+0x32e>
			p->mode = PhaseMode_CIV;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007ee0:	eeb0 7a67 	vmov.f32	s14, s15
    Vn = p->Vlow + (settings.RLint * p->Iind) - (settings.Klim*settings.L*(Isp - p->Iind)/Ts );

    //Ilim = Isp;
#endif

	float Dn = Vn / p->Vhigh;
 8007ee4:	eec7 7a23 	vdiv.f32	s15, s14, s7

	if (Dn > 0.999f){
 8007ee8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8008094 <control_controlloop+0x378>
 8007eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef4:	dd01      	ble.n	8007efa <control_controlloop+0x1de>
		Dn = 0.999f;
 8007ef6:	eef0 7a47 	vmov.f32	s15, s14
	}
	if (Dn < 0.001f){
 8007efa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008098 <control_controlloop+0x37c>
 8007efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	d501      	bpl.n	8007f0c <control_controlloop+0x1f0>
		Dn = 0.001f;
 8007f08:	eef0 7a47 	vmov.f32	s15, s14
	}

	p->dutycycle = 1.0f-Dn;
 8007f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f14:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	}

	//If the upper current limit is lower then the lower current limit, set the duty cycle to 0
	//This ensure full shutdown when the power level gets towards zero.
	bool disable_voutlim = false;
	if(fabsf(Ilim) < fabsf(settings.LowSideCurrentMinLimitSoft)){
 8007f18:	eef0 5ae5 	vabs.f32	s11, s11
 8007f1c:	eeb0 5ac5 	vabs.f32	s10, s10
 8007f20:	eef4 5ac5 	vcmpe.f32	s11, s10
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	f140 8092 	bpl.w	8008050 <control_controlloop+0x334>
		p->HSEport->BRR = p->HSEpin;
 8007f2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007f2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f30:	629a      	str	r2, [r3, #40]	; 0x28
		p->PENport->BRR = p->PENpin;
 8007f32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28
		}

		//modConverterPWMOutputEnable();
	}

	if(p->fault != Converter_OK){
 8007f38:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8090 	beq.w	8008062 <control_controlloop+0x346>
#ifndef SIMULATION
	phase.PENport->BRR = phase.PENpin;
	phase.HSEport->BRR = phase.HSEpin;
	DREN_GPIO_Port->BRR = DREN_Pin;
#endif
	phase.enabled = false;
 8007f42:	4b56      	ldr	r3, [pc, #344]	; (800809c <control_controlloop+0x380>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	EMA(meter.Iind, p->Iind*0.001f,settings.meterfilterCoeficient);
 8007f4a:	4b50      	ldr	r3, [pc, #320]	; (800808c <control_controlloop+0x370>)
 8007f4c:	edd3 7a00 	vldr	s15, [r3]
 8007f50:	4b53      	ldr	r3, [pc, #332]	; (80080a0 <control_controlloop+0x384>)
 8007f52:	edd3 6a00 	vldr	s13, [r3]
 8007f56:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f62:	ed94 6a00 	vldr	s12, [r4]
 8007f66:	ee27 6a06 	vmul.f32	s12, s14, s12
 8007f6a:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8008098 <control_controlloop+0x37c>
 8007f6e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007f72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007f76:	edc3 6a00 	vstr	s13, [r3]
	EMA(meter.Ihigh, p->Ihigh*0.001f,settings.meterfilterCoeficient);
 8007f7a:	edd3 6a01 	vldr	s13, [r3, #4]
 8007f7e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007f82:	edd4 6a02 	vldr	s13, [r4, #8]
 8007f86:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007f8a:	ee66 6a85 	vmul.f32	s13, s13, s10
 8007f8e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007f92:	edc3 6a01 	vstr	s13, [r3, #4]
	EMA(meter.Ilow, p->Ilow*0.001f,settings.meterfilterCoeficient);
 8007f96:	ed93 6a06 	vldr	s12, [r3, #24]
 8007f9a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007f9e:	edd4 5a04 	vldr	s11, [r4, #16]
 8007fa2:	ee67 5a25 	vmul.f32	s11, s14, s11
 8007fa6:	ee65 5a85 	vmul.f32	s11, s11, s10
 8007faa:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007fae:	ed83 6a06 	vstr	s12, [r3, #24]
	EMA(meter.Vlow, p->Vlow*0.001f,settings.meterfilterCoeficient);
 8007fb2:	ed93 6a02 	vldr	s12, [r3, #8]
 8007fb6:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007fba:	edd4 5a03 	vldr	s11, [r4, #12]
 8007fbe:	ee67 5a25 	vmul.f32	s11, s14, s11
 8007fc2:	ee65 5a85 	vmul.f32	s11, s11, s10
 8007fc6:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007fca:	ed83 6a02 	vstr	s12, [r3, #8]
	EMA(meter.Vhigh, p->Vhigh*0.001f,settings.meterfilterCoeficient);
 8007fce:	ed93 6a03 	vldr	s12, [r3, #12]
 8007fd2:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007fd6:	edd4 5a01 	vldr	s11, [r4, #4]
 8007fda:	ee67 5a25 	vmul.f32	s11, s14, s11
 8007fde:	ee65 5a85 	vmul.f32	s11, s11, s10
 8007fe2:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007fe6:	ed83 6a03 	vstr	s12, [r3, #12]
	EMA(meter.Eff, p->eff,settings.meterfilterCoeficient);
 8007fea:	edd3 5a08 	vldr	s11, [r3, #32]
 8007fee:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8007ff2:	ed94 5a09 	vldr	s10, [r4, #36]	; 0x24
 8007ff6:	ee27 5a05 	vmul.f32	s10, s14, s10
 8007ffa:	ee75 5a85 	vadd.f32	s11, s11, s10
 8007ffe:	edc3 5a08 	vstr	s11, [r3, #32]
	EMA(meter.TemperatureAmbient, p->TemperatureAmbient,settings.meterfilterCoeficient);
 8008002:	edd3 5a05 	vldr	s11, [r3, #20]
 8008006:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800800a:	ed94 5a05 	vldr	s10, [r4, #20]
 800800e:	ee27 5a05 	vmul.f32	s10, s14, s10
 8008012:	ee75 5a85 	vadd.f32	s11, s11, s10
 8008016:	edc3 5a05 	vstr	s11, [r3, #20]
	EMA(meter.TemperatureHeatsink, p->TemperatureHeatsink,settings.meterfilterCoeficient);
 800801a:	edd3 5a04 	vldr	s11, [r3, #16]
 800801e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008022:	edd4 5a06 	vldr	s11, [r4, #24]
 8008026:	ee27 7a25 	vmul.f32	s14, s14, s11
 800802a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800802e:	edc3 7a04 	vstr	s15, [r3, #16]
	meter.Power = meter.Vhigh*meter.Ihigh;
 8008032:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008036:	edc3 6a07 	vstr	s13, [r3, #28]
	modTestingSimstep(&simstate, Ts,&phase);
 800803a:	4918      	ldr	r1, [pc, #96]	; (800809c <control_controlloop+0x380>)
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <control_controlloop+0x354>)
 800803e:	ed93 0a00 	vldr	s0, [r3]
 8008042:	4818      	ldr	r0, [pc, #96]	; (80080a4 <control_controlloop+0x388>)
 8008044:	f001 fee6 	bl	8009e14 <modTestingSimstep>
}
 8008048:	bd10      	pop	{r4, pc}
 800804a:	eeb0 7a67 	vmov.f32	s14, s15
 800804e:	e749      	b.n	8007ee4 <control_controlloop+0x1c8>
		if(p->enabled){
 8008050:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	f43f af6f 	beq.w	8007f38 <control_controlloop+0x21c>
			p->PENport->BSRR = p->PENpin;
 800805a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800805c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800805e:	619a      	str	r2, [r3, #24]
 8008060:	e76a      	b.n	8007f38 <control_controlloop+0x21c>
		pwm_setDuty(p->dutycycle);
 8008062:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 8008066:	f001 fb5b 	bl	8009720 <pwm_setDuty>
 800806a:	e76e      	b.n	8007f4a <control_controlloop+0x22e>
 800806c:	358637bd 	.word	0x358637bd
 8008070:	20000028 	.word	0x20000028
 8008074:	200032ac 	.word	0x200032ac
 8008078:	3f7d70a4 	.word	0x3f7d70a4
 800807c:	3c23d700 	.word	0x3c23d700
 8008080:	200033bc 	.word	0x200033bc
 8008084:	3f4ccccd 	.word	0x3f4ccccd
 8008088:	447a0000 	.word	0x447a0000
 800808c:	2000328c 	.word	0x2000328c
 8008090:	00000000 	.word	0x00000000
 8008094:	3f7fbe77 	.word	0x3f7fbe77
 8008098:	3a83126f 	.word	0x3a83126f
 800809c:	20001edc 	.word	0x20001edc
 80080a0:	200033d0 	.word	0x200033d0
 80080a4:	200033c0 	.word	0x200033c0

080080a8 <control_check_parameters>:
bool control_check_parameters(ConverterSettings_t* s, CalibrationData_t * c){
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	460c      	mov	r4, r1
	uint16_t crc = libCRCCalcCRC16((unsigned char *)c, sizeof(CalibrationData_t) - sizeof(uint16_t) - 2);
 80080ac:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 faf5 	bl	80086a0 <libCRCCalcCRC16>
	if (crc != c->calcrc){
 80080b6:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 80080ba:	4283      	cmp	r3, r0
 80080bc:	d040      	beq.n	8008140 <control_check_parameters+0x98>
		error = true;
 80080be:	2501      	movs	r5, #1
	float fres = sqrtf(1/(2*pi*pi*c->L*c->Clow))*1.0e-3f;
 80080c0:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 80080c4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8008144 <control_check_parameters+0x9c>
 80080c8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80080cc:	ed94 0a1e 	vldr	s0, [r4, #120]	; 0x78
 80080d0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80080d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080d8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80080dc:	f007 f95a 	bl	800f394 <sqrtf>
 80080e0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008148 <control_check_parameters+0xa0>
 80080e4:	ee20 0a27 	vmul.f32	s0, s0, s15
	if(c->ControllerFrequency > 45.0f)error = true;
 80080e8:	ed94 7a1a 	vldr	s14, [r4, #104]	; 0x68
 80080ec:	eddf 7a17 	vldr	s15, [pc, #92]	; 800814c <control_check_parameters+0xa4>
 80080f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	dd00      	ble.n	80080fc <control_check_parameters+0x54>
 80080fa:	2501      	movs	r5, #1
	if(c->ControllerFrequency < (8*fres))error = true;
 80080fc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008100:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810c:	d500      	bpl.n	8008110 <control_check_parameters+0x68>
 800810e:	2501      	movs	r5, #1
	if(c->SwitchingFrequency  < (5*fres))error = true;
 8008110:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8008114:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8008118:	ee20 0a07 	vmul.f32	s0, s0, s14
 800811c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8008120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008124:	d500      	bpl.n	8008128 <control_check_parameters+0x80>
 8008126:	2501      	movs	r5, #1
	if(c->Q > 2.0f)error = true;
 8008128:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800812c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008138:	dd00      	ble.n	800813c <control_check_parameters+0x94>
 800813a:	2501      	movs	r5, #1
}
 800813c:	4628      	mov	r0, r5
 800813e:	bd38      	pop	{r3, r4, r5, pc}
	bool error = false;
 8008140:	2500      	movs	r5, #0
 8008142:	e7bd      	b.n	80080c0 <control_check_parameters+0x18>
 8008144:	419de9e7 	.word	0x419de9e7
 8008148:	3a83126f 	.word	0x3a83126f
 800814c:	42340000 	.word	0x42340000

08008150 <control_init>:
void control_init(const ConverterSettings_t* s, const CalibrationData_t * c) {
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	4604      	mov	r4, r0
 8008154:	460f      	mov	r7, r1
	if(control_check_parameters(s,c)){
 8008156:	f7ff ffa7 	bl	80080a8 <control_check_parameters>
 800815a:	b118      	cbz	r0, 8008164 <control_init+0x14>
		phase.fault = Converter_ConfigError;
 800815c:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <control_init+0xc0>)
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	settings=*s;
 8008164:	4e2b      	ldr	r6, [pc, #172]	; (8008214 <control_init+0xc4>)
 8008166:	4635      	mov	r5, r6
 8008168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800816a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800816c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008170:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	cal=*c;
 8008174:	4c28      	ldr	r4, [pc, #160]	; (8008218 <control_init+0xc8>)
 8008176:	f44f 7288 	mov.w	r2, #272	; 0x110
 800817a:	4639      	mov	r1, r7
 800817c:	4620      	mov	r0, r4
 800817e:	f002 f97d 	bl	800a47c <memcpy>
	phase.HSEpin  = PHSEN_Pin;
 8008182:	4b23      	ldr	r3, [pc, #140]	; (8008210 <control_init+0xc0>)
 8008184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008188:	651a      	str	r2, [r3, #80]	; 0x50
	phase.HSEport = PHSEN_GPIO_Port;
 800818a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800818e:	64da      	str	r2, [r3, #76]	; 0x4c
	phase.PENpin  = PEN_Pin;
 8008190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008194:	6599      	str	r1, [r3, #88]	; 0x58
	phase.PENport = PEN_GPIO_Port;
 8008196:	655a      	str	r2, [r3, #84]	; 0x54
	phase.timerindex = HRTIM_TIMERINDEX_TIMER_B;
 8008198:	2201      	movs	r2, #1
 800819a:	675a      	str	r2, [r3, #116]	; 0x74
	phase.LimLEDpin = LED1_Pin;
 800819c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081a0:	671a      	str	r2, [r3, #112]	; 0x70
	phase.LimLEDport= LED1_GPIO_Port;
 80081a2:	4a1e      	ldr	r2, [pc, #120]	; (800821c <control_init+0xcc>)
 80081a4:	66da      	str	r2, [r3, #108]	; 0x6c
	phase.Vsp = 10000;
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <control_init+0xd0>)
 80081a8:	631a      	str	r2, [r3, #48]	; 0x30
	phase.Vhighlim = settings.HighSideVoltageLimitSoft;
 80081aa:	6872      	ldr	r2, [r6, #4]
 80081ac:	635a      	str	r2, [r3, #52]	; 0x34
	phase.Iindlim = settings.LowSideCurrentMaxLimitSoft;
 80081ae:	6932      	ldr	r2, [r6, #16]
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
	phase.Ihighlim = settings.HighSideCurrentLimitSoft;
 80081b2:	68f2      	ldr	r2, [r6, #12]
 80081b4:	63da      	str	r2, [r3, #60]	; 0x3c
	phase.enabled = false;
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pwm_init(cal.SwitchingFrequency, cal.ControllerFrequency, cal.DeadTimeRising, cal.DeadtimeFalling, cal.ADC_delay);
 80081bc:	ed94 2a18 	vldr	s4, [r4, #96]	; 0x60
 80081c0:	edd4 1a1c 	vldr	s3, [r4, #112]	; 0x70
 80081c4:	ed94 1a1b 	vldr	s2, [r4, #108]	; 0x6c
 80081c8:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 80081cc:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 80081d0:	f001 f8aa 	bl	8009328 <pwm_init>
	analog_init();
 80081d4:	f7fe f9f6 	bl	80065c4 <analog_init>
	Ts = pwm_GetControllerPeriod();
 80081d8:	f001 fafa 	bl	80097d0 <pwm_GetControllerPeriod>
 80081dc:	4b11      	ldr	r3, [pc, #68]	; (8008224 <control_init+0xd4>)
 80081de:	ed83 0a00 	vstr	s0, [r3]
	ControllerR = sqrtf(cal.L/cal.Clow)/ cal.Q-cal.RLint;
 80081e2:	ed94 0a1d 	vldr	s0, [r4, #116]	; 0x74
 80081e6:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 80081ea:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80081ee:	f007 f8d1 	bl	800f394 <sqrtf>
 80081f2:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 80081f6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80081fa:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
 80081fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <control_init+0xd8>)
 8008204:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(100);
 8008208:	2064      	movs	r0, #100	; 0x64
 800820a:	f7f8 ff6f 	bl	80010ec <HAL_Delay>
}
 800820e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008210:	20001edc 	.word	0x20001edc
 8008214:	2000328c 	.word	0x2000328c
 8008218:	200032ac 	.word	0x200032ac
 800821c:	48000800 	.word	0x48000800
 8008220:	461c4000 	.word	0x461c4000
 8008224:	20000028 	.word	0x20000028
 8008228:	200033bc 	.word	0x200033bc

0800822c <control_disable>:
void control_disable(void){
 800822c:	b508      	push	{r3, lr}
	phase.HSEport->BRR = phase.HSEpin;
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <control_disable+0x20>)
 8008230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008232:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008234:	6291      	str	r1, [r2, #40]	; 0x28
	phase.PENport->BRR = phase.PENpin;
 8008236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008238:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800823a:	6291      	str	r1, [r2, #40]	; 0x28
	phase.dutycycle = 0;
 800823c:	2200      	movs	r2, #0
 800823e:	645a      	str	r2, [r3, #68]	; 0x44
	phase.enabled = false;
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pwm_disable();
 8008246:	f001 faaf 	bl	80097a8 <pwm_disable>
}
 800824a:	bd08      	pop	{r3, pc}
 800824c:	20001edc 	.word	0x20001edc

08008250 <modConverterPWMOutputDisable>:
	phase.enabled = false;
 8008250:	4b02      	ldr	r3, [pc, #8]	; (800825c <modConverterPWMOutputDisable+0xc>)
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20001edc 	.word	0x20001edc

08008260 <modConverterPWMOutputEnable>:

inline void modConverterPWMOutputEnable() {
	if(settings.outputEnable){
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <modConverterPWMOutputEnable+0x1c>)
 8008262:	7f1b      	ldrb	r3, [r3, #28]
 8008264:	b123      	cbz	r3, 8008270 <modConverterPWMOutputEnable+0x10>
#ifndef SIMULATION
		phase.PENport->BSRR = phase.PENpin;
		DREN_GPIO_Port->BSRR = DREN_Pin;
#endif
		phase.enabled = true;
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <modConverterPWMOutputEnable+0x20>)
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800826e:	4770      	bx	lr
	phase.enabled = false;
 8008270:	4b03      	ldr	r3, [pc, #12]	; (8008280 <modConverterPWMOutputEnable+0x20>)
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	}else{
		modConverterPWMOutputDisable();
	}
}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	2000328c 	.word	0x2000328c
 8008280:	20001edc 	.word	0x20001edc

08008284 <convertTemperature>:

float convertTemperature(uint32_t data){
 8008284:	b510      	push	{r4, lr}
 8008286:	ed2d 8b04 	vpush	{d8-d9}
 800828a:	ee07 0a90 	vmov	s15, r0
	float vt = ((float)data) * HW_ADCREF * 0.001f / ((float)(1<<16));
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80082f8 <convertTemperature+0x74>
 8008296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800829a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80082fc <convertTemperature+0x78>
 800829e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008300 <convertTemperature+0x7c>
 80082a6:	ee67 7a87 	vmul.f32	s15, s15, s14
	float i = ((3.24f-vt) / cal.Temperature_R);
 80082aa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008304 <convertTemperature+0x80>
 80082ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082b2:	4c15      	ldr	r4, [pc, #84]	; (8008308 <convertTemperature+0x84>)
 80082b4:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 80082b8:	ee87 6a26 	vdiv.f32	s12, s14, s13
	float r = vt / i;
 80082bc:	ee87 0a86 	vdiv.f32	s0, s15, s12


	float inverseKelvin = (1.0f / (cal.Temperature_Ref+273.16f)) + (logf(r / cal.Temperature_R))/cal.Temperature_B;
 80082c0:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80082c4:	eddf 8a11 	vldr	s17, [pc, #68]	; 800830c <convertTemperature+0x88>
 80082c8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80082cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80082d0:	ee89 8a27 	vdiv.f32	s16, s18, s15
 80082d4:	ee80 0a26 	vdiv.f32	s0, s0, s13
 80082d8:	f006 ff8e 	bl	800f1f8 <logf>
 80082dc:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 80082e0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80082e4:	ee38 8a27 	vadd.f32	s16, s16, s15

	return (1.0f / inverseKelvin) - 273.16f;
 80082e8:	ee89 0a08 	vdiv.f32	s0, s18, s16
	return vt;
}
 80082ec:	ee30 0a68 	vsub.f32	s0, s0, s17
 80082f0:	ecbd 8b04 	vpop	{d8-d9}
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop
 80082f8:	45354000 	.word	0x45354000
 80082fc:	3a83126f 	.word	0x3a83126f
 8008300:	37800000 	.word	0x37800000
 8008304:	404f5c29 	.word	0x404f5c29
 8008308:	200032ac 	.word	0x200032ac
 800830c:	4388947b 	.word	0x4388947b

08008310 <noise>:


float noise(float amp){
 8008310:	b508      	push	{r3, lr}
 8008312:	ed2d 8b02 	vpush	{d8}
 8008316:	eeb0 8a40 	vmov.f32	s16, s0
	return (((float)rand()/(float)__RAND_MAX)-0.5f)*amp;
 800831a:	f002 ff3f 	bl	800b19c <rand>
 800831e:	ee07 0a90 	vmov	s15, r0
 8008322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008326:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008340 <noise+0x30>
 800832a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800832e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008332:	ee37 0ac0 	vsub.f32	s0, s15, s0
	//return 0.0f;
}
 8008336:	ee20 0a08 	vmul.f32	s0, s0, s16
 800833a:	ecbd 8b02 	vpop	{d8}
 800833e:	bd08      	pop	{r3, pc}
 8008340:	30000000 	.word	0x30000000

08008344 <control_convert_vls>:


void control_convert_vls(uint32_t raw){
 8008344:	b508      	push	{r3, lr}
 8008346:	ed2d 8b02 	vpush	{d8}
	float V = 0;

	#ifdef SIMULATION
	V = 1.0e3f*(simstate.Vlow + noise(0.05f));
 800834a:	4b17      	ldr	r3, [pc, #92]	; (80083a8 <control_convert_vls+0x64>)
 800834c:	ed93 8a00 	vldr	s16, [r3]
 8008350:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80083ac <control_convert_vls+0x68>
 8008354:	f7ff ffdc 	bl	8008310 <noise>
 8008358:	ee38 0a00 	vadd.f32	s0, s16, s0
 800835c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80083b0 <control_convert_vls+0x6c>
 8008360:	ee20 0a27 	vmul.f32	s0, s0, s15
	#else
	V = ((((float)raw) * cal.InputVoltageGain * HW_ADCREF) / (float)0x1000) + cal.InputVoltageOffset;
	#endif

	if(fabsf(V) > HW_LIMIT_LS_VOLTAGE_HARD){
 8008364:	eeb0 7ac0 	vabs.f32	s14, s0
 8008368:	eddf 7a12 	vldr	s15, [pc, #72]	; 80083b4 <control_convert_vls+0x70>
 800836c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008374:	dd03      	ble.n	800837e <control_convert_vls+0x3a>
		phase.fault = Converter_InputOverVolt;
 8008376:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <control_convert_vls+0x74>)
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	phase.Vlowm1 = phase.Vlow;
 800837e:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <control_convert_vls+0x74>)
 8008380:	edd3 7a03 	vldr	s15, [r3, #12]
 8008384:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	EMA(phase.Vlow, V , VOLTAGE_IN_FORGETING_FACTOR);
 8008388:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80083bc <control_convert_vls+0x78>
 800838c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008390:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80083c0 <control_convert_vls+0x7c>
 8008394:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008398:	ee37 0a80 	vadd.f32	s0, s15, s0
 800839c:	ed83 0a03 	vstr	s0, [r3, #12]

	//modConverterIpvObserver(phase);
}
 80083a0:	ecbd 8b02 	vpop	{d8}
 80083a4:	bd08      	pop	{r3, pc}
 80083a6:	bf00      	nop
 80083a8:	200033c0 	.word	0x200033c0
 80083ac:	3d4ccccd 	.word	0x3d4ccccd
 80083b0:	447a0000 	.word	0x447a0000
 80083b4:	479c4000 	.word	0x479c4000
 80083b8:	20001edc 	.word	0x20001edc
 80083bc:	3f4ccccd 	.word	0x3f4ccccd
 80083c0:	3e4ccccc 	.word	0x3e4ccccc

080083c4 <control_convert_vhs>:

void control_convert_vhs(uint32_t raw){
 80083c4:	b508      	push	{r3, lr}
 80083c6:	ed2d 8b02 	vpush	{d8}
	float V = 0.0;
	#ifdef SIMULATION
	V = 1.0e3f*(simstate.Vhigh + noise(0.05f));
 80083ca:	4b16      	ldr	r3, [pc, #88]	; (8008424 <control_convert_vhs+0x60>)
 80083cc:	ed93 8a01 	vldr	s16, [r3, #4]
 80083d0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008428 <control_convert_vhs+0x64>
 80083d4:	f7ff ff9c 	bl	8008310 <noise>
 80083d8:	ee38 0a00 	vadd.f32	s0, s16, s0
 80083dc:	eddf 7a13 	vldr	s15, [pc, #76]	; 800842c <control_convert_vhs+0x68>
 80083e0:	ee20 0a27 	vmul.f32	s0, s0, s15
	#else
	V = ((((float)raw) * cal.OutputVoltageGain * HW_ADCREF) / (float)0x1000) + cal.OutputVoltageOffset;
	#endif

	if(fabsf(V) > HW_LIMIT_HS_VOLTAGE_HARD){
 80083e4:	eeb0 7ac0 	vabs.f32	s14, s0
 80083e8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8008430 <control_convert_vhs+0x6c>
 80083ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f4:	dd03      	ble.n	80083fe <control_convert_vhs+0x3a>
		phase.fault = Converter_OutputOverVolt;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <control_convert_vhs+0x70>)
 80083f8:	2203      	movs	r2, #3
 80083fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	EMA(phase.Vhigh, V , VOLTAGE_OUT_FORGETING_FACTOR);
 80083fe:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <control_convert_vhs+0x70>)
 8008400:	edd3 7a01 	vldr	s15, [r3, #4]
 8008404:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008438 <control_convert_vhs+0x74>
 8008408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800840c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800843c <control_convert_vhs+0x78>
 8008410:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008414:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008418:	ed83 0a01 	vstr	s0, [r3, #4]

}
 800841c:	ecbd 8b02 	vpop	{d8}
 8008420:	bd08      	pop	{r3, pc}
 8008422:	bf00      	nop
 8008424:	200033c0 	.word	0x200033c0
 8008428:	3d4ccccd 	.word	0x3d4ccccd
 800842c:	447a0000 	.word	0x447a0000
 8008430:	479c4000 	.word	0x479c4000
 8008434:	20001edc 	.word	0x20001edc
 8008438:	3f4ccccd 	.word	0x3f4ccccd
 800843c:	3e4ccccc 	.word	0x3e4ccccc

08008440 <control_convert_iind>:

void control_convert_iind(uint32_t raw){
 8008440:	b508      	push	{r3, lr}
 8008442:	ed2d 8b02 	vpush	{d8}
	float I = 0.0;
	#ifdef SIMULATION
	I = 1.0e3f*(simstate.Iind + noise(0.05f));
 8008446:	4b1b      	ldr	r3, [pc, #108]	; (80084b4 <control_convert_iind+0x74>)
 8008448:	ed93 8a02 	vldr	s16, [r3, #8]
 800844c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80084b8 <control_convert_iind+0x78>
 8008450:	f7ff ff5e 	bl	8008310 <noise>
 8008454:	ee38 0a00 	vadd.f32	s0, s16, s0
 8008458:	eddf 7a18 	vldr	s15, [pc, #96]	; 80084bc <control_convert_iind+0x7c>
 800845c:	ee20 0a27 	vmul.f32	s0, s0, s15
	#else
	I = ((((float)raw-(float)0x800) * cal.InputCurrentGain *2.0f* HW_ADCREF) / (float)0x1000) + cal.InputCurrentOffset;
	#endif

	if(I > HW_LIMIT_LS_CURRENT_HARD){
 8008460:	eddf 7a17 	vldr	s15, [pc, #92]	; 80084c0 <control_convert_iind+0x80>
 8008464:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	dd15      	ble.n	800849a <control_convert_iind+0x5a>
		phase.fault = Converter_InputOverCurrent;
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <control_convert_iind+0x84>)
 8008470:	2205      	movs	r2, #5
 8008472:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}else if(I < -HW_LIMIT_LS_CURRENT_HARD){
		phase.fault = Converter_InputUnderCurrent;
	}


	EMA(phase.Iind,I, CURRENT_IN_FORGETING_FACTOR);
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <control_convert_iind+0x84>)
 8008478:	edd3 7a00 	vldr	s15, [r3]
 800847c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80084c8 <control_convert_iind+0x88>
 8008480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008484:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80084cc <control_convert_iind+0x8c>
 8008488:	ee20 0a07 	vmul.f32	s0, s0, s14
 800848c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008490:	ed83 0a00 	vstr	s0, [r3]
}
 8008494:	ecbd 8b02 	vpop	{d8}
 8008498:	bd08      	pop	{r3, pc}
	}else if(I < -HW_LIMIT_LS_CURRENT_HARD){
 800849a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80084d0 <control_convert_iind+0x90>
 800849e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	d5e6      	bpl.n	8008476 <control_convert_iind+0x36>
		phase.fault = Converter_InputUnderCurrent;
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <control_convert_iind+0x84>)
 80084aa:	2206      	movs	r2, #6
 80084ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80084b0:	e7e1      	b.n	8008476 <control_convert_iind+0x36>
 80084b2:	bf00      	nop
 80084b4:	200033c0 	.word	0x200033c0
 80084b8:	3d4ccccd 	.word	0x3d4ccccd
 80084bc:	447a0000 	.word	0x447a0000
 80084c0:	461c4000 	.word	0x461c4000
 80084c4:	20001edc 	.word	0x20001edc
 80084c8:	3ecccccd 	.word	0x3ecccccd
 80084cc:	3f19999a 	.word	0x3f19999a
 80084d0:	c61c4000 	.word	0xc61c4000

080084d4 <control_convert_ihs>:

void control_convert_ihs(uint32_t raw){
 80084d4:	b508      	push	{r3, lr}
 80084d6:	ed2d 8b02 	vpush	{d8}
	float I = 0.0f;
	#ifdef SIMULATION
	I = 1.0e3f*(simstate.Ihigh + noise(0.05f));
 80084da:	4b15      	ldr	r3, [pc, #84]	; (8008530 <control_convert_ihs+0x5c>)
 80084dc:	ed93 8a03 	vldr	s16, [r3, #12]
 80084e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8008534 <control_convert_ihs+0x60>
 80084e4:	f7ff ff14 	bl	8008310 <noise>
 80084e8:	ee38 0a00 	vadd.f32	s0, s16, s0
 80084ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008538 <control_convert_ihs+0x64>
 80084f0:	ee20 0a27 	vmul.f32	s0, s0, s15
	#else
	I = ( ((float)raw-(float)0x800) * cal.OutputCurrentGain *2.0f* (HW_ADCREF / (float)0x1000)) + cal.OutputCurrentOffset;
	#endif
	if(I > HW_LIMIT_HS_CURRENT_HARD){
 80084f4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800853c <control_convert_ihs+0x68>
 80084f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	dd03      	ble.n	800850a <control_convert_ihs+0x36>
		phase.fault = Converter_OutputOverCurrent;
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <control_convert_ihs+0x6c>)
 8008504:	2204      	movs	r2, #4
 8008506:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	EMA(phase.Ihigh,I, CURRENT_IN_FORGETING_FACTOR);
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <control_convert_ihs+0x6c>)
 800850c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008510:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008544 <control_convert_ihs+0x70>
 8008514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008518:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8008548 <control_convert_ihs+0x74>
 800851c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008520:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008524:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8008528:	ecbd 8b02 	vpop	{d8}
 800852c:	bd08      	pop	{r3, pc}
 800852e:	bf00      	nop
 8008530:	200033c0 	.word	0x200033c0
 8008534:	3d4ccccd 	.word	0x3d4ccccd
 8008538:	447a0000 	.word	0x447a0000
 800853c:	461c4000 	.word	0x461c4000
 8008540:	20001edc 	.word	0x20001edc
 8008544:	3ecccccd 	.word	0x3ecccccd
 8008548:	3f19999a 	.word	0x3f19999a

0800854c <convertAdc5>:

void convertAdc5(uint32_t* data){
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	ed2d 8b04 	vpush	{d8-d9}
 8008552:	4605      	mov	r5, r0
	EMA(phase.TemperatureMCU, __LL_ADC_CALC_TEMPERATURE((uint32_t)HW_ADCREF,data[0],LL_ADC_RESOLUTION_12B), TEMP_FORGETING_FACTOR);
 8008554:	4c22      	ldr	r4, [pc, #136]	; (80085e0 <convertAdc5+0x94>)
 8008556:	edd4 7a07 	vldr	s15, [r4, #28]
 800855a:	eddf 9a22 	vldr	s19, [pc, #136]	; 80085e4 <convertAdc5+0x98>
 800855e:	ee27 7aa9 	vmul.f32	s14, s15, s19
 8008562:	6802      	ldr	r2, [r0, #0]
 8008564:	f640 3354 	movw	r3, #2900	; 0xb54
 8008568:	fb03 f302 	mul.w	r3, r3, r2
 800856c:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <convertAdc5+0x9c>)
 800856e:	fba2 2303 	umull	r2, r3, r2, r3
 8008572:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <convertAdc5+0xa0>)
 8008574:	8811      	ldrh	r1, [r2, #0]
 8008576:	ebc1 1393 	rsb	r3, r1, r3, lsr #6
 800857a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	3222      	adds	r2, #34	; 0x22
 8008582:	8812      	ldrh	r2, [r2, #0]
 8008584:	1a52      	subs	r2, r2, r1
 8008586:	fb93 f3f2 	sdiv	r3, r3, r2
 800858a:	331e      	adds	r3, #30
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008594:	ed9f 9a16 	vldr	s18, [pc, #88]	; 80085f0 <convertAdc5+0xa4>
 8008598:	ee67 7a89 	vmul.f32	s15, s15, s18
 800859c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085a0:	edc4 7a07 	vstr	s15, [r4, #28]
	EMA(phase.TemperatureHeatsink, convertTemperature(data[1]), TEMP_FORGETING_FACTOR);
 80085a4:	edd4 8a06 	vldr	s17, [r4, #24]
 80085a8:	ee68 8aa9 	vmul.f32	s17, s17, s19
 80085ac:	6840      	ldr	r0, [r0, #4]
 80085ae:	f7ff fe69 	bl	8008284 <convertTemperature>
 80085b2:	ee20 0a09 	vmul.f32	s0, s0, s18
 80085b6:	ee78 8a80 	vadd.f32	s17, s17, s0
 80085ba:	edc4 8a06 	vstr	s17, [r4, #24]
	EMA(phase.TemperatureAmbient, convertTemperature(data[2]), TEMP_FORGETING_FACTOR);
 80085be:	ed94 8a05 	vldr	s16, [r4, #20]
 80085c2:	ee28 8a29 	vmul.f32	s16, s16, s19
 80085c6:	68a8      	ldr	r0, [r5, #8]
 80085c8:	f7ff fe5c 	bl	8008284 <convertTemperature>
 80085cc:	ee20 0a09 	vmul.f32	s0, s0, s18
 80085d0:	ee38 8a00 	vadd.f32	s16, s16, s0
 80085d4:	ed84 8a05 	vstr	s16, [r4, #20]
}
 80085d8:	ecbd 8b04 	vpop	{d8-d9}
 80085dc:	bd38      	pop	{r3, r4, r5, pc}
 80085de:	bf00      	nop
 80085e0:	20001edc 	.word	0x20001edc
 80085e4:	3f666666 	.word	0x3f666666
 80085e8:	057619f1 	.word	0x057619f1
 80085ec:	1fff75a8 	.word	0x1fff75a8
 80085f0:	3dccccd0 	.word	0x3dccccd0

080085f4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80085f4:	b508      	push	{r3, lr}
	if(hadc->Instance == ADC5){
 80085f6:	6802      	ldr	r2, [r0, #0]
 80085f8:	4b03      	ldr	r3, [pc, #12]	; (8008608 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d000      	beq.n	8008600 <HAL_ADC_ConvHalfCpltCallback+0xc>
		convertAdc5(&adc5data[3]);
	}
}
 80085fe:	bd08      	pop	{r3, pc}
		convertAdc5(&adc5data[3]);
 8008600:	4802      	ldr	r0, [pc, #8]	; (800860c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8008602:	f7ff ffa3 	bl	800854c <convertAdc5>
}
 8008606:	e7fa      	b.n	80085fe <HAL_ADC_ConvHalfCpltCallback+0xa>
 8008608:	50000600 	.word	0x50000600
 800860c:	20001e64 	.word	0x20001e64

08008610 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8008610:	b508      	push	{r3, lr}
	if(hadc->Instance == ADC5){
 8008612:	6802      	ldr	r2, [r0, #0]
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <HAL_ADC_ConvCpltCallback+0x14>)
 8008616:	429a      	cmp	r2, r3
 8008618:	d000      	beq.n	800861c <HAL_ADC_ConvCpltCallback+0xc>
		convertAdc5(&adc5data[0]);
	}
}
 800861a:	bd08      	pop	{r3, pc}
		convertAdc5(&adc5data[0]);
 800861c:	4802      	ldr	r0, [pc, #8]	; (8008628 <HAL_ADC_ConvCpltCallback+0x18>)
 800861e:	f7ff ff95 	bl	800854c <convertAdc5>
}
 8008622:	e7fa      	b.n	800861a <HAL_ADC_ConvCpltCallback+0xa>
 8008624:	50000600 	.word	0x50000600
 8008628:	20001e58 	.word	0x20001e58

0800862c <modConverterGetMode>:


PhaseMode_t modConverterGetMode(void){
	return phase.mode;
}
 800862c:	4b01      	ldr	r3, [pc, #4]	; (8008634 <modConverterGetMode+0x8>)
 800862e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8008632:	4770      	bx	lr
 8008634:	20001edc 	.word	0x20001edc

08008638 <control_set_setpoint>:
PhaseFault_t modConverterGetFault(void){
	return phase.fault;
}

void control_set_setpoint(float v){
	if (!isnan(v)){
 8008638:	eeb4 0a40 	vcmp.f32	s0, s0
 800863c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008640:	d615      	bvs.n	800866e <control_set_setpoint+0x36>
#if defined HW_TOPOLOGY_BOOST
		if(v > settings.LowSideVoltageLimitSoft)v = settings.LowSideVoltageLimitSoft;
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <control_set_setpoint+0x38>)
 8008644:	edd3 7a02 	vldr	s15, [r3, #8]
 8008648:	eef4 7ac0 	vcmpe.f32	s15, s0
 800864c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008650:	d401      	bmi.n	8008656 <control_set_setpoint+0x1e>
 8008652:	eef0 7a40 	vmov.f32	s15, s0

#elif defined HW_TOPOLOGY_BUCK
		if(v > settings.HighSideVoltageLimitSoft)v = settings.HighSideVoltageLimitSoft;
#endif
		if(v < 6000.0f)v = 6000.0f;
 8008656:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008674 <control_set_setpoint+0x3c>
 800865a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008662:	d501      	bpl.n	8008668 <control_set_setpoint+0x30>
 8008664:	eef0 7a47 	vmov.f32	s15, s14
		phase.Vsp = v;
 8008668:	4b03      	ldr	r3, [pc, #12]	; (8008678 <control_set_setpoint+0x40>)
 800866a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	}
}
 800866e:	4770      	bx	lr
 8008670:	2000328c 	.word	0x2000328c
 8008674:	45bb8000 	.word	0x45bb8000
 8008678:	20001edc 	.word	0x20001edc

0800867c <control_get_setpoint>:

float control_get_setpoint(){
	return phase.Vsp;
}
 800867c:	4b01      	ldr	r3, [pc, #4]	; (8008684 <control_get_setpoint+0x8>)
 800867e:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8008682:	4770      	bx	lr
 8008684:	20001edc 	.word	0x20001edc

08008688 <control_get_regulated_voltage>:
#if defined(HW_TOPOLOGY_BOOST)
	return meter.Vlow;
#elif defined(HW_TOPOLOGY_BUCK)
	return meter.Vhigh;
#endif
}
 8008688:	4b01      	ldr	r3, [pc, #4]	; (8008690 <control_get_regulated_voltage+0x8>)
 800868a:	ed93 0a02 	vldr	s0, [r3, #8]
 800868e:	4770      	bx	lr
 8008690:	200033d0 	.word	0x200033d0

08008694 <control_get_regulated_current>:
#if defined(HW_TOPOLOGY_BOOST)
	return meter.Ilow;
#elif defined(HW_TOPOLOGY_BUCK)
	return -meter.Ihigh;
#endif
}
 8008694:	4b01      	ldr	r3, [pc, #4]	; (800869c <control_get_regulated_current+0x8>)
 8008696:	ed93 0a06 	vldr	s0, [r3, #24]
 800869a:	4770      	bx	lr
 800869c:	200033d0 	.word	0x200033d0

080086a0 <libCRCCalcCRC16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short libCRCCalcCRC16(unsigned char *buf, unsigned int len) {
 80086a0:	b430      	push	{r4, r5}
 80086a2:	4603      	mov	r3, r0
	unsigned int i;
	unsigned short cksum = 0;
 80086a4:	2000      	movs	r0, #0
	for (i = 0; i < len; i++) {
 80086a6:	4604      	mov	r4, r0
 80086a8:	428c      	cmp	r4, r1
 80086aa:	d20b      	bcs.n	80086c4 <libCRCCalcCRC16+0x24>
		cksum = libCRCLookupTable[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80086ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80086b4:	4d04      	ldr	r5, [pc, #16]	; (80086c8 <libCRCCalcCRC16+0x28>)
 80086b6:	f935 2012 	ldrsh.w	r2, [r5, r2, lsl #1]
 80086ba:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
 80086be:	b280      	uxth	r0, r0
	for (i = 0; i < len; i++) {
 80086c0:	3401      	adds	r4, #1
 80086c2:	e7f1      	b.n	80086a8 <libCRCCalcCRC16+0x8>
	}
	return cksum;
}
 80086c4:	bc30      	pop	{r4, r5}
 80086c6:	4770      	bx	lr
 80086c8:	0800fe24 	.word	0x0800fe24

080086cc <modDelayTick1ms>:
	if(SysTick_Config(72000)){
		while(1); //Error setting SysTick.
	}
}

uint8_t modDelayTick1ms(uint32_t *last, uint32_t ticks) {
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4604      	mov	r4, r0
 80086d0:	460d      	mov	r5, r1
	if((uint32_t)(HAL_GetTick() - *last) >= ticks)
 80086d2:	f7f8 fd05 	bl	80010e0 <HAL_GetTick>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	1ac0      	subs	r0, r0, r3
 80086da:	42a8      	cmp	r0, r5
 80086dc:	d201      	bcs.n	80086e2 <modDelayTick1ms+0x16>
	{
		*last = HAL_GetTick();
		return true;
	}

	return false;
 80086de:	2000      	movs	r0, #0
}
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
		*last = HAL_GetTick();
 80086e2:	f7f8 fcfd 	bl	80010e0 <HAL_GetTick>
 80086e6:	6020      	str	r0, [r4, #0]
		return true;
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7f9      	b.n	80086e0 <modDelayTick1ms+0x14>

080086ec <dma_init>:
#include "dma.h"

void dma_init(void) {
 80086ec:	b500      	push	{lr}
 80086ee:	b083      	sub	sp, #12

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80086f0:	4b12      	ldr	r3, [pc, #72]	; (800873c <dma_init+0x50>)
 80086f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f4:	f042 0204 	orr.w	r2, r2, #4
 80086f8:	649a      	str	r2, [r3, #72]	; 0x48
 80086fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086fc:	f002 0204 	and.w	r2, r2, #4
 8008700:	9200      	str	r2, [sp, #0]
 8008702:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8008704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	649a      	str	r2, [r3, #72]	; 0x48
 800870c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	9b01      	ldr	r3, [sp, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	2102      	movs	r1, #2
 800871a:	200b      	movs	r0, #11
 800871c:	f7f9 fcde 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008720:	200b      	movs	r0, #11
 8008722:	f7f9 fd13 	bl	800214c <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8008726:	2200      	movs	r2, #0
 8008728:	2102      	movs	r1, #2
 800872a:	200c      	movs	r0, #12
 800872c:	f7f9 fcd6 	bl	80020dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008730:	200c      	movs	r0, #12
 8008732:	f7f9 fd0b 	bl	800214c <HAL_NVIC_EnableIRQ>

}
 8008736:	b003      	add	sp, #12
 8008738:	f85d fb04 	ldr.w	pc, [sp], #4
 800873c:	40021000 	.word	0x40021000

08008740 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void) {
 8008740:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_adc5);
 8008742:	4802      	ldr	r0, [pc, #8]	; (800874c <DMA1_Channel1_IRQHandler+0xc>)
 8008744:	f7f9 fe1e 	bl	8002384 <HAL_DMA_IRQHandler>
}
 8008748:	bd08      	pop	{r3, pc}
 800874a:	bf00      	nop
 800874c:	20001df8 	.word	0x20001df8

08008750 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void) {
 8008750:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8008752:	4802      	ldr	r0, [pc, #8]	; (800875c <DMA1_Channel2_IRQHandler+0xc>)
 8008754:	f7f9 fe16 	bl	8002384 <HAL_DMA_IRQHandler>
}
 8008758:	bd08      	pop	{r3, pc}
 800875a:	bf00      	nop
 800875c:	20001cc0 	.word	0x20001cc0

08008760 <eeprom_valid>:
		return true;
	}
	return false;
}

bool eeprom_valid() {
 8008760:	b538      	push	{r3, r4, r5, lr}
	uint16_t ccrc = libCRCCalcCRC16(eeprommem, EEPROM_SIZE / sizeof(uint8_t));
 8008762:	4c11      	ldr	r4, [pc, #68]	; (80087a8 <eeprom_valid+0x48>)
 8008764:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff ff99 	bl	80086a0 <libCRCCalcCRC16>
	if ((rom_state != EEPROM_Valid) || ((uint16_t)crc != ccrc)) {
 800876e:	f504 64fe 	add.w	r4, r4, #2032	; 0x7f0
 8008772:	e9d4 4500 	ldrd	r4, r5, [r4]
 8008776:	a30a      	add	r3, pc, #40	; (adr r3, 80087a0 <eeprom_valid+0x40>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	429d      	cmp	r5, r3
 800877e:	bf08      	it	eq
 8008780:	4294      	cmpeq	r4, r2
 8008782:	d107      	bne.n	8008794 <eeprom_valid+0x34>
 8008784:	4b09      	ldr	r3, [pc, #36]	; (80087ac <eeprom_valid+0x4c>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	b292      	uxth	r2, r2
 800878c:	4282      	cmp	r2, r0
 800878e:	d103      	bne.n	8008798 <eeprom_valid+0x38>
		//Current EEPROM is invalid.
		return false;
	}
	return true;
 8008790:	2001      	movs	r0, #1
 8008792:	e000      	b.n	8008796 <eeprom_valid+0x36>
		return false;
 8008794:	2000      	movs	r0, #0
}
 8008796:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 8008798:	2000      	movs	r0, #0
 800879a:	e7fc      	b.n	8008796 <eeprom_valid+0x36>
 800879c:	f3af 8000 	nop.w
 80087a0:	abe02001 	.word	0xabe02001
 80087a4:	00c0feeb 	.word	0x00c0feeb
 80087a8:	0807b800 	.word	0x0807b800
 80087ac:	0807bff8 	.word	0x0807bff8

080087b0 <eeprom_load>:

void eeprom_load() {
 80087b0:	b508      	push	{r3, lr}
	memcpy(EEPROM_RAMSTART, (const void*) eeprommem, EEPROM_SIZE);
 80087b2:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 80087b6:	4902      	ldr	r1, [pc, #8]	; (80087c0 <eeprom_load+0x10>)
 80087b8:	4802      	ldr	r0, [pc, #8]	; (80087c4 <eeprom_load+0x14>)
 80087ba:	f001 fe5f 	bl	800a47c <memcpy>
}
 80087be:	bd08      	pop	{r3, pc}
 80087c0:	0807b800 	.word	0x0807b800
 80087c4:	2001f800 	.word	0x2001f800

080087c8 <eeprom_init>:
bool eeprom_init() {
 80087c8:	b510      	push	{r4, lr}
	__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE();
 80087ca:	4a0e      	ldr	r2, [pc, #56]	; (8008804 <eeprom_init+0x3c>)
 80087cc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80087ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087d2:	66d3      	str	r3, [r2, #108]	; 0x6c
	for(int i = 0; i < EEPROM_SIZE/sizeof(uint32_t); i++){
 80087d4:	2200      	movs	r2, #0
 80087d6:	f5b2 7ffe 	cmp.w	r2, #508	; 0x1fc
 80087da:	d209      	bcs.n	80087f0 <eeprom_init+0x28>
		eeprom_ram[i] = 0xFFFFFFFF;
 80087dc:	0093      	lsls	r3, r2, #2
 80087de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80087e2:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 80087e6:	f04f 31ff 	mov.w	r1, #4294967295
 80087ea:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < EEPROM_SIZE/sizeof(uint32_t); i++){
 80087ec:	3201      	adds	r2, #1
 80087ee:	e7f2      	b.n	80087d6 <eeprom_init+0xe>
	if (eeprom_valid()) {
 80087f0:	f7ff ffb6 	bl	8008760 <eeprom_valid>
 80087f4:	4604      	mov	r4, r0
 80087f6:	b908      	cbnz	r0, 80087fc <eeprom_init+0x34>
}
 80087f8:	4620      	mov	r0, r4
 80087fa:	bd10      	pop	{r4, pc}
		eeprom_load();
 80087fc:	f7ff ffd8 	bl	80087b0 <eeprom_load>
		return true;
 8008800:	e7fa      	b.n	80087f8 <eeprom_init+0x30>
 8008802:	bf00      	nop
 8008804:	40021000 	.word	0x40021000

08008808 <eeprom_save>:

void eeprom_save() {
 8008808:	b530      	push	{r4, r5, lr}
 800880a:	b087      	sub	sp, #28
 800880c:	f3bf 8f6f 	isb	sy
	__ISB();

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8008810:	f7fa fae6 	bl	8002de0 <HAL_FLASH_Unlock>
	uint32_t error = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	9305      	str	r3, [sp, #20]
		page -= 128;
		Bank = FLASH_BANK_2;
	}

	// make sure that this structure matches the data-sheet of your chip
	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	2302      	movs	r3, #2
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	2377      	movs	r3, #119	; 0x77
 8008820:	9303      	str	r3, [sp, #12]
 8008822:	2301      	movs	r3, #1
 8008824:	9304      	str	r3, [sp, #16]
		.Page = page,
		.NbPages = 1
	};

	// clear all flags before you write it to flash
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8008826:	4b20      	ldr	r3, [pc, #128]	; (80088a8 <eeprom_save+0xa0>)
 8008828:	22b3      	movs	r2, #179	; 0xb3
 800882a:	611a      	str	r2, [r3, #16]

	if (status != HAL_OK)
 800882c:	b108      	cbz	r0, 8008832 <eeprom_save+0x2a>
	HAL_FLASH_Lock();
	FLASH_WaitForLastOperation(100);
	HAL_FLASH_Unlock();

	return;
}
 800882e:	b007      	add	sp, #28
 8008830:	bd30      	pop	{r4, r5, pc}
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 8008832:	a905      	add	r1, sp, #20
 8008834:	a801      	add	r0, sp, #4
 8008836:	f7fa fb1d 	bl	8002e74 <HAL_FLASHEx_Erase>
	uint64_t ccrc = libCRCCalcCRC16(EEPROM_RAMSTART, EEPROM_SIZE / sizeof(uint8_t));
 800883a:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800883e:	481b      	ldr	r0, [pc, #108]	; (80088ac <eeprom_save+0xa4>)
 8008840:	f7ff ff2e 	bl	80086a0 <libCRCCalcCRC16>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&crc, ccrc);
 8008844:	4c1a      	ldr	r4, [pc, #104]	; (80088b0 <eeprom_save+0xa8>)
 8008846:	4602      	mov	r2, r0
 8008848:	2300      	movs	r3, #0
 800884a:	f504 61ff 	add.w	r1, r4, #2040	; 0x7f8
 800884e:	2000      	movs	r0, #0
 8008850:	f7fa fa18 	bl	8002c84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&rom_state, val);
 8008854:	a312      	add	r3, pc, #72	; (adr r3, 80088a0 <eeprom_save+0x98>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f504 61fe 	add.w	r1, r4, #2032	; 0x7f0
 800885e:	2000      	movs	r0, #0
 8008860:	f7fa fa10 	bl	8002c84 <HAL_FLASH_Program>
	int i = 0;
 8008864:	2500      	movs	r5, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)address, data[i++]);
 8008866:	00eb      	lsls	r3, r5, #3
 8008868:	3501      	adds	r5, #1
 800886a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800886e:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	4621      	mov	r1, r4
 8008878:	2000      	movs	r0, #0
 800887a:	f7fa fa03 	bl	8002c84 <HAL_FLASH_Program>
		address += 1;
 800887e:	3408      	adds	r4, #8
		FLASH_WaitForLastOperation(10);
 8008880:	200a      	movs	r0, #10
 8008882:	f7fa facd 	bl	8002e20 <FLASH_WaitForLastOperation>
	} while ((void*)address < (EEPROM_START_ADDRESS + EEPROM_SIZE));
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <eeprom_save+0xac>)
 8008888:	429c      	cmp	r4, r3
 800888a:	d9ec      	bls.n	8008866 <eeprom_save+0x5e>
	HAL_FLASH_Lock();
 800888c:	f7fa fabc 	bl	8002e08 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 8008890:	2064      	movs	r0, #100	; 0x64
 8008892:	f7fa fac5 	bl	8002e20 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 8008896:	f7fa faa3 	bl	8002de0 <HAL_FLASH_Unlock>
	return;
 800889a:	e7c8      	b.n	800882e <eeprom_save+0x26>
 800889c:	f3af 8000 	nop.w
 80088a0:	abe02001 	.word	0xabe02001
 80088a4:	00c0feeb 	.word	0x00c0feeb
 80088a8:	40022000 	.word	0x40022000
 80088ac:	2001f800 	.word	0x2001f800
 80088b0:	0807b800 	.word	0x0807b800
 80088b4:	0807bfef 	.word	0x0807bfef

080088b8 <modFlashEraseNewAppData>:


#include "flash.h"


uint16_t modFlashEraseNewAppData(uint32_t new_app_size) {
 80088b8:	b510      	push	{r4, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	f3bf 8f6f 	isb	sy
	__ISB();

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 80088c0:	f7fa fa8e 	bl	8002de0 <HAL_FLASH_Unlock>
	uint32_t error = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	9305      	str	r3, [sp, #20]


	// clear all flags before you write it to flash
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80088c8:	4b18      	ldr	r3, [pc, #96]	; (800892c <modFlashEraseNewAppData+0x74>)
 80088ca:	22b3      	movs	r2, #179	; 0xb3
 80088cc:	611a      	str	r2, [r3, #16]

	if (status != HAL_OK)
 80088ce:	b9e0      	cbnz	r0, 800890a <modFlashEraseNewAppData+0x52>
		return status;

	for (uint32_t addres = APP_BASE; addres < EROM_BASE; addres += 0x800){
 80088d0:	4c17      	ldr	r4, [pc, #92]	; (8008930 <modFlashEraseNewAppData+0x78>)
 80088d2:	4b18      	ldr	r3, [pc, #96]	; (8008934 <modFlashEraseNewAppData+0x7c>)
 80088d4:	429c      	cmp	r4, r3
 80088d6:	d21f      	bcs.n	8008918 <modFlashEraseNewAppData+0x60>
		uint32_t page = (addres - MAIN_BASE) / 0x800;
 80088d8:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 80088dc:	0ad3      	lsrs	r3, r2, #11
		uint32_t Bank = FLASH_BANK_1;

		if (page >= 128){
 80088de:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80088e2:	d314      	bcc.n	800890e <modFlashEraseNewAppData+0x56>
			page -= 128;
 80088e4:	3b80      	subs	r3, #128	; 0x80
			Bank = FLASH_BANK_2;
 80088e6:	2202      	movs	r2, #2
		}

		// make sure that this structure matches the data-sheet of your chip
		FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 80088e8:	2100      	movs	r1, #0
 80088ea:	9101      	str	r1, [sp, #4]
 80088ec:	9202      	str	r2, [sp, #8]
 80088ee:	9303      	str	r3, [sp, #12]
 80088f0:	2301      	movs	r3, #1
 80088f2:	9304      	str	r3, [sp, #16]



		// perform the erase first

		HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 80088f4:	a905      	add	r1, sp, #20
 80088f6:	a801      	add	r0, sp, #4
 80088f8:	f7fa fabc 	bl	8002e74 <HAL_FLASHEx_Erase>

		if (error != -1){
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d106      	bne.n	8008912 <modFlashEraseNewAppData+0x5a>
	for (uint32_t addres = APP_BASE; addres < EROM_BASE; addres += 0x800){
 8008904:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008908:	e7e3      	b.n	80088d2 <modFlashEraseNewAppData+0x1a>
		return status;
 800890a:	b280      	uxth	r0, r0
 800890c:	e002      	b.n	8008914 <modFlashEraseNewAppData+0x5c>
		uint32_t Bank = FLASH_BANK_1;
 800890e:	2201      	movs	r2, #1
 8008910:	e7ea      	b.n	80088e8 <modFlashEraseNewAppData+0x30>
			return HAL_ERROR;
 8008912:	2001      	movs	r0, #1
	HAL_FLASH_Lock();
	FLASH_WaitForLastOperation(100);
	HAL_FLASH_Unlock();

	return HAL_OK;
}
 8008914:	b006      	add	sp, #24
 8008916:	bd10      	pop	{r4, pc}
	HAL_FLASH_Lock();
 8008918:	f7fa fa76 	bl	8002e08 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 800891c:	2064      	movs	r0, #100	; 0x64
 800891e:	f7fa fa7f 	bl	8002e20 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 8008922:	f7fa fa5d 	bl	8002de0 <HAL_FLASH_Unlock>
	return HAL_OK;
 8008926:	2000      	movs	r0, #0
 8008928:	e7f4      	b.n	8008914 <modFlashEraseNewAppData+0x5c>
 800892a:	bf00      	nop
 800892c:	40022000 	.word	0x40022000
 8008930:	0803d800 	.word	0x0803d800
 8008934:	0807b800 	.word	0x0807b800

08008938 <modFlashWriteNewAppData>:

uint16_t modFlashWriteNewAppData(uint32_t offset, uint8_t *data, uint32_t len) {
	uint16_t returnVal = HAL_OK;

	//Check if length and offset are aligned with and deviseble by blocks of 8 bytes.
	if ((offset % 8 != 0) || (len % 8 != 0)){
 8008938:	f010 0f07 	tst.w	r0, #7
 800893c:	d157      	bne.n	80089ee <modFlashWriteNewAppData+0xb6>
uint16_t modFlashWriteNewAppData(uint32_t offset, uint8_t *data, uint32_t len) {
 800893e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008942:	460f      	mov	r7, r1
 8008944:	4690      	mov	r8, r2
	if ((offset % 8 != 0) || (len % 8 != 0)){
 8008946:	f012 0f07 	tst.w	r2, #7
 800894a:	d152      	bne.n	80089f2 <modFlashWriteNewAppData+0xba>
		return HAL_ERROR;
	}

	//Detect start of write
	if (offset == 0){
 800894c:	b928      	cbnz	r0, 800895a <modFlashWriteNewAppData+0x22>
		addr = (uint64_t*)APP_BASE;
 800894e:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <modFlashWriteNewAppData+0xc4>)
 8008950:	4a2b      	ldr	r2, [pc, #172]	; (8008a00 <modFlashWriteNewAppData+0xc8>)
 8008952:	601a      	str	r2, [r3, #0]
		written = 0;
 8008954:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <modFlashWriteNewAppData+0xcc>)
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
	}

	//Check for sequentiality of offset
	if ((offset + APP_BASE) != addr){
 800895a:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 800895e:	f500 3076 	add.w	r0, r0, #251904	; 0x3d800
 8008962:	4b26      	ldr	r3, [pc, #152]	; (80089fc <modFlashWriteNewAppData+0xc4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4298      	cmp	r0, r3
 8008968:	d002      	beq.n	8008970 <modFlashWriteNewAppData+0x38>
		return HAL_ERROR;
 800896a:	2001      	movs	r0, #1
	HAL_FLASH_Lock();
	FLASH_WaitForLastOperation(100);
	HAL_FLASH_Unlock();

	return HAL_OK;
}
 800896c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <modFlashWriteNewAppData+0xd0>)
 8008972:	22b3      	movs	r2, #179	; 0xb3
 8008974:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < len; i += 8) {
 8008976:	2600      	movs	r6, #0
 8008978:	e02a      	b.n	80089d0 <modFlashWriteNewAppData+0x98>
			dword += ((uint64_t)data[i+j]) << j*8;
 800897a:	1971      	adds	r1, r6, r5
 800897c:	f817 9001 	ldrb.w	r9, [r7, r1]
 8008980:	00e9      	lsls	r1, r5, #3
 8008982:	f1a1 0e20 	sub.w	lr, r1, #32
 8008986:	f1c1 0c20 	rsb	ip, r1, #32
 800898a:	2400      	movs	r4, #0
 800898c:	fa09 fe0e 	lsl.w	lr, r9, lr
 8008990:	ea44 040e 	orr.w	r4, r4, lr
 8008994:	fa29 fc0c 	lsr.w	ip, r9, ip
 8008998:	ea44 040c 	orr.w	r4, r4, ip
 800899c:	fa09 f001 	lsl.w	r0, r9, r1
 80089a0:	1812      	adds	r2, r2, r0
 80089a2:	eb44 0303 	adc.w	r3, r4, r3
		for (int j = 0; j < 8; j++){
 80089a6:	3501      	adds	r5, #1
 80089a8:	2d07      	cmp	r5, #7
 80089aa:	dde6      	ble.n	800897a <modFlashWriteNewAppData+0x42>
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)addr, dword) != HAL_OK){
 80089ac:	4913      	ldr	r1, [pc, #76]	; (80089fc <modFlashWriteNewAppData+0xc4>)
 80089ae:	6809      	ldr	r1, [r1, #0]
 80089b0:	2000      	movs	r0, #0
 80089b2:	f7fa f967 	bl	8002c84 <HAL_FLASH_Program>
 80089b6:	b9f0      	cbnz	r0, 80089f6 <modFlashWriteNewAppData+0xbe>
		FLASH_WaitForLastOperation(10);
 80089b8:	200a      	movs	r0, #10
 80089ba:	f7fa fa31 	bl	8002e20 <FLASH_WaitForLastOperation>
		addr++;
 80089be:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <modFlashWriteNewAppData+0xc4>)
 80089c0:	6813      	ldr	r3, [r2, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	6013      	str	r3, [r2, #0]
		written += 8;
 80089c6:	4a0f      	ldr	r2, [pc, #60]	; (8008a04 <modFlashWriteNewAppData+0xcc>)
 80089c8:	6813      	ldr	r3, [r2, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < len; i += 8) {
 80089ce:	3608      	adds	r6, #8
 80089d0:	4546      	cmp	r6, r8
 80089d2:	d203      	bcs.n	80089dc <modFlashWriteNewAppData+0xa4>
		for (int j = 0; j < 8; j++){
 80089d4:	2500      	movs	r5, #0
		uint64_t dword = 0;
 80089d6:	462a      	mov	r2, r5
 80089d8:	462b      	mov	r3, r5
 80089da:	e7e5      	b.n	80089a8 <modFlashWriteNewAppData+0x70>
	HAL_FLASH_Lock();
 80089dc:	f7fa fa14 	bl	8002e08 <HAL_FLASH_Lock>
	FLASH_WaitForLastOperation(100);
 80089e0:	2064      	movs	r0, #100	; 0x64
 80089e2:	f7fa fa1d 	bl	8002e20 <FLASH_WaitForLastOperation>
	HAL_FLASH_Unlock();
 80089e6:	f7fa f9fb 	bl	8002de0 <HAL_FLASH_Unlock>
	return HAL_OK;
 80089ea:	2000      	movs	r0, #0
 80089ec:	e7be      	b.n	800896c <modFlashWriteNewAppData+0x34>
		return HAL_ERROR;
 80089ee:	2001      	movs	r0, #1
}
 80089f0:	4770      	bx	lr
		return HAL_ERROR;
 80089f2:	2001      	movs	r0, #1
 80089f4:	e7ba      	b.n	800896c <modFlashWriteNewAppData+0x34>
			return HAL_ERROR;
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7b8      	b.n	800896c <modFlashWriteNewAppData+0x34>
 80089fa:	bf00      	nop
 80089fc:	200033f4 	.word	0x200033f4
 8008a00:	0803d800 	.word	0x0803d800
 8008a04:	20000aa0 	.word	0x20000aa0
 8008a08:	40022000 	.word	0x40022000

08008a0c <modFlashJumpToBootloader>:

uint16_t modFlashCopyNewAppToMainApp(uint32_t offset, uint8_t *data, uint32_t len) {

}

void modFlashJumpToBootloader(void) {
 8008a0c:	b510      	push	{r4, lr}
	typedef void (*pFunction)(void);

	__HAL_RCC_USART2_FORCE_RESET();
 8008a0e:	4c15      	ldr	r4, [pc, #84]	; (8008a64 <modFlashJumpToBootloader+0x58>)
 8008a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a16:	63a3      	str	r3, [r4, #56]	; 0x38
	HAL_Delay(5);
 8008a18:	2005      	movs	r0, #5
 8008a1a:	f7f8 fb67 	bl	80010ec <HAL_Delay>
	__HAL_RCC_USART2_RELEASE_RESET();
 8008a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a24:	63a3      	str	r3, [r4, #56]	; 0x38
	HAL_Delay(5);
 8008a26:	2005      	movs	r0, #5
 8008a28:	f7f8 fb60 	bl	80010ec <HAL_Delay>

	HAL_RCC_DeInit();
 8008a2c:	f7fc fb22 	bl	8005074 <HAL_RCC_DeInit>
	// Variable that will be loaded with the start address of the application
	volatile uint32_t* jump_address;
	const volatile uint32_t* bootloader_address = (volatile uint32_t*)BOOT_BASE;

	// Get jump address from application vector table
	jump_address = (volatile uint32_t*) bootloader_address[1];
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <modFlashJumpToBootloader+0x5c>)
 8008a32:	681c      	ldr	r4, [r3, #0]

	// Load this address into function pointer
	jump_to_bootloader = (pFunction) jump_address;

	// Clear pending interrupts
	SCB->ICSR = SCB_ICSR_PENDSVCLR_Msk;
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <modFlashJumpToBootloader+0x60>)
 8008a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a3a:	605a      	str	r2, [r3, #4]

	// Disable all interrupts
	for(int i = 0;i < 8;i++) {
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e009      	b.n	8008a54 <modFlashJumpToBootloader+0x48>
		NVIC->ICER[i] = NVIC->IABR[i];
 8008a40:	4a0b      	ldr	r2, [pc, #44]	; (8008a70 <modFlashJumpToBootloader+0x64>)
 8008a42:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8008a46:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008a4a:	f103 0120 	add.w	r1, r3, #32
 8008a4e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for(int i = 0;i < 8;i++) {
 8008a52:	3301      	adds	r3, #1
 8008a54:	2b07      	cmp	r3, #7
 8008a56:	ddf3      	ble.n	8008a40 <modFlashJumpToBootloader+0x34>
	}

	// Set stack pointer
	__set_MSP((uint32_t) (bootloader_address[0]));
 8008a58:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <modFlashJumpToBootloader+0x68>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008a5c:	f383 8808 	msr	MSP, r3

	// Jump to the bootloader
	jump_to_bootloader();
 8008a60:	47a0      	blx	r4
}
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	40021000 	.word	0x40021000
 8008a68:	0807c004 	.word	0x0807c004
 8008a6c:	e000ed00 	.word	0xe000ed00
 8008a70:	e000e100 	.word	0xe000e100
 8008a74:	0807c000 	.word	0x0807c000

08008a78 <modEffectTask>:

bool effectBlinkState = false;
uint32_t effectBlinkLastTick;
uint32_t effectLastLimitTick;

void modEffectTask(){
 8008a78:	b508      	push	{r3, lr}
	if(modDelayTick1ms(&effectBlinkLastTick,500)){
 8008a7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008a7e:	482e      	ldr	r0, [pc, #184]	; (8008b38 <modEffectTask+0xc0>)
 8008a80:	f7ff fe24 	bl	80086cc <modDelayTick1ms>
 8008a84:	b120      	cbz	r0, 8008a90 <modEffectTask+0x18>
		effectBlinkState = !effectBlinkState;
 8008a86:	4a2d      	ldr	r2, [pc, #180]	; (8008b3c <modEffectTask+0xc4>)
 8008a88:	7813      	ldrb	r3, [r2, #0]
 8008a8a:	f083 0301 	eor.w	r3, r3, #1
 8008a8e:	7013      	strb	r3, [r2, #0]
	}

	if(modDelayTick1ms(&effectLastTick, 5)){
 8008a90:	2105      	movs	r1, #5
 8008a92:	482b      	ldr	r0, [pc, #172]	; (8008b40 <modEffectTask+0xc8>)
 8008a94:	f7ff fe1a 	bl	80086cc <modDelayTick1ms>
 8008a98:	b188      	cbz	r0, 8008abe <modEffectTask+0x46>

		if(phase.fault != Converter_OK){
 8008a9a:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <modEffectTask+0xcc>)
 8008a9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008aa0:	b19b      	cbz	r3, 8008aca <modEffectTask+0x52>
			LED0_GPIO_Port->BRR = LED0_Pin;
 8008aa2:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <modEffectTask+0xd0>)
 8008aa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008aa8:	629a      	str	r2, [r3, #40]	; 0x28
			LED2_GPIO_Port->BRR = LED2_Pin;
 8008aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28

			if(effectBlinkState){
 8008ab0:	4b22      	ldr	r3, [pc, #136]	; (8008b3c <modEffectTask+0xc4>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b123      	cbz	r3, 8008ac0 <modEffectTask+0x48>
				LED1_GPIO_Port->BSRR = LED1_Pin;
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <modEffectTask+0xd0>)
 8008ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008abc:	619a      	str	r2, [r3, #24]
					break;

			}
		}
	}
}
 8008abe:	bd08      	pop	{r3, pc}
				LED1_GPIO_Port->BRR = LED1_Pin;
 8008ac0:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <modEffectTask+0xd0>)
 8008ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ac8:	e7f9      	b.n	8008abe <modEffectTask+0x46>
			if(phase.mode != PhaseMode_CIV){
 8008aca:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <modEffectTask+0xcc>)
 8008acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad0:	b1ab      	cbz	r3, 8008afe <modEffectTask+0x86>
				LED1_GPIO_Port->BSRR = LED1_Pin;
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <modEffectTask+0xd0>)
 8008ad4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ad8:	619a      	str	r2, [r3, #24]
				effectLastLimitTick = HAL_GetTick();
 8008ada:	f7f8 fb01 	bl	80010e0 <HAL_GetTick>
 8008ade:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <modEffectTask+0xd4>)
 8008ae0:	6018      	str	r0, [r3, #0]
			switch(MpptLastAckion){
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	; (8008b50 <modEffectTask+0xd8>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d015      	beq.n	8008b16 <modEffectTask+0x9e>
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d01b      	beq.n	8008b26 <modEffectTask+0xae>
					LED0_GPIO_Port->BRR = LED0_Pin;
 8008aee:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <modEffectTask+0xd0>)
 8008af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008af4:	629a      	str	r2, [r3, #40]	; 0x28
					LED2_GPIO_Port->BRR = LED2_Pin;
 8008af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008afa:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8008afc:	e7df      	b.n	8008abe <modEffectTask+0x46>
				if(modDelayTick1ms(&effectLastLimitTick, 500)){
 8008afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b02:	4812      	ldr	r0, [pc, #72]	; (8008b4c <modEffectTask+0xd4>)
 8008b04:	f7ff fde2 	bl	80086cc <modDelayTick1ms>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d0ea      	beq.n	8008ae2 <modEffectTask+0x6a>
					LED1_GPIO_Port->BRR = LED1_Pin;
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <modEffectTask+0xd0>)
 8008b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b12:	629a      	str	r2, [r3, #40]	; 0x28
 8008b14:	e7e5      	b.n	8008ae2 <modEffectTask+0x6a>
					LED0_GPIO_Port->BSRR = LED0_Pin;
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <modEffectTask+0xd0>)
 8008b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b1c:	619a      	str	r2, [r3, #24]
					LED2_GPIO_Port->BRR = LED2_Pin;
 8008b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b22:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8008b24:	e7cb      	b.n	8008abe <modEffectTask+0x46>
					LED0_GPIO_Port->BRR = LED0_Pin;
 8008b26:	4b08      	ldr	r3, [pc, #32]	; (8008b48 <modEffectTask+0xd0>)
 8008b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b2c:	629a      	str	r2, [r3, #40]	; 0x28
					LED2_GPIO_Port->BSRR = LED2_Pin;
 8008b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b32:	619a      	str	r2, [r3, #24]
}
 8008b34:	e7c3      	b.n	8008abe <modEffectTask+0x46>
 8008b36:	bf00      	nop
 8008b38:	200033fc 	.word	0x200033fc
 8008b3c:	20000aa4 	.word	0x20000aa4
 8008b40:	20000aa8 	.word	0x20000aa8
 8008b44:	20001edc 	.word	0x20001edc
 8008b48:	48000800 	.word	0x48000800
 8008b4c:	200033f8 	.word	0x200033f8
 8008b50:	2000202c 	.word	0x2000202c

08008b54 <main_init_after_config>:

extern ConverterPhase_t phase;
modConfig_t *acktiveConfig;

//(Re)Initialize all parts that require initialization based on configuration memory.
void main_init_after_config() {
 8008b54:	b510      	push	{r4, lr}
	modCANinit(&acktiveConfig->cansettings);
 8008b56:	4c08      	ldr	r4, [pc, #32]	; (8008b78 <main_init_after_config+0x24>)
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8008b5e:	f7fe f8a1 	bl	8006ca4 <modCANinit>
	control_init(&acktiveConfig->settings, &acktiveConfig->calData);
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	f501 7088 	add.w	r0, r1, #272	; 0x110
 8008b68:	f7ff faf2 	bl	8008150 <control_init>
	modMPPTinit(&acktiveConfig->mpptsettings);
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8008b72:	f000 f8ff 	bl	8008d74 <modMPPTinit>
}
 8008b76:	bd10      	pop	{r4, pc}
 8008b78:	20003490 	.word	0x20003490

08008b7c <HAL_MspInit>:
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_MspInit(void) {
 8008b7c:	b500      	push	{lr}
 8008b7e:	b083      	sub	sp, #12
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b80:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <HAL_MspInit+0x68>)
 8008b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b84:	f042 0201 	orr.w	r2, r2, #1
 8008b88:	661a      	str	r2, [r3, #96]	; 0x60
 8008b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b8c:	f002 0201 	and.w	r2, r2, #1
 8008b90:	9200      	str	r2, [sp, #0]
 8008b92:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 8008b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008b9a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	9b01      	ldr	r3, [sp, #4]

	// System interrupt init
	// SVCall_IRQn interrupt configuration
	HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2102      	movs	r1, #2
 8008baa:	f06f 0004 	mvn.w	r0, #4
 8008bae:	f7f9 fa95 	bl	80020dc <HAL_NVIC_SetPriority>
	// DebugMonitor_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	f06f 0003 	mvn.w	r0, #3
 8008bba:	f7f9 fa8f 	bl	80020dc <HAL_NVIC_SetPriority>
	// PendSV_IRQn interrupt configuration
	HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	f06f 0001 	mvn.w	r0, #1
 8008bc6:	f7f9 fa89 	bl	80020dc <HAL_NVIC_SetPriority>

	// Configure the internal voltage reference buffer voltage scale
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8008bca:	2020      	movs	r0, #32
 8008bcc:	f7f8 faa0 	bl	8001110 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

	// Enable the Internal Voltage Reference buffer
	HAL_SYSCFG_EnableVREFBUF();
 8008bd0:	f7f8 fab2 	bl	8001138 <HAL_SYSCFG_EnableVREFBUF>

	// Configure the internal voltage reference buffer high impedance mode
	HAL_SYSCFG_VREFBUF_HighImpedanceConfig(
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f7f8 faa5 	bl	8001124 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
	SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);

	// Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	HAL_PWREx_DisableUCPDDeadBattery();
 8008bda:	f7fc fa43 	bl	8005064 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8008bde:	b003      	add	sp, #12
 8008be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008be4:	40021000 	.word	0x40021000

08008be8 <main_halt_risky>:

bool main_halt_risky() {
 8008be8:	b508      	push	{r3, lr}
	control_disable();
 8008bea:	f7ff fb1f 	bl	800822c <control_disable>
	HAL_Delay(100);
 8008bee:	2064      	movs	r0, #100	; 0x64
 8008bf0:	f7f8 fa7c 	bl	80010ec <HAL_Delay>
	//OK
	return 0;
}
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	bd08      	pop	{r3, pc}

08008bf8 <Error_Handler>:

void Error_Handler(void) {
	while (1);
 8008bf8:	e7fe      	b.n	8008bf8 <Error_Handler>
	...

08008bfc <system_clock_config>:
void system_clock_config(void) {
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	b0a8      	sub	sp, #160	; 0xa0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008c00:	2238      	movs	r2, #56	; 0x38
 8008c02:	2100      	movs	r1, #0
 8008c04:	a81a      	add	r0, sp, #104	; 0x68
 8008c06:	f001 fc47 	bl	800a498 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008c0a:	2400      	movs	r4, #0
 8008c0c:	9415      	str	r4, [sp, #84]	; 0x54
 8008c0e:	9416      	str	r4, [sp, #88]	; 0x58
 8008c10:	9417      	str	r4, [sp, #92]	; 0x5c
 8008c12:	9418      	str	r4, [sp, #96]	; 0x60
 8008c14:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8008c16:	2254      	movs	r2, #84	; 0x54
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4668      	mov	r0, sp
 8008c1c:	f001 fc3c 	bl	800a498 <memset>
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7fc f9a1 	bl	8004f68 <HAL_PWREx_ControlVoltageScaling>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c26:	2301      	movs	r3, #1
 8008c28:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c2e:	931b      	str	r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c30:	2302      	movs	r3, #2
 8008c32:	9321      	str	r3, [sp, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c34:	2203      	movs	r2, #3
 8008c36:	9222      	str	r2, [sp, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8008c38:	2204      	movs	r2, #4
 8008c3a:	9223      	str	r2, [sp, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8008c3c:	2255      	movs	r2, #85	; 0x55
 8008c3e:	9224      	str	r2, [sp, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008c40:	9325      	str	r3, [sp, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008c42:	9326      	str	r3, [sp, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008c44:	9327      	str	r3, [sp, #156]	; 0x9c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008c46:	a81a      	add	r0, sp, #104	; 0x68
 8008c48:	f7fc fa74 	bl	8005134 <HAL_RCC_OscConfig>
 8008c4c:	b9f8      	cbnz	r0, 8008c8e <system_clock_config+0x92>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008c4e:	230f      	movs	r3, #15
 8008c50:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c52:	2303      	movs	r3, #3
 8008c54:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c56:	2300      	movs	r3, #0
 8008c58:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008c5a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c5c:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8008c5e:	2104      	movs	r1, #4
 8008c60:	a815      	add	r0, sp, #84	; 0x54
 8008c62:	f7fc fce1 	bl	8005628 <HAL_RCC_ClockConfig>
 8008c66:	b9a0      	cbnz	r0, 8008c92 <system_clock_config+0x96>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <system_clock_config+0xa0>)
 8008c6a:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9303      	str	r3, [sp, #12]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8008c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c74:	930e      	str	r3, [sp, #56]	; 0x38
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008c76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008c7a:	9311      	str	r3, [sp, #68]	; 0x44
	PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8008c7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c80:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8008c82:	4668      	mov	r0, sp
 8008c84:	f7fc fdfe 	bl	8005884 <HAL_RCCEx_PeriphCLKConfig>
 8008c88:	b928      	cbnz	r0, 8008c96 <system_clock_config+0x9a>
}
 8008c8a:	b028      	add	sp, #160	; 0xa0
 8008c8c:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008c8e:	f7ff ffb3 	bl	8008bf8 <Error_Handler>
		Error_Handler();
 8008c92:	f7ff ffb1 	bl	8008bf8 <Error_Handler>
		Error_Handler();
 8008c96:	f7ff ffaf 	bl	8008bf8 <Error_Handler>
 8008c9a:	bf00      	nop
 8008c9c:	00019004 	.word	0x00019004

08008ca0 <main>:
int main(void) {
 8008ca0:	b500      	push	{lr}
 8008ca2:	b087      	sub	sp, #28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008ca4:	4b29      	ldr	r3, [pc, #164]	; (8008d4c <main+0xac>)
 8008ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ca8:	f042 0204 	orr.w	r2, r2, #4
 8008cac:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb0:	f002 0204 	and.w	r2, r2, #4
 8008cb4:	9201      	str	r2, [sp, #4]
 8008cb6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8008cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cba:	f042 0220 	orr.w	r2, r2, #32
 8008cbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cc2:	f002 0220 	and.w	r2, r2, #32
 8008cc6:	9202      	str	r2, [sp, #8]
 8008cc8:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8008cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cd4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008cd8:	9203      	str	r2, [sp, #12]
 8008cda:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce6:	f002 0201 	and.w	r2, r2, #1
 8008cea:	9204      	str	r2, [sp, #16]
 8008cec:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf0:	f042 0202 	orr.w	r2, r2, #2
 8008cf4:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	9b05      	ldr	r3, [sp, #20]
	DBGMCU->APB2FZ |= DBGMCU_APB2FZ_DBG_HRTIM1_STOP;
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <main+0xb0>)
 8008d02:	6913      	ldr	r3, [r2, #16]
 8008d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d08:	6113      	str	r3, [r2, #16]
	HRTIM1->sCommonRegs.OENR = 0;
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <main+0xb4>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
	HAL_Init();
 8008d12:	f7f8 f9c9 	bl	80010a8 <HAL_Init>
	system_clock_config();
 8008d16:	f7ff ff71 	bl	8008bfc <system_clock_config>
	dma_init();
 8008d1a:	f7ff fce7 	bl	80086ec <dma_init>
	hw_io_init();
 8008d1e:	f001 fa49 	bl	800a1b4 <hw_io_init>
	acktiveConfig = modConfigInit();
 8008d22:	f7fe ffe3 	bl	8007cec <modConfigInit>
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <main+0xb8>)
 8008d28:	6018      	str	r0, [r3, #0]
	modUARTInit();
 8008d2a:	f001 f973 	bl	800a014 <modUARTInit>
	modTestingInit();
 8008d2e:	f000 ffd3 	bl	8009cd8 <modTestingInit>
	main_init_after_config();
 8008d32:	f7ff ff0f 	bl	8008b54 <main_init_after_config>
		modEffectTask();
 8008d36:	f7ff fe9f 	bl	8008a78 <modEffectTask>
		modMPPTtask();
 8008d3a:	f000 f913 	bl	8008f64 <modMPPTtask>
		modCANtask();
 8008d3e:	f7fe f8af 	bl	8006ea0 <modCANtask>
		modUARTTask();
 8008d42:	f001 f9c3 	bl	800a0cc <modUARTTask>
		modTestingTask();
 8008d46:	f000 fffd 	bl	8009d44 <modTestingTask>
	while (1) {
 8008d4a:	e7f4      	b.n	8008d36 <main+0x96>
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	e0042000 	.word	0xe0042000
 8008d54:	40016800 	.word	0x40016800
 8008d58:	20003490 	.word	0x20003490

08008d5c <NMI_Handler>:
}

void NMI_Handler(void) {

}
 8008d5c:	4770      	bx	lr

08008d5e <HardFault_Handler>:

void HardFault_Handler(void) {
	while (1) {
 8008d5e:	e7fe      	b.n	8008d5e <HardFault_Handler>

08008d60 <MemManage_Handler>:
	}
}

void MemManage_Handler(void) {

	while (1) {
 8008d60:	e7fe      	b.n	8008d60 <MemManage_Handler>

08008d62 <BusFault_Handler>:
	}
}

void BusFault_Handler(void) {

	while (1) {
 8008d62:	e7fe      	b.n	8008d62 <BusFault_Handler>

08008d64 <UsageFault_Handler>:
	}
}

void UsageFault_Handler(void) {

	while (1) {
 8008d64:	e7fe      	b.n	8008d64 <UsageFault_Handler>

08008d66 <SVC_Handler>:
	}
}

void SVC_Handler(void) {

}
 8008d66:	4770      	bx	lr

08008d68 <DebugMon_Handler>:

void DebugMon_Handler(void) {

}
 8008d68:	4770      	bx	lr

08008d6a <PendSV_Handler>:

void PendSV_Handler(void) {

}
 8008d6a:	4770      	bx	lr

08008d6c <SysTick_Handler>:

void SysTick_Handler(void) {
 8008d6c:	b508      	push	{r3, lr}

	HAL_IncTick();
 8008d6e:	f7f8 f9ab 	bl	80010c8 <HAL_IncTick>

}
 8008d72:	bd08      	pop	{r3, pc}

08008d74 <modMPPTinit>:
//float min = 10.0f;
//int oscillationthreshold = 20;
//float maxgradient = 5.0f;
//float powerthreshold = 5.0f;

void modMPPTinit(modMPPTsettings_t *settings) {
 8008d74:	b510      	push	{r4, lr}
	modMpptsettings = settings;
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <modMPPTinit+0x18>)
 8008d78:	6018      	str	r0, [r3, #0]
	currentmode = MpptState_init;
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <modMPPTinit+0x1c>)
 8008d7e:	701c      	strb	r4, [r3, #0]
	modConverterPWMOutputDisable();
 8008d80:	f7ff fa66 	bl	8008250 <modConverterPWMOutputDisable>

	MpptLastAckion = MpptAcktionState_Init;
 8008d84:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <modMPPTinit+0x20>)
 8008d86:	701c      	strb	r4, [r3, #0]
}
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	bf00      	nop
 8008d8c:	2000349c 	.word	0x2000349c
 8008d90:	200034a0 	.word	0x200034a0
 8008d94:	2000202c 	.word	0x2000202c

08008d98 <randomf>:

		}
	}
}

float randomf(float min, float max){
 8008d98:	b508      	push	{r3, lr}
 8008d9a:	ed2d 8b02 	vpush	{d8}
 8008d9e:	eef0 8a40 	vmov.f32	s17, s0
 8008da2:	eeb0 8a60 	vmov.f32	s16, s1
	float f = ((float)(rand()%(1<<12))) / ((float)(1<<12));
 8008da6:	f002 f9f9 	bl	800b19c <rand>
 8008daa:	4243      	negs	r3, r0
 8008dac:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008db4:	bf58      	it	pl
 8008db6:	4258      	negpl	r0, r3
 8008db8:	ee07 0a90 	vmov	s15, r0
 8008dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8008ddc <randomf+0x44>
 8008dc4:	ee67 7a80 	vmul.f32	s15, s15, s0
	return f*(max-min) + min;
 8008dc8:	ee38 8a68 	vsub.f32	s16, s16, s17
 8008dcc:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8008dd0:	ee37 0aa8 	vadd.f32	s0, s15, s17
 8008dd4:	ecbd 8b02 	vpop	{d8}
 8008dd8:	bd08      	pop	{r3, pc}
 8008dda:	bf00      	nop
 8008ddc:	39800000 	.word	0x39800000

08008de0 <modMPPTPerturbAndObserve>:

void modMPPTPerturbAndObserve(){
 8008de0:	b510      	push	{r4, lr}
 8008de2:	ed2d 8b04 	vpush	{d8-d9}
	float Vsp = control_get_setpoint();
 8008de6:	f7ff fc49 	bl	800867c <control_get_setpoint>
 8008dea:	eeb0 8a40 	vmov.f32	s16, s0

	switch(modConverterGetMode()){
 8008dee:	f7ff fc1d 	bl	800862c <modConverterGetMode>
 8008df2:	2802      	cmp	r0, #2
 8008df4:	d011      	beq.n	8008e1a <modMPPTPerturbAndObserve+0x3a>
 8008df6:	dc0a      	bgt.n	8008e0e <modMPPTPerturbAndObserve+0x2e>
 8008df8:	2801      	cmp	r0, #1
 8008dfa:	d117      	bne.n	8008e2c <modMPPTPerturbAndObserve+0x4c>
	case PhaseMode_MinInputCurrent:
		Vsp -= modMpptsettings->PO_Stepsize;
		control_set_setpoint(Vsp);
		return;
	case PhaseMode_CIC:
		Vsp += modMpptsettings->PO_Stepsize;
 8008dfc:	4b51      	ldr	r3, [pc, #324]	; (8008f44 <modMPPTPerturbAndObserve+0x164>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	ed93 0a00 	vldr	s0, [r3]
		control_set_setpoint(Vsp);
 8008e04:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008e08:	f7ff fc16 	bl	8008638 <control_set_setpoint>
		return;
 8008e0c:	e002      	b.n	8008e14 <modMPPTPerturbAndObserve+0x34>
	switch(modConverterGetMode()){
 8008e0e:	3803      	subs	r0, #3
 8008e10:	2802      	cmp	r0, #2
 8008e12:	d80b      	bhi.n	8008e2c <modMPPTPerturbAndObserve+0x4c>
	pv = v;
	pp=p;

	oscillationnumber ++;
	control_set_setpoint(Vsp);
}
 8008e14:	ecbd 8b04 	vpop	{d8-d9}
 8008e18:	bd10      	pop	{r4, pc}
		Vsp -= modMpptsettings->PO_Stepsize;
 8008e1a:	4b4a      	ldr	r3, [pc, #296]	; (8008f44 <modMPPTPerturbAndObserve+0x164>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	ed93 0a00 	vldr	s0, [r3]
		control_set_setpoint(Vsp);
 8008e22:	ee38 0a40 	vsub.f32	s0, s16, s0
 8008e26:	f7ff fc07 	bl	8008638 <control_set_setpoint>
		return;
 8008e2a:	e7f3      	b.n	8008e14 <modMPPTPerturbAndObserve+0x34>
	float i = control_get_regulated_current();
 8008e2c:	f7ff fc32 	bl	8008694 <control_get_regulated_current>
 8008e30:	eef0 8a40 	vmov.f32	s17, s0
	float v = control_get_regulated_voltage();
 8008e34:	f7ff fc28 	bl	8008688 <control_get_regulated_voltage>
 8008e38:	eeb0 9a40 	vmov.f32	s18, s0
	float p = i*v;
 8008e3c:	ee68 8a80 	vmul.f32	s17, s17, s0
	float dv = v - pv;
 8008e40:	4b41      	ldr	r3, [pc, #260]	; (8008f48 <modMPPTPerturbAndObserve+0x168>)
 8008e42:	edd3 7a00 	vldr	s15, [r3]
 8008e46:	ee70 7a67 	vsub.f32	s15, s0, s15
	float dp = p - pp;
 8008e4a:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <modMPPTPerturbAndObserve+0x16c>)
 8008e4c:	ed93 7a00 	vldr	s14, [r3]
 8008e50:	ee38 7ac7 	vsub.f32	s14, s17, s14
	if(dv != 0){
 8008e54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	d04a      	beq.n	8008ef4 <modMPPTPerturbAndObserve+0x114>
		dpdv = dp/dv;
 8008e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
	if (justjumped){
 8008e62:	4b3b      	ldr	r3, [pc, #236]	; (8008f50 <modMPPTPerturbAndObserve+0x170>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b19b      	cbz	r3, 8008e90 <modMPPTPerturbAndObserve+0xb0>
		justjumped = false;
 8008e68:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <modMPPTPerturbAndObserve+0x170>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]
		if(p <  (pp - modMpptsettings->jump_PowerThreshold)){
 8008e6e:	4b35      	ldr	r3, [pc, #212]	; (8008f44 <modMPPTPerturbAndObserve+0x164>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	ed93 7a05 	vldr	s14, [r3, #20]
 8008e76:	4b35      	ldr	r3, [pc, #212]	; (8008f4c <modMPPTPerturbAndObserve+0x16c>)
 8008e78:	edd3 7a00 	vldr	s15, [r3]
 8008e7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e80:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	dd02      	ble.n	8008e90 <modMPPTPerturbAndObserve+0xb0>
			Vsp = changedStepSize;
 8008e8a:	4b32      	ldr	r3, [pc, #200]	; (8008f54 <modMPPTPerturbAndObserve+0x174>)
 8008e8c:	ed93 8a00 	vldr	s16, [r3]
	if ((oscillationnumber > modMpptsettings->jump_Rate) && (modMpptsettings->jump_Rate != 0)){
 8008e90:	4b2c      	ldr	r3, [pc, #176]	; (8008f44 <modMPPTPerturbAndObserve+0x164>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699a      	ldr	r2, [r3, #24]
 8008e96:	4930      	ldr	r1, [pc, #192]	; (8008f58 <modMPPTPerturbAndObserve+0x178>)
 8008e98:	6809      	ldr	r1, [r1, #0]
 8008e9a:	428a      	cmp	r2, r1
 8008e9c:	da00      	bge.n	8008ea0 <modMPPTPerturbAndObserve+0xc0>
 8008e9e:	bbb2      	cbnz	r2, 8008f0e <modMPPTPerturbAndObserve+0x12e>
		if(modMpptsettings->PO_maxgradient > 0.0f){
 8008ea0:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ea4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eac:	dd41      	ble.n	8008f32 <modMPPTPerturbAndObserve+0x152>
			stepsize = modMpptsettings->PO_Stepsize * (1.0f+fabsf(dpdv/modMpptsettings->PO_maxgradient));
 8008eae:	edd3 7a00 	vldr	s15, [r3]
 8008eb2:	ee86 0a87 	vdiv.f32	s0, s13, s14
 8008eb6:	eeb0 0ac0 	vabs.f32	s0, s0
 8008eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ebe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8008ec2:	ee67 7a80 	vmul.f32	s15, s15, s0
		if(dpdv > 0){
 8008ec6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ece:	dd33      	ble.n	8008f38 <modMPPTPerturbAndObserve+0x158>
			MpptLastAckion = MpptAcktionState_Up;
 8008ed0:	4b22      	ldr	r3, [pc, #136]	; (8008f5c <modMPPTPerturbAndObserve+0x17c>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
			Vsp += stepsize;
 8008ed6:	ee38 0a27 	vadd.f32	s0, s16, s15
	pv = v;
 8008eda:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <modMPPTPerturbAndObserve+0x168>)
 8008edc:	ed83 9a00 	vstr	s18, [r3]
	pp=p;
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <modMPPTPerturbAndObserve+0x16c>)
 8008ee2:	edc3 8a00 	vstr	s17, [r3]
	oscillationnumber ++;
 8008ee6:	4a1c      	ldr	r2, [pc, #112]	; (8008f58 <modMPPTPerturbAndObserve+0x178>)
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	3301      	adds	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	control_set_setpoint(Vsp);
 8008eee:	f7ff fba3 	bl	8008638 <control_set_setpoint>
 8008ef2:	e78f      	b.n	8008e14 <modMPPTPerturbAndObserve+0x34>
		Vsp -= modMpptsettings->PO_Stepsize;
 8008ef4:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <modMPPTPerturbAndObserve+0x164>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	edd3 7a00 	vldr	s15, [r3]
 8008efc:	ee38 8a67 	vsub.f32	s16, s16, s15
		control_set_setpoint(Vsp);
 8008f00:	eeb0 0a48 	vmov.f32	s0, s16
 8008f04:	f7ff fb98 	bl	8008638 <control_set_setpoint>
	float dpdv = 0;
 8008f08:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008f60 <modMPPTPerturbAndObserve+0x180>
 8008f0c:	e7a9      	b.n	8008e62 <modMPPTPerturbAndObserve+0x82>
		changedStepSize  =  Vsp;
 8008f0e:	4c11      	ldr	r4, [pc, #68]	; (8008f54 <modMPPTPerturbAndObserve+0x174>)
 8008f10:	ed84 8a00 	vstr	s16, [r4]
		jump = randomf(modMpptsettings->jump_RangeMin, modMpptsettings->jump_RangeMax);
 8008f14:	edd3 0a03 	vldr	s1, [r3, #12]
 8008f18:	ed93 0a04 	vldr	s0, [r3, #16]
 8008f1c:	f7ff ff3c 	bl	8008d98 <randomf>
		changedStepSize  =  Vsp;
 8008f20:	ed84 8a00 	vstr	s16, [r4]
		oscillationnumber = 0;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <modMPPTPerturbAndObserve+0x178>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
		justjumped = true;
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <modMPPTPerturbAndObserve+0x170>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	e7d3      	b.n	8008eda <modMPPTPerturbAndObserve+0xfa>
			stepsize = modMpptsettings->PO_Stepsize;
 8008f32:	edd3 7a00 	vldr	s15, [r3]
 8008f36:	e7c6      	b.n	8008ec6 <modMPPTPerturbAndObserve+0xe6>
			MpptLastAckion = MpptAcktionState_down;
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <modMPPTPerturbAndObserve+0x17c>)
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	701a      	strb	r2, [r3, #0]
			Vsp -= stepsize;
 8008f3e:	ee38 0a67 	vsub.f32	s0, s16, s15
 8008f42:	e7ca      	b.n	8008eda <modMPPTPerturbAndObserve+0xfa>
 8008f44:	2000349c 	.word	0x2000349c
 8008f48:	200034ac 	.word	0x200034ac
 8008f4c:	20003498 	.word	0x20003498
 8008f50:	20000ab0 	.word	0x20000ab0
 8008f54:	20000aac 	.word	0x20000aac
 8008f58:	20000ab8 	.word	0x20000ab8
 8008f5c:	2000202c 	.word	0x2000202c
 8008f60:	00000000 	.word	0x00000000

08008f64 <modMPPTtask>:
void modMPPTtask() {
 8008f64:	b538      	push	{r3, r4, r5, lr}
	if (modDelayTick1ms(&lastsweep, modMpptsettings->PO_Timestep)) {
 8008f66:	4b28      	ldr	r3, [pc, #160]	; (8009008 <modMPPTtask+0xa4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	4827      	ldr	r0, [pc, #156]	; (800900c <modMPPTtask+0xa8>)
 8008f6e:	f7ff fbad 	bl	80086cc <modDelayTick1ms>
 8008f72:	b180      	cbz	r0, 8008f96 <modMPPTtask+0x32>
		switch(currentmode){
 8008f74:	4b26      	ldr	r3, [pc, #152]	; (8009010 <modMPPTtask+0xac>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d80c      	bhi.n	8008f96 <modMPPTtask+0x32>
 8008f7c:	e8df f003 	tbb	[pc, r3]
 8008f80:	1b0f0c02 	.word	0x1b0f0c02
			control_set_setpoint(control_get_regulated_voltage());
 8008f84:	f7ff fb80 	bl	8008688 <control_get_regulated_voltage>
 8008f88:	f7ff fb56 	bl	8008638 <control_set_setpoint>
			currentmode = MpptState_PO;
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <modMPPTtask+0xac>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	701a      	strb	r2, [r3, #0]
			modConverterPWMOutputEnable();
 8008f92:	f7ff f965 	bl	8008260 <modConverterPWMOutputEnable>
}
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
			modMPPTPerturbAndObserve();
 8008f98:	f7ff ff22 	bl	8008de0 <modMPPTPerturbAndObserve>
			break;
 8008f9c:	e7fb      	b.n	8008f96 <modMPPTtask+0x32>
			mpptSweepIndex = 0;
 8008f9e:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <modMPPTtask+0xb0>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
			control_set_setpoint(mpptSweepSP);
 8008fa4:	4b1c      	ldr	r3, [pc, #112]	; (8009018 <modMPPTtask+0xb4>)
 8008fa6:	ed93 0a00 	vldr	s0, [r3]
 8008faa:	f7ff fb45 	bl	8008638 <control_set_setpoint>
			currentmode = MpptState_Sweep;
 8008fae:	4b18      	ldr	r3, [pc, #96]	; (8009010 <modMPPTtask+0xac>)
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	701a      	strb	r2, [r3, #0]
			break;
 8008fb4:	e7ef      	b.n	8008f96 <modMPPTtask+0x32>
			mppt_is[mpptSweepIndex] = control_get_regulated_current();
 8008fb6:	4c17      	ldr	r4, [pc, #92]	; (8009014 <modMPPTtask+0xb0>)
 8008fb8:	6825      	ldr	r5, [r4, #0]
 8008fba:	f7ff fb6b 	bl	8008694 <control_get_regulated_current>
 8008fbe:	4b17      	ldr	r3, [pc, #92]	; (800901c <modMPPTtask+0xb8>)
 8008fc0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008fc4:	ed83 0a00 	vstr	s0, [r3]
			mppt_vs[mpptSweepIndex] = control_get_regulated_voltage();
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	f7ff fb5d 	bl	8008688 <control_get_regulated_voltage>
 8008fce:	4b14      	ldr	r3, [pc, #80]	; (8009020 <modMPPTtask+0xbc>)
 8008fd0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008fd4:	ed83 0a00 	vstr	s0, [r3]
			mpptSweepSP += mpptSweepStepsize;
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <modMPPTtask+0xb4>)
 8008fda:	ed93 0a00 	vldr	s0, [r3]
 8008fde:	4a11      	ldr	r2, [pc, #68]	; (8009024 <modMPPTtask+0xc0>)
 8008fe0:	edd2 7a00 	vldr	s15, [r2]
 8008fe4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fe8:	ed83 0a00 	vstr	s0, [r3]
			control_set_setpoint(mpptSweepSP);
 8008fec:	f7ff fb24 	bl	8008638 <control_set_setpoint>
			mpptSweepIndex++;
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	6023      	str	r3, [r4, #0]
			if(mpptSweepIndex >= MPPT_SWEEP_SIZE){
 8008ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ff8:	ddcd      	ble.n	8008f96 <modMPPTtask+0x32>
				currentmode = MpptState_init;
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <modMPPTtask+0xac>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
				modCommandsSendSweep();
 8009000:	f7fe fdec 	bl	8007bdc <modCommandsSendSweep>
}
 8009004:	e7c7      	b.n	8008f96 <modMPPTtask+0x32>
 8009006:	bf00      	nop
 8009008:	2000349c 	.word	0x2000349c
 800900c:	20003494 	.word	0x20003494
 8009010:	200034a0 	.word	0x200034a0
 8009014:	20000ab4 	.word	0x20000ab4
 8009018:	200034a8 	.word	0x200034a8
 800901c:	20002338 	.word	0x20002338
 8009020:	20002034 	.word	0x20002034
 8009024:	2000002c 	.word	0x2000002c

08009028 <modMpptStartSweep>:



void modMpptStartSweep(float start, float end){
	mpptSweepStepsize = (end-start)/(MPPT_SWEEP_SIZE-1);
 8009028:	ee70 0ac0 	vsub.f32	s1, s1, s0
 800902c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009050 <modMpptStartSweep+0x28>
 8009030:	eec0 7a87 	vdiv.f32	s15, s1, s14
 8009034:	4b07      	ldr	r3, [pc, #28]	; (8009054 <modMpptStartSweep+0x2c>)
 8009036:	edc3 7a00 	vstr	s15, [r3]
	mpptSweepSP = start;
 800903a:	4b07      	ldr	r3, [pc, #28]	; (8009058 <modMpptStartSweep+0x30>)
 800903c:	ed83 0a00 	vstr	s0, [r3]
	currentmode = MpptState_SweepStart;
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <modMpptStartSweep+0x34>)
 8009042:	2202      	movs	r2, #2
 8009044:	701a      	strb	r2, [r3, #0]
	MpptLastAckion = MpptAcktionState_Init;
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <modMpptStartSweep+0x38>)
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	42fe0000 	.word	0x42fe0000
 8009054:	2000002c 	.word	0x2000002c
 8009058:	200034a8 	.word	0x200034a8
 800905c:	200034a0 	.word	0x200034a0
 8009060:	2000202c 	.word	0x2000202c

08009064 <modMpptSetMode>:

void modMpptSetMode(modMPPTmode_t mode){
	switch(mode){
 8009064:	2801      	cmp	r0, #1
 8009066:	d003      	beq.n	8009070 <modMpptSetMode+0xc>
	case MpptMode_ConstantVoltage:
		currentmode = MpptState_ConstantVoltage;
		break;
	default:
	case MpptMode_PO:
		currentmode = MpptState_init;
 8009068:	4b03      	ldr	r3, [pc, #12]	; (8009078 <modMpptSetMode+0x14>)
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
		break;
	}
}
 800906e:	4770      	bx	lr
		currentmode = MpptState_ConstantVoltage;
 8009070:	4b01      	ldr	r3, [pc, #4]	; (8009078 <modMpptSetMode+0x14>)
 8009072:	2204      	movs	r2, #4
 8009074:	701a      	strb	r2, [r3, #0]
		break;
 8009076:	4770      	bx	lr
 8009078:	200034a0 	.word	0x200034a0

0800907c <libPacketInit>:
} PACKET_STATE_t;

static PACKET_STATE_t libPacketHandlerStates[PACKET_HANDLERS];

void libPacketInit(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 800907c:	b410      	push	{r4}
	libPacketHandlerStates[handler_num].send_func = s_func;
 800907e:	4b05      	ldr	r3, [pc, #20]	; (8009094 <libPacketInit+0x18>)
 8009080:	eb02 1482 	add.w	r4, r2, r2, lsl #6
 8009084:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8009088:	6060      	str	r0, [r4, #4]
	libPacketHandlerStates[handler_num].process_func = p_func;
 800908a:	60a1      	str	r1, [r4, #8]
}
 800908c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000abc 	.word	0x20000abc

08009098 <libPacketSendPacket>:

void libPacketSendPacket(unsigned char *data, unsigned int len, int handler_num) {
	if (len > PACKET_MAX_PL_LEN) {
 8009098:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800909c:	d850      	bhi.n	8009140 <libPacketSendPacket+0xa8>
void libPacketSendPacket(unsigned char *data, unsigned int len, int handler_num) {
 800909e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a2:	4682      	mov	sl, r0
 80090a4:	460d      	mov	r5, r1
 80090a6:	4616      	mov	r6, r2
		return;
	}

	int b_ind = 0;

	if (len <= 256) {
 80090a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80090ac:	d83a      	bhi.n	8009124 <libPacketSendPacket+0x8c>
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 2;
 80090ae:	eb02 1382 	add.w	r3, r2, r2, lsl #6
 80090b2:	4a24      	ldr	r2, [pc, #144]	; (8009144 <libPacketSendPacket+0xac>)
 80090b4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80090b8:	2402      	movs	r4, #2
 80090ba:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len;
 80090be:	f883 1411 	strb.w	r1, [r3, #1041]	; 0x411
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len & 0xFF;
	}

	memcpy(libPacketHandlerStates[handler_num].tx_buffer + b_ind, data, len);
 80090c2:	ea4f 1986 	mov.w	r9, r6, lsl #6
 80090c6:	eb06 1786 	add.w	r7, r6, r6, lsl #6
 80090ca:	017f      	lsls	r7, r7, #5
 80090cc:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80090d0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8009144 <libPacketSendPacket+0xac>
 80090d4:	4447      	add	r7, r8
 80090d6:	462a      	mov	r2, r5
 80090d8:	4651      	mov	r1, sl
 80090da:	1938      	adds	r0, r7, r4
 80090dc:	f001 f9ce 	bl	800a47c <memcpy>
	b_ind += len;
 80090e0:	442c      	add	r4, r5

	unsigned short crc = libCRCCalcCRC16(data, len);
 80090e2:	4629      	mov	r1, r5
 80090e4:	4650      	mov	r0, sl
 80090e6:	f7ff fadb 	bl	80086a0 <libCRCCalcCRC16>
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 80090ea:	1c62      	adds	r2, r4, #1
 80090ec:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80090f0:	eb09 0306 	add.w	r3, r9, r6
 80090f4:	eb08 1343 	add.w	r3, r8, r3, lsl #5
 80090f8:	1919      	adds	r1, r3, r4
 80090fa:	f881 5410 	strb.w	r5, [r1, #1040]	; 0x410
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 80090fe:	1ca5      	adds	r5, r4, #2
 8009100:	441a      	add	r2, r3
 8009102:	f882 0410 	strb.w	r0, [r2, #1040]	; 0x410
	libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 8009106:	1ce1      	adds	r1, r4, #3
 8009108:	442b      	add	r3, r5
 800910a:	2203      	movs	r2, #3
 800910c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

	if (libPacketHandlerStates[handler_num].send_func) {
 8009110:	444e      	add	r6, r9
 8009112:	eb08 1846 	add.w	r8, r8, r6, lsl #5
 8009116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800911a:	b10b      	cbz	r3, 8009120 <libPacketSendPacket+0x88>
		libPacketHandlerStates[handler_num].send_func(libPacketHandlerStates[handler_num].tx_buffer, b_ind);
 800911c:	4638      	mov	r0, r7
 800911e:	4798      	blx	r3
	}
}
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = 3;
 8009124:	eb02 1382 	add.w	r3, r2, r2, lsl #6
 8009128:	4a06      	ldr	r2, [pc, #24]	; (8009144 <libPacketSendPacket+0xac>)
 800912a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800912e:	2403      	movs	r4, #3
 8009130:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len >> 8;
 8009134:	0a0a      	lsrs	r2, r1, #8
 8009136:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
		libPacketHandlerStates[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 800913a:	f883 1412 	strb.w	r1, [r3, #1042]	; 0x412
 800913e:	e7c0      	b.n	80090c2 <libPacketSendPacket+0x2a>
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000abc 	.word	0x20000abc

08009148 <libPacketProcessByte>:
			libPacketHandlerStates[i].rx_state = 0;
		}
	}
}

void libPacketProcessByte(uint8_t rx_data, int handler_num) {
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	460c      	mov	r4, r1
	switch (libPacketHandlerStates[handler_num].rx_state) {
 800914c:	eb01 1381 	add.w	r3, r1, r1, lsl #6
 8009150:	015b      	lsls	r3, r3, #5
 8009152:	4a73      	ldr	r2, [pc, #460]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009154:	5cd3      	ldrb	r3, [r2, r3]
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b06      	cmp	r3, #6
 800915a:	f200 80d9 	bhi.w	8009310 <libPacketProcessByte+0x1c8>
 800915e:	e8df f003 	tbb	[pc, r3]
 8009162:	3104      	.short	0x3104
 8009164:	99866644 	.word	0x99866644
 8009168:	ac          	.byte	0xac
 8009169:	00          	.byte	0x00
	case 0:
		if (rx_data == 2) {
 800916a:	2802      	cmp	r0, #2
 800916c:	d008      	beq.n	8009180 <libPacketProcessByte+0x38>
			// 1 byte PL len
			libPacketHandlerStates[handler_num].rx_state += 2;
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
			libPacketHandlerStates[handler_num].payload_length = 0;
		} else if (rx_data == 3) {
 800916e:	2803      	cmp	r0, #3
 8009170:	d017      	beq.n	80091a2 <libPacketProcessByte+0x5a>
			libPacketHandlerStates[handler_num].rx_state++;
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
			libPacketHandlerStates[handler_num].payload_length = 0;
		} else {
			libPacketHandlerStates[handler_num].rx_state = 0;
 8009172:	eb01 1481 	add.w	r4, r1, r1, lsl #6
 8009176:	0164      	lsls	r4, r4, #5
 8009178:	4b69      	ldr	r3, [pc, #420]	; (8009320 <libPacketProcessByte+0x1d8>)
 800917a:	2200      	movs	r2, #0
 800917c:	551a      	strb	r2, [r3, r4]
 800917e:	e033      	b.n	80091e8 <libPacketProcessByte+0xa0>
			libPacketHandlerStates[handler_num].rx_state += 2;
 8009180:	4b67      	ldr	r3, [pc, #412]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009182:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 8009186:	0150      	lsls	r0, r2, #5
 8009188:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 800918c:	5c19      	ldrb	r1, [r3, r0]
 800918e:	3102      	adds	r1, #2
 8009190:	b2c9      	uxtb	r1, r1
 8009192:	5419      	strb	r1, [r3, r0]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 8009194:	2102      	movs	r1, #2
 8009196:	7051      	strb	r1, [r2, #1]
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
 8009198:	2000      	movs	r0, #0
 800919a:	f8c2 0818 	str.w	r0, [r2, #2072]	; 0x818
			libPacketHandlerStates[handler_num].payload_length = 0;
 800919e:	60d0      	str	r0, [r2, #12]
 80091a0:	e022      	b.n	80091e8 <libPacketProcessByte+0xa0>
			libPacketHandlerStates[handler_num].rx_state++;
 80091a2:	4b5f      	ldr	r3, [pc, #380]	; (8009320 <libPacketProcessByte+0x1d8>)
 80091a4:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 80091a8:	0150      	lsls	r0, r2, #5
 80091aa:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80091ae:	5c19      	ldrb	r1, [r3, r0]
 80091b0:	3101      	adds	r1, #1
 80091b2:	b2c9      	uxtb	r1, r1
 80091b4:	5419      	strb	r1, [r3, r0]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80091b6:	2102      	movs	r1, #2
 80091b8:	7051      	strb	r1, [r2, #1]
			libPacketHandlerStates[handler_num].rx_data_ptr = 0;
 80091ba:	2000      	movs	r0, #0
 80091bc:	f8c2 0818 	str.w	r0, [r2, #2072]	; 0x818
			libPacketHandlerStates[handler_num].payload_length = 0;
 80091c0:	60d0      	str	r0, [r2, #12]
 80091c2:	e011      	b.n	80091e8 <libPacketProcessByte+0xa0>
		}
		break;

	case 1:
		libPacketHandlerStates[handler_num].payload_length = (unsigned int)rx_data << 8;
 80091c4:	0200      	lsls	r0, r0, #8
 80091c6:	4b56      	ldr	r3, [pc, #344]	; (8009320 <libPacketProcessByte+0x1d8>)
 80091c8:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80091d2:	60d0      	str	r0, [r2, #12]
		libPacketHandlerStates[handler_num].rx_state++;
 80091d4:	5c5a      	ldrb	r2, [r3, r1]
 80091d6:	3201      	adds	r2, #1
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	545a      	strb	r2, [r3, r1]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80091dc:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 80091e0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80091e4:	2202      	movs	r2, #2
 80091e6:	705a      	strb	r2, [r3, #1]

	default:
		libPacketHandlerStates[handler_num].rx_state = 0;
		break;
	}
}
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
		libPacketHandlerStates[handler_num].payload_length |= (unsigned int)rx_data;
 80091ea:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 80091ee:	4b4c      	ldr	r3, [pc, #304]	; (8009320 <libPacketProcessByte+0x1d8>)
 80091f0:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80091f4:	68d3      	ldr	r3, [r2, #12]
 80091f6:	4318      	orrs	r0, r3
 80091f8:	60d0      	str	r0, [r2, #12]
		if (libPacketHandlerStates[handler_num].payload_length > 0 &&
 80091fa:	3801      	subs	r0, #1
 80091fc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009200:	d20e      	bcs.n	8009220 <libPacketProcessByte+0xd8>
			libPacketHandlerStates[handler_num].rx_state++;
 8009202:	4b47      	ldr	r3, [pc, #284]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009204:	eb01 1181 	add.w	r1, r1, r1, lsl #6
 8009208:	0149      	lsls	r1, r1, #5
 800920a:	5c5a      	ldrb	r2, [r3, r1]
 800920c:	3201      	adds	r2, #1
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	545a      	strb	r2, [r3, r1]
			libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 8009212:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8009216:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800921a:	2202      	movs	r2, #2
 800921c:	705a      	strb	r2, [r3, #1]
 800921e:	e7e3      	b.n	80091e8 <libPacketProcessByte+0xa0>
			libPacketHandlerStates[handler_num].rx_state = 0;
 8009220:	eb01 1481 	add.w	r4, r1, r1, lsl #6
 8009224:	0164      	lsls	r4, r4, #5
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009228:	2200      	movs	r2, #0
 800922a:	551a      	strb	r2, [r3, r4]
 800922c:	e7dc      	b.n	80091e8 <libPacketProcessByte+0xa0>
		libPacketHandlerStates[handler_num].rx_buffer[libPacketHandlerStates[handler_num].rx_data_ptr++] = rx_data;
 800922e:	eb01 1381 	add.w	r3, r1, r1, lsl #6
 8009232:	4a3b      	ldr	r2, [pc, #236]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009234:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009238:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800923c:	1c51      	adds	r1, r2, #1
 800923e:	f8c3 1818 	str.w	r1, [r3, #2072]	; 0x818
 8009242:	441a      	add	r2, r3
 8009244:	7410      	strb	r0, [r2, #16]
		if (libPacketHandlerStates[handler_num].rx_data_ptr == libPacketHandlerStates[handler_num].payload_length) {
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4299      	cmp	r1, r3
 800924a:	d007      	beq.n	800925c <libPacketProcessByte+0x114>
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 800924c:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 8009250:	4b33      	ldr	r3, [pc, #204]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009252:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8009256:	2302      	movs	r3, #2
 8009258:	7063      	strb	r3, [r4, #1]
		break;
 800925a:	e7c5      	b.n	80091e8 <libPacketProcessByte+0xa0>
			libPacketHandlerStates[handler_num].rx_state++;
 800925c:	4930      	ldr	r1, [pc, #192]	; (8009320 <libPacketProcessByte+0x1d8>)
 800925e:	eb04 1284 	add.w	r2, r4, r4, lsl #6
 8009262:	0152      	lsls	r2, r2, #5
 8009264:	5c8b      	ldrb	r3, [r1, r2]
 8009266:	3301      	adds	r3, #1
 8009268:	b2db      	uxtb	r3, r3
 800926a:	548b      	strb	r3, [r1, r2]
 800926c:	e7ee      	b.n	800924c <libPacketProcessByte+0x104>
		libPacketHandlerStates[handler_num].crc_high = rx_data;
 800926e:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009270:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 800927a:	f882 081d 	strb.w	r0, [r2, #2077]	; 0x81d
		libPacketHandlerStates[handler_num].rx_state++;
 800927e:	5c5a      	ldrb	r2, [r3, r1]
 8009280:	3201      	adds	r2, #1
 8009282:	b2d2      	uxtb	r2, r2
 8009284:	545a      	strb	r2, [r3, r1]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 8009286:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 800928a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800928e:	2202      	movs	r2, #2
 8009290:	705a      	strb	r2, [r3, #1]
		break;
 8009292:	e7a9      	b.n	80091e8 <libPacketProcessByte+0xa0>
		libPacketHandlerStates[handler_num].crc_low = rx_data;
 8009294:	4b22      	ldr	r3, [pc, #136]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009296:	eb01 1281 	add.w	r2, r1, r1, lsl #6
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80092a0:	f882 081c 	strb.w	r0, [r2, #2076]	; 0x81c
		libPacketHandlerStates[handler_num].rx_state++;
 80092a4:	5c5a      	ldrb	r2, [r3, r1]
 80092a6:	3201      	adds	r2, #1
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	545a      	strb	r2, [r3, r1]
		libPacketHandlerStates[handler_num].rx_timeout = PACKET_RX_TIMEOUT;
 80092ac:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 80092b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80092b4:	2202      	movs	r2, #2
 80092b6:	705a      	strb	r2, [r3, #1]
		break;
 80092b8:	e796      	b.n	80091e8 <libPacketProcessByte+0xa0>
		if (rx_data == 3) {
 80092ba:	2803      	cmp	r0, #3
 80092bc:	d006      	beq.n	80092cc <libPacketProcessByte+0x184>
		libPacketHandlerStates[handler_num].rx_state = 0;
 80092be:	eb04 1484 	add.w	r4, r4, r4, lsl #6
 80092c2:	0164      	lsls	r4, r4, #5
 80092c4:	4b16      	ldr	r3, [pc, #88]	; (8009320 <libPacketProcessByte+0x1d8>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	551a      	strb	r2, [r3, r4]
		break;
 80092ca:	e78d      	b.n	80091e8 <libPacketProcessByte+0xa0>
			if (libCRCCalcCRC16(libPacketHandlerStates[handler_num].rx_buffer, libPacketHandlerStates[handler_num].payload_length)
 80092cc:	eb01 1581 	add.w	r5, r1, r1, lsl #6
 80092d0:	016d      	lsls	r5, r5, #5
 80092d2:	3510      	adds	r5, #16
 80092d4:	4e12      	ldr	r6, [pc, #72]	; (8009320 <libPacketProcessByte+0x1d8>)
 80092d6:	4435      	add	r5, r6
 80092d8:	eb01 1381 	add.w	r3, r1, r1, lsl #6
 80092dc:	eb06 1643 	add.w	r6, r6, r3, lsl #5
 80092e0:	68f1      	ldr	r1, [r6, #12]
 80092e2:	4628      	mov	r0, r5
 80092e4:	f7ff f9dc 	bl	80086a0 <libCRCCalcCRC16>
					== ((unsigned short)libPacketHandlerStates[handler_num].crc_high << 8
 80092e8:	f896 281d 	ldrb.w	r2, [r6, #2077]	; 0x81d
							| (unsigned short)libPacketHandlerStates[handler_num].crc_low)) {
 80092ec:	f896 381c 	ldrb.w	r3, [r6, #2076]	; 0x81c
 80092f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (libCRCCalcCRC16(libPacketHandlerStates[handler_num].rx_buffer, libPacketHandlerStates[handler_num].payload_length)
 80092f4:	4298      	cmp	r0, r3
 80092f6:	d1e2      	bne.n	80092be <libPacketProcessByte+0x176>
				if (libPacketHandlerStates[handler_num].process_func) {
 80092f8:	4a09      	ldr	r2, [pc, #36]	; (8009320 <libPacketProcessByte+0x1d8>)
 80092fa:	68b6      	ldr	r6, [r6, #8]
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	d0de      	beq.n	80092be <libPacketProcessByte+0x176>
					libPacketHandlerStates[handler_num].process_func(libPacketHandlerStates[handler_num].rx_buffer,
 8009300:	eb04 1384 	add.w	r3, r4, r4, lsl #6
 8009304:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009308:	68d9      	ldr	r1, [r3, #12]
 800930a:	4628      	mov	r0, r5
 800930c:	47b0      	blx	r6
 800930e:	e7d6      	b.n	80092be <libPacketProcessByte+0x176>
		libPacketHandlerStates[handler_num].rx_state = 0;
 8009310:	eb01 1481 	add.w	r4, r1, r1, lsl #6
 8009314:	0163      	lsls	r3, r4, #5
 8009316:	4a02      	ldr	r2, [pc, #8]	; (8009320 <libPacketProcessByte+0x1d8>)
 8009318:	2100      	movs	r1, #0
 800931a:	54d1      	strb	r1, [r2, r3]
}
 800931c:	e764      	b.n	80091e8 <libPacketProcessByte+0xa0>
 800931e:	bf00      	nop
 8009320:	20000abc 	.word	0x20000abc
 8009324:	00000000 	.word	0x00000000

08009328 <pwm_init>:
float timebase;
float triggerdelay;

HRTIM_HandleTypeDef hhrtim1;

void pwm_init(float switchingFrequency, float controllerFrequency, float tdr, float tdf, float adc_td) {
 8009328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800932c:	ed2d 8b02 	vpush	{d8}
 8009330:	b0bb      	sub	sp, #236	; 0xec
 8009332:	eeb0 8a40 	vmov.f32	s16, s0
 8009336:	eef0 8a60 	vmov.f32	s17, s1
 800933a:	ee11 7a10 	vmov	r7, s2
 800933e:	ee11 6a90 	vmov	r6, s3
	triggerdelay = adc_td;
 8009342:	4b18      	ldr	r3, [pc, #96]	; (80093a4 <pwm_init+0x7c>)
 8009344:	ed83 2a00 	vstr	s4, [r3]
	uint32_t TIMER_MUL = 0;
	float mul;

	for (int i = 0; i < 8; i++) {
 8009348:	2400      	movs	r4, #0
 800934a:	e000      	b.n	800934e <pwm_init+0x26>
 800934c:	3401      	adds	r4, #1
 800934e:	2c07      	cmp	r4, #7
 8009350:	dc32      	bgt.n	80093b8 <pwm_init+0x90>
		mul = roundf(powf(2.0f, 5.0f - (float) i));
 8009352:	ee07 4a90 	vmov	s15, r4
 8009356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800935a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800935e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009362:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009366:	f005 ff7d 	bl	800f264 <powf>
 800936a:	f005 fee1 	bl	800f130 <roundf>
 800936e:	eeb0 7a40 	vmov.f32	s14, s0
		timebase = 1000.0f / (170.0e6f * mul);
 8009372:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80093b0 <pwm_init+0x88>
 8009376:	ee60 6a26 	vmul.f32	s13, s0, s13
 800937a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80093b4 <pwm_init+0x8c>
 800937e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <pwm_init+0x80>)
 8009384:	edc3 7a00 	vstr	s15, [r3]
		float fmin = 1 / (0xFFFF * timebase);
 8009388:	eddf 6a08 	vldr	s13, [pc, #32]	; 80093ac <pwm_init+0x84>
 800938c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009390:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009394:	eec6 6a27 	vdiv.f32	s13, s12, s15
		if (fmin < switchingFrequency) {
 8009398:	eef4 6ac8 	vcmpe.f32	s13, s16
 800939c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a0:	d5d4      	bpl.n	800934c <pwm_init+0x24>
 80093a2:	e00a      	b.n	80093ba <pwm_init+0x92>
 80093a4:	200035b0 	.word	0x200035b0
 80093a8:	200035b4 	.word	0x200035b4
 80093ac:	477fff00 	.word	0x477fff00
 80093b0:	4d221fe8 	.word	0x4d221fe8
 80093b4:	447a0000 	.word	0x447a0000
	uint32_t TIMER_MUL = 0;
 80093b8:	2400      	movs	r4, #0
			TIMER_MUL = (uint32_t) i;
			break;
		}
	}
	timebase = 1000.0f / (170.0e6f * mul); // Milliseconds per count
 80093ba:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 80093b0 <pwm_init+0x88>
 80093be:	ee27 7a00 	vmul.f32	s14, s14, s0
 80093c2:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 80093b4 <pwm_init+0x8c>
 80093c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80093ca:	4bbb      	ldr	r3, [pc, #748]	; (80096b8 <pwm_init+0x390>)
 80093cc:	ed83 0a00 	vstr	s0, [r3]
	uint32_t period = (uint32_t) roundf(1.0f / (switchingFrequency * timebase));
 80093d0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80093d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80093d8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80093dc:	f005 fea8 	bl	800f130 <roundf>
 80093e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80093e4:	ee17 9a90 	vmov	r9, s15

	uint32_t dif = (uint32_t) ceilf(switchingFrequency / controllerFrequency)
 80093e8:	ee88 0a28 	vdiv.f32	s0, s16, s17
 80093ec:	f005 fe5e 	bl	800f0ac <ceilf>
 80093f0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80093f4:	ee10 3a10 	vmov	r3, s0
 80093f8:	f103 38ff 	add.w	r8, r3, #4294967295
			- 1;
	if (dif > 0xF) {
 80093fc:	f1b8 0f0f 	cmp.w	r8, #15
 8009400:	d901      	bls.n	8009406 <pwm_init+0xde>
		dif = 0xF;
 8009402:	f04f 080f 	mov.w	r8, #15
		//Error_Handler();
	}

	//Calculate Controller sample period.
	ControllerPeriod = 1e-3f * ((float) dif + 1.0f) / switchingFrequency;
 8009406:	ee07 8a90 	vmov	s15, r8
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009416:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80096bc <pwm_init+0x394>
 800941a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800941e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8009422:	4ba7      	ldr	r3, [pc, #668]	; (80096c0 <pwm_init+0x398>)
 8009424:	ed83 7a00 	vstr	s14, [r3]

	HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = { 0 };
 8009428:	2500      	movs	r5, #0
 800942a:	9538      	str	r5, [sp, #224]	; 0xe0
 800942c:	9539      	str	r5, [sp, #228]	; 0xe4
	HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = { 0 };
 800942e:	9534      	str	r5, [sp, #208]	; 0xd0
 8009430:	9535      	str	r5, [sp, #212]	; 0xd4
 8009432:	9536      	str	r5, [sp, #216]	; 0xd8
 8009434:	9537      	str	r5, [sp, #220]	; 0xdc
	HRTIM_TimerCfgTypeDef pTimerCfg = { 0 };
 8009436:	2260      	movs	r2, #96	; 0x60
 8009438:	4629      	mov	r1, r5
 800943a:	a81c      	add	r0, sp, #112	; 0x70
 800943c:	f001 f82c 	bl	800a498 <memset>
	HRTIM_TimerCtlTypeDef pTimerCtl = { 0 };
 8009440:	9515      	str	r5, [sp, #84]	; 0x54
 8009442:	9516      	str	r5, [sp, #88]	; 0x58
 8009444:	9517      	str	r5, [sp, #92]	; 0x5c
 8009446:	9518      	str	r5, [sp, #96]	; 0x60
 8009448:	9519      	str	r5, [sp, #100]	; 0x64
 800944a:	951a      	str	r5, [sp, #104]	; 0x68
 800944c:	951b      	str	r5, [sp, #108]	; 0x6c
	HRTIM_CompareCfgTypeDef pCompareCfg = { 0 };
 800944e:	9512      	str	r5, [sp, #72]	; 0x48
 8009450:	9513      	str	r5, [sp, #76]	; 0x4c
 8009452:	9514      	str	r5, [sp, #80]	; 0x50
	HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = { 0 };
 8009454:	2224      	movs	r2, #36	; 0x24
 8009456:	4629      	mov	r1, r5
 8009458:	eb0d 0002 	add.w	r0, sp, r2
 800945c:	f001 f81c 	bl	800a498 <memset>
	HRTIM_OutputCfgTypeDef pOutputCfg = { 0 };
 8009460:	2220      	movs	r2, #32
 8009462:	4629      	mov	r1, r5
 8009464:	a801      	add	r0, sp, #4
 8009466:	f001 f817 	bl	800a498 <memset>


	__HAL_RCC_HRTIM1_CLK_ENABLE();
 800946a:	4b96      	ldr	r3, [pc, #600]	; (80096c4 <pwm_init+0x39c>)
 800946c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800946e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009472:	661a      	str	r2, [r3, #96]	; 0x60
 8009474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	9b00      	ldr	r3, [sp, #0]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 1, 0);
 800947e:	462a      	mov	r2, r5
 8009480:	2101      	movs	r1, #1
 8009482:	2043      	movs	r0, #67	; 0x43
 8009484:	f7f8 fe2a 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8009488:	2043      	movs	r0, #67	; 0x43
 800948a:	f7f8 fe5f 	bl	800214c <HAL_NVIC_EnableIRQ>


	hhrtim1.Instance = HRTIM1;
 800948e:	488e      	ldr	r0, [pc, #568]	; (80096c8 <pwm_init+0x3a0>)
 8009490:	4b8e      	ldr	r3, [pc, #568]	; (80096cc <pwm_init+0x3a4>)
 8009492:	6003      	str	r3, [r0, #0]
	hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8009494:	6045      	str	r5, [r0, #4]
	hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8009496:	6085      	str	r5, [r0, #8]
	if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK) {
 8009498:	f7f9 fec6 	bl	8003228 <HAL_HRTIM_Init>
 800949c:	2800      	cmp	r0, #0
 800949e:	f040 8117 	bne.w	80096d0 <pwm_init+0x3a8>
		Error_Handler();
	}
	if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3)
 80094a2:	210c      	movs	r1, #12
 80094a4:	4888      	ldr	r0, [pc, #544]	; (80096c8 <pwm_init+0x3a0>)
 80094a6:	f7f9 ff39 	bl	800331c <HAL_HRTIM_DLLCalibrationStart>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f040 8113 	bne.w	80096d6 <pwm_init+0x3ae>
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 100) != HAL_OK) {
 80094b0:	2164      	movs	r1, #100	; 0x64
 80094b2:	4885      	ldr	r0, [pc, #532]	; (80096c8 <pwm_init+0x3a0>)
 80094b4:	f7f9 ff6a 	bl	800338c <HAL_HRTIM_PollForDLLCalibration>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f040 810f 	bne.w	80096dc <pwm_init+0x3b4>
		Error_Handler();
	}

	pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 80094be:	2300      	movs	r3, #0
 80094c0:	9338      	str	r3, [sp, #224]	; 0xe0
	pADCTriggerCfg.Trigger = HW_HRTIM_ADCTRIGGER;
 80094c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094c6:	9339      	str	r3, [sp, #228]	; 0xe4
	if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1,
 80094c8:	aa38      	add	r2, sp, #224	; 0xe0
 80094ca:	2101      	movs	r1, #1
 80094cc:	487e      	ldr	r0, [pc, #504]	; (80096c8 <pwm_init+0x3a0>)
 80094ce:	f7f9 ffbb 	bl	8003448 <HAL_HRTIM_ADCTriggerConfig>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f040 8105 	bne.w	80096e2 <pwm_init+0x3ba>
			&pADCTriggerCfg) != HAL_OK) {
		Error_Handler();
	}

	if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, dif)
 80094d8:	4642      	mov	r2, r8
 80094da:	2101      	movs	r1, #1
 80094dc:	487a      	ldr	r0, [pc, #488]	; (80096c8 <pwm_init+0x3a0>)
 80094de:	f7fa f8d5 	bl	800368c <HAL_HRTIM_ADCPostScalerConfig>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f040 8100 	bne.w	80096e8 <pwm_init+0x3c0>
			!= HAL_OK) {
		Error_Handler();
	}
	pTimeBaseCfg.Period = period;
 80094e8:	f8cd 90d0 	str.w	r9, [sp, #208]	; 0xd0
	pTimeBaseCfg.RepetitionCounter = 100;
 80094ec:	2364      	movs	r3, #100	; 0x64
 80094ee:	9335      	str	r3, [sp, #212]	; 0xd4
	pTimeBaseCfg.PrescalerRatio = TIMER_MUL;
 80094f0:	9436      	str	r4, [sp, #216]	; 0xd8
	pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80094f2:	2308      	movs	r3, #8
 80094f4:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER,
 80094f6:	aa34      	add	r2, sp, #208	; 0xd0
 80094f8:	2106      	movs	r1, #6
 80094fa:	4873      	ldr	r0, [pc, #460]	; (80096c8 <pwm_init+0x3a0>)
 80094fc:	f7f9 ff6a 	bl	80033d4 <HAL_HRTIM_TimeBaseConfig>
 8009500:	2800      	cmp	r0, #0
 8009502:	f040 80f4 	bne.w	80096ee <pwm_init+0x3c6>
			&pTimeBaseCfg) != HAL_OK) {
		Error_Handler();
	}
	pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 8009506:	2310      	movs	r3, #16
 8009508:	931c      	str	r3, [sp, #112]	; 0x70
	pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800950a:	2300      	movs	r3, #0
 800950c:	931d      	str	r3, [sp, #116]	; 0x74
	pTimerCfg.DMASrcAddress = 0x0000;
 800950e:	931e      	str	r3, [sp, #120]	; 0x78
	pTimerCfg.DMADstAddress = 0x0000;
 8009510:	931f      	str	r3, [sp, #124]	; 0x7c
	pTimerCfg.DMASize = 0x1;
 8009512:	2201      	movs	r2, #1
 8009514:	9220      	str	r2, [sp, #128]	; 0x80
	pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8009516:	9321      	str	r3, [sp, #132]	; 0x84
	pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8009518:	9322      	str	r3, [sp, #136]	; 0x88
	pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800951a:	9323      	str	r3, [sp, #140]	; 0x8c
	pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800951c:	9324      	str	r3, [sp, #144]	; 0x90
	pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800951e:	9325      	str	r3, [sp, #148]	; 0x94
	pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8009520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009524:	9226      	str	r2, [sp, #152]	; 0x98
	pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8009526:	9327      	str	r3, [sp, #156]	; 0x9c
	pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8009528:	9328      	str	r3, [sp, #160]	; 0xa0
	pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800952a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800952e:	9229      	str	r2, [sp, #164]	; 0xa4
	pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8009530:	9333      	str	r3, [sp, #204]	; 0xcc
	if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER,
 8009532:	aa1c      	add	r2, sp, #112	; 0x70
 8009534:	2106      	movs	r1, #6
 8009536:	4864      	ldr	r0, [pc, #400]	; (80096c8 <pwm_init+0x3a0>)
 8009538:	f7fa f970 	bl	800381c <HAL_HRTIM_WaveformTimerConfig>
 800953c:	2800      	cmp	r0, #0
 800953e:	f040 80d9 	bne.w	80096f4 <pwm_init+0x3cc>
			&pTimerCfg) != HAL_OK) {
		Error_Handler();
	}

	pTimeBaseCfg.Period = period;
 8009542:	f8cd 90d0 	str.w	r9, [sp, #208]	; 0xd0
	pTimeBaseCfg.RepetitionCounter = 0x00;
 8009546:	2300      	movs	r3, #0
 8009548:	9335      	str	r3, [sp, #212]	; 0xd4
	if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HW_TIMERINDEX,
 800954a:	aa34      	add	r2, sp, #208	; 0xd0
 800954c:	2101      	movs	r1, #1
 800954e:	485e      	ldr	r0, [pc, #376]	; (80096c8 <pwm_init+0x3a0>)
 8009550:	f7f9 ff40 	bl	80033d4 <HAL_HRTIM_TimeBaseConfig>
 8009554:	2800      	cmp	r0, #0
 8009556:	f040 80d0 	bne.w	80096fa <pwm_init+0x3d2>
			&pTimeBaseCfg) != HAL_OK) {
		Error_Handler();
	}
	pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800955a:	2300      	movs	r3, #0
 800955c:	9315      	str	r3, [sp, #84]	; 0x54
	pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 800955e:	9316      	str	r3, [sp, #88]	; 0x58
	pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8009560:	9317      	str	r3, [sp, #92]	; 0x5c
	pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8009562:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HW_TIMERINDEX,
 8009564:	aa15      	add	r2, sp, #84	; 0x54
 8009566:	2101      	movs	r1, #1
 8009568:	4857      	ldr	r0, [pc, #348]	; (80096c8 <pwm_init+0x3a0>)
 800956a:	f7fa fac9 	bl	8003b00 <HAL_HRTIM_WaveformTimerControl>
 800956e:	2800      	cmp	r0, #0
 8009570:	f040 80c6 	bne.w	8009700 <pwm_init+0x3d8>
			&pTimerCtl) != HAL_OK) {
		Error_Handler();
	}
	pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8009574:	2300      	movs	r3, #0
 8009576:	931c      	str	r3, [sp, #112]	; 0x70
	pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8009578:	931d      	str	r3, [sp, #116]	; 0x74
	pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800957a:	932a      	str	r3, [sp, #168]	; 0xa8
	pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800957c:	932b      	str	r3, [sp, #172]	; 0xac
	pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800957e:	932c      	str	r3, [sp, #176]	; 0xb0
	pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8009580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009584:	922d      	str	r2, [sp, #180]	; 0xb4
	pTimerCfg.DelayedProtectionMode =
 8009586:	932e      	str	r3, [sp, #184]	; 0xb8
			HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
	pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_B;
 8009588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800958c:	9330      	str	r3, [sp, #192]	; 0xc0
	pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 800958e:	2310      	movs	r3, #16
 8009590:	9331      	str	r3, [sp, #196]	; 0xc4
	pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8009592:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009596:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HW_TIMERINDEX,
 8009598:	aa1c      	add	r2, sp, #112	; 0x70
 800959a:	2101      	movs	r1, #1
 800959c:	484a      	ldr	r0, [pc, #296]	; (80096c8 <pwm_init+0x3a0>)
 800959e:	f7fa f93d 	bl	800381c <HAL_HRTIM_WaveformTimerConfig>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f040 80af 	bne.w	8009706 <pwm_init+0x3de>
			&pTimerCfg) != HAL_OK) {
		Error_Handler();
	}

	pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80095a8:	2400      	movs	r4, #0
 80095aa:	9413      	str	r4, [sp, #76]	; 0x4c
	pCompareCfg.AutoDelayedTimeout = 0x0000;
 80095ac:	9414      	str	r4, [sp, #80]	; 0x50

	pCompareCfg.CompareValue = 64;
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	9312      	str	r3, [sp, #72]	; 0x48
	HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HW_TIMERINDEX, HRTIM_COMPAREUNIT_2, &pCompareCfg);
 80095b2:	4d45      	ldr	r5, [pc, #276]	; (80096c8 <pwm_init+0x3a0>)
 80095b4:	ab12      	add	r3, sp, #72	; 0x48
 80095b6:	2202      	movs	r2, #2
 80095b8:	2101      	movs	r1, #1
 80095ba:	4628      	mov	r0, r5
 80095bc:	f7fa fb6a 	bl	8003c94 <HAL_HRTIM_WaveformCompareConfig>

	pCompareCfg.CompareValue = 32;
 80095c0:	2320      	movs	r3, #32
 80095c2:	9312      	str	r3, [sp, #72]	; 0x48
	HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HW_TIMERINDEX,HRTIM_COMPAREUNIT_3, &pCompareCfg);
 80095c4:	ab12      	add	r3, sp, #72	; 0x48
 80095c6:	2204      	movs	r2, #4
 80095c8:	2101      	movs	r1, #1
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7fa fb62 	bl	8003c94 <HAL_HRTIM_WaveformCompareConfig>


	pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 80095d0:	9409      	str	r4, [sp, #36]	; 0x24
	pDeadTimeCfg.RisingValue = 10;
 80095d2:	230a      	movs	r3, #10
 80095d4:	930a      	str	r3, [sp, #40]	; 0x28
	pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 80095d6:	940b      	str	r4, [sp, #44]	; 0x2c
	pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 80095d8:	940c      	str	r4, [sp, #48]	; 0x30
	pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 80095da:	940d      	str	r4, [sp, #52]	; 0x34
	pDeadTimeCfg.FallingValue = 10;
 80095dc:	930e      	str	r3, [sp, #56]	; 0x38
	pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 80095de:	940f      	str	r4, [sp, #60]	; 0x3c
	pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 80095e0:	9410      	str	r4, [sp, #64]	; 0x40
	pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 80095e2:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HW_TIMERINDEX,
 80095e4:	aa09      	add	r2, sp, #36	; 0x24
 80095e6:	2101      	movs	r1, #1
 80095e8:	4628      	mov	r0, r5
 80095ea:	f7fa fb05 	bl	8003bf8 <HAL_HRTIM_DeadTimeConfig>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f040 808c 	bne.w	800970c <pwm_init+0x3e4>
			&pDeadTimeCfg) != HAL_OK) {
		Error_Handler();
	}

	pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80095f4:	2300      	movs	r3, #0
 80095f6:	9301      	str	r3, [sp, #4]
	pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80095f8:	2204      	movs	r2, #4
 80095fa:	9202      	str	r2, [sp, #8]
	pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80095fc:	2110      	movs	r1, #16
 80095fe:	9103      	str	r1, [sp, #12]
	pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8009600:	9304      	str	r3, [sp, #16]
	pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8009602:	9305      	str	r3, [sp, #20]
	pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8009604:	9306      	str	r3, [sp, #24]
	pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8009606:	9307      	str	r3, [sp, #28]
	pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8009608:	9308      	str	r3, [sp, #32]
	if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HW_TIMERINDEX,
 800960a:	eb0d 0302 	add.w	r3, sp, r2
 800960e:	2101      	movs	r1, #1
 8009610:	482d      	ldr	r0, [pc, #180]	; (80096c8 <pwm_init+0x3a0>)
 8009612:	f7fa fbf5 	bl	8003e00 <HAL_HRTIM_WaveformOutputConfig>
 8009616:	2800      	cmp	r0, #0
 8009618:	d17b      	bne.n	8009712 <pwm_init+0x3ea>
			HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK) {
		Error_Handler();
	}
	pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800961a:	2300      	movs	r3, #0
 800961c:	9302      	str	r3, [sp, #8]
	pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800961e:	9303      	str	r3, [sp, #12]
	if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HW_TIMERINDEX,
 8009620:	ab01      	add	r3, sp, #4
 8009622:	2208      	movs	r2, #8
 8009624:	2101      	movs	r1, #1
 8009626:	4828      	ldr	r0, [pc, #160]	; (80096c8 <pwm_init+0x3a0>)
 8009628:	f7fa fbea 	bl	8003e00 <HAL_HRTIM_WaveformOutputConfig>
 800962c:	2800      	cmp	r0, #0
 800962e:	d173      	bne.n	8009718 <pwm_init+0x3f0>
			HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK) {
		Error_Handler();
	}

	uint32_t dtri = (uint32_t) round((tdr * (0.170 * 8)));
 8009630:	4638      	mov	r0, r7
 8009632:	f7f6 ffc1 	bl	80005b8 <__aeabi_f2d>
 8009636:	a31e      	add	r3, pc, #120	; (adr r3, 80096b0 <pwm_init+0x388>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f7 f814 	bl	8000668 <__aeabi_dmul>
 8009640:	ec41 0b10 	vmov	d0, r0, r1
 8009644:	f005 fcec 	bl	800f020 <round>
 8009648:	ec51 0b10 	vmov	r0, r1, d0
 800964c:	f7f7 fae4 	bl	8000c18 <__aeabi_d2uiz>
 8009650:	4604      	mov	r4, r0
	uint32_t dtfi = (uint32_t) round((tdf * (0.170 * 8)));
 8009652:	4630      	mov	r0, r6
 8009654:	f7f6 ffb0 	bl	80005b8 <__aeabi_f2d>
 8009658:	a315      	add	r3, pc, #84	; (adr r3, 80096b0 <pwm_init+0x388>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f7 f803 	bl	8000668 <__aeabi_dmul>
 8009662:	ec41 0b10 	vmov	d0, r0, r1
 8009666:	f005 fcdb 	bl	800f020 <round>
 800966a:	ec51 0b10 	vmov	r0, r1, d0
 800966e:	f7f7 fad3 	bl	8000c18 <__aeabi_d2uiz>
	HRTIM1->sTimerxRegs[HW_TIMERINDEX].DTxR |= (dtri) | (dtfi << 16);
 8009672:	4a16      	ldr	r2, [pc, #88]	; (80096cc <pwm_init+0x3a4>)
 8009674:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
 8009678:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800967c:	4323      	orrs	r3, r4
 800967e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

	HAL_HRTIM_WaveformCounterStart_IT(&hhrtim1, HRTIM_TIMERID_MASTER);
 8009682:	4c11      	ldr	r4, [pc, #68]	; (80096c8 <pwm_init+0x3a0>)
 8009684:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009688:	4620      	mov	r0, r4
 800968a:	f7fa fcaf 	bl	8003fec <HAL_HRTIM_WaveformCountStart_IT>
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 800968e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009692:	4620      	mov	r0, r4
 8009694:	f7fa fc76 	bl	8003f84 <HAL_HRTIM_WaveformCountStart>
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TB1|HRTIM_OUTPUT_TB2);
 8009698:	210c      	movs	r1, #12
 800969a:	4620      	mov	r0, r4
 800969c:	f7fa fc3a 	bl	8003f14 <HAL_HRTIM_WaveformOutputStart>
}
 80096a0:	b03b      	add	sp, #236	; 0xec
 80096a2:	ecbd 8b02 	vpop	{d8}
 80096a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096aa:	bf00      	nop
 80096ac:	f3af 8000 	nop.w
 80096b0:	5c28f5c3 	.word	0x5c28f5c3
 80096b4:	3ff5c28f 	.word	0x3ff5c28f
 80096b8:	200035b4 	.word	0x200035b4
 80096bc:	3a83126f 	.word	0x3a83126f
 80096c0:	200035ac 	.word	0x200035ac
 80096c4:	40021000 	.word	0x40021000
 80096c8:	200034b0 	.word	0x200034b0
 80096cc:	40016800 	.word	0x40016800
		Error_Handler();
 80096d0:	f7ff fa92 	bl	8008bf8 <Error_Handler>
 80096d4:	e6e5      	b.n	80094a2 <pwm_init+0x17a>
		Error_Handler();
 80096d6:	f7ff fa8f 	bl	8008bf8 <Error_Handler>
 80096da:	e6e9      	b.n	80094b0 <pwm_init+0x188>
		Error_Handler();
 80096dc:	f7ff fa8c 	bl	8008bf8 <Error_Handler>
 80096e0:	e6ed      	b.n	80094be <pwm_init+0x196>
		Error_Handler();
 80096e2:	f7ff fa89 	bl	8008bf8 <Error_Handler>
 80096e6:	e6f7      	b.n	80094d8 <pwm_init+0x1b0>
		Error_Handler();
 80096e8:	f7ff fa86 	bl	8008bf8 <Error_Handler>
 80096ec:	e6fc      	b.n	80094e8 <pwm_init+0x1c0>
		Error_Handler();
 80096ee:	f7ff fa83 	bl	8008bf8 <Error_Handler>
 80096f2:	e708      	b.n	8009506 <pwm_init+0x1de>
		Error_Handler();
 80096f4:	f7ff fa80 	bl	8008bf8 <Error_Handler>
 80096f8:	e723      	b.n	8009542 <pwm_init+0x21a>
		Error_Handler();
 80096fa:	f7ff fa7d 	bl	8008bf8 <Error_Handler>
 80096fe:	e72c      	b.n	800955a <pwm_init+0x232>
		Error_Handler();
 8009700:	f7ff fa7a 	bl	8008bf8 <Error_Handler>
 8009704:	e736      	b.n	8009574 <pwm_init+0x24c>
		Error_Handler();
 8009706:	f7ff fa77 	bl	8008bf8 <Error_Handler>
 800970a:	e74d      	b.n	80095a8 <pwm_init+0x280>
		Error_Handler();
 800970c:	f7ff fa74 	bl	8008bf8 <Error_Handler>
 8009710:	e770      	b.n	80095f4 <pwm_init+0x2cc>
		Error_Handler();
 8009712:	f7ff fa71 	bl	8008bf8 <Error_Handler>
 8009716:	e780      	b.n	800961a <pwm_init+0x2f2>
		Error_Handler();
 8009718:	f7ff fa6e 	bl	8008bf8 <Error_Handler>
 800971c:	e788      	b.n	8009630 <pwm_init+0x308>
 800971e:	bf00      	nop

08009720 <pwm_setDuty>:

void pwm_setDuty(float duty) {
 8009720:	b570      	push	{r4, r5, r6, lr}
	uint32_t cmpval1;
	uint32_t per = HRTIM1->sTimerxRegs[1].PERxR;
 8009722:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <pwm_setDuty+0x78>)
 8009724:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
	cmpval1 = (uint32_t) roundf((float) per * duty);
 8009728:	ee07 4a90 	vmov	s15, r4
 800972c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009730:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009734:	f005 fcfc 	bl	800f130 <roundf>
 8009738:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800973c:	ee17 5a90 	vmov	r5, s15
	uint32_t adccmp = ((cmpval1 / 2)
 8009740:	086e      	lsrs	r6, r5, #1
			+ (int32_t) roundf((((triggerdelay) / 1000.0f) / timebase))) % per;
 8009742:	4b16      	ldr	r3, [pc, #88]	; (800979c <pwm_setDuty+0x7c>)
 8009744:	ed93 7a00 	vldr	s14, [r3]
 8009748:	eddf 7a15 	vldr	s15, [pc, #84]	; 80097a0 <pwm_setDuty+0x80>
 800974c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009750:	4b14      	ldr	r3, [pc, #80]	; (80097a4 <pwm_setDuty+0x84>)
 8009752:	edd3 7a00 	vldr	s15, [r3]
 8009756:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800975a:	f005 fce9 	bl	800f130 <roundf>
 800975e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009762:	ee17 3a90 	vmov	r3, s15
 8009766:	18f2      	adds	r2, r6, r3
	uint32_t adccmp = ((cmpval1 / 2)
 8009768:	fbb2 f3f4 	udiv	r3, r2, r4
 800976c:	fb04 2313 	mls	r3, r4, r3, r2

	//Make sure the AC valeus operate within their limits.
	if (cmpval1 < 64)
 8009770:	2d3f      	cmp	r5, #63	; 0x3f
 8009772:	d800      	bhi.n	8009776 <pwm_setDuty+0x56>
		cmpval1 = 64;
 8009774:	2540      	movs	r5, #64	; 0x40
	if (cmpval1 > (per - 64))
 8009776:	3c40      	subs	r4, #64	; 0x40
 8009778:	42ac      	cmp	r4, r5
 800977a:	d200      	bcs.n	800977e <pwm_setDuty+0x5e>
		cmpval1 = (per - 64);
 800977c:	4625      	mov	r5, r4

	if (adccmp < 64)
 800977e:	2b3f      	cmp	r3, #63	; 0x3f
 8009780:	d800      	bhi.n	8009784 <pwm_setDuty+0x64>
		adccmp = 64;
 8009782:	2340      	movs	r3, #64	; 0x40
	if (adccmp > (per - 64))
 8009784:	429c      	cmp	r4, r3
 8009786:	d300      	bcc.n	800978a <pwm_setDuty+0x6a>
 8009788:	461c      	mov	r4, r3
		adccmp = (per - 64);

	HRTIM1->sTimerxRegs[HW_TIMERINDEX].CMP2xR = cmpval1;
 800978a:	4b03      	ldr	r3, [pc, #12]	; (8009798 <pwm_setDuty+0x78>)
 800978c:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
	HRTIM1->sTimerxRegs[HW_TIMERINDEX].CMP3xR = adccmp;
 8009790:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8009794:	bd70      	pop	{r4, r5, r6, pc}
 8009796:	bf00      	nop
 8009798:	40016800 	.word	0x40016800
 800979c:	200035b0 	.word	0x200035b0
 80097a0:	447a0000 	.word	0x447a0000
 80097a4:	200035b4 	.word	0x200035b4

080097a8 <pwm_disable>:

inline void pwm_disable() {
 80097a8:	b510      	push	{r4, lr}
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim1, HRTIM_TIMERID_MASTER);
 80097aa:	4c08      	ldr	r4, [pc, #32]	; (80097cc <pwm_disable+0x24>)
 80097ac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7fa fc73 	bl	800409c <HAL_HRTIM_WaveformCountStop_IT>
	HAL_HRTIM_WaveformCountStop(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 80097b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7fa fbfc 	bl	8003fb8 <HAL_HRTIM_WaveformCountStop>
	HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2);
 80097c0:	210c      	movs	r1, #12
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7fa fbc2 	bl	8003f4c <HAL_HRTIM_WaveformOutputStop>

}
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	200034b0 	.word	0x200034b0

080097d0 <pwm_GetControllerPeriod>:

float pwm_GetControllerPeriod() {
	return ControllerPeriod;
}
 80097d0:	4b01      	ldr	r3, [pc, #4]	; (80097d8 <pwm_GetControllerPeriod+0x8>)
 80097d2:	ed93 0a00 	vldr	s0, [r3]
 80097d6:	4770      	bx	lr
 80097d8:	200035ac 	.word	0x200035ac

080097dc <HRTIM1_Master_IRQHandler>:

void HRTIM1_Master_IRQHandler(void){
 80097dc:	b508      	push	{r3, lr}
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 80097de:	2106      	movs	r1, #6
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <HRTIM1_Master_IRQHandler+0xc>)
 80097e2:	f7fa fcf9 	bl	80041d8 <HAL_HRTIM_IRQHandler>
}
 80097e6:	bd08      	pop	{r3, pc}
 80097e8:	200034b0 	.word	0x200034b0

080097ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80097ec:	480d      	ldr	r0, [pc, #52]	; (8009824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80097ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80097f0:	480d      	ldr	r0, [pc, #52]	; (8009828 <LoopForever+0x6>)
  ldr r1, =_edata
 80097f2:	490e      	ldr	r1, [pc, #56]	; (800982c <LoopForever+0xa>)
  ldr r2, =_sidata
 80097f4:	4a0e      	ldr	r2, [pc, #56]	; (8009830 <LoopForever+0xe>)
  movs r3, #0
 80097f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80097f8:	e002      	b.n	8009800 <LoopCopyDataInit>

080097fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80097fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80097fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80097fe:	3304      	adds	r3, #4

08009800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009804:	d3f9      	bcc.n	80097fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009806:	4a0b      	ldr	r2, [pc, #44]	; (8009834 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009808:	4c0b      	ldr	r4, [pc, #44]	; (8009838 <LoopForever+0x16>)
  movs r3, #0
 800980a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800980c:	e001      	b.n	8009812 <LoopFillZerobss>

0800980e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800980e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009810:	3204      	adds	r2, #4

08009812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009814:	d3fb      	bcc.n	800980e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009816:	f000 f86b 	bl	80098f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800981a:	f000 fe0b 	bl	800a434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800981e:	f7ff fa3f 	bl	8008ca0 <main>

08009822 <LoopForever>:

LoopForever:
    b LoopForever
 8009822:	e7fe      	b.n	8009822 <LoopForever>
  ldr   r0, =_estack
 8009824:	2001f800 	.word	0x2001f800
  ldr r0, =_sdata
 8009828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800982c:	20000564 	.word	0x20000564
  ldr r2, =_sidata
 8009830:	08010980 	.word	0x08010980
  ldr r2, =_sbss
 8009834:	20000564 	.word	0x20000564
  ldr r4, =_ebss
 8009838:	20003864 	.word	0x20003864

0800983c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800983c:	e7fe      	b.n	800983c <COMP1_2_3_IRQHandler>

0800983e <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800983e:	2001      	movs	r0, #1
 8009840:	4770      	bx	lr

08009842 <_kill>:

int _kill(int pid, int sig)
{
 8009842:	b508      	push	{r3, lr}
	errno = EINVAL;
 8009844:	f000 fdf0 	bl	800a428 <__errno>
 8009848:	2316      	movs	r3, #22
 800984a:	6003      	str	r3, [r0, #0]
	return -1;
}
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	bd08      	pop	{r3, pc}

08009852 <_exit>:

void _exit (int status)
{
 8009852:	b508      	push	{r3, lr}
	_kill(status, -1);
 8009854:	f04f 31ff 	mov.w	r1, #4294967295
 8009858:	f7ff fff3 	bl	8009842 <_kill>
	while (1) {}		/* Make sure we hang here */
 800985c:	e7fe      	b.n	800985c <_exit+0xa>

0800985e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800985e:	b570      	push	{r4, r5, r6, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009864:	2500      	movs	r5, #0
 8009866:	42b5      	cmp	r5, r6
 8009868:	da07      	bge.n	800987a <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 800986a:	f3af 8000 	nop.w
 800986e:	4621      	mov	r1, r4
 8009870:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009874:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8009876:	460c      	mov	r4, r1
 8009878:	e7f5      	b.n	8009866 <_read+0x8>
	}

return len;
}
 800987a:	4630      	mov	r0, r6
 800987c:	bd70      	pop	{r4, r5, r6, pc}

0800987e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800987e:	b570      	push	{r4, r5, r6, lr}
 8009880:	460c      	mov	r4, r1
 8009882:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009884:	2500      	movs	r5, #0
 8009886:	42b5      	cmp	r5, r6
 8009888:	da05      	bge.n	8009896 <_write+0x18>
	{
		__io_putchar(*ptr++);
 800988a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800988e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009892:	3501      	adds	r5, #1
 8009894:	e7f7      	b.n	8009886 <_write+0x8>
	}
	return len;
}
 8009896:	4630      	mov	r0, r6
 8009898:	bd70      	pop	{r4, r5, r6, pc}

0800989a <_close>:

int _close(int file)
{
	return -1;
}
 800989a:	f04f 30ff 	mov.w	r0, #4294967295
 800989e:	4770      	bx	lr

080098a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80098a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098a4:	604b      	str	r3, [r1, #4]
	return 0;
}
 80098a6:	2000      	movs	r0, #0
 80098a8:	4770      	bx	lr

080098aa <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80098aa:	2001      	movs	r0, #1
 80098ac:	4770      	bx	lr

080098ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80098ae:	2000      	movs	r0, #0
 80098b0:	4770      	bx	lr
	...

080098b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80098b4:	b508      	push	{r3, lr}
 80098b6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80098b8:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <_sbrk+0x34>)
 80098ba:	6812      	ldr	r2, [r2, #0]
 80098bc:	b142      	cbz	r2, 80098d0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80098be:	4a0a      	ldr	r2, [pc, #40]	; (80098e8 <_sbrk+0x34>)
 80098c0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80098c2:	4403      	add	r3, r0
 80098c4:	466a      	mov	r2, sp
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d806      	bhi.n	80098d8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80098ca:	4a07      	ldr	r2, [pc, #28]	; (80098e8 <_sbrk+0x34>)
 80098cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80098ce:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80098d0:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <_sbrk+0x34>)
 80098d2:	4906      	ldr	r1, [pc, #24]	; (80098ec <_sbrk+0x38>)
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	e7f2      	b.n	80098be <_sbrk+0xa>
		errno = ENOMEM;
 80098d8:	f000 fda6 	bl	800a428 <__errno>
 80098dc:	230c      	movs	r3, #12
 80098de:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e7f3      	b.n	80098ce <_sbrk+0x1a>
 80098e6:	bf00      	nop
 80098e8:	20001afc 	.word	0x20001afc
 80098ec:	20003868 	.word	0x20003868

080098f0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <SystemInit+0x18>)
 80098f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098f6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80098fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80098fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009902:	609a      	str	r2, [r3, #8]
#endif
}
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	e000ed00 	.word	0xe000ed00
 800990c:	00000000 	.word	0x00000000

08009910 <terminal_process_string>:
// Private variables
static terminal_callback_struct callbacks[CALLBACK_LEN];
static int callback_write = 0;


void terminal_process_string(char *str) {
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	b0c0      	sub	sp, #256	; 0x100
	enum { kMaxArgs = 64 };
	int argc = 0;
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8009914:	49a0      	ldr	r1, [pc, #640]	; (8009b98 <terminal_process_string+0x288>)
 8009916:	f002 fb93 	bl	800c040 <strtok>
	int argc = 0;
 800991a:	2400      	movs	r4, #0
	while (p2 && argc < kMaxArgs) {
 800991c:	b150      	cbz	r0, 8009934 <terminal_process_string+0x24>
 800991e:	2c3f      	cmp	r4, #63	; 0x3f
 8009920:	dc08      	bgt.n	8009934 <terminal_process_string+0x24>
		argv[argc++] = p2;
 8009922:	1c65      	adds	r5, r4, #1
 8009924:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
		p2 = strtok(0, " ");
 8009928:	499b      	ldr	r1, [pc, #620]	; (8009b98 <terminal_process_string+0x288>)
 800992a:	2000      	movs	r0, #0
 800992c:	f002 fb88 	bl	800c040 <strtok>
		argv[argc++] = p2;
 8009930:	462c      	mov	r4, r5
 8009932:	e7f3      	b.n	800991c <terminal_process_string+0xc>
	}

	if (argc == 0) {
 8009934:	2c00      	cmp	r4, #0
 8009936:	d05f      	beq.n	80099f8 <terminal_process_string+0xe8>
		modCommandsPrintf("No command received\n");
		return;
	}

	if (strcmp(argv[0], "ping") == 0) {
 8009938:	9d00      	ldr	r5, [sp, #0]
 800993a:	4998      	ldr	r1, [pc, #608]	; (8009b9c <terminal_process_string+0x28c>)
 800993c:	4628      	mov	r0, r5
 800993e:	f7f6 fc6f 	bl	8000220 <strcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	d05c      	beq.n	8009a00 <terminal_process_string+0xf0>
		modCommandsPrintf("pong\n");
	} else if (strcmp(argv[0], "status") == 0) {
 8009946:	4996      	ldr	r1, [pc, #600]	; (8009ba0 <terminal_process_string+0x290>)
 8009948:	4628      	mov	r0, r5
 800994a:	f7f6 fc69 	bl	8000220 <strcmp>
 800994e:	2800      	cmp	r0, #0
 8009950:	d05b      	beq.n	8009a0a <terminal_process_string+0xfa>
		modCommandsPrintf("-----BMS Status-----");
		
	} else if (strcmp(argv[0], "sens") == 0) {		
 8009952:	4994      	ldr	r1, [pc, #592]	; (8009ba4 <terminal_process_string+0x294>)
 8009954:	4628      	mov	r0, r5
 8009956:	f7f6 fc63 	bl	8000220 <strcmp>
 800995a:	2800      	cmp	r0, #0
 800995c:	d059      	beq.n	8009a12 <terminal_process_string+0x102>
		modCommandsPrintf("Input Current:	%5.3f A", meter.Iind *1e-3);
		modCommandsPrintf("Output Current:	%5.3f A", meter.Ihigh *1e-3);
		modCommandsPrintf("Input Voltage:	%5.3f V", meter.Vlow *1e-3);
		modCommandsPrintf("Output Voltage:	%5.3f V", meter.Vhigh *1e-3);
		
	} else if (strcmp(argv[0], "config") == 0) {
 800995e:	4992      	ldr	r1, [pc, #584]	; (8009ba8 <terminal_process_string+0x298>)
 8009960:	4628      	mov	r0, r5
 8009962:	f7f6 fc5d 	bl	8000220 <strcmp>
 8009966:	2800      	cmp	r0, #0
 8009968:	f000 808c 	beq.w	8009a84 <terminal_process_string+0x174>
		modCommandsPrintf("---   MPPT Configuration   ---");
		
	} else if (strcmp(argv[0], "config_default") == 0) {
 800996c:	498f      	ldr	r1, [pc, #572]	; (8009bac <terminal_process_string+0x29c>)
 800996e:	4628      	mov	r0, r5
 8009970:	f7f6 fc56 	bl	8000220 <strcmp>
 8009974:	2800      	cmp	r0, #0
 8009976:	f000 8089 	beq.w	8009a8c <terminal_process_string+0x17c>
			modCommandsPrintf("Succesfully restored config, new config wil be used on powercycle (or use config_read to apply it now).");
		else
			modCommandsPrintf("Error restored config.");
		modCommandsPrintf(" ");
		
	} else if (strcmp(argv[0], "config_write") == 0) {
 800997a:	498d      	ldr	r1, [pc, #564]	; (8009bb0 <terminal_process_string+0x2a0>)
 800997c:	4628      	mov	r0, r5
 800997e:	f7f6 fc4f 	bl	8000220 <strcmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	f000 8093 	beq.w	8009aae <terminal_process_string+0x19e>
			modCommandsPrintf("Succesfully written config.");
		else
			modCommandsPrintf("Error writing config.");
		modCommandsPrintf(" ");
		
	} else if (strcmp(argv[0], "config_read") == 0) {
 8009988:	498a      	ldr	r1, [pc, #552]	; (8009bb4 <terminal_process_string+0x2a4>)
 800998a:	4628      	mov	r0, r5
 800998c:	f7f6 fc48 	bl	8000220 <strcmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	f000 809d 	beq.w	8009ad0 <terminal_process_string+0x1c0>
			modCommandsPrintf("Succesfully read config.");
		else
			modCommandsPrintf("Error reading config.");
		modCommandsPrintf(" ");
		
	} else if (strcmp(argv[0], "hwinfo") == 0) {
 8009996:	4988      	ldr	r1, [pc, #544]	; (8009bb8 <terminal_process_string+0x2a8>)
 8009998:	4628      	mov	r0, r5
 800999a:	f7f6 fc41 	bl	8000220 <strcmp>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f000 80a7 	beq.w	8009af2 <terminal_process_string+0x1e2>
		modCommandsPrintf("-------    BMS Info   -------");		
		
	} else if (strcmp(argv[0], "reboot") == 0) {
 80099a4:	4985      	ldr	r1, [pc, #532]	; (8009bbc <terminal_process_string+0x2ac>)
 80099a6:	4628      	mov	r0, r5
 80099a8:	f7f6 fc3a 	bl	8000220 <strcmp>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f000 80a4 	beq.w	8009afa <terminal_process_string+0x1ea>
		modCommandsPrintf("------  Rebooting BMS  ------");
		NVIC_SystemReset();
		
	} else if (strcmp(argv[0], "bootloader_erase") == 0) {
 80099b2:	4983      	ldr	r1, [pc, #524]	; (8009bc0 <terminal_process_string+0x2b0>)
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7f6 fc33 	bl	8000220 <strcmp>
 80099ba:	b320      	cbz	r0, 8009a06 <terminal_process_string+0xf6>
		//if(modFlashEraseNewAppData(0x00002000) == HAL_OK)
		//	modCommandsPrintf("--Erase done.");
		//else
		//	modCommandsPrintf("--Erase error.");
		
	} else if (strcmp(argv[0], "bootloader_jump") == 0) {
 80099bc:	4981      	ldr	r1, [pc, #516]	; (8009bc4 <terminal_process_string+0x2b4>)
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fc2e 	bl	8000220 <strcmp>
 80099c4:	b1f8      	cbz	r0, 8009a06 <terminal_process_string+0xf6>
		//modFlashJumpToBootloader();
		
	} else if (strcmp(argv[0], "help") == 0) {
 80099c6:	4980      	ldr	r1, [pc, #512]	; (8009bc8 <terminal_process_string+0x2b8>)
 80099c8:	4628      	mov	r0, r5
 80099ca:	f7f6 fc29 	bl	8000220 <strcmp>
 80099ce:	4606      	mov	r6, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f000 80a2 	beq.w	8009b1a <terminal_process_string+0x20a>
		}

		modCommandsPrintf(" ");
	} else {
		bool found = false;
		for (int i = 0;i < callback_write;i++) {
 80099d6:	2600      	movs	r6, #0
 80099d8:	4b7c      	ldr	r3, [pc, #496]	; (8009bcc <terminal_process_string+0x2bc>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	42b3      	cmp	r3, r6
 80099de:	f340 80d0 	ble.w	8009b82 <terminal_process_string+0x272>
			if (strcmp(argv[0], callbacks[i].command) == 0) {
 80099e2:	0133      	lsls	r3, r6, #4
 80099e4:	4a7a      	ldr	r2, [pc, #488]	; (8009bd0 <terminal_process_string+0x2c0>)
 80099e6:	58d1      	ldr	r1, [r2, r3]
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7f6 fc19 	bl	8000220 <strcmp>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f000 80bf 	beq.w	8009b72 <terminal_process_string+0x262>
		for (int i = 0;i < callback_write;i++) {
 80099f4:	3601      	adds	r6, #1
 80099f6:	e7ef      	b.n	80099d8 <terminal_process_string+0xc8>
		modCommandsPrintf("No command received\n");
 80099f8:	4876      	ldr	r0, [pc, #472]	; (8009bd4 <terminal_process_string+0x2c4>)
 80099fa:	f7fd fc53 	bl	80072a4 <modCommandsPrintf>
		return;
 80099fe:	e002      	b.n	8009a06 <terminal_process_string+0xf6>
		modCommandsPrintf("pong\n");
 8009a00:	4875      	ldr	r0, [pc, #468]	; (8009bd8 <terminal_process_string+0x2c8>)
 8009a02:	f7fd fc4f 	bl	80072a4 <modCommandsPrintf>

		if (!found) {
			modCommandsPrintf("Invalid command: %s\n type help to list all available commands\n", argv[0]);
		}
	}
}
 8009a06:	b040      	add	sp, #256	; 0x100
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
		modCommandsPrintf("-----BMS Status-----");
 8009a0a:	4874      	ldr	r0, [pc, #464]	; (8009bdc <terminal_process_string+0x2cc>)
 8009a0c:	f7fd fc4a 	bl	80072a4 <modCommandsPrintf>
 8009a10:	e7f9      	b.n	8009a06 <terminal_process_string+0xf6>
		modCommandsPrintf("-----       Sensors         -----");
 8009a12:	4873      	ldr	r0, [pc, #460]	; (8009be0 <terminal_process_string+0x2d0>)
 8009a14:	f7fd fc46 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf("Input Current:	%5.3f A", meter.Iind *1e-3);
 8009a18:	4c72      	ldr	r4, [pc, #456]	; (8009be4 <terminal_process_string+0x2d4>)
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	f7f6 fdcc 	bl	80005b8 <__aeabi_f2d>
 8009a20:	a35b      	add	r3, pc, #364	; (adr r3, 8009b90 <terminal_process_string+0x280>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 fe1f 	bl	8000668 <__aeabi_dmul>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	486e      	ldr	r0, [pc, #440]	; (8009be8 <terminal_process_string+0x2d8>)
 8009a30:	f7fd fc38 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf("Output Current:	%5.3f A", meter.Ihigh *1e-3);
 8009a34:	6860      	ldr	r0, [r4, #4]
 8009a36:	f7f6 fdbf 	bl	80005b8 <__aeabi_f2d>
 8009a3a:	a355      	add	r3, pc, #340	; (adr r3, 8009b90 <terminal_process_string+0x280>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fe12 	bl	8000668 <__aeabi_dmul>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4868      	ldr	r0, [pc, #416]	; (8009bec <terminal_process_string+0x2dc>)
 8009a4a:	f7fd fc2b 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf("Input Voltage:	%5.3f V", meter.Vlow *1e-3);
 8009a4e:	68a0      	ldr	r0, [r4, #8]
 8009a50:	f7f6 fdb2 	bl	80005b8 <__aeabi_f2d>
 8009a54:	a34e      	add	r3, pc, #312	; (adr r3, 8009b90 <terminal_process_string+0x280>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fe05 	bl	8000668 <__aeabi_dmul>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4863      	ldr	r0, [pc, #396]	; (8009bf0 <terminal_process_string+0x2e0>)
 8009a64:	f7fd fc1e 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf("Output Voltage:	%5.3f V", meter.Vhigh *1e-3);
 8009a68:	68e0      	ldr	r0, [r4, #12]
 8009a6a:	f7f6 fda5 	bl	80005b8 <__aeabi_f2d>
 8009a6e:	a348      	add	r3, pc, #288	; (adr r3, 8009b90 <terminal_process_string+0x280>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 fdf8 	bl	8000668 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	485d      	ldr	r0, [pc, #372]	; (8009bf4 <terminal_process_string+0x2e4>)
 8009a7e:	f7fd fc11 	bl	80072a4 <modCommandsPrintf>
 8009a82:	e7c0      	b.n	8009a06 <terminal_process_string+0xf6>
		modCommandsPrintf("---   MPPT Configuration   ---");
 8009a84:	485c      	ldr	r0, [pc, #368]	; (8009bf8 <terminal_process_string+0x2e8>)
 8009a86:	f7fd fc0d 	bl	80072a4 <modCommandsPrintf>
 8009a8a:	e7bc      	b.n	8009a06 <terminal_process_string+0xf6>
		modCommandsPrintf("--Restoring default config--");
 8009a8c:	485b      	ldr	r0, [pc, #364]	; (8009bfc <terminal_process_string+0x2ec>)
 8009a8e:	f7fd fc09 	bl	80072a4 <modCommandsPrintf>
		if(modConfigStoreDefaultConfig())
 8009a92:	f7fe f8ff 	bl	8007c94 <modConfigStoreDefaultConfig>
 8009a96:	b130      	cbz	r0, 8009aa6 <terminal_process_string+0x196>
			modCommandsPrintf("Succesfully restored config, new config wil be used on powercycle (or use config_read to apply it now).");
 8009a98:	4859      	ldr	r0, [pc, #356]	; (8009c00 <terminal_process_string+0x2f0>)
 8009a9a:	f7fd fc03 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf(" ");
 8009a9e:	483e      	ldr	r0, [pc, #248]	; (8009b98 <terminal_process_string+0x288>)
 8009aa0:	f7fd fc00 	bl	80072a4 <modCommandsPrintf>
 8009aa4:	e7af      	b.n	8009a06 <terminal_process_string+0xf6>
			modCommandsPrintf("Error restored config.");
 8009aa6:	4857      	ldr	r0, [pc, #348]	; (8009c04 <terminal_process_string+0x2f4>)
 8009aa8:	f7fd fbfc 	bl	80072a4 <modCommandsPrintf>
 8009aac:	e7f7      	b.n	8009a9e <terminal_process_string+0x18e>
		modCommandsPrintf("---    Writing config    ---");
 8009aae:	4856      	ldr	r0, [pc, #344]	; (8009c08 <terminal_process_string+0x2f8>)
 8009ab0:	f7fd fbf8 	bl	80072a4 <modCommandsPrintf>
		if(modConfigStoreConfig())
 8009ab4:	f7fe f8cc 	bl	8007c50 <modConfigStoreConfig>
 8009ab8:	b130      	cbz	r0, 8009ac8 <terminal_process_string+0x1b8>
			modCommandsPrintf("Succesfully written config.");
 8009aba:	4854      	ldr	r0, [pc, #336]	; (8009c0c <terminal_process_string+0x2fc>)
 8009abc:	f7fd fbf2 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf(" ");
 8009ac0:	4835      	ldr	r0, [pc, #212]	; (8009b98 <terminal_process_string+0x288>)
 8009ac2:	f7fd fbef 	bl	80072a4 <modCommandsPrintf>
 8009ac6:	e79e      	b.n	8009a06 <terminal_process_string+0xf6>
			modCommandsPrintf("Error writing config.");
 8009ac8:	4851      	ldr	r0, [pc, #324]	; (8009c10 <terminal_process_string+0x300>)
 8009aca:	f7fd fbeb 	bl	80072a4 <modCommandsPrintf>
 8009ace:	e7f7      	b.n	8009ac0 <terminal_process_string+0x1b0>
		modCommandsPrintf("---    Reading config    ---");
 8009ad0:	4850      	ldr	r0, [pc, #320]	; (8009c14 <terminal_process_string+0x304>)
 8009ad2:	f7fd fbe7 	bl	80072a4 <modCommandsPrintf>
		if(modConfigLoadConfig())
 8009ad6:	f7fe f8cd 	bl	8007c74 <modConfigLoadConfig>
 8009ada:	b130      	cbz	r0, 8009aea <terminal_process_string+0x1da>
			modCommandsPrintf("Succesfully read config.");
 8009adc:	484e      	ldr	r0, [pc, #312]	; (8009c18 <terminal_process_string+0x308>)
 8009ade:	f7fd fbe1 	bl	80072a4 <modCommandsPrintf>
		modCommandsPrintf(" ");
 8009ae2:	482d      	ldr	r0, [pc, #180]	; (8009b98 <terminal_process_string+0x288>)
 8009ae4:	f7fd fbde 	bl	80072a4 <modCommandsPrintf>
 8009ae8:	e78d      	b.n	8009a06 <terminal_process_string+0xf6>
			modCommandsPrintf("Error reading config.");
 8009aea:	484c      	ldr	r0, [pc, #304]	; (8009c1c <terminal_process_string+0x30c>)
 8009aec:	f7fd fbda 	bl	80072a4 <modCommandsPrintf>
 8009af0:	e7f7      	b.n	8009ae2 <terminal_process_string+0x1d2>
		modCommandsPrintf("-------    BMS Info   -------");		
 8009af2:	484b      	ldr	r0, [pc, #300]	; (8009c20 <terminal_process_string+0x310>)
 8009af4:	f7fd fbd6 	bl	80072a4 <modCommandsPrintf>
 8009af8:	e785      	b.n	8009a06 <terminal_process_string+0xf6>
		modCommandsPrintf("------  Rebooting BMS  ------");
 8009afa:	484a      	ldr	r0, [pc, #296]	; (8009c24 <terminal_process_string+0x314>)
 8009afc:	f7fd fbd2 	bl	80072a4 <modCommandsPrintf>
  __ASM volatile ("dsb 0xF":::"memory");
 8009b00:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009b04:	4948      	ldr	r1, [pc, #288]	; (8009c28 <terminal_process_string+0x318>)
 8009b06:	68ca      	ldr	r2, [r1, #12]
 8009b08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b0c:	4b47      	ldr	r3, [pc, #284]	; (8009c2c <terminal_process_string+0x31c>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60cb      	str	r3, [r1, #12]
 8009b12:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009b16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009b18:	e7fd      	b.n	8009b16 <terminal_process_string+0x206>
		modCommandsPrintf("------- Start of help -------");
 8009b1a:	4845      	ldr	r0, [pc, #276]	; (8009c30 <terminal_process_string+0x320>)
 8009b1c:	f7fd fbc2 	bl	80072a4 <modCommandsPrintf>
		for (int i = 0;i < callback_write;i++) {
 8009b20:	e009      	b.n	8009b36 <terminal_process_string+0x226>
				modCommandsPrintf(callbacks[i].command);
 8009b22:	0133      	lsls	r3, r6, #4
 8009b24:	4a2a      	ldr	r2, [pc, #168]	; (8009bd0 <terminal_process_string+0x2c0>)
 8009b26:	58d0      	ldr	r0, [r2, r3]
 8009b28:	f7fd fbbc 	bl	80072a4 <modCommandsPrintf>
 8009b2c:	e013      	b.n	8009b56 <terminal_process_string+0x246>
				modCommandsPrintf("  There is no help available for this command.");
 8009b2e:	4841      	ldr	r0, [pc, #260]	; (8009c34 <terminal_process_string+0x324>)
 8009b30:	f7fd fbb8 	bl	80072a4 <modCommandsPrintf>
		for (int i = 0;i < callback_write;i++) {
 8009b34:	3601      	adds	r6, #1
 8009b36:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <terminal_process_string+0x2bc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	42b3      	cmp	r3, r6
 8009b3c:	dd15      	ble.n	8009b6a <terminal_process_string+0x25a>
			if (callbacks[i].arg_names) {
 8009b3e:	4b24      	ldr	r3, [pc, #144]	; (8009bd0 <terminal_process_string+0x2c0>)
 8009b40:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	d0eb      	beq.n	8009b22 <terminal_process_string+0x212>
				modCommandsPrintf("%s %s", callbacks[i].command, callbacks[i].arg_names);
 8009b4a:	0133      	lsls	r3, r6, #4
 8009b4c:	4920      	ldr	r1, [pc, #128]	; (8009bd0 <terminal_process_string+0x2c0>)
 8009b4e:	58c9      	ldr	r1, [r1, r3]
 8009b50:	4839      	ldr	r0, [pc, #228]	; (8009c38 <terminal_process_string+0x328>)
 8009b52:	f7fd fba7 	bl	80072a4 <modCommandsPrintf>
			if (callbacks[i].help) {
 8009b56:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <terminal_process_string+0x2c0>)
 8009b58:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8009b5c:	6859      	ldr	r1, [r3, #4]
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	d0e5      	beq.n	8009b2e <terminal_process_string+0x21e>
				modCommandsPrintf("  %s", callbacks[i].help);
 8009b62:	4836      	ldr	r0, [pc, #216]	; (8009c3c <terminal_process_string+0x32c>)
 8009b64:	f7fd fb9e 	bl	80072a4 <modCommandsPrintf>
 8009b68:	e7e4      	b.n	8009b34 <terminal_process_string+0x224>
		modCommandsPrintf(" ");
 8009b6a:	480b      	ldr	r0, [pc, #44]	; (8009b98 <terminal_process_string+0x288>)
 8009b6c:	f7fd fb9a 	bl	80072a4 <modCommandsPrintf>
 8009b70:	e749      	b.n	8009a06 <terminal_process_string+0xf6>
				callbacks[i].cbf(argc, (const char**)argv);
 8009b72:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <terminal_process_string+0x2c0>)
 8009b74:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 8009b78:	68f3      	ldr	r3, [r6, #12]
 8009b7a:	4669      	mov	r1, sp
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4798      	blx	r3
		if (!found) {
 8009b80:	e741      	b.n	8009a06 <terminal_process_string+0xf6>
			modCommandsPrintf("Invalid command: %s\n type help to list all available commands\n", argv[0]);
 8009b82:	4629      	mov	r1, r5
 8009b84:	482e      	ldr	r0, [pc, #184]	; (8009c40 <terminal_process_string+0x330>)
 8009b86:	f7fd fb8d 	bl	80072a4 <modCommandsPrintf>
 8009b8a:	e73c      	b.n	8009a06 <terminal_process_string+0xf6>
 8009b8c:	f3af 8000 	nop.w
 8009b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b94:	3f50624d 	.word	0x3f50624d
 8009b98:	0801003c 	.word	0x0801003c
 8009b9c:	08010058 	.word	0x08010058
 8009ba0:	08010068 	.word	0x08010068
 8009ba4:	08010088 	.word	0x08010088
 8009ba8:	08010114 	.word	0x08010114
 8009bac:	0801013c 	.word	0x0801013c
 8009bb0:	080101ec 	.word	0x080101ec
 8009bb4:	08010250 	.word	0x08010250
 8009bb8:	080102b0 	.word	0x080102b0
 8009bbc:	080102d8 	.word	0x080102d8
 8009bc0:	08010300 	.word	0x08010300
 8009bc4:	08010314 	.word	0x08010314
 8009bc8:	08010324 	.word	0x08010324
 8009bcc:	20001b00 	.word	0x20001b00
 8009bd0:	20001b04 	.word	0x20001b04
 8009bd4:	08010040 	.word	0x08010040
 8009bd8:	08010060 	.word	0x08010060
 8009bdc:	08010070 	.word	0x08010070
 8009be0:	08010090 	.word	0x08010090
 8009be4:	200033d0 	.word	0x200033d0
 8009be8:	080100b4 	.word	0x080100b4
 8009bec:	080100cc 	.word	0x080100cc
 8009bf0:	080100e4 	.word	0x080100e4
 8009bf4:	080100fc 	.word	0x080100fc
 8009bf8:	0801011c 	.word	0x0801011c
 8009bfc:	0801014c 	.word	0x0801014c
 8009c00:	0801016c 	.word	0x0801016c
 8009c04:	080101d4 	.word	0x080101d4
 8009c08:	080101fc 	.word	0x080101fc
 8009c0c:	0801021c 	.word	0x0801021c
 8009c10:	08010238 	.word	0x08010238
 8009c14:	0801025c 	.word	0x0801025c
 8009c18:	0801027c 	.word	0x0801027c
 8009c1c:	08010298 	.word	0x08010298
 8009c20:	080102b8 	.word	0x080102b8
 8009c24:	080102e0 	.word	0x080102e0
 8009c28:	e000ed00 	.word	0xe000ed00
 8009c2c:	05fa0004 	.word	0x05fa0004
 8009c30:	0801032c 	.word	0x0801032c
 8009c34:	0801035c 	.word	0x0801035c
 8009c38:	0801034c 	.word	0x0801034c
 8009c3c:	08010354 	.word	0x08010354
 8009c40:	0801038c 	.word	0x0801038c

08009c44 <modTestingPVInit>:
extern ConverterSettings_t settings;
extern CalibrationData_t cal;

bool curvestate;

void modTestingPVInit(modTestingSolarCell_t* cell, float Vmp, float Voc, float Imp, float Isc, float A){
 8009c44:	b510      	push	{r4, lr}
 8009c46:	ed2d 8b04 	vpush	{d8-d9}
 8009c4a:	4604      	mov	r4, r0
	Imp = Imp * A / 1000.0f;
 8009c4c:	ee21 1a02 	vmul.f32	s2, s2, s4
 8009c50:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009ca0 <modTestingPVInit+0x5c>
 8009c54:	ee81 9a27 	vdiv.f32	s18, s2, s15
	Isc = Isc * A / 1000.0f;
 8009c58:	ee22 2a21 	vmul.f32	s4, s4, s3
 8009c5c:	ee82 8a27 	vdiv.f32	s16, s4, s15

	cell->Isc = Isc;
 8009c60:	ed80 8a02 	vstr	s16, [r0, #8]
	cell->Voc = Voc;
 8009c64:	edc0 0a03 	vstr	s1, [r0, #12]
	cell->C2 = (Vmp-Voc)/logf(1- (Imp/Isc));
 8009c68:	ee70 8a60 	vsub.f32	s17, s0, s1
 8009c6c:	eec9 7a08 	vdiv.f32	s15, s18, s16
 8009c70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c78:	f005 fabe 	bl	800f1f8 <logf>
 8009c7c:	eec8 7a80 	vdiv.f32	s15, s17, s0
 8009c80:	edc4 7a01 	vstr	s15, [r4, #4]
	cell->C1 = (Isc-Imp)/expf((Vmp-Voc)/cell->C2);
 8009c84:	ee38 8a49 	vsub.f32	s16, s16, s18
 8009c88:	ee88 0aa7 	vdiv.f32	s0, s17, s15
 8009c8c:	f005 fa76 	bl	800f17c <expf>
 8009c90:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8009c94:	edc4 7a00 	vstr	s15, [r4]
}
 8009c98:	ecbd 8b04 	vpop	{d8-d9}
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	447a0000 	.word	0x447a0000

08009ca4 <getMpp>:

float getMpp(float* IVc){
	float mpp = 0.0f;
	for (int i = 0; i < IVC_SIZE; i++){
 8009ca4:	2300      	movs	r3, #0
	float mpp = 0.0f;
 8009ca6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8009cd4 <getMpp+0x30>
	for (int i = 0; i < IVC_SIZE; i++){
 8009caa:	e000      	b.n	8009cae <getMpp+0xa>
 8009cac:	3301      	adds	r3, #1
 8009cae:	2b1f      	cmp	r3, #31
 8009cb0:	dc0f      	bgt.n	8009cd2 <getMpp+0x2e>
		float p = IVc[i*2]*IVc[i*2+1];
 8009cb2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8009cb6:	edd2 7a00 	vldr	s15, [r2]
 8009cba:	ed92 7a01 	vldr	s14, [r2, #4]
 8009cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
		if(p > mpp)mpp=p;
 8009cc2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cca:	d5ef      	bpl.n	8009cac <getMpp+0x8>
 8009ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8009cd0:	e7ec      	b.n	8009cac <getMpp+0x8>
	}
	return mpp;
}
 8009cd2:	4770      	bx	lr
 8009cd4:	00000000 	.word	0x00000000

08009cd8 <modTestingInit>:

void modTestingInit(){
 8009cd8:	b508      	push	{r3, lr}

#if defined(HW_TOPOLOGY_BOOST)
#define Vbat 42.0f
	modTestingPVInit(&cell, 40*0.649f, 40*0.742f, 1.3f, 1.5f, 1000);
 8009cda:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 8009d18 <modTestingInit+0x40>
 8009cde:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 8009ce2:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8009d1c <modTestingInit+0x44>
 8009ce6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8009d20 <modTestingInit+0x48>
 8009cea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009d24 <modTestingInit+0x4c>
 8009cee:	480e      	ldr	r0, [pc, #56]	; (8009d28 <modTestingInit+0x50>)
 8009cf0:	f7ff ffa8 	bl	8009c44 <modTestingPVInit>
	simstate.Vlow=30.0f;
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <modTestingInit+0x54>)
 8009cf6:	4a0e      	ldr	r2, [pc, #56]	; (8009d30 <modTestingInit+0x58>)
 8009cf8:	601a      	str	r2, [r3, #0]
	simstate.Vhigh=Vbat;
 8009cfa:	4a0e      	ldr	r2, [pc, #56]	; (8009d34 <modTestingInit+0x5c>)
 8009cfc:	605a      	str	r2, [r3, #4]
	modTestingPVInit(&cell, 70*0.649f, 70*0.742f, 1.3f, 1.5f, 1000);
	simstate.Vlow=Vbat;
	simstate.Vhigh=60.0f;
#endif

	simstate.Iind = 0;
 8009cfe:	2200      	movs	r2, #0
 8009d00:	609a      	str	r2, [r3, #8]
	simstate.Ihigh = 0;
 8009d02:	60da      	str	r2, [r3, #12]
	cvic = (float*)IVc2;
 8009d04:	480c      	ldr	r0, [pc, #48]	; (8009d38 <modTestingInit+0x60>)
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <modTestingInit+0x64>)
 8009d08:	6018      	str	r0, [r3, #0]
	mpp = getMpp( (float*)IVc2 );
 8009d0a:	f7ff ffcb 	bl	8009ca4 <getMpp>
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <modTestingInit+0x68>)
 8009d10:	ed83 0a00 	vstr	s0, [r3]
}
 8009d14:	bd08      	pop	{r3, pc}
 8009d16:	bf00      	nop
 8009d18:	447a0000 	.word	0x447a0000
 8009d1c:	3fa66666 	.word	0x3fa66666
 8009d20:	41ed70a4 	.word	0x41ed70a4
 8009d24:	41cfae14 	.word	0x41cfae14
 8009d28:	200035c4 	.word	0x200035c4
 8009d2c:	200033c0 	.word	0x200033c0
 8009d30:	41f00000 	.word	0x41f00000
 8009d34:	42280000 	.word	0x42280000
 8009d38:	20000134 	.word	0x20000134
 8009d3c:	200035bc 	.word	0x200035bc
 8009d40:	200035b8 	.word	0x200035b8

08009d44 <modTestingTask>:



void modTestingTask(){
 8009d44:	b510      	push	{r4, lr}
	if(modDelayTick1ms(&lastTestTick, 1000)){
 8009d46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009d4a:	480f      	ldr	r0, [pc, #60]	; (8009d88 <modTestingTask+0x44>)
 8009d4c:	f7fe fcbe 	bl	80086cc <modDelayTick1ms>
 8009d50:	b170      	cbz	r0, 8009d70 <modTestingTask+0x2c>
		curvestate = !curvestate;
 8009d52:	4a0e      	ldr	r2, [pc, #56]	; (8009d8c <modTestingTask+0x48>)
 8009d54:	7813      	ldrb	r3, [r2, #0]
 8009d56:	f083 0301 	eor.w	r3, r3, #1
 8009d5a:	7013      	strb	r3, [r2, #0]
		if(curvestate){
 8009d5c:	b14b      	cbz	r3, 8009d72 <modTestingTask+0x2e>
			mpp = getMpp((float*)IVc2);
 8009d5e:	4c0c      	ldr	r4, [pc, #48]	; (8009d90 <modTestingTask+0x4c>)
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff ff9f 	bl	8009ca4 <getMpp>
 8009d66:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <modTestingTask+0x50>)
 8009d68:	ed83 0a00 	vstr	s0, [r3]

			cvic = (float*)IVc2;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <modTestingTask+0x54>)
 8009d6e:	601c      	str	r4, [r3, #0]
		}else{
			mpp = getMpp((float*)IVc1);
			cvic = (float*)IVc1;
		}
	}
}
 8009d70:	bd10      	pop	{r4, pc}
			mpp = getMpp((float*)IVc1);
 8009d72:	4c0a      	ldr	r4, [pc, #40]	; (8009d9c <modTestingTask+0x58>)
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff ff95 	bl	8009ca4 <getMpp>
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <modTestingTask+0x50>)
 8009d7c:	ed83 0a00 	vstr	s0, [r3]
			cvic = (float*)IVc1;
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <modTestingTask+0x54>)
 8009d82:	601c      	str	r4, [r3, #0]
}
 8009d84:	e7f4      	b.n	8009d70 <modTestingTask+0x2c>
 8009d86:	bf00      	nop
 8009d88:	20001c94 	.word	0x20001c94
 8009d8c:	200035d4 	.word	0x200035d4
 8009d90:	20000134 	.word	0x20000134
 8009d94:	200035b8 	.word	0x200035b8
 8009d98:	200035bc 	.word	0x200035bc
 8009d9c:	20000034 	.word	0x20000034

08009da0 <Ipvmodel>:

float Ipvmodel(modTestingSolarCell_t *cell, float V){
 8009da0:	b510      	push	{r4, lr}
 8009da2:	ed2d 8b04 	vpush	{d8-d9}
 8009da6:	4604      	mov	r4, r0
	if(V <= 0.0f){
 8009da8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	d90d      	bls.n	8009dce <Ipvmodel+0x2e>
 8009db2:	eeb0 8a40 	vmov.f32	s16, s0
		return cell->Isc;
	}
	if (V >= cell->Voc){
 8009db6:	ed90 0a03 	vldr	s0, [r0, #12]
 8009dba:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	d807      	bhi.n	8009dd4 <Ipvmodel+0x34>
		return 0;
 8009dc4:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009e10 <Ipvmodel+0x70>
	}
	return (cell->Isc - cell->C1*expf(-cell->Voc/cell->C2)*(expf(V/cell->C2)-1));
}
 8009dc8:	ecbd 8b04 	vpop	{d8-d9}
 8009dcc:	bd10      	pop	{r4, pc}
		return cell->Isc;
 8009dce:	ed90 0a02 	vldr	s0, [r0, #8]
 8009dd2:	e7f9      	b.n	8009dc8 <Ipvmodel+0x28>
	return (cell->Isc - cell->C1*expf(-cell->Voc/cell->C2)*(expf(V/cell->C2)-1));
 8009dd4:	edd0 8a02 	vldr	s17, [r0, #8]
 8009dd8:	ed90 9a00 	vldr	s18, [r0]
 8009ddc:	eeb1 0a40 	vneg.f32	s0, s0
 8009de0:	edd0 7a01 	vldr	s15, [r0, #4]
 8009de4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8009de8:	f005 f9c8 	bl	800f17c <expf>
 8009dec:	ee29 9a00 	vmul.f32	s18, s18, s0
 8009df0:	ed94 0a01 	vldr	s0, [r4, #4]
 8009df4:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8009df8:	f005 f9c0 	bl	800f17c <expf>
 8009dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009e00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e04:	ee29 9a00 	vmul.f32	s18, s18, s0
 8009e08:	ee38 0ac9 	vsub.f32	s0, s17, s18
 8009e0c:	e7dc      	b.n	8009dc8 <Ipvmodel+0x28>
 8009e0e:	bf00      	nop
 8009e10:	00000000 	.word	0x00000000

08009e14 <modTestingSimstep>:
	float v1 = IVc[(i*2)-2];

	return (V-v0)/(v1-v0) * (i1-i0) + i0;
}

void modTestingSimstep(modTestingSimState_t *state, float dt, ConverterPhase_t* phase){
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	ed2d 8b02 	vpush	{d8}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	eeb0 8a40 	vmov.f32	s16, s0
 8009e20:	460d      	mov	r5, r1
	float Ilow = 0.0;
#ifdef HW_TOPOLOGY_BOOST
#ifdef SIM_NOMINAL
	Ilow = Ipvmodel(&cell,state->Vlow);
 8009e22:	ed90 0a00 	vldr	s0, [r0]
 8009e26:	4861      	ldr	r0, [pc, #388]	; (8009fac <modTestingSimstep+0x198>)
 8009e28:	f7ff ffba 	bl	8009da0 <Ipvmodel>
	state->Ihigh= (state->Vhigh-Vbat) / 0.1f;
 8009e2c:	ed94 6a01 	vldr	s12, [r4, #4]
 8009e30:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8009fb0 <modTestingSimstep+0x19c>
 8009e34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009e38:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8009fb4 <modTestingSimstep+0x1a0>
 8009e3c:	eec7 4a87 	vdiv.f32	s9, s15, s14
 8009e40:	edc4 4a03 	vstr	s9, [r4, #12]
	Ilow = -state->Vlow / 1.0e4f;
	state->Ihigh = (state->Vhigh - 70.0f) / 8.0f;
#endif
#endif

	float Dn = 1.0f-phase->dutycycle;
 8009e44:	edd5 6a11 	vldr	s13, [r5, #68]	; 0x44
 8009e48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009e4c:	ee77 6ae6 	vsub.f32	s13, s15, s13

	if(Dn > 1.0f)Dn = 1.0f;
 8009e50:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	dd01      	ble.n	8009e5e <modTestingSimstep+0x4a>
 8009e5a:	eef0 6a67 	vmov.f32	s13, s15
	if(Dn < 0.0f)Dn = 0.0f;
 8009e5e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	d45d      	bmi.n	8009f24 <modTestingSimstep+0x110>

	float dVlowdt 	= 0;
	float dIinddt 	= 0;
	float dVhighdt 	= 0;

	if(phase->enabled){
 8009e68:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d05c      	beq.n	8009f2a <modTestingSimstep+0x116>
		dVlowdt 	= (Ilow - state->Iind)/cal.Clow*dt;
 8009e70:	edd4 5a02 	vldr	s11, [r4, #8]
 8009e74:	ee30 5a65 	vsub.f32	s10, s0, s11
 8009e78:	4b4f      	ldr	r3, [pc, #316]	; (8009fb8 <modTestingSimstep+0x1a4>)
 8009e7a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8009e7e:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8009e82:	ee27 7a88 	vmul.f32	s14, s15, s16
		dIinddt 	= (state->Vlow -(Dn*state->Vhigh))/cal.L*dt;
 8009e86:	ed94 5a00 	vldr	s10, [r4]
 8009e8a:	ee66 7a26 	vmul.f32	s15, s12, s13
 8009e8e:	ee35 5a67 	vsub.f32	s10, s10, s15
 8009e92:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 8009e96:	eec5 7a04 	vdiv.f32	s15, s10, s8
 8009e9a:	ee27 5a88 	vmul.f32	s10, s15, s16
		dVhighdt = ((state->Iind*Dn)-state->Ihigh-(0.3f/state->Vhigh))/cal.Chigh*dt;
 8009e9e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8009ea2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8009ea6:	eddf 7a45 	vldr	s15, [pc, #276]	; 8009fbc <modTestingSimstep+0x1a8>
 8009eaa:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8009eae:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009eb2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8009eb6:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 8009eba:	ee65 5a88 	vmul.f32	s11, s11, s16
			dIinddt 	= (state->Vlow -state->Vhigh -2.5f - (state->Iind*2.0f))/cal.L*dt; // Added damping turn to increase stability
		}

	}

	state->Iind 	+= dIinddt;
 8009ebe:	edd4 7a02 	vldr	s15, [r4, #8]
 8009ec2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009ec6:	edc4 7a02 	vstr	s15, [r4, #8]
	state->Vlow	+= dVlowdt;
 8009eca:	edd4 7a00 	vldr	s15, [r4]
 8009ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ed2:	edc4 7a00 	vstr	s15, [r4]
	state->Vhigh	+= dVhighdt;
 8009ed6:	ee36 6a25 	vadd.f32	s12, s12, s11
 8009eda:	ed84 6a01 	vstr	s12, [r4, #4]

	lossedEnergy += dt*((state->Vlow*Ilow)-mpp);
 8009ede:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009ee2:	4b37      	ldr	r3, [pc, #220]	; (8009fc0 <modTestingSimstep+0x1ac>)
 8009ee4:	ed93 0a00 	vldr	s0, [r3]
 8009ee8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009eec:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009ef0:	4b34      	ldr	r3, [pc, #208]	; (8009fc4 <modTestingSimstep+0x1b0>)
 8009ef2:	ed93 7a00 	vldr	s14, [r3]
 8009ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009efa:	edc3 7a00 	vstr	s15, [r3]
	runtime += dt;
 8009efe:	4b32      	ldr	r3, [pc, #200]	; (8009fc8 <modTestingSimstep+0x1b4>)
 8009f00:	ed93 0a00 	vldr	s0, [r3]
 8009f04:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009f08:	ed83 8a00 	vstr	s16, [r3]
	lossedPowerAverage = lossedEnergy/runtime;
 8009f0c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8009f10:	4b2e      	ldr	r3, [pc, #184]	; (8009fcc <modTestingSimstep+0x1b8>)
 8009f12:	ed83 7a00 	vstr	s14, [r3]
	timestep++;
 8009f16:	4a2e      	ldr	r2, [pc, #184]	; (8009fd0 <modTestingSimstep+0x1bc>)
 8009f18:	6813      	ldr	r3, [r2, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6013      	str	r3, [r2, #0]
}
 8009f1e:	ecbd 8b02 	vpop	{d8}
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
	if(Dn < 0.0f)Dn = 0.0f;
 8009f24:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8009fd4 <modTestingSimstep+0x1c0>
 8009f28:	e79e      	b.n	8009e68 <modTestingSimstep+0x54>
		dVlowdt 	= (Ilow - state->Iind)/cal.Clow*dt;
 8009f2a:	ed94 4a02 	vldr	s8, [r4, #8]
 8009f2e:	ee70 5a44 	vsub.f32	s11, s0, s8
 8009f32:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <modTestingSimstep+0x1a4>)
 8009f34:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8009f38:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009f3c:	ee27 7a88 	vmul.f32	s14, s15, s16
		dIinddt 	= -state->Iind;
 8009f40:	eeb1 5a44 	vneg.f32	s10, s8
		dVhighdt = (-state->Ihigh-(0.3f/state->Vhigh))/cal.Chigh*dt;
 8009f44:	eef1 7a64 	vneg.f32	s15, s9
 8009f48:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009fbc <modTestingSimstep+0x1a8>
 8009f4c:	eec5 2a86 	vdiv.f32	s5, s11, s12
 8009f50:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8009f54:	ed93 3a1f 	vldr	s6, [r3, #124]	; 0x7c
 8009f58:	eec7 5a83 	vdiv.f32	s11, s15, s6
 8009f5c:	ee65 5a88 	vmul.f32	s11, s11, s16
		if(state->Vhigh < (state->Vlow + 2.5f)){
 8009f60:	edd4 7a00 	vldr	s15, [r4]
 8009f64:	eef0 3a04 	vmov.f32	s7, #4	; 0x40200000  2.5
 8009f68:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8009f6c:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8009f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f74:	d5a3      	bpl.n	8009ebe <modTestingSimstep+0xaa>
			dVhighdt = ((state->Iind*Dn)-state->Ihigh-(0.3f/state->Vhigh))/cal.Chigh*dt;
 8009f76:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009f7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8009f7e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009f82:	eec6 5a83 	vdiv.f32	s11, s13, s6
 8009f86:	ee65 5a88 	vmul.f32	s11, s11, s16
			dIinddt 	= (state->Vlow -state->Vhigh -2.5f - (state->Iind*2.0f))/cal.L*dt; // Added damping turn to increase stability
 8009f8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009f8e:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
 8009f92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f96:	ee34 4a04 	vadd.f32	s8, s8, s8
 8009f9a:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8009f9e:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
 8009fa2:	eec6 7a85 	vdiv.f32	s15, s13, s10
 8009fa6:	ee27 5a88 	vmul.f32	s10, s15, s16
 8009faa:	e788      	b.n	8009ebe <modTestingSimstep+0xaa>
 8009fac:	200035c4 	.word	0x200035c4
 8009fb0:	42280000 	.word	0x42280000
 8009fb4:	3dcccccd 	.word	0x3dcccccd
 8009fb8:	200032ac 	.word	0x200032ac
 8009fbc:	3e99999a 	.word	0x3e99999a
 8009fc0:	200035b8 	.word	0x200035b8
 8009fc4:	20001c98 	.word	0x20001c98
 8009fc8:	20001ca0 	.word	0x20001ca0
 8009fcc:	20001c9c 	.word	0x20001c9c
 8009fd0:	20001ca4 	.word	0x20001ca4
 8009fd4:	00000000 	.word	0x00000000

08009fd8 <modUARTSendPacketWrapper>:
	}
	wr_pointer = n_wr_pointer;
}


void modUARTSendPacketWrapper(unsigned char *data, unsigned int len) {
 8009fd8:	b508      	push	{r3, lr}
	libPacketSendPacket(data, len, PACKET_HANDLER_UART);
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f7ff f85c 	bl	8009098 <libPacketSendPacket>
}
 8009fe0:	bd08      	pop	{r3, pc}
	...

08009fe4 <modUARTProcessPacket>:

void modUARTProcessPacket(unsigned char *data, unsigned int len) {
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
	modCommandsSetSendFunction(modUARTSendPacketWrapper);
 8009fea:	4804      	ldr	r0, [pc, #16]	; (8009ffc <modUARTProcessPacket+0x18>)
 8009fec:	f7fd f94c 	bl	8007288 <modCommandsSetSendFunction>
	modCommandsProcessPacket(data, len);
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fd f988 	bl	8007308 <modCommandsProcessPacket>
}
 8009ff8:	bd38      	pop	{r3, r4, r5, pc}
 8009ffa:	bf00      	nop
 8009ffc:	08009fd9 	.word	0x08009fd9

0800a000 <modUARTSendPacket>:

void modUARTSendPacket(unsigned char *data, unsigned int len) {
 800a000:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart3, data, len, 100);
 800a002:	2364      	movs	r3, #100	; 0x64
 800a004:	b28a      	uxth	r2, r1
 800a006:	4601      	mov	r1, r0
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <modUARTSendPacket+0x10>)
 800a00a:	f7fc f99b 	bl	8006344 <HAL_UART_Transmit>
}
 800a00e:	bd08      	pop	{r3, pc}
 800a010:	20003400 	.word	0x20003400

0800a014 <modUARTInit>:
void modUARTInit(void) {
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	b082      	sub	sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800a018:	4b24      	ldr	r3, [pc, #144]	; (800a0ac <modUARTInit+0x98>)
 800a01a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a01c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a020:	659a      	str	r2, [r3, #88]	; 0x58
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	9b01      	ldr	r3, [sp, #4]
	huart3.Instance = USART3;
 800a02c:	4c20      	ldr	r4, [pc, #128]	; (800a0b0 <modUARTInit+0x9c>)
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <modUARTInit+0xa0>)
 800a030:	6023      	str	r3, [r4, #0]
	huart3.Init.BaudRate = 115200;
 800a032:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a036:	6063      	str	r3, [r4, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a038:	2500      	movs	r5, #0
 800a03a:	60a5      	str	r5, [r4, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800a03c:	60e5      	str	r5, [r4, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800a03e:	6125      	str	r5, [r4, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800a040:	230c      	movs	r3, #12
 800a042:	6163      	str	r3, [r4, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a044:	61a5      	str	r5, [r4, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a046:	61e5      	str	r5, [r4, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a048:	6225      	str	r5, [r4, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a04a:	6265      	str	r5, [r4, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a04c:	62a5      	str	r5, [r4, #40]	; 0x28
	hdma_usart3_rx.Instance = DMA1_Channel2;
 800a04e:	4e1a      	ldr	r6, [pc, #104]	; (800a0b8 <modUARTInit+0xa4>)
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <modUARTInit+0xa8>)
 800a052:	6033      	str	r3, [r6, #0]
	hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800a054:	231c      	movs	r3, #28
 800a056:	6073      	str	r3, [r6, #4]
	hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a058:	60b5      	str	r5, [r6, #8]
	hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a05a:	60f5      	str	r5, [r6, #12]
	hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a05c:	2380      	movs	r3, #128	; 0x80
 800a05e:	6133      	str	r3, [r6, #16]
	hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a060:	6175      	str	r5, [r6, #20]
	hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a062:	61b5      	str	r5, [r6, #24]
	hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a064:	2320      	movs	r3, #32
 800a066:	61f3      	str	r3, [r6, #28]
	hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a068:	6235      	str	r5, [r6, #32]
	HAL_DMA_Init(&hdma_usart3_rx);
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7f8 f896 	bl	800219c <HAL_DMA_Init>
	__HAL_LINKDMA(&huart3,hdmarx,hdma_usart3_rx);
 800a070:	67e6      	str	r6, [r4, #124]	; 0x7c
 800a072:	62b4      	str	r4, [r6, #40]	; 0x28
	HAL_UART_Init(&huart3);
 800a074:	4620      	mov	r0, r4
 800a076:	f7fb ff33 	bl	8005ee0 <HAL_UART_Init>
	HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8);
 800a07a:	4629      	mov	r1, r5
 800a07c:	4620      	mov	r0, r4
 800a07e:	f7fc fa25 	bl	80064cc <HAL_UARTEx_SetTxFifoThreshold>
	HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8);
 800a082:	4629      	mov	r1, r5
 800a084:	4620      	mov	r0, r4
 800a086:	f7fc fa5f 	bl	8006548 <HAL_UARTEx_SetRxFifoThreshold>
	HAL_UARTEx_DisableFifoMode(&huart3);
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7fc fa00 	bl	8006490 <HAL_UARTEx_DisableFifoMode>
	HAL_UART_Receive_DMA(&huart3, rxBuffer, RX_BUFFER_SIZE);
 800a090:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a094:	490a      	ldr	r1, [pc, #40]	; (800a0c0 <modUARTInit+0xac>)
 800a096:	4620      	mov	r0, r4
 800a098:	f7fb fd7e 	bl	8005b98 <HAL_UART_Receive_DMA>
	libPacketInit(modUARTSendPacket, modUARTProcessPacket, PACKET_HANDLER_UART);																				// Configure the UART driver
 800a09c:	2201      	movs	r2, #1
 800a09e:	4909      	ldr	r1, [pc, #36]	; (800a0c4 <modUARTInit+0xb0>)
 800a0a0:	4809      	ldr	r0, [pc, #36]	; (800a0c8 <modUARTInit+0xb4>)
 800a0a2:	f7fe ffeb 	bl	800907c <libPacketInit>
}
 800a0a6:	b002      	add	sp, #8
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40021000 	.word	0x40021000
 800a0b0:	20003400 	.word	0x20003400
 800a0b4:	40004800 	.word	0x40004800
 800a0b8:	20001cc0 	.word	0x20001cc0
 800a0bc:	4002001c 	.word	0x4002001c
 800a0c0:	200035dc 	.word	0x200035dc
 800a0c4:	08009fe5 	.word	0x08009fe5
 800a0c8:	0800a001 	.word	0x0800a001

0800a0cc <modUARTTask>:
void modUARTTask(void) {
 800a0cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t n_wr_pointer = RX_BUFFER_SIZE - DMA1_Channel2->CNDTR;
 800a0ce:	4b18      	ldr	r3, [pc, #96]	; (800a130 <modUARTTask+0x64>)
 800a0d0:	685e      	ldr	r6, [r3, #4]
 800a0d2:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
	if(n_wr_pointer == wr_pointer){
 800a0d6:	4b17      	ldr	r3, [pc, #92]	; (800a134 <modUARTTask+0x68>)
 800a0d8:	681d      	ldr	r5, [r3, #0]
 800a0da:	42b5      	cmp	r5, r6
 800a0dc:	d027      	beq.n	800a12e <modUARTTask+0x62>
	if(n_wr_pointer < wr_pointer){
 800a0de:	d912      	bls.n	800a106 <modUARTTask+0x3a>
		new = n_wr_pointer + (RX_BUFFER_SIZE - wr_pointer);
 800a0e0:	1b75      	subs	r5, r6, r5
 800a0e2:	f505 7580 	add.w	r5, r5, #256	; 0x100
		HasOverflown = true;
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <modUARTTask+0x6c>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]
	available += new;
 800a0ec:	4a13      	ldr	r2, [pc, #76]	; (800a13c <modUARTTask+0x70>)
 800a0ee:	6813      	ldr	r3, [r2, #0]
 800a0f0:	442b      	add	r3, r5
 800a0f2:	6013      	str	r3, [r2, #0]
	if(available > RX_BUFFER_SIZE){
 800a0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f8:	d903      	bls.n	800a102 <modUARTTask+0x36>
		available = RX_BUFFER_SIZE;
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a100:	601a      	str	r2, [r3, #0]
void modUARTTask(void) {
 800a102:	2400      	movs	r4, #0
 800a104:	e007      	b.n	800a116 <modUARTTask+0x4a>
		new = n_wr_pointer - wr_pointer;
 800a106:	1b75      	subs	r5, r6, r5
 800a108:	e7f0      	b.n	800a0ec <modUARTTask+0x20>
		libPacketProcessByte(rxBuffer[index],PACKET_HANDLER_UART);
 800a10a:	2101      	movs	r1, #1
 800a10c:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <modUARTTask+0x74>)
 800a10e:	5cd0      	ldrb	r0, [r2, r3]
 800a110:	f7ff f81a 	bl	8009148 <libPacketProcessByte>
	for(int i = 0; i < new; i++){
 800a114:	3401      	adds	r4, #1
 800a116:	42ac      	cmp	r4, r5
 800a118:	d207      	bcs.n	800a12a <modUARTTask+0x5e>
		uint32_t index = wr_pointer + i;
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <modUARTTask+0x68>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4423      	add	r3, r4
		if (index >= RX_BUFFER_SIZE){
 800a120:	2bff      	cmp	r3, #255	; 0xff
 800a122:	d9f2      	bls.n	800a10a <modUARTTask+0x3e>
			index -= RX_BUFFER_SIZE;
 800a124:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a128:	e7ef      	b.n	800a10a <modUARTTask+0x3e>
	wr_pointer = n_wr_pointer;
 800a12a:	4b02      	ldr	r3, [pc, #8]	; (800a134 <modUARTTask+0x68>)
 800a12c:	601e      	str	r6, [r3, #0]
}
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	4002001c 	.word	0x4002001c
 800a134:	20001cb0 	.word	0x20001cb0
 800a138:	20001ca8 	.word	0x20001ca8
 800a13c:	20001cac 	.word	0x20001cac
 800a140:	200035dc 	.word	0x200035dc

0800a144 <hw_setio_output>:

#include "hardware.h"

void hw_setio_output(GPIO_TypeDef * port, uint32_t pin){
 800a144:	b500      	push	{lr}
 800a146:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800a148:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a14a:	2301      	movs	r3, #1
 800a14c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800a152:	a901      	add	r1, sp, #4
 800a154:	f7f8 ff66 	bl	8003024 <HAL_GPIO_Init>
}
 800a158:	b007      	add	sp, #28
 800a15a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a15e <hw_setio_input>:

void hw_setio_input(GPIO_TypeDef * port, uint32_t pin, uint32_t pull){
 800a15e:	b500      	push	{lr}
 800a160:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800a162:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a164:	2300      	movs	r3, #0
 800a166:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = pull;
 800a168:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800a16a:	a901      	add	r1, sp, #4
 800a16c:	f7f8 ff5a 	bl	8003024 <HAL_GPIO_Init>
}
 800a170:	b007      	add	sp, #28
 800a172:	f85d fb04 	ldr.w	pc, [sp], #4

0800a176 <hw_setio_af>:

void hw_setio_af(GPIO_TypeDef * port, uint32_t pin, uint32_t af){
 800a176:	b500      	push	{lr}
 800a178:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 800a17a:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a17c:	2302      	movs	r3, #2
 800a17e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a180:	2300      	movs	r3, #0
 800a182:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a184:	2303      	movs	r3, #3
 800a186:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = af;
 800a188:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800a18a:	a901      	add	r1, sp, #4
 800a18c:	f7f8 ff4a 	bl	8003024 <HAL_GPIO_Init>
}
 800a190:	b007      	add	sp, #28
 800a192:	f85d fb04 	ldr.w	pc, [sp], #4

0800a196 <hw_setio_analog>:

void hw_setio_analog(GPIO_TypeDef * port, uint32_t pin){
 800a196:	b500      	push	{lr}
 800a198:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = IHS__Pin|IHS_A3_Pin;
 800a19a:	230c      	movs	r3, #12
 800a19c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800a1a6:	a901      	add	r1, sp, #4
 800a1a8:	f7f8 ff3c 	bl	8003024 <HAL_GPIO_Init>
}
 800a1ac:	b007      	add	sp, #28
 800a1ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a1b4 <hw_io_init>:
				0.75,//float samplepoint;
				56,//uint16_t generalCanId;
		},
};

void hw_io_init(){
 800a1b4:	b538      	push	{r3, r4, r5, lr}

	//PWM
	hw_setio_af(GPIOA, P2_PWM_LS_Pin, GPIO_AF13_HRTIM1);
 800a1b6:	220d      	movs	r2, #13
 800a1b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1c0:	f7ff ffd9 	bl	800a176 <hw_setio_af>
	hw_setio_af(GPIOA, P2_EN_HS_Pin,  GPIO_AF13_HRTIM1);
 800a1c4:	220d      	movs	r2, #13
 800a1c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a1ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1ce:	f7ff ffd2 	bl	800a176 <hw_setio_af>

	//UART
	hw_setio_af(GPIOC, GPIO_PIN_10, GPIO_AF7_USART3);
 800a1d2:	4d4a      	ldr	r5, [pc, #296]	; (800a2fc <hw_io_init+0x148>)
 800a1d4:	2207      	movs	r2, #7
 800a1d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f7ff ffcb 	bl	800a176 <hw_setio_af>
	hw_setio_af(GPIOC, GPIO_PIN_11, GPIO_AF7_USART3);
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f7ff ffc5 	bl	800a176 <hw_setio_af>

	HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f7f9 f810 	bl	8003218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PHSEN_Pin|PEN_Pin, GPIO_PIN_RESET);
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800a1fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a202:	f7f9 f809 	bl	8003218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DREN_Pin|LED3_Pin, GPIO_PIN_RESET);
 800a206:	4c3e      	ldr	r4, [pc, #248]	; (800a300 <hw_io_init+0x14c>)
 800a208:	2200      	movs	r2, #0
 800a20a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800a20e:	4620      	mov	r0, r4
 800a210:	f7f9 f802 	bl	8003218 <HAL_GPIO_WritePin>

	hw_setio_output(LED0_GPIO_Port, LED0_Pin);
 800a214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a218:	4628      	mov	r0, r5
 800a21a:	f7ff ff93 	bl	800a144 <hw_setio_output>
	hw_setio_output(LED1_GPIO_Port, LED1_Pin);
 800a21e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a222:	4628      	mov	r0, r5
 800a224:	f7ff ff8e 	bl	800a144 <hw_setio_output>
	hw_setio_output(LED2_GPIO_Port, LED2_Pin);
 800a228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff ff89 	bl	800a144 <hw_setio_output>
	hw_setio_output(LED3_GPIO_Port, LED3_Pin);
 800a232:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff ff84 	bl	800a144 <hw_setio_output>
	hw_setio_output(PHSEN_GPIO_Port, PHSEN_Pin);
 800a23c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a244:	f7ff ff7e 	bl	800a144 <hw_setio_output>
	hw_setio_output(PEN_GPIO_Port,PEN_Pin);
 800a248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a24c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a250:	f7ff ff78 	bl	800a144 <hw_setio_output>
	hw_setio_output(DREN_GPIO_Port, DREN_Pin);
 800a254:	2110      	movs	r1, #16
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff ff74 	bl	800a144 <hw_setio_output>

	hw_setio_input(ID0_GPIO_Port, ID0_Pin, GPIO_PULLUP);
 800a25c:	2201      	movs	r2, #1
 800a25e:	2110      	movs	r1, #16
 800a260:	4628      	mov	r0, r5
 800a262:	f7ff ff7c 	bl	800a15e <hw_setio_input>
	hw_setio_input(ID1_GPIO_Port, ID1_Pin, GPIO_PULLUP);
 800a266:	2201      	movs	r2, #1
 800a268:	4611      	mov	r1, r2
 800a26a:	4620      	mov	r0, r4
 800a26c:	f7ff ff77 	bl	800a15e <hw_setio_input>
	hw_setio_input(ID2_GPIO_Port, ID2_Pin, GPIO_PULLUP);
 800a270:	2201      	movs	r2, #1
 800a272:	2102      	movs	r1, #2
 800a274:	4620      	mov	r0, r4
 800a276:	f7ff ff72 	bl	800a15e <hw_setio_input>
	hw_setio_input(ID3_GPIO_Port, ID3_Pin, GPIO_PULLUP);
 800a27a:	2201      	movs	r2, #1
 800a27c:	2104      	movs	r1, #4
 800a27e:	4620      	mov	r0, r4
 800a280:	f7ff ff6d 	bl	800a15e <hw_setio_input>

	hw_setio_input(VDRVPG_GPIO_Port, VDRVPG_Pin, GPIO_PULLUP);
 800a284:	2201      	movs	r2, #1
 800a286:	2180      	movs	r1, #128	; 0x80
 800a288:	4620      	mov	r0, r4
 800a28a:	f7ff ff68 	bl	800a15e <hw_setio_input>
	hw_setio_input(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PULLUP);
 800a28e:	2201      	movs	r2, #1
 800a290:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff ff62 	bl	800a15e <hw_setio_input>
	hw_setio_input(RST_GPIO_Port, RST_Pin, GPIO_NOPULL);
 800a29a:	2200      	movs	r2, #0
 800a29c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a2a0:	4818      	ldr	r0, [pc, #96]	; (800a304 <hw_io_init+0x150>)
 800a2a2:	f7ff ff5c 	bl	800a15e <hw_setio_input>

	hw_setio_analog(IHS__GPIO_Port, IHS__Pin);
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2ac:	f7ff ff73 	bl	800a196 <hw_setio_analog>
	hw_setio_analog(IHS_A3_GPIO_Port, IHS_A3_Pin);
 800a2b0:	2108      	movs	r1, #8
 800a2b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2b6:	f7ff ff6e 	bl	800a196 <hw_setio_analog>

	hw_setio_analog(ILS__GPIO_Port, ILS__Pin);
 800a2ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff ff69 	bl	800a196 <hw_setio_analog>
	hw_setio_analog(ILS_B15_GPIO_Port, ILS_B15_Pin);
 800a2c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7ff ff64 	bl	800a196 <hw_setio_analog>

	hw_setio_analog(Tamb_GPIO_Port, Tamb_Pin);
 800a2ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2d6:	f7ff ff5e 	bl	800a196 <hw_setio_analog>
	hw_setio_analog(Tsink_GPIO_Port, Tsink_Pin);
 800a2da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2e2:	f7ff ff58 	bl	800a196 <hw_setio_analog>

	hw_setio_analog(VHS_GPIO_Port, VHS_Pin);
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2ec:	f7ff ff53 	bl	800a196 <hw_setio_analog>
	hw_setio_analog(VLS_GPIO_Port, VLS_Pin);
 800a2f0:	2102      	movs	r1, #2
 800a2f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2f6:	f7ff ff4e 	bl	800a196 <hw_setio_analog>
}
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	48000800 	.word	0x48000800
 800a300:	48000400 	.word	0x48000400
 800a304:	48001800 	.word	0x48001800

0800a308 <hw_adc_init>:

void hw_adc_init(){
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	b08a      	sub	sp, #40	; 0x28
	//Init opamps
	hopamp3.Instance = OPAMP3;
 800a30e:	4c36      	ldr	r4, [pc, #216]	; (800a3e8 <hw_adc_init+0xe0>)
 800a310:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <hw_adc_init+0xe4>)
 800a312:	6023      	str	r3, [r4, #0]
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800a314:	2500      	movs	r5, #0
 800a316:	6065      	str	r5, [r4, #4]
	hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800a318:	f04f 0860 	mov.w	r8, #96	; 0x60
 800a31c:	f8c4 8008 	str.w	r8, [r4, #8]
	hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800a320:	2308      	movs	r3, #8
 800a322:	6123      	str	r3, [r4, #16]
	hopamp3.Init.InternalOutput = ENABLE;
 800a324:	2701      	movs	r7, #1
 800a326:	7527      	strb	r7, [r4, #20]
	hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800a328:	61a5      	str	r5, [r4, #24]
	hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800a32a:	62e5      	str	r5, [r4, #44]	; 0x2c
	HAL_OPAMP_Init(&hopamp3);
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7fa f91d 	bl	800456c <HAL_OPAMP_Init>

	hopamp2.Instance = OPAMP2;
 800a332:	4e2f      	ldr	r6, [pc, #188]	; (800a3f0 <hw_adc_init+0xe8>)
 800a334:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <hw_adc_init+0xec>)
 800a336:	6033      	str	r3, [r6, #0]
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800a338:	6075      	str	r5, [r6, #4]
	hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800a33a:	f8c6 8008 	str.w	r8, [r6, #8]
	hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800a33e:	6135      	str	r5, [r6, #16]
	hopamp2.Init.InternalOutput = ENABLE;
 800a340:	7537      	strb	r7, [r6, #20]
	hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800a342:	61b5      	str	r5, [r6, #24]
	hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800a344:	62f5      	str	r5, [r6, #44]	; 0x2c
	HAL_OPAMP_Init(&hopamp2);
 800a346:	4630      	mov	r0, r6
 800a348:	f7fa f910 	bl	800456c <HAL_OPAMP_Init>


	HAL_OPAMP_Start(&hopamp2);
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7fa f993 	bl	8004678 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800a352:	4620      	mov	r0, r4
 800a354:	f7fa f990 	bl	8004678 <HAL_OPAMP_Start>
	HAL_OPAMPEx_SelfCalibrateAll(&hopamp2, &hopamp3, &hopamp3, &hopamp3, &hopamp3, &hopamp3);
 800a358:	9401      	str	r4, [sp, #4]
 800a35a:	9400      	str	r4, [sp, #0]
 800a35c:	4623      	mov	r3, r4
 800a35e:	4622      	mov	r2, r4
 800a360:	4621      	mov	r1, r4
 800a362:	4630      	mov	r0, r6
 800a364:	f7fa f9a2 	bl	80046ac <HAL_OPAMPEx_SelfCalibrateAll>

	ADC_ChannelConfTypeDef sConfig = {0};
 800a368:	9508      	str	r5, [sp, #32]
 800a36a:	9509      	str	r5, [sp, #36]	; 0x24
	sConfig.Offset = 0;
 800a36c:	9507      	str	r5, [sp, #28]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a36e:	2604      	movs	r6, #4
 800a370:	9606      	str	r6, [sp, #24]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a372:	2306      	movs	r3, #6
 800a374:	9303      	str	r3, [sp, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a376:	9504      	str	r5, [sp, #16]
	//sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a378:	247f      	movs	r4, #127	; 0x7f
 800a37a:	9405      	str	r4, [sp, #20]

	//sConfig.Channel = ADC_CHANNEL_3;
	sConfig.Channel = ADC_CHANNEL_4;
 800a37c:	4b1e      	ldr	r3, [pc, #120]	; (800a3f8 <hw_adc_init+0xf0>)
 800a37e:	9302      	str	r3, [sp, #8]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800a380:	a902      	add	r1, sp, #8
 800a382:	481e      	ldr	r0, [pc, #120]	; (800a3fc <hw_adc_init+0xf4>)
 800a384:	f7f7 f9be 	bl	8001704 <HAL_ADC_ConfigChannel>

	//sConfig.Channel = ADC_CHANNEL_4;
	sConfig.Channel = ADC_CHANNEL_5;
 800a388:	4b1d      	ldr	r3, [pc, #116]	; (800a400 <hw_adc_init+0xf8>)
 800a38a:	9302      	str	r3, [sp, #8]

	HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800a38c:	a902      	add	r1, sp, #8
 800a38e:	481d      	ldr	r0, [pc, #116]	; (800a404 <hw_adc_init+0xfc>)
 800a390:	f7f7 f9b8 	bl	8001704 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <hw_adc_init+0x100>)
 800a396:	9302      	str	r3, [sp, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a398:	9405      	str	r4, [sp, #20]
	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800a39a:	a902      	add	r1, sp, #8
 800a39c:	481b      	ldr	r0, [pc, #108]	; (800a40c <hw_adc_init+0x104>)
 800a39e:	f7f7 f9b1 	bl	8001704 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <hw_adc_init+0x108>)
 800a3a4:	9302      	str	r3, [sp, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800a3a6:	a902      	add	r1, sp, #8
 800a3a8:	481a      	ldr	r0, [pc, #104]	; (800a414 <hw_adc_init+0x10c>)
 800a3aa:	f7f7 f9ab 	bl	8001704 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 800a3ae:	4b1a      	ldr	r3, [pc, #104]	; (800a418 <hw_adc_init+0x110>)
 800a3b0:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800a3b2:	9604      	str	r6, [sp, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a3b4:	9405      	str	r4, [sp, #20]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800a3b6:	4c19      	ldr	r4, [pc, #100]	; (800a41c <hw_adc_init+0x114>)
 800a3b8:	a902      	add	r1, sp, #8
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7f7 f9a2 	bl	8001704 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_1;
 800a3c0:	4b17      	ldr	r3, [pc, #92]	; (800a420 <hw_adc_init+0x118>)
 800a3c2:	9302      	str	r3, [sp, #8]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800a3c8:	a902      	add	r1, sp, #8
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7f7 f99a 	bl	8001704 <HAL_ADC_ConfigChannel>

	sConfig.Channel = ADC_CHANNEL_2;
 800a3d0:	4b14      	ldr	r3, [pc, #80]	; (800a424 <hw_adc_init+0x11c>)
 800a3d2:	9302      	str	r3, [sp, #8]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800a3d4:	2312      	movs	r3, #18
 800a3d6:	9303      	str	r3, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc5, &sConfig);
 800a3d8:	a902      	add	r1, sp, #8
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7f7 f992 	bl	8001704 <HAL_ADC_ConfigChannel>
}
 800a3e0:	b00a      	add	sp, #40	; 0x28
 800a3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20003818 	.word	0x20003818
 800a3ec:	40010308 	.word	0x40010308
 800a3f0:	200037dc 	.word	0x200037dc
 800a3f4:	40010304 	.word	0x40010304
 800a3f8:	10c00010 	.word	0x10c00010
 800a3fc:	20001e70 	.word	0x20001e70
 800a400:	14f00020 	.word	0x14f00020
 800a404:	20001fc0 	.word	0x20001fc0
 800a408:	c3290000 	.word	0xc3290000
 800a40c:	20001d20 	.word	0x20001d20
 800a410:	b6982000 	.word	0xb6982000
 800a414:	20001f54 	.word	0x20001f54
 800a418:	90c00010 	.word	0x90c00010
 800a41c:	20001d8c 	.word	0x20001d8c
 800a420:	04300002 	.word	0x04300002
 800a424:	08600004 	.word	0x08600004

0800a428 <__errno>:
 800a428:	4b01      	ldr	r3, [pc, #4]	; (800a430 <__errno+0x8>)
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	2000038c 	.word	0x2000038c

0800a434 <__libc_init_array>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	4d0d      	ldr	r5, [pc, #52]	; (800a46c <__libc_init_array+0x38>)
 800a438:	4c0d      	ldr	r4, [pc, #52]	; (800a470 <__libc_init_array+0x3c>)
 800a43a:	1b64      	subs	r4, r4, r5
 800a43c:	10a4      	asrs	r4, r4, #2
 800a43e:	2600      	movs	r6, #0
 800a440:	42a6      	cmp	r6, r4
 800a442:	d109      	bne.n	800a458 <__libc_init_array+0x24>
 800a444:	4d0b      	ldr	r5, [pc, #44]	; (800a474 <__libc_init_array+0x40>)
 800a446:	4c0c      	ldr	r4, [pc, #48]	; (800a478 <__libc_init_array+0x44>)
 800a448:	f005 fcb4 	bl	800fdb4 <_init>
 800a44c:	1b64      	subs	r4, r4, r5
 800a44e:	10a4      	asrs	r4, r4, #2
 800a450:	2600      	movs	r6, #0
 800a452:	42a6      	cmp	r6, r4
 800a454:	d105      	bne.n	800a462 <__libc_init_array+0x2e>
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45c:	4798      	blx	r3
 800a45e:	3601      	adds	r6, #1
 800a460:	e7ee      	b.n	800a440 <__libc_init_array+0xc>
 800a462:	f855 3b04 	ldr.w	r3, [r5], #4
 800a466:	4798      	blx	r3
 800a468:	3601      	adds	r6, #1
 800a46a:	e7f2      	b.n	800a452 <__libc_init_array+0x1e>
 800a46c:	08010978 	.word	0x08010978
 800a470:	08010978 	.word	0x08010978
 800a474:	08010978 	.word	0x08010978
 800a478:	0801097c 	.word	0x0801097c

0800a47c <memcpy>:
 800a47c:	440a      	add	r2, r1
 800a47e:	4291      	cmp	r1, r2
 800a480:	f100 33ff 	add.w	r3, r0, #4294967295
 800a484:	d100      	bne.n	800a488 <memcpy+0xc>
 800a486:	4770      	bx	lr
 800a488:	b510      	push	{r4, lr}
 800a48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a492:	4291      	cmp	r1, r2
 800a494:	d1f9      	bne.n	800a48a <memcpy+0xe>
 800a496:	bd10      	pop	{r4, pc}

0800a498 <memset>:
 800a498:	4402      	add	r2, r0
 800a49a:	4603      	mov	r3, r0
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d100      	bne.n	800a4a2 <memset+0xa>
 800a4a0:	4770      	bx	lr
 800a4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4a6:	e7f9      	b.n	800a49c <memset+0x4>

0800a4a8 <__cvt>:
 800a4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	ec55 4b10 	vmov	r4, r5, d0
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	460e      	mov	r6, r1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	462b      	mov	r3, r5
 800a4b8:	bfbb      	ittet	lt
 800a4ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4be:	461d      	movlt	r5, r3
 800a4c0:	2300      	movge	r3, #0
 800a4c2:	232d      	movlt	r3, #45	; 0x2d
 800a4c4:	700b      	strb	r3, [r1, #0]
 800a4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4cc:	4691      	mov	r9, r2
 800a4ce:	f023 0820 	bic.w	r8, r3, #32
 800a4d2:	bfbc      	itt	lt
 800a4d4:	4622      	movlt	r2, r4
 800a4d6:	4614      	movlt	r4, r2
 800a4d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4dc:	d005      	beq.n	800a4ea <__cvt+0x42>
 800a4de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4e2:	d100      	bne.n	800a4e6 <__cvt+0x3e>
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	2102      	movs	r1, #2
 800a4e8:	e000      	b.n	800a4ec <__cvt+0x44>
 800a4ea:	2103      	movs	r1, #3
 800a4ec:	ab03      	add	r3, sp, #12
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	ab02      	add	r3, sp, #8
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	ec45 4b10 	vmov	d0, r4, r5
 800a4f8:	4653      	mov	r3, sl
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	f001 ff68 	bl	800c3d0 <_dtoa_r>
 800a500:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a504:	4607      	mov	r7, r0
 800a506:	d102      	bne.n	800a50e <__cvt+0x66>
 800a508:	f019 0f01 	tst.w	r9, #1
 800a50c:	d022      	beq.n	800a554 <__cvt+0xac>
 800a50e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a512:	eb07 0906 	add.w	r9, r7, r6
 800a516:	d110      	bne.n	800a53a <__cvt+0x92>
 800a518:	783b      	ldrb	r3, [r7, #0]
 800a51a:	2b30      	cmp	r3, #48	; 0x30
 800a51c:	d10a      	bne.n	800a534 <__cvt+0x8c>
 800a51e:	2200      	movs	r2, #0
 800a520:	2300      	movs	r3, #0
 800a522:	4620      	mov	r0, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7f6 fb07 	bl	8000b38 <__aeabi_dcmpeq>
 800a52a:	b918      	cbnz	r0, 800a534 <__cvt+0x8c>
 800a52c:	f1c6 0601 	rsb	r6, r6, #1
 800a530:	f8ca 6000 	str.w	r6, [sl]
 800a534:	f8da 3000 	ldr.w	r3, [sl]
 800a538:	4499      	add	r9, r3
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 faf9 	bl	8000b38 <__aeabi_dcmpeq>
 800a546:	b108      	cbz	r0, 800a54c <__cvt+0xa4>
 800a548:	f8cd 900c 	str.w	r9, [sp, #12]
 800a54c:	2230      	movs	r2, #48	; 0x30
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	454b      	cmp	r3, r9
 800a552:	d307      	bcc.n	800a564 <__cvt+0xbc>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a558:	1bdb      	subs	r3, r3, r7
 800a55a:	4638      	mov	r0, r7
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	b004      	add	sp, #16
 800a560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a564:	1c59      	adds	r1, r3, #1
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	e7f0      	b.n	800a54e <__cvt+0xa6>

0800a56c <__exponent>:
 800a56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a56e:	4603      	mov	r3, r0
 800a570:	2900      	cmp	r1, #0
 800a572:	bfb8      	it	lt
 800a574:	4249      	neglt	r1, r1
 800a576:	f803 2b02 	strb.w	r2, [r3], #2
 800a57a:	bfb4      	ite	lt
 800a57c:	222d      	movlt	r2, #45	; 0x2d
 800a57e:	222b      	movge	r2, #43	; 0x2b
 800a580:	2909      	cmp	r1, #9
 800a582:	7042      	strb	r2, [r0, #1]
 800a584:	dd2a      	ble.n	800a5dc <__exponent+0x70>
 800a586:	f10d 0407 	add.w	r4, sp, #7
 800a58a:	46a4      	mov	ip, r4
 800a58c:	270a      	movs	r7, #10
 800a58e:	46a6      	mov	lr, r4
 800a590:	460a      	mov	r2, r1
 800a592:	fb91 f6f7 	sdiv	r6, r1, r7
 800a596:	fb07 1516 	mls	r5, r7, r6, r1
 800a59a:	3530      	adds	r5, #48	; 0x30
 800a59c:	2a63      	cmp	r2, #99	; 0x63
 800a59e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	dcf1      	bgt.n	800a58e <__exponent+0x22>
 800a5aa:	3130      	adds	r1, #48	; 0x30
 800a5ac:	f1ae 0502 	sub.w	r5, lr, #2
 800a5b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5b4:	1c44      	adds	r4, r0, #1
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4561      	cmp	r1, ip
 800a5ba:	d30a      	bcc.n	800a5d2 <__exponent+0x66>
 800a5bc:	f10d 0209 	add.w	r2, sp, #9
 800a5c0:	eba2 020e 	sub.w	r2, r2, lr
 800a5c4:	4565      	cmp	r5, ip
 800a5c6:	bf88      	it	hi
 800a5c8:	2200      	movhi	r2, #0
 800a5ca:	4413      	add	r3, r2
 800a5cc:	1a18      	subs	r0, r3, r0
 800a5ce:	b003      	add	sp, #12
 800a5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5da:	e7ed      	b.n	800a5b8 <__exponent+0x4c>
 800a5dc:	2330      	movs	r3, #48	; 0x30
 800a5de:	3130      	adds	r1, #48	; 0x30
 800a5e0:	7083      	strb	r3, [r0, #2]
 800a5e2:	70c1      	strb	r1, [r0, #3]
 800a5e4:	1d03      	adds	r3, r0, #4
 800a5e6:	e7f1      	b.n	800a5cc <__exponent+0x60>

0800a5e8 <_printf_float>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	ed2d 8b02 	vpush	{d8}
 800a5f0:	b08d      	sub	sp, #52	; 0x34
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	f003 f855 	bl	800d6ac <_localeconv_r>
 800a602:	f8d0 a000 	ldr.w	sl, [r0]
 800a606:	4650      	mov	r0, sl
 800a608:	f7f5 fe14 	bl	8000234 <strlen>
 800a60c:	2300      	movs	r3, #0
 800a60e:	930a      	str	r3, [sp, #40]	; 0x28
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	f8d8 3000 	ldr.w	r3, [r8]
 800a618:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a61c:	3307      	adds	r3, #7
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	f103 0208 	add.w	r2, r3, #8
 800a626:	f8c8 2000 	str.w	r2, [r8]
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a632:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a63a:	9307      	str	r3, [sp, #28]
 800a63c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a640:	ee08 0a10 	vmov	s16, r0
 800a644:	4b9f      	ldr	r3, [pc, #636]	; (800a8c4 <_printf_float+0x2dc>)
 800a646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a64a:	f04f 32ff 	mov.w	r2, #4294967295
 800a64e:	f7f6 faa5 	bl	8000b9c <__aeabi_dcmpun>
 800a652:	bb88      	cbnz	r0, 800a6b8 <_printf_float+0xd0>
 800a654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a658:	4b9a      	ldr	r3, [pc, #616]	; (800a8c4 <_printf_float+0x2dc>)
 800a65a:	f04f 32ff 	mov.w	r2, #4294967295
 800a65e:	f7f6 fa7f 	bl	8000b60 <__aeabi_dcmple>
 800a662:	bb48      	cbnz	r0, 800a6b8 <_printf_float+0xd0>
 800a664:	2200      	movs	r2, #0
 800a666:	2300      	movs	r3, #0
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f6 fa6e 	bl	8000b4c <__aeabi_dcmplt>
 800a670:	b110      	cbz	r0, 800a678 <_printf_float+0x90>
 800a672:	232d      	movs	r3, #45	; 0x2d
 800a674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a678:	4b93      	ldr	r3, [pc, #588]	; (800a8c8 <_printf_float+0x2e0>)
 800a67a:	4894      	ldr	r0, [pc, #592]	; (800a8cc <_printf_float+0x2e4>)
 800a67c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a680:	bf94      	ite	ls
 800a682:	4698      	movls	r8, r3
 800a684:	4680      	movhi	r8, r0
 800a686:	2303      	movs	r3, #3
 800a688:	6123      	str	r3, [r4, #16]
 800a68a:	9b05      	ldr	r3, [sp, #20]
 800a68c:	f023 0204 	bic.w	r2, r3, #4
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	f04f 0900 	mov.w	r9, #0
 800a696:	9700      	str	r7, [sp, #0]
 800a698:	4633      	mov	r3, r6
 800a69a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 f9d8 	bl	800aa54 <_printf_common>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f040 8090 	bne.w	800a7ca <_printf_float+0x1e2>
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ae:	b00d      	add	sp, #52	; 0x34
 800a6b0:	ecbd 8b02 	vpop	{d8}
 800a6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	464b      	mov	r3, r9
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4649      	mov	r1, r9
 800a6c0:	f7f6 fa6c 	bl	8000b9c <__aeabi_dcmpun>
 800a6c4:	b140      	cbz	r0, 800a6d8 <_printf_float+0xf0>
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bfbc      	itt	lt
 800a6cc:	232d      	movlt	r3, #45	; 0x2d
 800a6ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6d2:	487f      	ldr	r0, [pc, #508]	; (800a8d0 <_printf_float+0x2e8>)
 800a6d4:	4b7f      	ldr	r3, [pc, #508]	; (800a8d4 <_printf_float+0x2ec>)
 800a6d6:	e7d1      	b.n	800a67c <_printf_float+0x94>
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6de:	9206      	str	r2, [sp, #24]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	d13f      	bne.n	800a764 <_printf_float+0x17c>
 800a6e4:	2306      	movs	r3, #6
 800a6e6:	6063      	str	r3, [r4, #4]
 800a6e8:	9b05      	ldr	r3, [sp, #20]
 800a6ea:	6861      	ldr	r1, [r4, #4]
 800a6ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	ab0a      	add	r3, sp, #40	; 0x28
 800a6f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6fa:	ab09      	add	r3, sp, #36	; 0x24
 800a6fc:	ec49 8b10 	vmov	d0, r8, r9
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	6022      	str	r2, [r4, #0]
 800a704:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a708:	4628      	mov	r0, r5
 800a70a:	f7ff fecd 	bl	800a4a8 <__cvt>
 800a70e:	9b06      	ldr	r3, [sp, #24]
 800a710:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a712:	2b47      	cmp	r3, #71	; 0x47
 800a714:	4680      	mov	r8, r0
 800a716:	d108      	bne.n	800a72a <_printf_float+0x142>
 800a718:	1cc8      	adds	r0, r1, #3
 800a71a:	db02      	blt.n	800a722 <_printf_float+0x13a>
 800a71c:	6863      	ldr	r3, [r4, #4]
 800a71e:	4299      	cmp	r1, r3
 800a720:	dd41      	ble.n	800a7a6 <_printf_float+0x1be>
 800a722:	f1ab 0b02 	sub.w	fp, fp, #2
 800a726:	fa5f fb8b 	uxtb.w	fp, fp
 800a72a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a72e:	d820      	bhi.n	800a772 <_printf_float+0x18a>
 800a730:	3901      	subs	r1, #1
 800a732:	465a      	mov	r2, fp
 800a734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a738:	9109      	str	r1, [sp, #36]	; 0x24
 800a73a:	f7ff ff17 	bl	800a56c <__exponent>
 800a73e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a740:	1813      	adds	r3, r2, r0
 800a742:	2a01      	cmp	r2, #1
 800a744:	4681      	mov	r9, r0
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	dc02      	bgt.n	800a750 <_printf_float+0x168>
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	07d2      	lsls	r2, r2, #31
 800a74e:	d501      	bpl.n	800a754 <_printf_float+0x16c>
 800a750:	3301      	adds	r3, #1
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d09c      	beq.n	800a696 <_printf_float+0xae>
 800a75c:	232d      	movs	r3, #45	; 0x2d
 800a75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a762:	e798      	b.n	800a696 <_printf_float+0xae>
 800a764:	9a06      	ldr	r2, [sp, #24]
 800a766:	2a47      	cmp	r2, #71	; 0x47
 800a768:	d1be      	bne.n	800a6e8 <_printf_float+0x100>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1bc      	bne.n	800a6e8 <_printf_float+0x100>
 800a76e:	2301      	movs	r3, #1
 800a770:	e7b9      	b.n	800a6e6 <_printf_float+0xfe>
 800a772:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a776:	d118      	bne.n	800a7aa <_printf_float+0x1c2>
 800a778:	2900      	cmp	r1, #0
 800a77a:	6863      	ldr	r3, [r4, #4]
 800a77c:	dd0b      	ble.n	800a796 <_printf_float+0x1ae>
 800a77e:	6121      	str	r1, [r4, #16]
 800a780:	b913      	cbnz	r3, 800a788 <_printf_float+0x1a0>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	07d0      	lsls	r0, r2, #31
 800a786:	d502      	bpl.n	800a78e <_printf_float+0x1a6>
 800a788:	3301      	adds	r3, #1
 800a78a:	440b      	add	r3, r1
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a790:	f04f 0900 	mov.w	r9, #0
 800a794:	e7de      	b.n	800a754 <_printf_float+0x16c>
 800a796:	b913      	cbnz	r3, 800a79e <_printf_float+0x1b6>
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	07d2      	lsls	r2, r2, #31
 800a79c:	d501      	bpl.n	800a7a2 <_printf_float+0x1ba>
 800a79e:	3302      	adds	r3, #2
 800a7a0:	e7f4      	b.n	800a78c <_printf_float+0x1a4>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e7f2      	b.n	800a78c <_printf_float+0x1a4>
 800a7a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	db05      	blt.n	800a7bc <_printf_float+0x1d4>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	6121      	str	r1, [r4, #16]
 800a7b4:	07d8      	lsls	r0, r3, #31
 800a7b6:	d5ea      	bpl.n	800a78e <_printf_float+0x1a6>
 800a7b8:	1c4b      	adds	r3, r1, #1
 800a7ba:	e7e7      	b.n	800a78c <_printf_float+0x1a4>
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	bfd4      	ite	le
 800a7c0:	f1c1 0202 	rsble	r2, r1, #2
 800a7c4:	2201      	movgt	r2, #1
 800a7c6:	4413      	add	r3, r2
 800a7c8:	e7e0      	b.n	800a78c <_printf_float+0x1a4>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	055a      	lsls	r2, r3, #21
 800a7ce:	d407      	bmi.n	800a7e0 <_printf_float+0x1f8>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	4642      	mov	r2, r8
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	d12c      	bne.n	800a838 <_printf_float+0x250>
 800a7de:	e764      	b.n	800a6aa <_printf_float+0xc2>
 800a7e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7e4:	f240 80e0 	bls.w	800a9a8 <_printf_float+0x3c0>
 800a7e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f7f6 f9a2 	bl	8000b38 <__aeabi_dcmpeq>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d034      	beq.n	800a862 <_printf_float+0x27a>
 800a7f8:	4a37      	ldr	r2, [pc, #220]	; (800a8d8 <_printf_float+0x2f0>)
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	f43f af51 	beq.w	800a6aa <_printf_float+0xc2>
 800a808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a80c:	429a      	cmp	r2, r3
 800a80e:	db02      	blt.n	800a816 <_printf_float+0x22e>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	07d8      	lsls	r0, r3, #31
 800a814:	d510      	bpl.n	800a838 <_printf_float+0x250>
 800a816:	ee18 3a10 	vmov	r3, s16
 800a81a:	4652      	mov	r2, sl
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	f43f af41 	beq.w	800a6aa <_printf_float+0xc2>
 800a828:	f04f 0800 	mov.w	r8, #0
 800a82c:	f104 091a 	add.w	r9, r4, #26
 800a830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a832:	3b01      	subs	r3, #1
 800a834:	4543      	cmp	r3, r8
 800a836:	dc09      	bgt.n	800a84c <_printf_float+0x264>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	079b      	lsls	r3, r3, #30
 800a83c:	f100 8105 	bmi.w	800aa4a <_printf_float+0x462>
 800a840:	68e0      	ldr	r0, [r4, #12]
 800a842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a844:	4298      	cmp	r0, r3
 800a846:	bfb8      	it	lt
 800a848:	4618      	movlt	r0, r3
 800a84a:	e730      	b.n	800a6ae <_printf_float+0xc6>
 800a84c:	2301      	movs	r3, #1
 800a84e:	464a      	mov	r2, r9
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af27 	beq.w	800a6aa <_printf_float+0xc2>
 800a85c:	f108 0801 	add.w	r8, r8, #1
 800a860:	e7e6      	b.n	800a830 <_printf_float+0x248>
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	dc39      	bgt.n	800a8dc <_printf_float+0x2f4>
 800a868:	4a1b      	ldr	r2, [pc, #108]	; (800a8d8 <_printf_float+0x2f0>)
 800a86a:	2301      	movs	r3, #1
 800a86c:	4631      	mov	r1, r6
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f af19 	beq.w	800a6aa <_printf_float+0xc2>
 800a878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a87c:	4313      	orrs	r3, r2
 800a87e:	d102      	bne.n	800a886 <_printf_float+0x29e>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	07d9      	lsls	r1, r3, #31
 800a884:	d5d8      	bpl.n	800a838 <_printf_float+0x250>
 800a886:	ee18 3a10 	vmov	r3, s16
 800a88a:	4652      	mov	r2, sl
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af09 	beq.w	800a6aa <_printf_float+0xc2>
 800a898:	f04f 0900 	mov.w	r9, #0
 800a89c:	f104 0a1a 	add.w	sl, r4, #26
 800a8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a2:	425b      	negs	r3, r3
 800a8a4:	454b      	cmp	r3, r9
 800a8a6:	dc01      	bgt.n	800a8ac <_printf_float+0x2c4>
 800a8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8aa:	e792      	b.n	800a7d2 <_printf_float+0x1ea>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4652      	mov	r2, sl
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	47b8      	blx	r7
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f43f aef7 	beq.w	800a6aa <_printf_float+0xc2>
 800a8bc:	f109 0901 	add.w	r9, r9, #1
 800a8c0:	e7ee      	b.n	800a8a0 <_printf_float+0x2b8>
 800a8c2:	bf00      	nop
 800a8c4:	7fefffff 	.word	0x7fefffff
 800a8c8:	080103d0 	.word	0x080103d0
 800a8cc:	080103d4 	.word	0x080103d4
 800a8d0:	080103dc 	.word	0x080103dc
 800a8d4:	080103d8 	.word	0x080103d8
 800a8d8:	080103e0 	.word	0x080103e0
 800a8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	bfa8      	it	ge
 800a8e4:	461a      	movge	r2, r3
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	4691      	mov	r9, r2
 800a8ea:	dc37      	bgt.n	800a95c <_printf_float+0x374>
 800a8ec:	f04f 0b00 	mov.w	fp, #0
 800a8f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8f4:	f104 021a 	add.w	r2, r4, #26
 800a8f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	eba3 0309 	sub.w	r3, r3, r9
 800a900:	455b      	cmp	r3, fp
 800a902:	dc33      	bgt.n	800a96c <_printf_float+0x384>
 800a904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a908:	429a      	cmp	r2, r3
 800a90a:	db3b      	blt.n	800a984 <_printf_float+0x39c>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d438      	bmi.n	800a984 <_printf_float+0x39c>
 800a912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	eba2 0901 	sub.w	r9, r2, r1
 800a91e:	4599      	cmp	r9, r3
 800a920:	bfa8      	it	ge
 800a922:	4699      	movge	r9, r3
 800a924:	f1b9 0f00 	cmp.w	r9, #0
 800a928:	dc35      	bgt.n	800a996 <_printf_float+0x3ae>
 800a92a:	f04f 0800 	mov.w	r8, #0
 800a92e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a932:	f104 0a1a 	add.w	sl, r4, #26
 800a936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	eba3 0309 	sub.w	r3, r3, r9
 800a940:	4543      	cmp	r3, r8
 800a942:	f77f af79 	ble.w	800a838 <_printf_float+0x250>
 800a946:	2301      	movs	r3, #1
 800a948:	4652      	mov	r2, sl
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f aeaa 	beq.w	800a6aa <_printf_float+0xc2>
 800a956:	f108 0801 	add.w	r8, r8, #1
 800a95a:	e7ec      	b.n	800a936 <_printf_float+0x34e>
 800a95c:	4613      	mov	r3, r2
 800a95e:	4631      	mov	r1, r6
 800a960:	4642      	mov	r2, r8
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	d1c0      	bne.n	800a8ec <_printf_float+0x304>
 800a96a:	e69e      	b.n	800a6aa <_printf_float+0xc2>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	9205      	str	r2, [sp, #20]
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f ae97 	beq.w	800a6aa <_printf_float+0xc2>
 800a97c:	9a05      	ldr	r2, [sp, #20]
 800a97e:	f10b 0b01 	add.w	fp, fp, #1
 800a982:	e7b9      	b.n	800a8f8 <_printf_float+0x310>
 800a984:	ee18 3a10 	vmov	r3, s16
 800a988:	4652      	mov	r2, sl
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	47b8      	blx	r7
 800a990:	3001      	adds	r0, #1
 800a992:	d1be      	bne.n	800a912 <_printf_float+0x32a>
 800a994:	e689      	b.n	800a6aa <_printf_float+0xc2>
 800a996:	9a05      	ldr	r2, [sp, #20]
 800a998:	464b      	mov	r3, r9
 800a99a:	4442      	add	r2, r8
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	d1c1      	bne.n	800a92a <_printf_float+0x342>
 800a9a6:	e680      	b.n	800a6aa <_printf_float+0xc2>
 800a9a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9aa:	2a01      	cmp	r2, #1
 800a9ac:	dc01      	bgt.n	800a9b2 <_printf_float+0x3ca>
 800a9ae:	07db      	lsls	r3, r3, #31
 800a9b0:	d538      	bpl.n	800aa24 <_printf_float+0x43c>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	f43f ae74 	beq.w	800a6aa <_printf_float+0xc2>
 800a9c2:	ee18 3a10 	vmov	r3, s16
 800a9c6:	4652      	mov	r2, sl
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	47b8      	blx	r7
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f43f ae6b 	beq.w	800a6aa <_printf_float+0xc2>
 800a9d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f7f6 f8ac 	bl	8000b38 <__aeabi_dcmpeq>
 800a9e0:	b9d8      	cbnz	r0, 800aa1a <_printf_float+0x432>
 800a9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e4:	f108 0201 	add.w	r2, r8, #1
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b8      	blx	r7
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d10e      	bne.n	800aa12 <_printf_float+0x42a>
 800a9f4:	e659      	b.n	800a6aa <_printf_float+0xc2>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	f43f ae52 	beq.w	800a6aa <_printf_float+0xc2>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	4543      	cmp	r3, r8
 800aa10:	dcf1      	bgt.n	800a9f6 <_printf_float+0x40e>
 800aa12:	464b      	mov	r3, r9
 800aa14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa18:	e6dc      	b.n	800a7d4 <_printf_float+0x1ec>
 800aa1a:	f04f 0800 	mov.w	r8, #0
 800aa1e:	f104 0a1a 	add.w	sl, r4, #26
 800aa22:	e7f2      	b.n	800aa0a <_printf_float+0x422>
 800aa24:	2301      	movs	r3, #1
 800aa26:	4642      	mov	r2, r8
 800aa28:	e7df      	b.n	800a9ea <_printf_float+0x402>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	464a      	mov	r2, r9
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b8      	blx	r7
 800aa34:	3001      	adds	r0, #1
 800aa36:	f43f ae38 	beq.w	800a6aa <_printf_float+0xc2>
 800aa3a:	f108 0801 	add.w	r8, r8, #1
 800aa3e:	68e3      	ldr	r3, [r4, #12]
 800aa40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa42:	1a5b      	subs	r3, r3, r1
 800aa44:	4543      	cmp	r3, r8
 800aa46:	dcf0      	bgt.n	800aa2a <_printf_float+0x442>
 800aa48:	e6fa      	b.n	800a840 <_printf_float+0x258>
 800aa4a:	f04f 0800 	mov.w	r8, #0
 800aa4e:	f104 0919 	add.w	r9, r4, #25
 800aa52:	e7f4      	b.n	800aa3e <_printf_float+0x456>

0800aa54 <_printf_common>:
 800aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	4616      	mov	r6, r2
 800aa5a:	4699      	mov	r9, r3
 800aa5c:	688a      	ldr	r2, [r1, #8]
 800aa5e:	690b      	ldr	r3, [r1, #16]
 800aa60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa64:	4293      	cmp	r3, r2
 800aa66:	bfb8      	it	lt
 800aa68:	4613      	movlt	r3, r2
 800aa6a:	6033      	str	r3, [r6, #0]
 800aa6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa70:	4607      	mov	r7, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	b10a      	cbz	r2, 800aa7a <_printf_common+0x26>
 800aa76:	3301      	adds	r3, #1
 800aa78:	6033      	str	r3, [r6, #0]
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	0699      	lsls	r1, r3, #26
 800aa7e:	bf42      	ittt	mi
 800aa80:	6833      	ldrmi	r3, [r6, #0]
 800aa82:	3302      	addmi	r3, #2
 800aa84:	6033      	strmi	r3, [r6, #0]
 800aa86:	6825      	ldr	r5, [r4, #0]
 800aa88:	f015 0506 	ands.w	r5, r5, #6
 800aa8c:	d106      	bne.n	800aa9c <_printf_common+0x48>
 800aa8e:	f104 0a19 	add.w	sl, r4, #25
 800aa92:	68e3      	ldr	r3, [r4, #12]
 800aa94:	6832      	ldr	r2, [r6, #0]
 800aa96:	1a9b      	subs	r3, r3, r2
 800aa98:	42ab      	cmp	r3, r5
 800aa9a:	dc26      	bgt.n	800aaea <_printf_common+0x96>
 800aa9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaa0:	1e13      	subs	r3, r2, #0
 800aaa2:	6822      	ldr	r2, [r4, #0]
 800aaa4:	bf18      	it	ne
 800aaa6:	2301      	movne	r3, #1
 800aaa8:	0692      	lsls	r2, r2, #26
 800aaaa:	d42b      	bmi.n	800ab04 <_printf_common+0xb0>
 800aaac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aab0:	4649      	mov	r1, r9
 800aab2:	4638      	mov	r0, r7
 800aab4:	47c0      	blx	r8
 800aab6:	3001      	adds	r0, #1
 800aab8:	d01e      	beq.n	800aaf8 <_printf_common+0xa4>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	68e5      	ldr	r5, [r4, #12]
 800aabe:	6832      	ldr	r2, [r6, #0]
 800aac0:	f003 0306 	and.w	r3, r3, #6
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	bf08      	it	eq
 800aac8:	1aad      	subeq	r5, r5, r2
 800aaca:	68a3      	ldr	r3, [r4, #8]
 800aacc:	6922      	ldr	r2, [r4, #16]
 800aace:	bf0c      	ite	eq
 800aad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad4:	2500      	movne	r5, #0
 800aad6:	4293      	cmp	r3, r2
 800aad8:	bfc4      	itt	gt
 800aada:	1a9b      	subgt	r3, r3, r2
 800aadc:	18ed      	addgt	r5, r5, r3
 800aade:	2600      	movs	r6, #0
 800aae0:	341a      	adds	r4, #26
 800aae2:	42b5      	cmp	r5, r6
 800aae4:	d11a      	bne.n	800ab1c <_printf_common+0xc8>
 800aae6:	2000      	movs	r0, #0
 800aae8:	e008      	b.n	800aafc <_printf_common+0xa8>
 800aaea:	2301      	movs	r3, #1
 800aaec:	4652      	mov	r2, sl
 800aaee:	4649      	mov	r1, r9
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	47c0      	blx	r8
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d103      	bne.n	800ab00 <_printf_common+0xac>
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab00:	3501      	adds	r5, #1
 800ab02:	e7c6      	b.n	800aa92 <_printf_common+0x3e>
 800ab04:	18e1      	adds	r1, r4, r3
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	2030      	movs	r0, #48	; 0x30
 800ab0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab0e:	4422      	add	r2, r4
 800ab10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab18:	3302      	adds	r3, #2
 800ab1a:	e7c7      	b.n	800aaac <_printf_common+0x58>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4649      	mov	r1, r9
 800ab22:	4638      	mov	r0, r7
 800ab24:	47c0      	blx	r8
 800ab26:	3001      	adds	r0, #1
 800ab28:	d0e6      	beq.n	800aaf8 <_printf_common+0xa4>
 800ab2a:	3601      	adds	r6, #1
 800ab2c:	e7d9      	b.n	800aae2 <_printf_common+0x8e>
	...

0800ab30 <_printf_i>:
 800ab30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	4691      	mov	r9, r2
 800ab38:	7e27      	ldrb	r7, [r4, #24]
 800ab3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab3c:	2f78      	cmp	r7, #120	; 0x78
 800ab3e:	4680      	mov	r8, r0
 800ab40:	469a      	mov	sl, r3
 800ab42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab46:	d807      	bhi.n	800ab58 <_printf_i+0x28>
 800ab48:	2f62      	cmp	r7, #98	; 0x62
 800ab4a:	d80a      	bhi.n	800ab62 <_printf_i+0x32>
 800ab4c:	2f00      	cmp	r7, #0
 800ab4e:	f000 80d8 	beq.w	800ad02 <_printf_i+0x1d2>
 800ab52:	2f58      	cmp	r7, #88	; 0x58
 800ab54:	f000 80a3 	beq.w	800ac9e <_printf_i+0x16e>
 800ab58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab60:	e03a      	b.n	800abd8 <_printf_i+0xa8>
 800ab62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab66:	2b15      	cmp	r3, #21
 800ab68:	d8f6      	bhi.n	800ab58 <_printf_i+0x28>
 800ab6a:	a001      	add	r0, pc, #4	; (adr r0, 800ab70 <_printf_i+0x40>)
 800ab6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab70:	0800abc9 	.word	0x0800abc9
 800ab74:	0800abdd 	.word	0x0800abdd
 800ab78:	0800ab59 	.word	0x0800ab59
 800ab7c:	0800ab59 	.word	0x0800ab59
 800ab80:	0800ab59 	.word	0x0800ab59
 800ab84:	0800ab59 	.word	0x0800ab59
 800ab88:	0800abdd 	.word	0x0800abdd
 800ab8c:	0800ab59 	.word	0x0800ab59
 800ab90:	0800ab59 	.word	0x0800ab59
 800ab94:	0800ab59 	.word	0x0800ab59
 800ab98:	0800ab59 	.word	0x0800ab59
 800ab9c:	0800ace9 	.word	0x0800ace9
 800aba0:	0800ac0d 	.word	0x0800ac0d
 800aba4:	0800accb 	.word	0x0800accb
 800aba8:	0800ab59 	.word	0x0800ab59
 800abac:	0800ab59 	.word	0x0800ab59
 800abb0:	0800ad0b 	.word	0x0800ad0b
 800abb4:	0800ab59 	.word	0x0800ab59
 800abb8:	0800ac0d 	.word	0x0800ac0d
 800abbc:	0800ab59 	.word	0x0800ab59
 800abc0:	0800ab59 	.word	0x0800ab59
 800abc4:	0800acd3 	.word	0x0800acd3
 800abc8:	680b      	ldr	r3, [r1, #0]
 800abca:	1d1a      	adds	r2, r3, #4
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	600a      	str	r2, [r1, #0]
 800abd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abd8:	2301      	movs	r3, #1
 800abda:	e0a3      	b.n	800ad24 <_printf_i+0x1f4>
 800abdc:	6825      	ldr	r5, [r4, #0]
 800abde:	6808      	ldr	r0, [r1, #0]
 800abe0:	062e      	lsls	r6, r5, #24
 800abe2:	f100 0304 	add.w	r3, r0, #4
 800abe6:	d50a      	bpl.n	800abfe <_printf_i+0xce>
 800abe8:	6805      	ldr	r5, [r0, #0]
 800abea:	600b      	str	r3, [r1, #0]
 800abec:	2d00      	cmp	r5, #0
 800abee:	da03      	bge.n	800abf8 <_printf_i+0xc8>
 800abf0:	232d      	movs	r3, #45	; 0x2d
 800abf2:	426d      	negs	r5, r5
 800abf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf8:	485e      	ldr	r0, [pc, #376]	; (800ad74 <_printf_i+0x244>)
 800abfa:	230a      	movs	r3, #10
 800abfc:	e019      	b.n	800ac32 <_printf_i+0x102>
 800abfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac02:	6805      	ldr	r5, [r0, #0]
 800ac04:	600b      	str	r3, [r1, #0]
 800ac06:	bf18      	it	ne
 800ac08:	b22d      	sxthne	r5, r5
 800ac0a:	e7ef      	b.n	800abec <_printf_i+0xbc>
 800ac0c:	680b      	ldr	r3, [r1, #0]
 800ac0e:	6825      	ldr	r5, [r4, #0]
 800ac10:	1d18      	adds	r0, r3, #4
 800ac12:	6008      	str	r0, [r1, #0]
 800ac14:	0628      	lsls	r0, r5, #24
 800ac16:	d501      	bpl.n	800ac1c <_printf_i+0xec>
 800ac18:	681d      	ldr	r5, [r3, #0]
 800ac1a:	e002      	b.n	800ac22 <_printf_i+0xf2>
 800ac1c:	0669      	lsls	r1, r5, #25
 800ac1e:	d5fb      	bpl.n	800ac18 <_printf_i+0xe8>
 800ac20:	881d      	ldrh	r5, [r3, #0]
 800ac22:	4854      	ldr	r0, [pc, #336]	; (800ad74 <_printf_i+0x244>)
 800ac24:	2f6f      	cmp	r7, #111	; 0x6f
 800ac26:	bf0c      	ite	eq
 800ac28:	2308      	moveq	r3, #8
 800ac2a:	230a      	movne	r3, #10
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac32:	6866      	ldr	r6, [r4, #4]
 800ac34:	60a6      	str	r6, [r4, #8]
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	bfa2      	ittt	ge
 800ac3a:	6821      	ldrge	r1, [r4, #0]
 800ac3c:	f021 0104 	bicge.w	r1, r1, #4
 800ac40:	6021      	strge	r1, [r4, #0]
 800ac42:	b90d      	cbnz	r5, 800ac48 <_printf_i+0x118>
 800ac44:	2e00      	cmp	r6, #0
 800ac46:	d04d      	beq.n	800ace4 <_printf_i+0x1b4>
 800ac48:	4616      	mov	r6, r2
 800ac4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ac52:	5dc7      	ldrb	r7, [r0, r7]
 800ac54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac58:	462f      	mov	r7, r5
 800ac5a:	42bb      	cmp	r3, r7
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	d9f4      	bls.n	800ac4a <_printf_i+0x11a>
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d10b      	bne.n	800ac7c <_printf_i+0x14c>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	07df      	lsls	r7, r3, #31
 800ac68:	d508      	bpl.n	800ac7c <_printf_i+0x14c>
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	6861      	ldr	r1, [r4, #4]
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	bfde      	ittt	le
 800ac72:	2330      	movle	r3, #48	; 0x30
 800ac74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac7c:	1b92      	subs	r2, r2, r6
 800ac7e:	6122      	str	r2, [r4, #16]
 800ac80:	f8cd a000 	str.w	sl, [sp]
 800ac84:	464b      	mov	r3, r9
 800ac86:	aa03      	add	r2, sp, #12
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	f7ff fee2 	bl	800aa54 <_printf_common>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d14c      	bne.n	800ad2e <_printf_i+0x1fe>
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295
 800ac98:	b004      	add	sp, #16
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	4835      	ldr	r0, [pc, #212]	; (800ad74 <_printf_i+0x244>)
 800aca0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	680e      	ldr	r6, [r1, #0]
 800aca8:	061f      	lsls	r7, r3, #24
 800acaa:	f856 5b04 	ldr.w	r5, [r6], #4
 800acae:	600e      	str	r6, [r1, #0]
 800acb0:	d514      	bpl.n	800acdc <_printf_i+0x1ac>
 800acb2:	07d9      	lsls	r1, r3, #31
 800acb4:	bf44      	itt	mi
 800acb6:	f043 0320 	orrmi.w	r3, r3, #32
 800acba:	6023      	strmi	r3, [r4, #0]
 800acbc:	b91d      	cbnz	r5, 800acc6 <_printf_i+0x196>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f023 0320 	bic.w	r3, r3, #32
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	2310      	movs	r3, #16
 800acc8:	e7b0      	b.n	800ac2c <_printf_i+0xfc>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	f043 0320 	orr.w	r3, r3, #32
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	2378      	movs	r3, #120	; 0x78
 800acd4:	4828      	ldr	r0, [pc, #160]	; (800ad78 <_printf_i+0x248>)
 800acd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acda:	e7e3      	b.n	800aca4 <_printf_i+0x174>
 800acdc:	065e      	lsls	r6, r3, #25
 800acde:	bf48      	it	mi
 800ace0:	b2ad      	uxthmi	r5, r5
 800ace2:	e7e6      	b.n	800acb2 <_printf_i+0x182>
 800ace4:	4616      	mov	r6, r2
 800ace6:	e7bb      	b.n	800ac60 <_printf_i+0x130>
 800ace8:	680b      	ldr	r3, [r1, #0]
 800acea:	6826      	ldr	r6, [r4, #0]
 800acec:	6960      	ldr	r0, [r4, #20]
 800acee:	1d1d      	adds	r5, r3, #4
 800acf0:	600d      	str	r5, [r1, #0]
 800acf2:	0635      	lsls	r5, r6, #24
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	d501      	bpl.n	800acfc <_printf_i+0x1cc>
 800acf8:	6018      	str	r0, [r3, #0]
 800acfa:	e002      	b.n	800ad02 <_printf_i+0x1d2>
 800acfc:	0671      	lsls	r1, r6, #25
 800acfe:	d5fb      	bpl.n	800acf8 <_printf_i+0x1c8>
 800ad00:	8018      	strh	r0, [r3, #0]
 800ad02:	2300      	movs	r3, #0
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	4616      	mov	r6, r2
 800ad08:	e7ba      	b.n	800ac80 <_printf_i+0x150>
 800ad0a:	680b      	ldr	r3, [r1, #0]
 800ad0c:	1d1a      	adds	r2, r3, #4
 800ad0e:	600a      	str	r2, [r1, #0]
 800ad10:	681e      	ldr	r6, [r3, #0]
 800ad12:	6862      	ldr	r2, [r4, #4]
 800ad14:	2100      	movs	r1, #0
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7f5 fa9a 	bl	8000250 <memchr>
 800ad1c:	b108      	cbz	r0, 800ad22 <_printf_i+0x1f2>
 800ad1e:	1b80      	subs	r0, r0, r6
 800ad20:	6060      	str	r0, [r4, #4]
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	2300      	movs	r3, #0
 800ad28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad2c:	e7a8      	b.n	800ac80 <_printf_i+0x150>
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	4632      	mov	r2, r6
 800ad32:	4649      	mov	r1, r9
 800ad34:	4640      	mov	r0, r8
 800ad36:	47d0      	blx	sl
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d0ab      	beq.n	800ac94 <_printf_i+0x164>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	079b      	lsls	r3, r3, #30
 800ad40:	d413      	bmi.n	800ad6a <_printf_i+0x23a>
 800ad42:	68e0      	ldr	r0, [r4, #12]
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	4298      	cmp	r0, r3
 800ad48:	bfb8      	it	lt
 800ad4a:	4618      	movlt	r0, r3
 800ad4c:	e7a4      	b.n	800ac98 <_printf_i+0x168>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4632      	mov	r2, r6
 800ad52:	4649      	mov	r1, r9
 800ad54:	4640      	mov	r0, r8
 800ad56:	47d0      	blx	sl
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d09b      	beq.n	800ac94 <_printf_i+0x164>
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	9903      	ldr	r1, [sp, #12]
 800ad62:	1a5b      	subs	r3, r3, r1
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dcf2      	bgt.n	800ad4e <_printf_i+0x21e>
 800ad68:	e7eb      	b.n	800ad42 <_printf_i+0x212>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	f104 0619 	add.w	r6, r4, #25
 800ad70:	e7f5      	b.n	800ad5e <_printf_i+0x22e>
 800ad72:	bf00      	nop
 800ad74:	080103e2 	.word	0x080103e2
 800ad78:	080103f3 	.word	0x080103f3

0800ad7c <_scanf_float>:
 800ad7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad80:	b087      	sub	sp, #28
 800ad82:	4617      	mov	r7, r2
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	688b      	ldr	r3, [r1, #8]
 800ad88:	1e5a      	subs	r2, r3, #1
 800ad8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad8e:	bf83      	ittte	hi
 800ad90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad94:	195b      	addhi	r3, r3, r5
 800ad96:	9302      	strhi	r3, [sp, #8]
 800ad98:	2300      	movls	r3, #0
 800ad9a:	bf86      	itte	hi
 800ad9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ada0:	608b      	strhi	r3, [r1, #8]
 800ada2:	9302      	strls	r3, [sp, #8]
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	468b      	mov	fp, r1
 800ada8:	2500      	movs	r5, #0
 800adaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800adae:	f84b 3b1c 	str.w	r3, [fp], #28
 800adb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800adb6:	4680      	mov	r8, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	465e      	mov	r6, fp
 800adbc:	46aa      	mov	sl, r5
 800adbe:	46a9      	mov	r9, r5
 800adc0:	9501      	str	r5, [sp, #4]
 800adc2:	68a2      	ldr	r2, [r4, #8]
 800adc4:	b152      	cbz	r2, 800addc <_scanf_float+0x60>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b4e      	cmp	r3, #78	; 0x4e
 800adcc:	d864      	bhi.n	800ae98 <_scanf_float+0x11c>
 800adce:	2b40      	cmp	r3, #64	; 0x40
 800add0:	d83c      	bhi.n	800ae4c <_scanf_float+0xd0>
 800add2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800add6:	b2c8      	uxtb	r0, r1
 800add8:	280e      	cmp	r0, #14
 800adda:	d93a      	bls.n	800ae52 <_scanf_float+0xd6>
 800addc:	f1b9 0f00 	cmp.w	r9, #0
 800ade0:	d003      	beq.n	800adea <_scanf_float+0x6e>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adee:	f1ba 0f01 	cmp.w	sl, #1
 800adf2:	f200 8113 	bhi.w	800b01c <_scanf_float+0x2a0>
 800adf6:	455e      	cmp	r6, fp
 800adf8:	f200 8105 	bhi.w	800b006 <_scanf_float+0x28a>
 800adfc:	2501      	movs	r5, #1
 800adfe:	4628      	mov	r0, r5
 800ae00:	b007      	add	sp, #28
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ae0a:	2a0d      	cmp	r2, #13
 800ae0c:	d8e6      	bhi.n	800addc <_scanf_float+0x60>
 800ae0e:	a101      	add	r1, pc, #4	; (adr r1, 800ae14 <_scanf_float+0x98>)
 800ae10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae14:	0800af53 	.word	0x0800af53
 800ae18:	0800addd 	.word	0x0800addd
 800ae1c:	0800addd 	.word	0x0800addd
 800ae20:	0800addd 	.word	0x0800addd
 800ae24:	0800afb3 	.word	0x0800afb3
 800ae28:	0800af8b 	.word	0x0800af8b
 800ae2c:	0800addd 	.word	0x0800addd
 800ae30:	0800addd 	.word	0x0800addd
 800ae34:	0800af61 	.word	0x0800af61
 800ae38:	0800addd 	.word	0x0800addd
 800ae3c:	0800addd 	.word	0x0800addd
 800ae40:	0800addd 	.word	0x0800addd
 800ae44:	0800addd 	.word	0x0800addd
 800ae48:	0800af19 	.word	0x0800af19
 800ae4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae50:	e7db      	b.n	800ae0a <_scanf_float+0x8e>
 800ae52:	290e      	cmp	r1, #14
 800ae54:	d8c2      	bhi.n	800addc <_scanf_float+0x60>
 800ae56:	a001      	add	r0, pc, #4	; (adr r0, 800ae5c <_scanf_float+0xe0>)
 800ae58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae5c:	0800af0b 	.word	0x0800af0b
 800ae60:	0800addd 	.word	0x0800addd
 800ae64:	0800af0b 	.word	0x0800af0b
 800ae68:	0800af9f 	.word	0x0800af9f
 800ae6c:	0800addd 	.word	0x0800addd
 800ae70:	0800aeb9 	.word	0x0800aeb9
 800ae74:	0800aef5 	.word	0x0800aef5
 800ae78:	0800aef5 	.word	0x0800aef5
 800ae7c:	0800aef5 	.word	0x0800aef5
 800ae80:	0800aef5 	.word	0x0800aef5
 800ae84:	0800aef5 	.word	0x0800aef5
 800ae88:	0800aef5 	.word	0x0800aef5
 800ae8c:	0800aef5 	.word	0x0800aef5
 800ae90:	0800aef5 	.word	0x0800aef5
 800ae94:	0800aef5 	.word	0x0800aef5
 800ae98:	2b6e      	cmp	r3, #110	; 0x6e
 800ae9a:	d809      	bhi.n	800aeb0 <_scanf_float+0x134>
 800ae9c:	2b60      	cmp	r3, #96	; 0x60
 800ae9e:	d8b2      	bhi.n	800ae06 <_scanf_float+0x8a>
 800aea0:	2b54      	cmp	r3, #84	; 0x54
 800aea2:	d077      	beq.n	800af94 <_scanf_float+0x218>
 800aea4:	2b59      	cmp	r3, #89	; 0x59
 800aea6:	d199      	bne.n	800addc <_scanf_float+0x60>
 800aea8:	2d07      	cmp	r5, #7
 800aeaa:	d197      	bne.n	800addc <_scanf_float+0x60>
 800aeac:	2508      	movs	r5, #8
 800aeae:	e029      	b.n	800af04 <_scanf_float+0x188>
 800aeb0:	2b74      	cmp	r3, #116	; 0x74
 800aeb2:	d06f      	beq.n	800af94 <_scanf_float+0x218>
 800aeb4:	2b79      	cmp	r3, #121	; 0x79
 800aeb6:	e7f6      	b.n	800aea6 <_scanf_float+0x12a>
 800aeb8:	6821      	ldr	r1, [r4, #0]
 800aeba:	05c8      	lsls	r0, r1, #23
 800aebc:	d51a      	bpl.n	800aef4 <_scanf_float+0x178>
 800aebe:	9b02      	ldr	r3, [sp, #8]
 800aec0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aec4:	6021      	str	r1, [r4, #0]
 800aec6:	f109 0901 	add.w	r9, r9, #1
 800aeca:	b11b      	cbz	r3, 800aed4 <_scanf_float+0x158>
 800aecc:	3b01      	subs	r3, #1
 800aece:	3201      	adds	r2, #1
 800aed0:	9302      	str	r3, [sp, #8]
 800aed2:	60a2      	str	r2, [r4, #8]
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	60a3      	str	r3, [r4, #8]
 800aeda:	6923      	ldr	r3, [r4, #16]
 800aedc:	3301      	adds	r3, #1
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	607b      	str	r3, [r7, #4]
 800aee8:	f340 8084 	ble.w	800aff4 <_scanf_float+0x278>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	603b      	str	r3, [r7, #0]
 800aef2:	e766      	b.n	800adc2 <_scanf_float+0x46>
 800aef4:	eb1a 0f05 	cmn.w	sl, r5
 800aef8:	f47f af70 	bne.w	800addc <_scanf_float+0x60>
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800af02:	6022      	str	r2, [r4, #0]
 800af04:	f806 3b01 	strb.w	r3, [r6], #1
 800af08:	e7e4      	b.n	800aed4 <_scanf_float+0x158>
 800af0a:	6822      	ldr	r2, [r4, #0]
 800af0c:	0610      	lsls	r0, r2, #24
 800af0e:	f57f af65 	bpl.w	800addc <_scanf_float+0x60>
 800af12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af16:	e7f4      	b.n	800af02 <_scanf_float+0x186>
 800af18:	f1ba 0f00 	cmp.w	sl, #0
 800af1c:	d10e      	bne.n	800af3c <_scanf_float+0x1c0>
 800af1e:	f1b9 0f00 	cmp.w	r9, #0
 800af22:	d10e      	bne.n	800af42 <_scanf_float+0x1c6>
 800af24:	6822      	ldr	r2, [r4, #0]
 800af26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af2e:	d108      	bne.n	800af42 <_scanf_float+0x1c6>
 800af30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af34:	6022      	str	r2, [r4, #0]
 800af36:	f04f 0a01 	mov.w	sl, #1
 800af3a:	e7e3      	b.n	800af04 <_scanf_float+0x188>
 800af3c:	f1ba 0f02 	cmp.w	sl, #2
 800af40:	d055      	beq.n	800afee <_scanf_float+0x272>
 800af42:	2d01      	cmp	r5, #1
 800af44:	d002      	beq.n	800af4c <_scanf_float+0x1d0>
 800af46:	2d04      	cmp	r5, #4
 800af48:	f47f af48 	bne.w	800addc <_scanf_float+0x60>
 800af4c:	3501      	adds	r5, #1
 800af4e:	b2ed      	uxtb	r5, r5
 800af50:	e7d8      	b.n	800af04 <_scanf_float+0x188>
 800af52:	f1ba 0f01 	cmp.w	sl, #1
 800af56:	f47f af41 	bne.w	800addc <_scanf_float+0x60>
 800af5a:	f04f 0a02 	mov.w	sl, #2
 800af5e:	e7d1      	b.n	800af04 <_scanf_float+0x188>
 800af60:	b97d      	cbnz	r5, 800af82 <_scanf_float+0x206>
 800af62:	f1b9 0f00 	cmp.w	r9, #0
 800af66:	f47f af3c 	bne.w	800ade2 <_scanf_float+0x66>
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af74:	f47f af39 	bne.w	800adea <_scanf_float+0x6e>
 800af78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af7c:	6022      	str	r2, [r4, #0]
 800af7e:	2501      	movs	r5, #1
 800af80:	e7c0      	b.n	800af04 <_scanf_float+0x188>
 800af82:	2d03      	cmp	r5, #3
 800af84:	d0e2      	beq.n	800af4c <_scanf_float+0x1d0>
 800af86:	2d05      	cmp	r5, #5
 800af88:	e7de      	b.n	800af48 <_scanf_float+0x1cc>
 800af8a:	2d02      	cmp	r5, #2
 800af8c:	f47f af26 	bne.w	800addc <_scanf_float+0x60>
 800af90:	2503      	movs	r5, #3
 800af92:	e7b7      	b.n	800af04 <_scanf_float+0x188>
 800af94:	2d06      	cmp	r5, #6
 800af96:	f47f af21 	bne.w	800addc <_scanf_float+0x60>
 800af9a:	2507      	movs	r5, #7
 800af9c:	e7b2      	b.n	800af04 <_scanf_float+0x188>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	0591      	lsls	r1, r2, #22
 800afa2:	f57f af1b 	bpl.w	800addc <_scanf_float+0x60>
 800afa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800afaa:	6022      	str	r2, [r4, #0]
 800afac:	f8cd 9004 	str.w	r9, [sp, #4]
 800afb0:	e7a8      	b.n	800af04 <_scanf_float+0x188>
 800afb2:	6822      	ldr	r2, [r4, #0]
 800afb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800afb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800afbc:	d006      	beq.n	800afcc <_scanf_float+0x250>
 800afbe:	0550      	lsls	r0, r2, #21
 800afc0:	f57f af0c 	bpl.w	800addc <_scanf_float+0x60>
 800afc4:	f1b9 0f00 	cmp.w	r9, #0
 800afc8:	f43f af0f 	beq.w	800adea <_scanf_float+0x6e>
 800afcc:	0591      	lsls	r1, r2, #22
 800afce:	bf58      	it	pl
 800afd0:	9901      	ldrpl	r1, [sp, #4]
 800afd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afd6:	bf58      	it	pl
 800afd8:	eba9 0101 	subpl.w	r1, r9, r1
 800afdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800afe0:	bf58      	it	pl
 800afe2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	f04f 0900 	mov.w	r9, #0
 800afec:	e78a      	b.n	800af04 <_scanf_float+0x188>
 800afee:	f04f 0a03 	mov.w	sl, #3
 800aff2:	e787      	b.n	800af04 <_scanf_float+0x188>
 800aff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aff8:	4639      	mov	r1, r7
 800affa:	4640      	mov	r0, r8
 800affc:	4798      	blx	r3
 800affe:	2800      	cmp	r0, #0
 800b000:	f43f aedf 	beq.w	800adc2 <_scanf_float+0x46>
 800b004:	e6ea      	b.n	800addc <_scanf_float+0x60>
 800b006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b00a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b00e:	463a      	mov	r2, r7
 800b010:	4640      	mov	r0, r8
 800b012:	4798      	blx	r3
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	3b01      	subs	r3, #1
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	e6ec      	b.n	800adf6 <_scanf_float+0x7a>
 800b01c:	1e6b      	subs	r3, r5, #1
 800b01e:	2b06      	cmp	r3, #6
 800b020:	d825      	bhi.n	800b06e <_scanf_float+0x2f2>
 800b022:	2d02      	cmp	r5, #2
 800b024:	d836      	bhi.n	800b094 <_scanf_float+0x318>
 800b026:	455e      	cmp	r6, fp
 800b028:	f67f aee8 	bls.w	800adfc <_scanf_float+0x80>
 800b02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b030:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b034:	463a      	mov	r2, r7
 800b036:	4640      	mov	r0, r8
 800b038:	4798      	blx	r3
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	6123      	str	r3, [r4, #16]
 800b040:	e7f1      	b.n	800b026 <_scanf_float+0x2aa>
 800b042:	9802      	ldr	r0, [sp, #8]
 800b044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b048:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b04c:	9002      	str	r0, [sp, #8]
 800b04e:	463a      	mov	r2, r7
 800b050:	4640      	mov	r0, r8
 800b052:	4798      	blx	r3
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	6123      	str	r3, [r4, #16]
 800b05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b05e:	fa5f fa8a 	uxtb.w	sl, sl
 800b062:	f1ba 0f02 	cmp.w	sl, #2
 800b066:	d1ec      	bne.n	800b042 <_scanf_float+0x2c6>
 800b068:	3d03      	subs	r5, #3
 800b06a:	b2ed      	uxtb	r5, r5
 800b06c:	1b76      	subs	r6, r6, r5
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	05da      	lsls	r2, r3, #23
 800b072:	d52f      	bpl.n	800b0d4 <_scanf_float+0x358>
 800b074:	055b      	lsls	r3, r3, #21
 800b076:	d510      	bpl.n	800b09a <_scanf_float+0x31e>
 800b078:	455e      	cmp	r6, fp
 800b07a:	f67f aebf 	bls.w	800adfc <_scanf_float+0x80>
 800b07e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b086:	463a      	mov	r2, r7
 800b088:	4640      	mov	r0, r8
 800b08a:	4798      	blx	r3
 800b08c:	6923      	ldr	r3, [r4, #16]
 800b08e:	3b01      	subs	r3, #1
 800b090:	6123      	str	r3, [r4, #16]
 800b092:	e7f1      	b.n	800b078 <_scanf_float+0x2fc>
 800b094:	46aa      	mov	sl, r5
 800b096:	9602      	str	r6, [sp, #8]
 800b098:	e7df      	b.n	800b05a <_scanf_float+0x2de>
 800b09a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	2965      	cmp	r1, #101	; 0x65
 800b0a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	d00c      	beq.n	800b0c8 <_scanf_float+0x34c>
 800b0ae:	2945      	cmp	r1, #69	; 0x45
 800b0b0:	d00a      	beq.n	800b0c8 <_scanf_float+0x34c>
 800b0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0b6:	463a      	mov	r2, r7
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	4798      	blx	r3
 800b0bc:	6923      	ldr	r3, [r4, #16]
 800b0be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	1eb5      	subs	r5, r6, #2
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0cc:	463a      	mov	r2, r7
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4798      	blx	r3
 800b0d2:	462e      	mov	r6, r5
 800b0d4:	6825      	ldr	r5, [r4, #0]
 800b0d6:	f015 0510 	ands.w	r5, r5, #16
 800b0da:	d158      	bne.n	800b18e <_scanf_float+0x412>
 800b0dc:	7035      	strb	r5, [r6, #0]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e8:	d11c      	bne.n	800b124 <_scanf_float+0x3a8>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	454b      	cmp	r3, r9
 800b0ee:	eba3 0209 	sub.w	r2, r3, r9
 800b0f2:	d124      	bne.n	800b13e <_scanf_float+0x3c2>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4659      	mov	r1, fp
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	f000 ff9b 	bl	800c034 <_strtod_r>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	6821      	ldr	r1, [r4, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f011 0f02 	tst.w	r1, #2
 800b108:	ec57 6b10 	vmov	r6, r7, d0
 800b10c:	f103 0204 	add.w	r2, r3, #4
 800b110:	d020      	beq.n	800b154 <_scanf_float+0x3d8>
 800b112:	9903      	ldr	r1, [sp, #12]
 800b114:	600a      	str	r2, [r1, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	e9c3 6700 	strd	r6, r7, [r3]
 800b11c:	68e3      	ldr	r3, [r4, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	60e3      	str	r3, [r4, #12]
 800b122:	e66c      	b.n	800adfe <_scanf_float+0x82>
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0e4      	beq.n	800b0f4 <_scanf_float+0x378>
 800b12a:	9905      	ldr	r1, [sp, #20]
 800b12c:	230a      	movs	r3, #10
 800b12e:	462a      	mov	r2, r5
 800b130:	3101      	adds	r1, #1
 800b132:	4640      	mov	r0, r8
 800b134:	f001 f864 	bl	800c200 <_strtol_r>
 800b138:	9b04      	ldr	r3, [sp, #16]
 800b13a:	9e05      	ldr	r6, [sp, #20]
 800b13c:	1ac2      	subs	r2, r0, r3
 800b13e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b142:	429e      	cmp	r6, r3
 800b144:	bf28      	it	cs
 800b146:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b14a:	4912      	ldr	r1, [pc, #72]	; (800b194 <_scanf_float+0x418>)
 800b14c:	4630      	mov	r0, r6
 800b14e:	f000 f929 	bl	800b3a4 <siprintf>
 800b152:	e7cf      	b.n	800b0f4 <_scanf_float+0x378>
 800b154:	f011 0f04 	tst.w	r1, #4
 800b158:	9903      	ldr	r1, [sp, #12]
 800b15a:	600a      	str	r2, [r1, #0]
 800b15c:	d1db      	bne.n	800b116 <_scanf_float+0x39a>
 800b15e:	f8d3 8000 	ldr.w	r8, [r3]
 800b162:	ee10 2a10 	vmov	r2, s0
 800b166:	ee10 0a10 	vmov	r0, s0
 800b16a:	463b      	mov	r3, r7
 800b16c:	4639      	mov	r1, r7
 800b16e:	f7f5 fd15 	bl	8000b9c <__aeabi_dcmpun>
 800b172:	b128      	cbz	r0, 800b180 <_scanf_float+0x404>
 800b174:	4808      	ldr	r0, [pc, #32]	; (800b198 <_scanf_float+0x41c>)
 800b176:	f000 f89d 	bl	800b2b4 <nanf>
 800b17a:	ed88 0a00 	vstr	s0, [r8]
 800b17e:	e7cd      	b.n	800b11c <_scanf_float+0x3a0>
 800b180:	4630      	mov	r0, r6
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 fd68 	bl	8000c58 <__aeabi_d2f>
 800b188:	f8c8 0000 	str.w	r0, [r8]
 800b18c:	e7c6      	b.n	800b11c <_scanf_float+0x3a0>
 800b18e:	2500      	movs	r5, #0
 800b190:	e635      	b.n	800adfe <_scanf_float+0x82>
 800b192:	bf00      	nop
 800b194:	08010404 	.word	0x08010404
 800b198:	0801056c 	.word	0x0801056c

0800b19c <rand>:
 800b19c:	4b17      	ldr	r3, [pc, #92]	; (800b1fc <rand+0x60>)
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	681c      	ldr	r4, [r3, #0]
 800b1a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1a4:	b9b3      	cbnz	r3, 800b1d4 <rand+0x38>
 800b1a6:	2018      	movs	r0, #24
 800b1a8:	f002 fa84 	bl	800d6b4 <malloc>
 800b1ac:	63a0      	str	r0, [r4, #56]	; 0x38
 800b1ae:	b928      	cbnz	r0, 800b1bc <rand+0x20>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	4b13      	ldr	r3, [pc, #76]	; (800b200 <rand+0x64>)
 800b1b4:	4813      	ldr	r0, [pc, #76]	; (800b204 <rand+0x68>)
 800b1b6:	214e      	movs	r1, #78	; 0x4e
 800b1b8:	f001 f85e 	bl	800c278 <__assert_func>
 800b1bc:	4a12      	ldr	r2, [pc, #72]	; (800b208 <rand+0x6c>)
 800b1be:	4b13      	ldr	r3, [pc, #76]	; (800b20c <rand+0x70>)
 800b1c0:	e9c0 2300 	strd	r2, r3, [r0]
 800b1c4:	4b12      	ldr	r3, [pc, #72]	; (800b210 <rand+0x74>)
 800b1c6:	6083      	str	r3, [r0, #8]
 800b1c8:	230b      	movs	r3, #11
 800b1ca:	8183      	strh	r3, [r0, #12]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b1d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b1d6:	480f      	ldr	r0, [pc, #60]	; (800b214 <rand+0x78>)
 800b1d8:	690a      	ldr	r2, [r1, #16]
 800b1da:	694b      	ldr	r3, [r1, #20]
 800b1dc:	4c0e      	ldr	r4, [pc, #56]	; (800b218 <rand+0x7c>)
 800b1de:	4350      	muls	r0, r2
 800b1e0:	fb04 0003 	mla	r0, r4, r3, r0
 800b1e4:	fba2 3404 	umull	r3, r4, r2, r4
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	4404      	add	r4, r0
 800b1ec:	f144 0000 	adc.w	r0, r4, #0
 800b1f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800b1f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b1f8:	bd10      	pop	{r4, pc}
 800b1fa:	bf00      	nop
 800b1fc:	2000038c 	.word	0x2000038c
 800b200:	08010409 	.word	0x08010409
 800b204:	08010420 	.word	0x08010420
 800b208:	abcd330e 	.word	0xabcd330e
 800b20c:	e66d1234 	.word	0xe66d1234
 800b210:	0005deec 	.word	0x0005deec
 800b214:	5851f42d 	.word	0x5851f42d
 800b218:	4c957f2d 	.word	0x4c957f2d

0800b21c <frexpf>:
 800b21c:	ee10 3a10 	vmov	r3, s0
 800b220:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b224:	2100      	movs	r1, #0
 800b226:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b22a:	6001      	str	r1, [r0, #0]
 800b22c:	da19      	bge.n	800b262 <frexpf+0x46>
 800b22e:	b1c2      	cbz	r2, 800b262 <frexpf+0x46>
 800b230:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b234:	d10a      	bne.n	800b24c <frexpf+0x30>
 800b236:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b264 <frexpf+0x48>
 800b23a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b23e:	f06f 0118 	mvn.w	r1, #24
 800b242:	ee17 3a90 	vmov	r3, s15
 800b246:	6001      	str	r1, [r0, #0]
 800b248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b24c:	6801      	ldr	r1, [r0, #0]
 800b24e:	15d2      	asrs	r2, r2, #23
 800b250:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b254:	3a7e      	subs	r2, #126	; 0x7e
 800b256:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 800b25a:	440a      	add	r2, r1
 800b25c:	ee00 3a10 	vmov	s0, r3
 800b260:	6002      	str	r2, [r0, #0]
 800b262:	4770      	bx	lr
 800b264:	4c000000 	.word	0x4c000000

0800b268 <ldexpf>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	ed2d 8b02 	vpush	{d8}
 800b26e:	4604      	mov	r4, r0
 800b270:	eeb0 8a40 	vmov.f32	s16, s0
 800b274:	f003 fa7c 	bl	800e770 <finitef>
 800b278:	b1b8      	cbz	r0, 800b2aa <ldexpf+0x42>
 800b27a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	d012      	beq.n	800b2aa <ldexpf+0x42>
 800b284:	eeb0 0a48 	vmov.f32	s0, s16
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 f819 	bl	800b2c0 <scalbnf>
 800b28e:	eeb0 8a40 	vmov.f32	s16, s0
 800b292:	f003 fa6d 	bl	800e770 <finitef>
 800b296:	b120      	cbz	r0, 800b2a2 <ldexpf+0x3a>
 800b298:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a0:	d103      	bne.n	800b2aa <ldexpf+0x42>
 800b2a2:	f7ff f8c1 	bl	800a428 <__errno>
 800b2a6:	2322      	movs	r3, #34	; 0x22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ae:	ecbd 8b02 	vpop	{d8}
 800b2b2:	bd10      	pop	{r4, pc}

0800b2b4 <nanf>:
 800b2b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b2bc <nanf+0x8>
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	7fc00000 	.word	0x7fc00000

0800b2c0 <scalbnf>:
 800b2c0:	ee10 3a10 	vmov	r3, s0
 800b2c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b2c8:	d025      	beq.n	800b316 <scalbnf+0x56>
 800b2ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2ce:	d302      	bcc.n	800b2d6 <scalbnf+0x16>
 800b2d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2d4:	4770      	bx	lr
 800b2d6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b2da:	d122      	bne.n	800b322 <scalbnf+0x62>
 800b2dc:	4b2a      	ldr	r3, [pc, #168]	; (800b388 <scalbnf+0xc8>)
 800b2de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b38c <scalbnf+0xcc>
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2e8:	db16      	blt.n	800b318 <scalbnf+0x58>
 800b2ea:	ee10 3a10 	vmov	r3, s0
 800b2ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b2f2:	3a19      	subs	r2, #25
 800b2f4:	4402      	add	r2, r0
 800b2f6:	2afe      	cmp	r2, #254	; 0xfe
 800b2f8:	dd15      	ble.n	800b326 <scalbnf+0x66>
 800b2fa:	ee10 3a10 	vmov	r3, s0
 800b2fe:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b390 <scalbnf+0xd0>
 800b302:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b394 <scalbnf+0xd4>
 800b306:	2b00      	cmp	r3, #0
 800b308:	eeb0 7a67 	vmov.f32	s14, s15
 800b30c:	bfb8      	it	lt
 800b30e:	eef0 7a66 	vmovlt.f32	s15, s13
 800b312:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b316:	4770      	bx	lr
 800b318:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b398 <scalbnf+0xd8>
 800b31c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b320:	4770      	bx	lr
 800b322:	0dd2      	lsrs	r2, r2, #23
 800b324:	e7e6      	b.n	800b2f4 <scalbnf+0x34>
 800b326:	2a00      	cmp	r2, #0
 800b328:	dd06      	ble.n	800b338 <scalbnf+0x78>
 800b32a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b32e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b332:	ee00 3a10 	vmov	s0, r3
 800b336:	4770      	bx	lr
 800b338:	f112 0f16 	cmn.w	r2, #22
 800b33c:	da1a      	bge.n	800b374 <scalbnf+0xb4>
 800b33e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b342:	4298      	cmp	r0, r3
 800b344:	ee10 3a10 	vmov	r3, s0
 800b348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b34c:	dd0a      	ble.n	800b364 <scalbnf+0xa4>
 800b34e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b390 <scalbnf+0xd0>
 800b352:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b394 <scalbnf+0xd4>
 800b356:	eef0 7a40 	vmov.f32	s15, s0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bf18      	it	ne
 800b35e:	eeb0 0a47 	vmovne.f32	s0, s14
 800b362:	e7db      	b.n	800b31c <scalbnf+0x5c>
 800b364:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b398 <scalbnf+0xd8>
 800b368:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b39c <scalbnf+0xdc>
 800b36c:	eef0 7a40 	vmov.f32	s15, s0
 800b370:	2b00      	cmp	r3, #0
 800b372:	e7f3      	b.n	800b35c <scalbnf+0x9c>
 800b374:	3219      	adds	r2, #25
 800b376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b37a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b37e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b3a0 <scalbnf+0xe0>
 800b382:	ee07 3a10 	vmov	s14, r3
 800b386:	e7c4      	b.n	800b312 <scalbnf+0x52>
 800b388:	ffff3cb0 	.word	0xffff3cb0
 800b38c:	4c000000 	.word	0x4c000000
 800b390:	7149f2ca 	.word	0x7149f2ca
 800b394:	f149f2ca 	.word	0xf149f2ca
 800b398:	0da24260 	.word	0x0da24260
 800b39c:	8da24260 	.word	0x8da24260
 800b3a0:	33000000 	.word	0x33000000

0800b3a4 <siprintf>:
 800b3a4:	b40e      	push	{r1, r2, r3}
 800b3a6:	b500      	push	{lr}
 800b3a8:	b09c      	sub	sp, #112	; 0x70
 800b3aa:	ab1d      	add	r3, sp, #116	; 0x74
 800b3ac:	9002      	str	r0, [sp, #8]
 800b3ae:	9006      	str	r0, [sp, #24]
 800b3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3b4:	4809      	ldr	r0, [pc, #36]	; (800b3dc <siprintf+0x38>)
 800b3b6:	9107      	str	r1, [sp, #28]
 800b3b8:	9104      	str	r1, [sp, #16]
 800b3ba:	4909      	ldr	r1, [pc, #36]	; (800b3e0 <siprintf+0x3c>)
 800b3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c0:	9105      	str	r1, [sp, #20]
 800b3c2:	6800      	ldr	r0, [r0, #0]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	a902      	add	r1, sp, #8
 800b3c8:	f002 ff5e 	bl	800e288 <_svfiprintf_r>
 800b3cc:	9b02      	ldr	r3, [sp, #8]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	b01c      	add	sp, #112	; 0x70
 800b3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d8:	b003      	add	sp, #12
 800b3da:	4770      	bx	lr
 800b3dc:	2000038c 	.word	0x2000038c
 800b3e0:	ffff0208 	.word	0xffff0208

0800b3e4 <sulp>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	ec45 4b10 	vmov	d0, r4, r5
 800b3ee:	4616      	mov	r6, r2
 800b3f0:	f002 fce6 	bl	800ddc0 <__ulp>
 800b3f4:	ec51 0b10 	vmov	r0, r1, d0
 800b3f8:	b17e      	cbz	r6, 800b41a <sulp+0x36>
 800b3fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b402:	2b00      	cmp	r3, #0
 800b404:	dd09      	ble.n	800b41a <sulp+0x36>
 800b406:	051b      	lsls	r3, r3, #20
 800b408:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b40c:	2400      	movs	r4, #0
 800b40e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b412:	4622      	mov	r2, r4
 800b414:	462b      	mov	r3, r5
 800b416:	f7f5 f927 	bl	8000668 <__aeabi_dmul>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	0000      	movs	r0, r0
	...

0800b420 <_strtod_l>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b0a3      	sub	sp, #140	; 0x8c
 800b426:	461f      	mov	r7, r3
 800b428:	2300      	movs	r3, #0
 800b42a:	931e      	str	r3, [sp, #120]	; 0x78
 800b42c:	4ba4      	ldr	r3, [pc, #656]	; (800b6c0 <_strtod_l+0x2a0>)
 800b42e:	9219      	str	r2, [sp, #100]	; 0x64
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	9307      	str	r3, [sp, #28]
 800b434:	4604      	mov	r4, r0
 800b436:	4618      	mov	r0, r3
 800b438:	4688      	mov	r8, r1
 800b43a:	f7f4 fefb 	bl	8000234 <strlen>
 800b43e:	f04f 0a00 	mov.w	sl, #0
 800b442:	4605      	mov	r5, r0
 800b444:	f04f 0b00 	mov.w	fp, #0
 800b448:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b44e:	781a      	ldrb	r2, [r3, #0]
 800b450:	2a2b      	cmp	r2, #43	; 0x2b
 800b452:	d04c      	beq.n	800b4ee <_strtod_l+0xce>
 800b454:	d839      	bhi.n	800b4ca <_strtod_l+0xaa>
 800b456:	2a0d      	cmp	r2, #13
 800b458:	d832      	bhi.n	800b4c0 <_strtod_l+0xa0>
 800b45a:	2a08      	cmp	r2, #8
 800b45c:	d832      	bhi.n	800b4c4 <_strtod_l+0xa4>
 800b45e:	2a00      	cmp	r2, #0
 800b460:	d03c      	beq.n	800b4dc <_strtod_l+0xbc>
 800b462:	2300      	movs	r3, #0
 800b464:	930e      	str	r3, [sp, #56]	; 0x38
 800b466:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b468:	7833      	ldrb	r3, [r6, #0]
 800b46a:	2b30      	cmp	r3, #48	; 0x30
 800b46c:	f040 80b4 	bne.w	800b5d8 <_strtod_l+0x1b8>
 800b470:	7873      	ldrb	r3, [r6, #1]
 800b472:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b476:	2b58      	cmp	r3, #88	; 0x58
 800b478:	d16c      	bne.n	800b554 <_strtod_l+0x134>
 800b47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	ab1e      	add	r3, sp, #120	; 0x78
 800b480:	9702      	str	r7, [sp, #8]
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	4a8f      	ldr	r2, [pc, #572]	; (800b6c4 <_strtod_l+0x2a4>)
 800b486:	ab1f      	add	r3, sp, #124	; 0x7c
 800b488:	a91d      	add	r1, sp, #116	; 0x74
 800b48a:	4620      	mov	r0, r4
 800b48c:	f001 fe06 	bl	800d09c <__gethex>
 800b490:	f010 0707 	ands.w	r7, r0, #7
 800b494:	4605      	mov	r5, r0
 800b496:	d005      	beq.n	800b4a4 <_strtod_l+0x84>
 800b498:	2f06      	cmp	r7, #6
 800b49a:	d12a      	bne.n	800b4f2 <_strtod_l+0xd2>
 800b49c:	3601      	adds	r6, #1
 800b49e:	2300      	movs	r3, #0
 800b4a0:	961d      	str	r6, [sp, #116]	; 0x74
 800b4a2:	930e      	str	r3, [sp, #56]	; 0x38
 800b4a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 8596 	bne.w	800bfd8 <_strtod_l+0xbb8>
 800b4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ae:	b1db      	cbz	r3, 800b4e8 <_strtod_l+0xc8>
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4b6:	ec43 2b10 	vmov	d0, r2, r3
 800b4ba:	b023      	add	sp, #140	; 0x8c
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	2a20      	cmp	r2, #32
 800b4c2:	d1ce      	bne.n	800b462 <_strtod_l+0x42>
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	931d      	str	r3, [sp, #116]	; 0x74
 800b4c8:	e7c0      	b.n	800b44c <_strtod_l+0x2c>
 800b4ca:	2a2d      	cmp	r2, #45	; 0x2d
 800b4cc:	d1c9      	bne.n	800b462 <_strtod_l+0x42>
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	920e      	str	r2, [sp, #56]	; 0x38
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	921d      	str	r2, [sp, #116]	; 0x74
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1c4      	bne.n	800b466 <_strtod_l+0x46>
 800b4dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 8576 	bne.w	800bfd4 <_strtod_l+0xbb4>
 800b4e8:	4652      	mov	r2, sl
 800b4ea:	465b      	mov	r3, fp
 800b4ec:	e7e3      	b.n	800b4b6 <_strtod_l+0x96>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	e7ee      	b.n	800b4d0 <_strtod_l+0xb0>
 800b4f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b4f4:	b13a      	cbz	r2, 800b506 <_strtod_l+0xe6>
 800b4f6:	2135      	movs	r1, #53	; 0x35
 800b4f8:	a820      	add	r0, sp, #128	; 0x80
 800b4fa:	f002 fd6c 	bl	800dfd6 <__copybits>
 800b4fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b500:	4620      	mov	r0, r4
 800b502:	f002 f931 	bl	800d768 <_Bfree>
 800b506:	3f01      	subs	r7, #1
 800b508:	2f05      	cmp	r7, #5
 800b50a:	d807      	bhi.n	800b51c <_strtod_l+0xfc>
 800b50c:	e8df f007 	tbb	[pc, r7]
 800b510:	1d180b0e 	.word	0x1d180b0e
 800b514:	030e      	.short	0x030e
 800b516:	f04f 0b00 	mov.w	fp, #0
 800b51a:	46da      	mov	sl, fp
 800b51c:	0728      	lsls	r0, r5, #28
 800b51e:	d5c1      	bpl.n	800b4a4 <_strtod_l+0x84>
 800b520:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b524:	e7be      	b.n	800b4a4 <_strtod_l+0x84>
 800b526:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b52a:	e7f7      	b.n	800b51c <_strtod_l+0xfc>
 800b52c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b530:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b53a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b53e:	e7ed      	b.n	800b51c <_strtod_l+0xfc>
 800b540:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b6c8 <_strtod_l+0x2a8>
 800b544:	f04f 0a00 	mov.w	sl, #0
 800b548:	e7e8      	b.n	800b51c <_strtod_l+0xfc>
 800b54a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b54e:	f04f 3aff 	mov.w	sl, #4294967295
 800b552:	e7e3      	b.n	800b51c <_strtod_l+0xfc>
 800b554:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b556:	1c5a      	adds	r2, r3, #1
 800b558:	921d      	str	r2, [sp, #116]	; 0x74
 800b55a:	785b      	ldrb	r3, [r3, #1]
 800b55c:	2b30      	cmp	r3, #48	; 0x30
 800b55e:	d0f9      	beq.n	800b554 <_strtod_l+0x134>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d09f      	beq.n	800b4a4 <_strtod_l+0x84>
 800b564:	2301      	movs	r3, #1
 800b566:	f04f 0900 	mov.w	r9, #0
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b56e:	930a      	str	r3, [sp, #40]	; 0x28
 800b570:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b574:	464f      	mov	r7, r9
 800b576:	220a      	movs	r2, #10
 800b578:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b57a:	7806      	ldrb	r6, [r0, #0]
 800b57c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b580:	b2d9      	uxtb	r1, r3
 800b582:	2909      	cmp	r1, #9
 800b584:	d92a      	bls.n	800b5dc <_strtod_l+0x1bc>
 800b586:	9907      	ldr	r1, [sp, #28]
 800b588:	462a      	mov	r2, r5
 800b58a:	f003 f8fe 	bl	800e78a <strncmp>
 800b58e:	b398      	cbz	r0, 800b5f8 <_strtod_l+0x1d8>
 800b590:	2000      	movs	r0, #0
 800b592:	4633      	mov	r3, r6
 800b594:	463d      	mov	r5, r7
 800b596:	9007      	str	r0, [sp, #28]
 800b598:	4602      	mov	r2, r0
 800b59a:	2b65      	cmp	r3, #101	; 0x65
 800b59c:	d001      	beq.n	800b5a2 <_strtod_l+0x182>
 800b59e:	2b45      	cmp	r3, #69	; 0x45
 800b5a0:	d118      	bne.n	800b5d4 <_strtod_l+0x1b4>
 800b5a2:	b91d      	cbnz	r5, 800b5ac <_strtod_l+0x18c>
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	d098      	beq.n	800b4dc <_strtod_l+0xbc>
 800b5aa:	2500      	movs	r5, #0
 800b5ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b5b0:	f108 0301 	add.w	r3, r8, #1
 800b5b4:	931d      	str	r3, [sp, #116]	; 0x74
 800b5b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b5ba:	2b2b      	cmp	r3, #43	; 0x2b
 800b5bc:	d075      	beq.n	800b6aa <_strtod_l+0x28a>
 800b5be:	2b2d      	cmp	r3, #45	; 0x2d
 800b5c0:	d07b      	beq.n	800b6ba <_strtod_l+0x29a>
 800b5c2:	f04f 0c00 	mov.w	ip, #0
 800b5c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b5ca:	2909      	cmp	r1, #9
 800b5cc:	f240 8082 	bls.w	800b6d4 <_strtod_l+0x2b4>
 800b5d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	e09d      	b.n	800b714 <_strtod_l+0x2f4>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e7c4      	b.n	800b566 <_strtod_l+0x146>
 800b5dc:	2f08      	cmp	r7, #8
 800b5de:	bfd8      	it	le
 800b5e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b5e2:	f100 0001 	add.w	r0, r0, #1
 800b5e6:	bfda      	itte	le
 800b5e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800b5ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b5f2:	3701      	adds	r7, #1
 800b5f4:	901d      	str	r0, [sp, #116]	; 0x74
 800b5f6:	e7bf      	b.n	800b578 <_strtod_l+0x158>
 800b5f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5fa:	195a      	adds	r2, r3, r5
 800b5fc:	921d      	str	r2, [sp, #116]	; 0x74
 800b5fe:	5d5b      	ldrb	r3, [r3, r5]
 800b600:	2f00      	cmp	r7, #0
 800b602:	d037      	beq.n	800b674 <_strtod_l+0x254>
 800b604:	9007      	str	r0, [sp, #28]
 800b606:	463d      	mov	r5, r7
 800b608:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b60c:	2a09      	cmp	r2, #9
 800b60e:	d912      	bls.n	800b636 <_strtod_l+0x216>
 800b610:	2201      	movs	r2, #1
 800b612:	e7c2      	b.n	800b59a <_strtod_l+0x17a>
 800b614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	921d      	str	r2, [sp, #116]	; 0x74
 800b61a:	785b      	ldrb	r3, [r3, #1]
 800b61c:	3001      	adds	r0, #1
 800b61e:	2b30      	cmp	r3, #48	; 0x30
 800b620:	d0f8      	beq.n	800b614 <_strtod_l+0x1f4>
 800b622:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b626:	2a08      	cmp	r2, #8
 800b628:	f200 84db 	bhi.w	800bfe2 <_strtod_l+0xbc2>
 800b62c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b62e:	9007      	str	r0, [sp, #28]
 800b630:	2000      	movs	r0, #0
 800b632:	920a      	str	r2, [sp, #40]	; 0x28
 800b634:	4605      	mov	r5, r0
 800b636:	3b30      	subs	r3, #48	; 0x30
 800b638:	f100 0201 	add.w	r2, r0, #1
 800b63c:	d014      	beq.n	800b668 <_strtod_l+0x248>
 800b63e:	9907      	ldr	r1, [sp, #28]
 800b640:	4411      	add	r1, r2
 800b642:	9107      	str	r1, [sp, #28]
 800b644:	462a      	mov	r2, r5
 800b646:	eb00 0e05 	add.w	lr, r0, r5
 800b64a:	210a      	movs	r1, #10
 800b64c:	4572      	cmp	r2, lr
 800b64e:	d113      	bne.n	800b678 <_strtod_l+0x258>
 800b650:	182a      	adds	r2, r5, r0
 800b652:	2a08      	cmp	r2, #8
 800b654:	f105 0501 	add.w	r5, r5, #1
 800b658:	4405      	add	r5, r0
 800b65a:	dc1c      	bgt.n	800b696 <_strtod_l+0x276>
 800b65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b65e:	220a      	movs	r2, #10
 800b660:	fb02 3301 	mla	r3, r2, r1, r3
 800b664:	9309      	str	r3, [sp, #36]	; 0x24
 800b666:	2200      	movs	r2, #0
 800b668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	911d      	str	r1, [sp, #116]	; 0x74
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	4610      	mov	r0, r2
 800b672:	e7c9      	b.n	800b608 <_strtod_l+0x1e8>
 800b674:	4638      	mov	r0, r7
 800b676:	e7d2      	b.n	800b61e <_strtod_l+0x1fe>
 800b678:	2a08      	cmp	r2, #8
 800b67a:	dc04      	bgt.n	800b686 <_strtod_l+0x266>
 800b67c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b67e:	434e      	muls	r6, r1
 800b680:	9609      	str	r6, [sp, #36]	; 0x24
 800b682:	3201      	adds	r2, #1
 800b684:	e7e2      	b.n	800b64c <_strtod_l+0x22c>
 800b686:	f102 0c01 	add.w	ip, r2, #1
 800b68a:	f1bc 0f10 	cmp.w	ip, #16
 800b68e:	bfd8      	it	le
 800b690:	fb01 f909 	mulle.w	r9, r1, r9
 800b694:	e7f5      	b.n	800b682 <_strtod_l+0x262>
 800b696:	2d10      	cmp	r5, #16
 800b698:	bfdc      	itt	le
 800b69a:	220a      	movle	r2, #10
 800b69c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b6a0:	e7e1      	b.n	800b666 <_strtod_l+0x246>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9307      	str	r3, [sp, #28]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	e77c      	b.n	800b5a4 <_strtod_l+0x184>
 800b6aa:	f04f 0c00 	mov.w	ip, #0
 800b6ae:	f108 0302 	add.w	r3, r8, #2
 800b6b2:	931d      	str	r3, [sp, #116]	; 0x74
 800b6b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b6b8:	e785      	b.n	800b5c6 <_strtod_l+0x1a6>
 800b6ba:	f04f 0c01 	mov.w	ip, #1
 800b6be:	e7f6      	b.n	800b6ae <_strtod_l+0x28e>
 800b6c0:	08010754 	.word	0x08010754
 800b6c4:	08010480 	.word	0x08010480
 800b6c8:	7ff00000 	.word	0x7ff00000
 800b6cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6ce:	1c59      	adds	r1, r3, #1
 800b6d0:	911d      	str	r1, [sp, #116]	; 0x74
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	2b30      	cmp	r3, #48	; 0x30
 800b6d6:	d0f9      	beq.n	800b6cc <_strtod_l+0x2ac>
 800b6d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b6dc:	2908      	cmp	r1, #8
 800b6de:	f63f af79 	bhi.w	800b5d4 <_strtod_l+0x1b4>
 800b6e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b6e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6e8:	9308      	str	r3, [sp, #32]
 800b6ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6ec:	1c59      	adds	r1, r3, #1
 800b6ee:	911d      	str	r1, [sp, #116]	; 0x74
 800b6f0:	785b      	ldrb	r3, [r3, #1]
 800b6f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b6f6:	2e09      	cmp	r6, #9
 800b6f8:	d937      	bls.n	800b76a <_strtod_l+0x34a>
 800b6fa:	9e08      	ldr	r6, [sp, #32]
 800b6fc:	1b89      	subs	r1, r1, r6
 800b6fe:	2908      	cmp	r1, #8
 800b700:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b704:	dc02      	bgt.n	800b70c <_strtod_l+0x2ec>
 800b706:	4576      	cmp	r6, lr
 800b708:	bfa8      	it	ge
 800b70a:	4676      	movge	r6, lr
 800b70c:	f1bc 0f00 	cmp.w	ip, #0
 800b710:	d000      	beq.n	800b714 <_strtod_l+0x2f4>
 800b712:	4276      	negs	r6, r6
 800b714:	2d00      	cmp	r5, #0
 800b716:	d14f      	bne.n	800b7b8 <_strtod_l+0x398>
 800b718:	9904      	ldr	r1, [sp, #16]
 800b71a:	4301      	orrs	r1, r0
 800b71c:	f47f aec2 	bne.w	800b4a4 <_strtod_l+0x84>
 800b720:	2a00      	cmp	r2, #0
 800b722:	f47f aedb 	bne.w	800b4dc <_strtod_l+0xbc>
 800b726:	2b69      	cmp	r3, #105	; 0x69
 800b728:	d027      	beq.n	800b77a <_strtod_l+0x35a>
 800b72a:	dc24      	bgt.n	800b776 <_strtod_l+0x356>
 800b72c:	2b49      	cmp	r3, #73	; 0x49
 800b72e:	d024      	beq.n	800b77a <_strtod_l+0x35a>
 800b730:	2b4e      	cmp	r3, #78	; 0x4e
 800b732:	f47f aed3 	bne.w	800b4dc <_strtod_l+0xbc>
 800b736:	499e      	ldr	r1, [pc, #632]	; (800b9b0 <_strtod_l+0x590>)
 800b738:	a81d      	add	r0, sp, #116	; 0x74
 800b73a:	f001 ff07 	bl	800d54c <__match>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f43f aecc 	beq.w	800b4dc <_strtod_l+0xbc>
 800b744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b28      	cmp	r3, #40	; 0x28
 800b74a:	d12d      	bne.n	800b7a8 <_strtod_l+0x388>
 800b74c:	4999      	ldr	r1, [pc, #612]	; (800b9b4 <_strtod_l+0x594>)
 800b74e:	aa20      	add	r2, sp, #128	; 0x80
 800b750:	a81d      	add	r0, sp, #116	; 0x74
 800b752:	f001 ff0f 	bl	800d574 <__hexnan>
 800b756:	2805      	cmp	r0, #5
 800b758:	d126      	bne.n	800b7a8 <_strtod_l+0x388>
 800b75a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b75c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b760:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b764:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b768:	e69c      	b.n	800b4a4 <_strtod_l+0x84>
 800b76a:	210a      	movs	r1, #10
 800b76c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b770:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b774:	e7b9      	b.n	800b6ea <_strtod_l+0x2ca>
 800b776:	2b6e      	cmp	r3, #110	; 0x6e
 800b778:	e7db      	b.n	800b732 <_strtod_l+0x312>
 800b77a:	498f      	ldr	r1, [pc, #572]	; (800b9b8 <_strtod_l+0x598>)
 800b77c:	a81d      	add	r0, sp, #116	; 0x74
 800b77e:	f001 fee5 	bl	800d54c <__match>
 800b782:	2800      	cmp	r0, #0
 800b784:	f43f aeaa 	beq.w	800b4dc <_strtod_l+0xbc>
 800b788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b78a:	498c      	ldr	r1, [pc, #560]	; (800b9bc <_strtod_l+0x59c>)
 800b78c:	3b01      	subs	r3, #1
 800b78e:	a81d      	add	r0, sp, #116	; 0x74
 800b790:	931d      	str	r3, [sp, #116]	; 0x74
 800b792:	f001 fedb 	bl	800d54c <__match>
 800b796:	b910      	cbnz	r0, 800b79e <_strtod_l+0x37e>
 800b798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b79a:	3301      	adds	r3, #1
 800b79c:	931d      	str	r3, [sp, #116]	; 0x74
 800b79e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b9cc <_strtod_l+0x5ac>
 800b7a2:	f04f 0a00 	mov.w	sl, #0
 800b7a6:	e67d      	b.n	800b4a4 <_strtod_l+0x84>
 800b7a8:	4885      	ldr	r0, [pc, #532]	; (800b9c0 <_strtod_l+0x5a0>)
 800b7aa:	f002 ffc9 	bl	800e740 <nan>
 800b7ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b7b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b7b6:	e675      	b.n	800b4a4 <_strtod_l+0x84>
 800b7b8:	9b07      	ldr	r3, [sp, #28]
 800b7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7bc:	1af3      	subs	r3, r6, r3
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	bf08      	it	eq
 800b7c2:	462f      	moveq	r7, r5
 800b7c4:	2d10      	cmp	r5, #16
 800b7c6:	9308      	str	r3, [sp, #32]
 800b7c8:	46a8      	mov	r8, r5
 800b7ca:	bfa8      	it	ge
 800b7cc:	f04f 0810 	movge.w	r8, #16
 800b7d0:	f7f4 fed0 	bl	8000574 <__aeabi_ui2d>
 800b7d4:	2d09      	cmp	r5, #9
 800b7d6:	4682      	mov	sl, r0
 800b7d8:	468b      	mov	fp, r1
 800b7da:	dd13      	ble.n	800b804 <_strtod_l+0x3e4>
 800b7dc:	4b79      	ldr	r3, [pc, #484]	; (800b9c4 <_strtod_l+0x5a4>)
 800b7de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b7e6:	f7f4 ff3f 	bl	8000668 <__aeabi_dmul>
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	f7f4 fec0 	bl	8000574 <__aeabi_ui2d>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	f7f4 fd7e 	bl	80002fc <__adddf3>
 800b800:	4682      	mov	sl, r0
 800b802:	468b      	mov	fp, r1
 800b804:	2d0f      	cmp	r5, #15
 800b806:	dc38      	bgt.n	800b87a <_strtod_l+0x45a>
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f43f ae4a 	beq.w	800b4a4 <_strtod_l+0x84>
 800b810:	dd24      	ble.n	800b85c <_strtod_l+0x43c>
 800b812:	2b16      	cmp	r3, #22
 800b814:	dc0b      	bgt.n	800b82e <_strtod_l+0x40e>
 800b816:	4d6b      	ldr	r5, [pc, #428]	; (800b9c4 <_strtod_l+0x5a4>)
 800b818:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b81c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b820:	4652      	mov	r2, sl
 800b822:	465b      	mov	r3, fp
 800b824:	f7f4 ff20 	bl	8000668 <__aeabi_dmul>
 800b828:	4682      	mov	sl, r0
 800b82a:	468b      	mov	fp, r1
 800b82c:	e63a      	b.n	800b4a4 <_strtod_l+0x84>
 800b82e:	9a08      	ldr	r2, [sp, #32]
 800b830:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b834:	4293      	cmp	r3, r2
 800b836:	db20      	blt.n	800b87a <_strtod_l+0x45a>
 800b838:	4c62      	ldr	r4, [pc, #392]	; (800b9c4 <_strtod_l+0x5a4>)
 800b83a:	f1c5 050f 	rsb	r5, r5, #15
 800b83e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b842:	4652      	mov	r2, sl
 800b844:	465b      	mov	r3, fp
 800b846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b84a:	f7f4 ff0d 	bl	8000668 <__aeabi_dmul>
 800b84e:	9b08      	ldr	r3, [sp, #32]
 800b850:	1b5d      	subs	r5, r3, r5
 800b852:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b856:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b85a:	e7e3      	b.n	800b824 <_strtod_l+0x404>
 800b85c:	9b08      	ldr	r3, [sp, #32]
 800b85e:	3316      	adds	r3, #22
 800b860:	db0b      	blt.n	800b87a <_strtod_l+0x45a>
 800b862:	9b07      	ldr	r3, [sp, #28]
 800b864:	4a57      	ldr	r2, [pc, #348]	; (800b9c4 <_strtod_l+0x5a4>)
 800b866:	1b9e      	subs	r6, r3, r6
 800b868:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b86c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b870:	4650      	mov	r0, sl
 800b872:	4659      	mov	r1, fp
 800b874:	f7f5 f822 	bl	80008bc <__aeabi_ddiv>
 800b878:	e7d6      	b.n	800b828 <_strtod_l+0x408>
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	eba5 0808 	sub.w	r8, r5, r8
 800b880:	4498      	add	r8, r3
 800b882:	f1b8 0f00 	cmp.w	r8, #0
 800b886:	dd71      	ble.n	800b96c <_strtod_l+0x54c>
 800b888:	f018 030f 	ands.w	r3, r8, #15
 800b88c:	d00a      	beq.n	800b8a4 <_strtod_l+0x484>
 800b88e:	494d      	ldr	r1, [pc, #308]	; (800b9c4 <_strtod_l+0x5a4>)
 800b890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b894:	4652      	mov	r2, sl
 800b896:	465b      	mov	r3, fp
 800b898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b89c:	f7f4 fee4 	bl	8000668 <__aeabi_dmul>
 800b8a0:	4682      	mov	sl, r0
 800b8a2:	468b      	mov	fp, r1
 800b8a4:	f038 080f 	bics.w	r8, r8, #15
 800b8a8:	d04d      	beq.n	800b946 <_strtod_l+0x526>
 800b8aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b8ae:	dd22      	ble.n	800b8f6 <_strtod_l+0x4d6>
 800b8b0:	2500      	movs	r5, #0
 800b8b2:	462e      	mov	r6, r5
 800b8b4:	9509      	str	r5, [sp, #36]	; 0x24
 800b8b6:	9507      	str	r5, [sp, #28]
 800b8b8:	2322      	movs	r3, #34	; 0x22
 800b8ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b9cc <_strtod_l+0x5ac>
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	f04f 0a00 	mov.w	sl, #0
 800b8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f43f adec 	beq.w	800b4a4 <_strtod_l+0x84>
 800b8cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f001 ff4a 	bl	800d768 <_Bfree>
 800b8d4:	9907      	ldr	r1, [sp, #28]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f001 ff46 	bl	800d768 <_Bfree>
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f001 ff42 	bl	800d768 <_Bfree>
 800b8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 ff3e 	bl	800d768 <_Bfree>
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f001 ff3a 	bl	800d768 <_Bfree>
 800b8f4:	e5d6      	b.n	800b4a4 <_strtod_l+0x84>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	4659      	mov	r1, fp
 800b900:	4699      	mov	r9, r3
 800b902:	f1b8 0f01 	cmp.w	r8, #1
 800b906:	dc21      	bgt.n	800b94c <_strtod_l+0x52c>
 800b908:	b10b      	cbz	r3, 800b90e <_strtod_l+0x4ee>
 800b90a:	4682      	mov	sl, r0
 800b90c:	468b      	mov	fp, r1
 800b90e:	4b2e      	ldr	r3, [pc, #184]	; (800b9c8 <_strtod_l+0x5a8>)
 800b910:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b914:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b918:	4652      	mov	r2, sl
 800b91a:	465b      	mov	r3, fp
 800b91c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b920:	f7f4 fea2 	bl	8000668 <__aeabi_dmul>
 800b924:	4b29      	ldr	r3, [pc, #164]	; (800b9cc <_strtod_l+0x5ac>)
 800b926:	460a      	mov	r2, r1
 800b928:	400b      	ands	r3, r1
 800b92a:	4929      	ldr	r1, [pc, #164]	; (800b9d0 <_strtod_l+0x5b0>)
 800b92c:	428b      	cmp	r3, r1
 800b92e:	4682      	mov	sl, r0
 800b930:	d8be      	bhi.n	800b8b0 <_strtod_l+0x490>
 800b932:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b936:	428b      	cmp	r3, r1
 800b938:	bf86      	itte	hi
 800b93a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b9d4 <_strtod_l+0x5b4>
 800b93e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b942:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b946:	2300      	movs	r3, #0
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	e081      	b.n	800ba50 <_strtod_l+0x630>
 800b94c:	f018 0f01 	tst.w	r8, #1
 800b950:	d007      	beq.n	800b962 <_strtod_l+0x542>
 800b952:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <_strtod_l+0x5a8>)
 800b954:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f7f4 fe84 	bl	8000668 <__aeabi_dmul>
 800b960:	2301      	movs	r3, #1
 800b962:	f109 0901 	add.w	r9, r9, #1
 800b966:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b96a:	e7ca      	b.n	800b902 <_strtod_l+0x4e2>
 800b96c:	d0eb      	beq.n	800b946 <_strtod_l+0x526>
 800b96e:	f1c8 0800 	rsb	r8, r8, #0
 800b972:	f018 020f 	ands.w	r2, r8, #15
 800b976:	d00a      	beq.n	800b98e <_strtod_l+0x56e>
 800b978:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <_strtod_l+0x5a4>)
 800b97a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b97e:	4650      	mov	r0, sl
 800b980:	4659      	mov	r1, fp
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 ff99 	bl	80008bc <__aeabi_ddiv>
 800b98a:	4682      	mov	sl, r0
 800b98c:	468b      	mov	fp, r1
 800b98e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b992:	d0d8      	beq.n	800b946 <_strtod_l+0x526>
 800b994:	f1b8 0f1f 	cmp.w	r8, #31
 800b998:	dd1e      	ble.n	800b9d8 <_strtod_l+0x5b8>
 800b99a:	2500      	movs	r5, #0
 800b99c:	462e      	mov	r6, r5
 800b99e:	9509      	str	r5, [sp, #36]	; 0x24
 800b9a0:	9507      	str	r5, [sp, #28]
 800b9a2:	2322      	movs	r3, #34	; 0x22
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	f04f 0b00 	mov.w	fp, #0
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	e789      	b.n	800b8c4 <_strtod_l+0x4a4>
 800b9b0:	080103dd 	.word	0x080103dd
 800b9b4:	08010494 	.word	0x08010494
 800b9b8:	080103d5 	.word	0x080103d5
 800b9bc:	08010671 	.word	0x08010671
 800b9c0:	0801056c 	.word	0x0801056c
 800b9c4:	080107f0 	.word	0x080107f0
 800b9c8:	080107c8 	.word	0x080107c8
 800b9cc:	7ff00000 	.word	0x7ff00000
 800b9d0:	7ca00000 	.word	0x7ca00000
 800b9d4:	7fefffff 	.word	0x7fefffff
 800b9d8:	f018 0310 	ands.w	r3, r8, #16
 800b9dc:	bf18      	it	ne
 800b9de:	236a      	movne	r3, #106	; 0x6a
 800b9e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bd98 <_strtod_l+0x978>
 800b9e4:	9304      	str	r3, [sp, #16]
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	4659      	mov	r1, fp
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f018 0f01 	tst.w	r8, #1
 800b9f0:	d004      	beq.n	800b9fc <_strtod_l+0x5dc>
 800b9f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b9f6:	f7f4 fe37 	bl	8000668 <__aeabi_dmul>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ba00:	f109 0908 	add.w	r9, r9, #8
 800ba04:	d1f2      	bne.n	800b9ec <_strtod_l+0x5cc>
 800ba06:	b10b      	cbz	r3, 800ba0c <_strtod_l+0x5ec>
 800ba08:	4682      	mov	sl, r0
 800ba0a:	468b      	mov	fp, r1
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	b1bb      	cbz	r3, 800ba40 <_strtod_l+0x620>
 800ba10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ba14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	4659      	mov	r1, fp
 800ba1c:	dd10      	ble.n	800ba40 <_strtod_l+0x620>
 800ba1e:	2b1f      	cmp	r3, #31
 800ba20:	f340 8128 	ble.w	800bc74 <_strtod_l+0x854>
 800ba24:	2b34      	cmp	r3, #52	; 0x34
 800ba26:	bfde      	ittt	le
 800ba28:	3b20      	suble	r3, #32
 800ba2a:	f04f 32ff 	movle.w	r2, #4294967295
 800ba2e:	fa02 f303 	lslle.w	r3, r2, r3
 800ba32:	f04f 0a00 	mov.w	sl, #0
 800ba36:	bfcc      	ite	gt
 800ba38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ba3c:	ea03 0b01 	andle.w	fp, r3, r1
 800ba40:	2200      	movs	r2, #0
 800ba42:	2300      	movs	r3, #0
 800ba44:	4650      	mov	r0, sl
 800ba46:	4659      	mov	r1, fp
 800ba48:	f7f5 f876 	bl	8000b38 <__aeabi_dcmpeq>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1a4      	bne.n	800b99a <_strtod_l+0x57a>
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba56:	462b      	mov	r3, r5
 800ba58:	463a      	mov	r2, r7
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f001 fef0 	bl	800d840 <__s2b>
 800ba60:	9009      	str	r0, [sp, #36]	; 0x24
 800ba62:	2800      	cmp	r0, #0
 800ba64:	f43f af24 	beq.w	800b8b0 <_strtod_l+0x490>
 800ba68:	9b07      	ldr	r3, [sp, #28]
 800ba6a:	1b9e      	subs	r6, r3, r6
 800ba6c:	9b08      	ldr	r3, [sp, #32]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfb4      	ite	lt
 800ba72:	4633      	movlt	r3, r6
 800ba74:	2300      	movge	r3, #0
 800ba76:	9310      	str	r3, [sp, #64]	; 0x40
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	2500      	movs	r5, #0
 800ba7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba80:	9318      	str	r3, [sp, #96]	; 0x60
 800ba82:	462e      	mov	r6, r5
 800ba84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba86:	4620      	mov	r0, r4
 800ba88:	6859      	ldr	r1, [r3, #4]
 800ba8a:	f001 fe2d 	bl	800d6e8 <_Balloc>
 800ba8e:	9007      	str	r0, [sp, #28]
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f43f af11 	beq.w	800b8b8 <_strtod_l+0x498>
 800ba96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba98:	691a      	ldr	r2, [r3, #16]
 800ba9a:	3202      	adds	r2, #2
 800ba9c:	f103 010c 	add.w	r1, r3, #12
 800baa0:	0092      	lsls	r2, r2, #2
 800baa2:	300c      	adds	r0, #12
 800baa4:	f7fe fcea 	bl	800a47c <memcpy>
 800baa8:	ec4b ab10 	vmov	d0, sl, fp
 800baac:	aa20      	add	r2, sp, #128	; 0x80
 800baae:	a91f      	add	r1, sp, #124	; 0x7c
 800bab0:	4620      	mov	r0, r4
 800bab2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bab6:	f002 f9ff 	bl	800deb8 <__d2b>
 800baba:	901e      	str	r0, [sp, #120]	; 0x78
 800babc:	2800      	cmp	r0, #0
 800babe:	f43f aefb 	beq.w	800b8b8 <_strtod_l+0x498>
 800bac2:	2101      	movs	r1, #1
 800bac4:	4620      	mov	r0, r4
 800bac6:	f001 ff55 	bl	800d974 <__i2b>
 800baca:	4606      	mov	r6, r0
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f aef3 	beq.w	800b8b8 <_strtod_l+0x498>
 800bad2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bad4:	9904      	ldr	r1, [sp, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	bfab      	itete	ge
 800bada:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800badc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800bade:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800bae0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800bae4:	bfac      	ite	ge
 800bae6:	eb03 0902 	addge.w	r9, r3, r2
 800baea:	1ad7      	sublt	r7, r2, r3
 800baec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800baee:	eba3 0801 	sub.w	r8, r3, r1
 800baf2:	4490      	add	r8, r2
 800baf4:	4ba3      	ldr	r3, [pc, #652]	; (800bd84 <_strtod_l+0x964>)
 800baf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800bafa:	4598      	cmp	r8, r3
 800bafc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb00:	f280 80cc 	bge.w	800bc9c <_strtod_l+0x87c>
 800bb04:	eba3 0308 	sub.w	r3, r3, r8
 800bb08:	2b1f      	cmp	r3, #31
 800bb0a:	eba2 0203 	sub.w	r2, r2, r3
 800bb0e:	f04f 0101 	mov.w	r1, #1
 800bb12:	f300 80b6 	bgt.w	800bc82 <_strtod_l+0x862>
 800bb16:	fa01 f303 	lsl.w	r3, r1, r3
 800bb1a:	9311      	str	r3, [sp, #68]	; 0x44
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bb20:	eb09 0802 	add.w	r8, r9, r2
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	45c1      	cmp	r9, r8
 800bb28:	4417      	add	r7, r2
 800bb2a:	441f      	add	r7, r3
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	bfa8      	it	ge
 800bb30:	4643      	movge	r3, r8
 800bb32:	42bb      	cmp	r3, r7
 800bb34:	bfa8      	it	ge
 800bb36:	463b      	movge	r3, r7
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfc2      	ittt	gt
 800bb3c:	eba8 0803 	subgt.w	r8, r8, r3
 800bb40:	1aff      	subgt	r7, r7, r3
 800bb42:	eba9 0903 	subgt.w	r9, r9, r3
 800bb46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	dd17      	ble.n	800bb7c <_strtod_l+0x75c>
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4620      	mov	r0, r4
 800bb52:	f001 ffcb 	bl	800daec <__pow5mult>
 800bb56:	4606      	mov	r6, r0
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	f43f aead 	beq.w	800b8b8 <_strtod_l+0x498>
 800bb5e:	4601      	mov	r1, r0
 800bb60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bb62:	4620      	mov	r0, r4
 800bb64:	f001 ff1c 	bl	800d9a0 <__multiply>
 800bb68:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	f43f aea4 	beq.w	800b8b8 <_strtod_l+0x498>
 800bb70:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bb72:	4620      	mov	r0, r4
 800bb74:	f001 fdf8 	bl	800d768 <_Bfree>
 800bb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb7a:	931e      	str	r3, [sp, #120]	; 0x78
 800bb7c:	f1b8 0f00 	cmp.w	r8, #0
 800bb80:	f300 8091 	bgt.w	800bca6 <_strtod_l+0x886>
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dd08      	ble.n	800bb9c <_strtod_l+0x77c>
 800bb8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb8c:	9907      	ldr	r1, [sp, #28]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f001 ffac 	bl	800daec <__pow5mult>
 800bb94:	9007      	str	r0, [sp, #28]
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f43f ae8e 	beq.w	800b8b8 <_strtod_l+0x498>
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	dd08      	ble.n	800bbb2 <_strtod_l+0x792>
 800bba0:	9907      	ldr	r1, [sp, #28]
 800bba2:	463a      	mov	r2, r7
 800bba4:	4620      	mov	r0, r4
 800bba6:	f001 fffb 	bl	800dba0 <__lshift>
 800bbaa:	9007      	str	r0, [sp, #28]
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f43f ae83 	beq.w	800b8b8 <_strtod_l+0x498>
 800bbb2:	f1b9 0f00 	cmp.w	r9, #0
 800bbb6:	dd08      	ble.n	800bbca <_strtod_l+0x7aa>
 800bbb8:	4631      	mov	r1, r6
 800bbba:	464a      	mov	r2, r9
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f001 ffef 	bl	800dba0 <__lshift>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f43f ae77 	beq.w	800b8b8 <_strtod_l+0x498>
 800bbca:	9a07      	ldr	r2, [sp, #28]
 800bbcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f002 f86e 	bl	800dcb0 <__mdiff>
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f43f ae6e 	beq.w	800b8b8 <_strtod_l+0x498>
 800bbdc:	68c3      	ldr	r3, [r0, #12]
 800bbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60c3      	str	r3, [r0, #12]
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	f002 f847 	bl	800dc78 <__mcmp>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	da65      	bge.n	800bcba <_strtod_l+0x89a>
 800bbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbf0:	ea53 030a 	orrs.w	r3, r3, sl
 800bbf4:	f040 8087 	bne.w	800bd06 <_strtod_l+0x8e6>
 800bbf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f040 8082 	bne.w	800bd06 <_strtod_l+0x8e6>
 800bc02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc06:	0d1b      	lsrs	r3, r3, #20
 800bc08:	051b      	lsls	r3, r3, #20
 800bc0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc0e:	d97a      	bls.n	800bd06 <_strtod_l+0x8e6>
 800bc10:	696b      	ldr	r3, [r5, #20]
 800bc12:	b913      	cbnz	r3, 800bc1a <_strtod_l+0x7fa>
 800bc14:	692b      	ldr	r3, [r5, #16]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	dd75      	ble.n	800bd06 <_strtod_l+0x8e6>
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f001 ffbe 	bl	800dba0 <__lshift>
 800bc24:	4631      	mov	r1, r6
 800bc26:	4605      	mov	r5, r0
 800bc28:	f002 f826 	bl	800dc78 <__mcmp>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	dd6a      	ble.n	800bd06 <_strtod_l+0x8e6>
 800bc30:	9904      	ldr	r1, [sp, #16]
 800bc32:	4a55      	ldr	r2, [pc, #340]	; (800bd88 <_strtod_l+0x968>)
 800bc34:	465b      	mov	r3, fp
 800bc36:	2900      	cmp	r1, #0
 800bc38:	f000 8085 	beq.w	800bd46 <_strtod_l+0x926>
 800bc3c:	ea02 010b 	and.w	r1, r2, fp
 800bc40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc44:	dc7f      	bgt.n	800bd46 <_strtod_l+0x926>
 800bc46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc4a:	f77f aeaa 	ble.w	800b9a2 <_strtod_l+0x582>
 800bc4e:	4a4f      	ldr	r2, [pc, #316]	; (800bd8c <_strtod_l+0x96c>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800bc56:	4650      	mov	r0, sl
 800bc58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	f7f4 fd03 	bl	8000668 <__aeabi_dmul>
 800bc62:	460b      	mov	r3, r1
 800bc64:	4303      	orrs	r3, r0
 800bc66:	bf08      	it	eq
 800bc68:	2322      	moveq	r3, #34	; 0x22
 800bc6a:	4682      	mov	sl, r0
 800bc6c:	468b      	mov	fp, r1
 800bc6e:	bf08      	it	eq
 800bc70:	6023      	streq	r3, [r4, #0]
 800bc72:	e62b      	b.n	800b8cc <_strtod_l+0x4ac>
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7c:	ea03 0a0a 	and.w	sl, r3, sl
 800bc80:	e6de      	b.n	800ba40 <_strtod_l+0x620>
 800bc82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bc86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bc8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bc8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bc92:	fa01 f308 	lsl.w	r3, r1, r8
 800bc96:	930c      	str	r3, [sp, #48]	; 0x30
 800bc98:	9111      	str	r1, [sp, #68]	; 0x44
 800bc9a:	e741      	b.n	800bb20 <_strtod_l+0x700>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	930c      	str	r3, [sp, #48]	; 0x30
 800bca0:	2301      	movs	r3, #1
 800bca2:	9311      	str	r3, [sp, #68]	; 0x44
 800bca4:	e73c      	b.n	800bb20 <_strtod_l+0x700>
 800bca6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bca8:	4642      	mov	r2, r8
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f001 ff78 	bl	800dba0 <__lshift>
 800bcb0:	901e      	str	r0, [sp, #120]	; 0x78
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f47f af66 	bne.w	800bb84 <_strtod_l+0x764>
 800bcb8:	e5fe      	b.n	800b8b8 <_strtod_l+0x498>
 800bcba:	465f      	mov	r7, fp
 800bcbc:	d16e      	bne.n	800bd9c <_strtod_l+0x97c>
 800bcbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bcc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc4:	b342      	cbz	r2, 800bd18 <_strtod_l+0x8f8>
 800bcc6:	4a32      	ldr	r2, [pc, #200]	; (800bd90 <_strtod_l+0x970>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d128      	bne.n	800bd1e <_strtod_l+0x8fe>
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	4650      	mov	r0, sl
 800bcd0:	b1eb      	cbz	r3, 800bd0e <_strtod_l+0x8ee>
 800bcd2:	4a2d      	ldr	r2, [pc, #180]	; (800bd88 <_strtod_l+0x968>)
 800bcd4:	403a      	ands	r2, r7
 800bcd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bcda:	f04f 31ff 	mov.w	r1, #4294967295
 800bcde:	d819      	bhi.n	800bd14 <_strtod_l+0x8f4>
 800bce0:	0d12      	lsrs	r2, r2, #20
 800bce2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bce6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcea:	4298      	cmp	r0, r3
 800bcec:	d117      	bne.n	800bd1e <_strtod_l+0x8fe>
 800bcee:	4b29      	ldr	r3, [pc, #164]	; (800bd94 <_strtod_l+0x974>)
 800bcf0:	429f      	cmp	r7, r3
 800bcf2:	d102      	bne.n	800bcfa <_strtod_l+0x8da>
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	f43f addf 	beq.w	800b8b8 <_strtod_l+0x498>
 800bcfa:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <_strtod_l+0x968>)
 800bcfc:	403b      	ands	r3, r7
 800bcfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bd02:	f04f 0a00 	mov.w	sl, #0
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1a0      	bne.n	800bc4e <_strtod_l+0x82e>
 800bd0c:	e5de      	b.n	800b8cc <_strtod_l+0x4ac>
 800bd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd12:	e7ea      	b.n	800bcea <_strtod_l+0x8ca>
 800bd14:	460b      	mov	r3, r1
 800bd16:	e7e8      	b.n	800bcea <_strtod_l+0x8ca>
 800bd18:	ea53 030a 	orrs.w	r3, r3, sl
 800bd1c:	d088      	beq.n	800bc30 <_strtod_l+0x810>
 800bd1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd20:	b1db      	cbz	r3, 800bd5a <_strtod_l+0x93a>
 800bd22:	423b      	tst	r3, r7
 800bd24:	d0ef      	beq.n	800bd06 <_strtod_l+0x8e6>
 800bd26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd28:	9a04      	ldr	r2, [sp, #16]
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	4659      	mov	r1, fp
 800bd2e:	b1c3      	cbz	r3, 800bd62 <_strtod_l+0x942>
 800bd30:	f7ff fb58 	bl	800b3e4 <sulp>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd3c:	f7f4 fade 	bl	80002fc <__adddf3>
 800bd40:	4682      	mov	sl, r0
 800bd42:	468b      	mov	fp, r1
 800bd44:	e7df      	b.n	800bd06 <_strtod_l+0x8e6>
 800bd46:	4013      	ands	r3, r2
 800bd48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd54:	f04f 3aff 	mov.w	sl, #4294967295
 800bd58:	e7d5      	b.n	800bd06 <_strtod_l+0x8e6>
 800bd5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd5c:	ea13 0f0a 	tst.w	r3, sl
 800bd60:	e7e0      	b.n	800bd24 <_strtod_l+0x904>
 800bd62:	f7ff fb3f 	bl	800b3e4 <sulp>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd6e:	f7f4 fac3 	bl	80002f8 <__aeabi_dsub>
 800bd72:	2200      	movs	r2, #0
 800bd74:	2300      	movs	r3, #0
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	f7f4 fedd 	bl	8000b38 <__aeabi_dcmpeq>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0c1      	beq.n	800bd06 <_strtod_l+0x8e6>
 800bd82:	e60e      	b.n	800b9a2 <_strtod_l+0x582>
 800bd84:	fffffc02 	.word	0xfffffc02
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	39500000 	.word	0x39500000
 800bd90:	000fffff 	.word	0x000fffff
 800bd94:	7fefffff 	.word	0x7fefffff
 800bd98:	080104a8 	.word	0x080104a8
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f002 f8e6 	bl	800df70 <__ratio>
 800bda4:	ec59 8b10 	vmov	r8, r9, d0
 800bda8:	ee10 0a10 	vmov	r0, s0
 800bdac:	2200      	movs	r2, #0
 800bdae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	f7f4 fed4 	bl	8000b60 <__aeabi_dcmple>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d07c      	beq.n	800beb6 <_strtod_l+0xa96>
 800bdbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d04c      	beq.n	800be5c <_strtod_l+0xa3c>
 800bdc2:	4b95      	ldr	r3, [pc, #596]	; (800c018 <_strtod_l+0xbf8>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bdca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c018 <_strtod_l+0xbf8>
 800bdce:	f04f 0800 	mov.w	r8, #0
 800bdd2:	4b92      	ldr	r3, [pc, #584]	; (800c01c <_strtod_l+0xbfc>)
 800bdd4:	403b      	ands	r3, r7
 800bdd6:	9311      	str	r3, [sp, #68]	; 0x44
 800bdd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdda:	4b91      	ldr	r3, [pc, #580]	; (800c020 <_strtod_l+0xc00>)
 800bddc:	429a      	cmp	r2, r3
 800bdde:	f040 80b2 	bne.w	800bf46 <_strtod_l+0xb26>
 800bde2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bde6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bdee:	ec4b ab10 	vmov	d0, sl, fp
 800bdf2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bdf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bdfa:	f001 ffe1 	bl	800ddc0 <__ulp>
 800bdfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be02:	ec53 2b10 	vmov	r2, r3, d0
 800be06:	f7f4 fc2f 	bl	8000668 <__aeabi_dmul>
 800be0a:	4652      	mov	r2, sl
 800be0c:	465b      	mov	r3, fp
 800be0e:	f7f4 fa75 	bl	80002fc <__adddf3>
 800be12:	460b      	mov	r3, r1
 800be14:	4981      	ldr	r1, [pc, #516]	; (800c01c <_strtod_l+0xbfc>)
 800be16:	4a83      	ldr	r2, [pc, #524]	; (800c024 <_strtod_l+0xc04>)
 800be18:	4019      	ands	r1, r3
 800be1a:	4291      	cmp	r1, r2
 800be1c:	4682      	mov	sl, r0
 800be1e:	d95e      	bls.n	800bede <_strtod_l+0xabe>
 800be20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800be26:	4293      	cmp	r3, r2
 800be28:	d103      	bne.n	800be32 <_strtod_l+0xa12>
 800be2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be2c:	3301      	adds	r3, #1
 800be2e:	f43f ad43 	beq.w	800b8b8 <_strtod_l+0x498>
 800be32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c030 <_strtod_l+0xc10>
 800be36:	f04f 3aff 	mov.w	sl, #4294967295
 800be3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800be3c:	4620      	mov	r0, r4
 800be3e:	f001 fc93 	bl	800d768 <_Bfree>
 800be42:	9907      	ldr	r1, [sp, #28]
 800be44:	4620      	mov	r0, r4
 800be46:	f001 fc8f 	bl	800d768 <_Bfree>
 800be4a:	4631      	mov	r1, r6
 800be4c:	4620      	mov	r0, r4
 800be4e:	f001 fc8b 	bl	800d768 <_Bfree>
 800be52:	4629      	mov	r1, r5
 800be54:	4620      	mov	r0, r4
 800be56:	f001 fc87 	bl	800d768 <_Bfree>
 800be5a:	e613      	b.n	800ba84 <_strtod_l+0x664>
 800be5c:	f1ba 0f00 	cmp.w	sl, #0
 800be60:	d11b      	bne.n	800be9a <_strtod_l+0xa7a>
 800be62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be66:	b9f3      	cbnz	r3, 800bea6 <_strtod_l+0xa86>
 800be68:	4b6b      	ldr	r3, [pc, #428]	; (800c018 <_strtod_l+0xbf8>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	4640      	mov	r0, r8
 800be6e:	4649      	mov	r1, r9
 800be70:	f7f4 fe6c 	bl	8000b4c <__aeabi_dcmplt>
 800be74:	b9d0      	cbnz	r0, 800beac <_strtod_l+0xa8c>
 800be76:	4640      	mov	r0, r8
 800be78:	4649      	mov	r1, r9
 800be7a:	4b6b      	ldr	r3, [pc, #428]	; (800c028 <_strtod_l+0xc08>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	f7f4 fbf3 	bl	8000668 <__aeabi_dmul>
 800be82:	4680      	mov	r8, r0
 800be84:	4689      	mov	r9, r1
 800be86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800be8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800be8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800be90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800be94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800be98:	e79b      	b.n	800bdd2 <_strtod_l+0x9b2>
 800be9a:	f1ba 0f01 	cmp.w	sl, #1
 800be9e:	d102      	bne.n	800bea6 <_strtod_l+0xa86>
 800bea0:	2f00      	cmp	r7, #0
 800bea2:	f43f ad7e 	beq.w	800b9a2 <_strtod_l+0x582>
 800bea6:	4b61      	ldr	r3, [pc, #388]	; (800c02c <_strtod_l+0xc0c>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	e78c      	b.n	800bdc6 <_strtod_l+0x9a6>
 800beac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c028 <_strtod_l+0xc08>
 800beb0:	f04f 0800 	mov.w	r8, #0
 800beb4:	e7e7      	b.n	800be86 <_strtod_l+0xa66>
 800beb6:	4b5c      	ldr	r3, [pc, #368]	; (800c028 <_strtod_l+0xc08>)
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	2200      	movs	r2, #0
 800bebe:	f7f4 fbd3 	bl	8000668 <__aeabi_dmul>
 800bec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bec4:	4680      	mov	r8, r0
 800bec6:	4689      	mov	r9, r1
 800bec8:	b933      	cbnz	r3, 800bed8 <_strtod_l+0xab8>
 800beca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bece:	9012      	str	r0, [sp, #72]	; 0x48
 800bed0:	9313      	str	r3, [sp, #76]	; 0x4c
 800bed2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bed6:	e7dd      	b.n	800be94 <_strtod_l+0xa74>
 800bed8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bedc:	e7f9      	b.n	800bed2 <_strtod_l+0xab2>
 800bede:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bee2:	9b04      	ldr	r3, [sp, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1a8      	bne.n	800be3a <_strtod_l+0xa1a>
 800bee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800beec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800beee:	0d1b      	lsrs	r3, r3, #20
 800bef0:	051b      	lsls	r3, r3, #20
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d1a1      	bne.n	800be3a <_strtod_l+0xa1a>
 800bef6:	4640      	mov	r0, r8
 800bef8:	4649      	mov	r1, r9
 800befa:	f7f4 ff15 	bl	8000d28 <__aeabi_d2lz>
 800befe:	f7f4 fb85 	bl	800060c <__aeabi_l2d>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	f7f4 f9f5 	bl	80002f8 <__aeabi_dsub>
 800bf0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf14:	ea43 030a 	orr.w	r3, r3, sl
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	4689      	mov	r9, r1
 800bf1e:	d053      	beq.n	800bfc8 <_strtod_l+0xba8>
 800bf20:	a335      	add	r3, pc, #212	; (adr r3, 800bff8 <_strtod_l+0xbd8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fe11 	bl	8000b4c <__aeabi_dcmplt>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	f47f acce 	bne.w	800b8cc <_strtod_l+0x4ac>
 800bf30:	a333      	add	r3, pc, #204	; (adr r3, 800c000 <_strtod_l+0xbe0>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	4640      	mov	r0, r8
 800bf38:	4649      	mov	r1, r9
 800bf3a:	f7f4 fe25 	bl	8000b88 <__aeabi_dcmpgt>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f43f af7b 	beq.w	800be3a <_strtod_l+0xa1a>
 800bf44:	e4c2      	b.n	800b8cc <_strtod_l+0x4ac>
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	b333      	cbz	r3, 800bf98 <_strtod_l+0xb78>
 800bf4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf50:	d822      	bhi.n	800bf98 <_strtod_l+0xb78>
 800bf52:	a32d      	add	r3, pc, #180	; (adr r3, 800c008 <_strtod_l+0xbe8>)
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 fe00 	bl	8000b60 <__aeabi_dcmple>
 800bf60:	b1a0      	cbz	r0, 800bf8c <_strtod_l+0xb6c>
 800bf62:	4649      	mov	r1, r9
 800bf64:	4640      	mov	r0, r8
 800bf66:	f7f4 fe57 	bl	8000c18 <__aeabi_d2uiz>
 800bf6a:	2801      	cmp	r0, #1
 800bf6c:	bf38      	it	cc
 800bf6e:	2001      	movcc	r0, #1
 800bf70:	f7f4 fb00 	bl	8000574 <__aeabi_ui2d>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf76:	4680      	mov	r8, r0
 800bf78:	4689      	mov	r9, r1
 800bf7a:	bb13      	cbnz	r3, 800bfc2 <_strtod_l+0xba2>
 800bf7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf80:	9014      	str	r0, [sp, #80]	; 0x50
 800bf82:	9315      	str	r3, [sp, #84]	; 0x54
 800bf84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bf88:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bf8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bf90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	930d      	str	r3, [sp, #52]	; 0x34
 800bf98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf9c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bfa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bfa4:	f001 ff0c 	bl	800ddc0 <__ulp>
 800bfa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfac:	ec53 2b10 	vmov	r2, r3, d0
 800bfb0:	f7f4 fb5a 	bl	8000668 <__aeabi_dmul>
 800bfb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bfb8:	f7f4 f9a0 	bl	80002fc <__adddf3>
 800bfbc:	4682      	mov	sl, r0
 800bfbe:	468b      	mov	fp, r1
 800bfc0:	e78f      	b.n	800bee2 <_strtod_l+0xac2>
 800bfc2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bfc6:	e7dd      	b.n	800bf84 <_strtod_l+0xb64>
 800bfc8:	a311      	add	r3, pc, #68	; (adr r3, 800c010 <_strtod_l+0xbf0>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 fdbd 	bl	8000b4c <__aeabi_dcmplt>
 800bfd2:	e7b4      	b.n	800bf3e <_strtod_l+0xb1e>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	930e      	str	r3, [sp, #56]	; 0x38
 800bfd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	f7ff ba65 	b.w	800b4ac <_strtod_l+0x8c>
 800bfe2:	2b65      	cmp	r3, #101	; 0x65
 800bfe4:	f43f ab5d 	beq.w	800b6a2 <_strtod_l+0x282>
 800bfe8:	2b45      	cmp	r3, #69	; 0x45
 800bfea:	f43f ab5a 	beq.w	800b6a2 <_strtod_l+0x282>
 800bfee:	2201      	movs	r2, #1
 800bff0:	f7ff bb92 	b.w	800b718 <_strtod_l+0x2f8>
 800bff4:	f3af 8000 	nop.w
 800bff8:	94a03595 	.word	0x94a03595
 800bffc:	3fdfffff 	.word	0x3fdfffff
 800c000:	35afe535 	.word	0x35afe535
 800c004:	3fe00000 	.word	0x3fe00000
 800c008:	ffc00000 	.word	0xffc00000
 800c00c:	41dfffff 	.word	0x41dfffff
 800c010:	94a03595 	.word	0x94a03595
 800c014:	3fcfffff 	.word	0x3fcfffff
 800c018:	3ff00000 	.word	0x3ff00000
 800c01c:	7ff00000 	.word	0x7ff00000
 800c020:	7fe00000 	.word	0x7fe00000
 800c024:	7c9fffff 	.word	0x7c9fffff
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	bff00000 	.word	0xbff00000
 800c030:	7fefffff 	.word	0x7fefffff

0800c034 <_strtod_r>:
 800c034:	4b01      	ldr	r3, [pc, #4]	; (800c03c <_strtod_r+0x8>)
 800c036:	f7ff b9f3 	b.w	800b420 <_strtod_l>
 800c03a:	bf00      	nop
 800c03c:	200003f4 	.word	0x200003f4

0800c040 <strtok>:
 800c040:	4b16      	ldr	r3, [pc, #88]	; (800c09c <strtok+0x5c>)
 800c042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c044:	681e      	ldr	r6, [r3, #0]
 800c046:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c048:	4605      	mov	r5, r0
 800c04a:	b9fc      	cbnz	r4, 800c08c <strtok+0x4c>
 800c04c:	2050      	movs	r0, #80	; 0x50
 800c04e:	9101      	str	r1, [sp, #4]
 800c050:	f001 fb30 	bl	800d6b4 <malloc>
 800c054:	9901      	ldr	r1, [sp, #4]
 800c056:	65b0      	str	r0, [r6, #88]	; 0x58
 800c058:	4602      	mov	r2, r0
 800c05a:	b920      	cbnz	r0, 800c066 <strtok+0x26>
 800c05c:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <strtok+0x60>)
 800c05e:	4811      	ldr	r0, [pc, #68]	; (800c0a4 <strtok+0x64>)
 800c060:	2157      	movs	r1, #87	; 0x57
 800c062:	f000 f909 	bl	800c278 <__assert_func>
 800c066:	e9c0 4400 	strd	r4, r4, [r0]
 800c06a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c06e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c072:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c076:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c07a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c07e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c082:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c086:	6184      	str	r4, [r0, #24]
 800c088:	7704      	strb	r4, [r0, #28]
 800c08a:	6244      	str	r4, [r0, #36]	; 0x24
 800c08c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c08e:	2301      	movs	r3, #1
 800c090:	4628      	mov	r0, r5
 800c092:	b002      	add	sp, #8
 800c094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c098:	f000 b806 	b.w	800c0a8 <__strtok_r>
 800c09c:	2000038c 	.word	0x2000038c
 800c0a0:	08010409 	.word	0x08010409
 800c0a4:	080104d0 	.word	0x080104d0

0800c0a8 <__strtok_r>:
 800c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0aa:	b908      	cbnz	r0, 800c0b0 <__strtok_r+0x8>
 800c0ac:	6810      	ldr	r0, [r2, #0]
 800c0ae:	b188      	cbz	r0, 800c0d4 <__strtok_r+0x2c>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c0b8:	460f      	mov	r7, r1
 800c0ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c0be:	b91e      	cbnz	r6, 800c0c8 <__strtok_r+0x20>
 800c0c0:	b965      	cbnz	r5, 800c0dc <__strtok_r+0x34>
 800c0c2:	6015      	str	r5, [r2, #0]
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	e005      	b.n	800c0d4 <__strtok_r+0x2c>
 800c0c8:	42b5      	cmp	r5, r6
 800c0ca:	d1f6      	bne.n	800c0ba <__strtok_r+0x12>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1f0      	bne.n	800c0b2 <__strtok_r+0xa>
 800c0d0:	6014      	str	r4, [r2, #0]
 800c0d2:	7003      	strb	r3, [r0, #0]
 800c0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0d6:	461c      	mov	r4, r3
 800c0d8:	e00c      	b.n	800c0f4 <__strtok_r+0x4c>
 800c0da:	b915      	cbnz	r5, 800c0e2 <__strtok_r+0x3a>
 800c0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0e0:	460e      	mov	r6, r1
 800c0e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c0e6:	42ab      	cmp	r3, r5
 800c0e8:	d1f7      	bne.n	800c0da <__strtok_r+0x32>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0f3      	beq.n	800c0d6 <__strtok_r+0x2e>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c0f4:	6014      	str	r4, [r2, #0]
 800c0f6:	e7ed      	b.n	800c0d4 <__strtok_r+0x2c>

0800c0f8 <_strtol_l.isra.0>:
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fe:	d001      	beq.n	800c104 <_strtol_l.isra.0+0xc>
 800c100:	2b24      	cmp	r3, #36	; 0x24
 800c102:	d906      	bls.n	800c112 <_strtol_l.isra.0+0x1a>
 800c104:	f7fe f990 	bl	800a428 <__errno>
 800c108:	2316      	movs	r3, #22
 800c10a:	6003      	str	r3, [r0, #0]
 800c10c:	2000      	movs	r0, #0
 800c10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c112:	4f3a      	ldr	r7, [pc, #232]	; (800c1fc <_strtol_l.isra.0+0x104>)
 800c114:	468e      	mov	lr, r1
 800c116:	4676      	mov	r6, lr
 800c118:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c11c:	5de5      	ldrb	r5, [r4, r7]
 800c11e:	f015 0508 	ands.w	r5, r5, #8
 800c122:	d1f8      	bne.n	800c116 <_strtol_l.isra.0+0x1e>
 800c124:	2c2d      	cmp	r4, #45	; 0x2d
 800c126:	d134      	bne.n	800c192 <_strtol_l.isra.0+0x9a>
 800c128:	f89e 4000 	ldrb.w	r4, [lr]
 800c12c:	f04f 0801 	mov.w	r8, #1
 800c130:	f106 0e02 	add.w	lr, r6, #2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d05c      	beq.n	800c1f2 <_strtol_l.isra.0+0xfa>
 800c138:	2b10      	cmp	r3, #16
 800c13a:	d10c      	bne.n	800c156 <_strtol_l.isra.0+0x5e>
 800c13c:	2c30      	cmp	r4, #48	; 0x30
 800c13e:	d10a      	bne.n	800c156 <_strtol_l.isra.0+0x5e>
 800c140:	f89e 4000 	ldrb.w	r4, [lr]
 800c144:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c148:	2c58      	cmp	r4, #88	; 0x58
 800c14a:	d14d      	bne.n	800c1e8 <_strtol_l.isra.0+0xf0>
 800c14c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c150:	2310      	movs	r3, #16
 800c152:	f10e 0e02 	add.w	lr, lr, #2
 800c156:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c15a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c15e:	2600      	movs	r6, #0
 800c160:	fbbc f9f3 	udiv	r9, ip, r3
 800c164:	4635      	mov	r5, r6
 800c166:	fb03 ca19 	mls	sl, r3, r9, ip
 800c16a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c16e:	2f09      	cmp	r7, #9
 800c170:	d818      	bhi.n	800c1a4 <_strtol_l.isra.0+0xac>
 800c172:	463c      	mov	r4, r7
 800c174:	42a3      	cmp	r3, r4
 800c176:	dd24      	ble.n	800c1c2 <_strtol_l.isra.0+0xca>
 800c178:	2e00      	cmp	r6, #0
 800c17a:	db1f      	blt.n	800c1bc <_strtol_l.isra.0+0xc4>
 800c17c:	45a9      	cmp	r9, r5
 800c17e:	d31d      	bcc.n	800c1bc <_strtol_l.isra.0+0xc4>
 800c180:	d101      	bne.n	800c186 <_strtol_l.isra.0+0x8e>
 800c182:	45a2      	cmp	sl, r4
 800c184:	db1a      	blt.n	800c1bc <_strtol_l.isra.0+0xc4>
 800c186:	fb05 4503 	mla	r5, r5, r3, r4
 800c18a:	2601      	movs	r6, #1
 800c18c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c190:	e7eb      	b.n	800c16a <_strtol_l.isra.0+0x72>
 800c192:	2c2b      	cmp	r4, #43	; 0x2b
 800c194:	bf08      	it	eq
 800c196:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c19a:	46a8      	mov	r8, r5
 800c19c:	bf08      	it	eq
 800c19e:	f106 0e02 	addeq.w	lr, r6, #2
 800c1a2:	e7c7      	b.n	800c134 <_strtol_l.isra.0+0x3c>
 800c1a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c1a8:	2f19      	cmp	r7, #25
 800c1aa:	d801      	bhi.n	800c1b0 <_strtol_l.isra.0+0xb8>
 800c1ac:	3c37      	subs	r4, #55	; 0x37
 800c1ae:	e7e1      	b.n	800c174 <_strtol_l.isra.0+0x7c>
 800c1b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c1b4:	2f19      	cmp	r7, #25
 800c1b6:	d804      	bhi.n	800c1c2 <_strtol_l.isra.0+0xca>
 800c1b8:	3c57      	subs	r4, #87	; 0x57
 800c1ba:	e7db      	b.n	800c174 <_strtol_l.isra.0+0x7c>
 800c1bc:	f04f 36ff 	mov.w	r6, #4294967295
 800c1c0:	e7e4      	b.n	800c18c <_strtol_l.isra.0+0x94>
 800c1c2:	2e00      	cmp	r6, #0
 800c1c4:	da05      	bge.n	800c1d2 <_strtol_l.isra.0+0xda>
 800c1c6:	2322      	movs	r3, #34	; 0x22
 800c1c8:	6003      	str	r3, [r0, #0]
 800c1ca:	4665      	mov	r5, ip
 800c1cc:	b942      	cbnz	r2, 800c1e0 <_strtol_l.isra.0+0xe8>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	e79d      	b.n	800c10e <_strtol_l.isra.0+0x16>
 800c1d2:	f1b8 0f00 	cmp.w	r8, #0
 800c1d6:	d000      	beq.n	800c1da <_strtol_l.isra.0+0xe2>
 800c1d8:	426d      	negs	r5, r5
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d0f7      	beq.n	800c1ce <_strtol_l.isra.0+0xd6>
 800c1de:	b10e      	cbz	r6, 800c1e4 <_strtol_l.isra.0+0xec>
 800c1e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c1e4:	6011      	str	r1, [r2, #0]
 800c1e6:	e7f2      	b.n	800c1ce <_strtol_l.isra.0+0xd6>
 800c1e8:	2430      	movs	r4, #48	; 0x30
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1b3      	bne.n	800c156 <_strtol_l.isra.0+0x5e>
 800c1ee:	2308      	movs	r3, #8
 800c1f0:	e7b1      	b.n	800c156 <_strtol_l.isra.0+0x5e>
 800c1f2:	2c30      	cmp	r4, #48	; 0x30
 800c1f4:	d0a4      	beq.n	800c140 <_strtol_l.isra.0+0x48>
 800c1f6:	230a      	movs	r3, #10
 800c1f8:	e7ad      	b.n	800c156 <_strtol_l.isra.0+0x5e>
 800c1fa:	bf00      	nop
 800c1fc:	0801056e 	.word	0x0801056e

0800c200 <_strtol_r>:
 800c200:	f7ff bf7a 	b.w	800c0f8 <_strtol_l.isra.0>

0800c204 <_vsniprintf_r>:
 800c204:	b530      	push	{r4, r5, lr}
 800c206:	1e14      	subs	r4, r2, #0
 800c208:	4605      	mov	r5, r0
 800c20a:	b09b      	sub	sp, #108	; 0x6c
 800c20c:	4618      	mov	r0, r3
 800c20e:	da05      	bge.n	800c21c <_vsniprintf_r+0x18>
 800c210:	238b      	movs	r3, #139	; 0x8b
 800c212:	602b      	str	r3, [r5, #0]
 800c214:	f04f 30ff 	mov.w	r0, #4294967295
 800c218:	b01b      	add	sp, #108	; 0x6c
 800c21a:	bd30      	pop	{r4, r5, pc}
 800c21c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c220:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c224:	bf14      	ite	ne
 800c226:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c22a:	4623      	moveq	r3, r4
 800c22c:	9302      	str	r3, [sp, #8]
 800c22e:	9305      	str	r3, [sp, #20]
 800c230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c234:	9100      	str	r1, [sp, #0]
 800c236:	9104      	str	r1, [sp, #16]
 800c238:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c23c:	4602      	mov	r2, r0
 800c23e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c240:	4669      	mov	r1, sp
 800c242:	4628      	mov	r0, r5
 800c244:	f002 f820 	bl	800e288 <_svfiprintf_r>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	bfbc      	itt	lt
 800c24c:	238b      	movlt	r3, #139	; 0x8b
 800c24e:	602b      	strlt	r3, [r5, #0]
 800c250:	2c00      	cmp	r4, #0
 800c252:	d0e1      	beq.n	800c218 <_vsniprintf_r+0x14>
 800c254:	9b00      	ldr	r3, [sp, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	e7dd      	b.n	800c218 <_vsniprintf_r+0x14>

0800c25c <vsniprintf>:
 800c25c:	b507      	push	{r0, r1, r2, lr}
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4613      	mov	r3, r2
 800c262:	460a      	mov	r2, r1
 800c264:	4601      	mov	r1, r0
 800c266:	4803      	ldr	r0, [pc, #12]	; (800c274 <vsniprintf+0x18>)
 800c268:	6800      	ldr	r0, [r0, #0]
 800c26a:	f7ff ffcb 	bl	800c204 <_vsniprintf_r>
 800c26e:	b003      	add	sp, #12
 800c270:	f85d fb04 	ldr.w	pc, [sp], #4
 800c274:	2000038c 	.word	0x2000038c

0800c278 <__assert_func>:
 800c278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c27a:	4614      	mov	r4, r2
 800c27c:	461a      	mov	r2, r3
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <__assert_func+0x2c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4605      	mov	r5, r0
 800c284:	68d8      	ldr	r0, [r3, #12]
 800c286:	b14c      	cbz	r4, 800c29c <__assert_func+0x24>
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <__assert_func+0x30>)
 800c28a:	9100      	str	r1, [sp, #0]
 800c28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c290:	4906      	ldr	r1, [pc, #24]	; (800c2ac <__assert_func+0x34>)
 800c292:	462b      	mov	r3, r5
 800c294:	f000 fe88 	bl	800cfa8 <fiprintf>
 800c298:	f002 fb58 	bl	800e94c <abort>
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <__assert_func+0x38>)
 800c29e:	461c      	mov	r4, r3
 800c2a0:	e7f3      	b.n	800c28a <__assert_func+0x12>
 800c2a2:	bf00      	nop
 800c2a4:	2000038c 	.word	0x2000038c
 800c2a8:	08010531 	.word	0x08010531
 800c2ac:	0801053e 	.word	0x0801053e
 800c2b0:	0801056c 	.word	0x0801056c

0800c2b4 <quorem>:
 800c2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	6903      	ldr	r3, [r0, #16]
 800c2ba:	690c      	ldr	r4, [r1, #16]
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	4607      	mov	r7, r0
 800c2c0:	f2c0 8081 	blt.w	800c3c6 <quorem+0x112>
 800c2c4:	3c01      	subs	r4, #1
 800c2c6:	f101 0814 	add.w	r8, r1, #20
 800c2ca:	f100 0514 	add.w	r5, r0, #20
 800c2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2ec:	d331      	bcc.n	800c352 <quorem+0x9e>
 800c2ee:	f04f 0e00 	mov.w	lr, #0
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	46ac      	mov	ip, r5
 800c2f6:	46f2      	mov	sl, lr
 800c2f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2fc:	b293      	uxth	r3, r2
 800c2fe:	fb06 e303 	mla	r3, r6, r3, lr
 800c302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	ebaa 0303 	sub.w	r3, sl, r3
 800c30c:	0c12      	lsrs	r2, r2, #16
 800c30e:	f8dc a000 	ldr.w	sl, [ip]
 800c312:	fb06 e202 	mla	r2, r6, r2, lr
 800c316:	fa13 f38a 	uxtah	r3, r3, sl
 800c31a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c31e:	fa1f fa82 	uxth.w	sl, r2
 800c322:	f8dc 2000 	ldr.w	r2, [ip]
 800c326:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c32a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c32e:	b29b      	uxth	r3, r3
 800c330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c334:	4581      	cmp	r9, r0
 800c336:	f84c 3b04 	str.w	r3, [ip], #4
 800c33a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c33e:	d2db      	bcs.n	800c2f8 <quorem+0x44>
 800c340:	f855 300b 	ldr.w	r3, [r5, fp]
 800c344:	b92b      	cbnz	r3, 800c352 <quorem+0x9e>
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	3b04      	subs	r3, #4
 800c34a:	429d      	cmp	r5, r3
 800c34c:	461a      	mov	r2, r3
 800c34e:	d32e      	bcc.n	800c3ae <quorem+0xfa>
 800c350:	613c      	str	r4, [r7, #16]
 800c352:	4638      	mov	r0, r7
 800c354:	f001 fc90 	bl	800dc78 <__mcmp>
 800c358:	2800      	cmp	r0, #0
 800c35a:	db24      	blt.n	800c3a6 <quorem+0xf2>
 800c35c:	3601      	adds	r6, #1
 800c35e:	4628      	mov	r0, r5
 800c360:	f04f 0c00 	mov.w	ip, #0
 800c364:	f858 2b04 	ldr.w	r2, [r8], #4
 800c368:	f8d0 e000 	ldr.w	lr, [r0]
 800c36c:	b293      	uxth	r3, r2
 800c36e:	ebac 0303 	sub.w	r3, ip, r3
 800c372:	0c12      	lsrs	r2, r2, #16
 800c374:	fa13 f38e 	uxtah	r3, r3, lr
 800c378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c37c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c380:	b29b      	uxth	r3, r3
 800c382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c386:	45c1      	cmp	r9, r8
 800c388:	f840 3b04 	str.w	r3, [r0], #4
 800c38c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c390:	d2e8      	bcs.n	800c364 <quorem+0xb0>
 800c392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c39a:	b922      	cbnz	r2, 800c3a6 <quorem+0xf2>
 800c39c:	3b04      	subs	r3, #4
 800c39e:	429d      	cmp	r5, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	d30a      	bcc.n	800c3ba <quorem+0x106>
 800c3a4:	613c      	str	r4, [r7, #16]
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	b003      	add	sp, #12
 800c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ae:	6812      	ldr	r2, [r2, #0]
 800c3b0:	3b04      	subs	r3, #4
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	d1cc      	bne.n	800c350 <quorem+0x9c>
 800c3b6:	3c01      	subs	r4, #1
 800c3b8:	e7c7      	b.n	800c34a <quorem+0x96>
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	3b04      	subs	r3, #4
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d1f0      	bne.n	800c3a4 <quorem+0xf0>
 800c3c2:	3c01      	subs	r4, #1
 800c3c4:	e7eb      	b.n	800c39e <quorem+0xea>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	e7ee      	b.n	800c3a8 <quorem+0xf4>
 800c3ca:	0000      	movs	r0, r0
 800c3cc:	0000      	movs	r0, r0
	...

0800c3d0 <_dtoa_r>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	ed2d 8b02 	vpush	{d8}
 800c3d8:	ec57 6b10 	vmov	r6, r7, d0
 800c3dc:	b095      	sub	sp, #84	; 0x54
 800c3de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c3e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3e4:	9105      	str	r1, [sp, #20]
 800c3e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3f0:	b975      	cbnz	r5, 800c410 <_dtoa_r+0x40>
 800c3f2:	2010      	movs	r0, #16
 800c3f4:	f001 f95e 	bl	800d6b4 <malloc>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	6260      	str	r0, [r4, #36]	; 0x24
 800c3fc:	b920      	cbnz	r0, 800c408 <_dtoa_r+0x38>
 800c3fe:	4bb2      	ldr	r3, [pc, #712]	; (800c6c8 <_dtoa_r+0x2f8>)
 800c400:	21ea      	movs	r1, #234	; 0xea
 800c402:	48b2      	ldr	r0, [pc, #712]	; (800c6cc <_dtoa_r+0x2fc>)
 800c404:	f7ff ff38 	bl	800c278 <__assert_func>
 800c408:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c40c:	6005      	str	r5, [r0, #0]
 800c40e:	60c5      	str	r5, [r0, #12]
 800c410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	b151      	cbz	r1, 800c42c <_dtoa_r+0x5c>
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	604a      	str	r2, [r1, #4]
 800c41a:	2301      	movs	r3, #1
 800c41c:	4093      	lsls	r3, r2
 800c41e:	608b      	str	r3, [r1, #8]
 800c420:	4620      	mov	r0, r4
 800c422:	f001 f9a1 	bl	800d768 <_Bfree>
 800c426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	1e3b      	subs	r3, r7, #0
 800c42e:	bfb9      	ittee	lt
 800c430:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c434:	9303      	strlt	r3, [sp, #12]
 800c436:	2300      	movge	r3, #0
 800c438:	f8c8 3000 	strge.w	r3, [r8]
 800c43c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c440:	4ba3      	ldr	r3, [pc, #652]	; (800c6d0 <_dtoa_r+0x300>)
 800c442:	bfbc      	itt	lt
 800c444:	2201      	movlt	r2, #1
 800c446:	f8c8 2000 	strlt.w	r2, [r8]
 800c44a:	ea33 0309 	bics.w	r3, r3, r9
 800c44e:	d11b      	bne.n	800c488 <_dtoa_r+0xb8>
 800c450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c452:	f242 730f 	movw	r3, #9999	; 0x270f
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c45c:	4333      	orrs	r3, r6
 800c45e:	f000 857a 	beq.w	800cf56 <_dtoa_r+0xb86>
 800c462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c464:	b963      	cbnz	r3, 800c480 <_dtoa_r+0xb0>
 800c466:	4b9b      	ldr	r3, [pc, #620]	; (800c6d4 <_dtoa_r+0x304>)
 800c468:	e024      	b.n	800c4b4 <_dtoa_r+0xe4>
 800c46a:	4b9b      	ldr	r3, [pc, #620]	; (800c6d8 <_dtoa_r+0x308>)
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	9800      	ldr	r0, [sp, #0]
 800c476:	b015      	add	sp, #84	; 0x54
 800c478:	ecbd 8b02 	vpop	{d8}
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	4b94      	ldr	r3, [pc, #592]	; (800c6d4 <_dtoa_r+0x304>)
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	3303      	adds	r3, #3
 800c486:	e7f3      	b.n	800c470 <_dtoa_r+0xa0>
 800c488:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c48c:	2200      	movs	r2, #0
 800c48e:	ec51 0b17 	vmov	r0, r1, d7
 800c492:	2300      	movs	r3, #0
 800c494:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c498:	f7f4 fb4e 	bl	8000b38 <__aeabi_dcmpeq>
 800c49c:	4680      	mov	r8, r0
 800c49e:	b158      	cbz	r0, 800c4b8 <_dtoa_r+0xe8>
 800c4a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	6013      	str	r3, [r2, #0]
 800c4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 8551 	beq.w	800cf50 <_dtoa_r+0xb80>
 800c4ae:	488b      	ldr	r0, [pc, #556]	; (800c6dc <_dtoa_r+0x30c>)
 800c4b0:	6018      	str	r0, [r3, #0]
 800c4b2:	1e43      	subs	r3, r0, #1
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	e7dd      	b.n	800c474 <_dtoa_r+0xa4>
 800c4b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c4bc:	aa12      	add	r2, sp, #72	; 0x48
 800c4be:	a913      	add	r1, sp, #76	; 0x4c
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f001 fcf9 	bl	800deb8 <__d2b>
 800c4c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4ca:	4683      	mov	fp, r0
 800c4cc:	2d00      	cmp	r5, #0
 800c4ce:	d07c      	beq.n	800c5ca <_dtoa_r+0x1fa>
 800c4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c4de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c4e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4ea:	4b7d      	ldr	r3, [pc, #500]	; (800c6e0 <_dtoa_r+0x310>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	f7f3 ff01 	bl	80002f8 <__aeabi_dsub>
 800c4f6:	a36e      	add	r3, pc, #440	; (adr r3, 800c6b0 <_dtoa_r+0x2e0>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f4 f8b4 	bl	8000668 <__aeabi_dmul>
 800c500:	a36d      	add	r3, pc, #436	; (adr r3, 800c6b8 <_dtoa_r+0x2e8>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fef9 	bl	80002fc <__adddf3>
 800c50a:	4606      	mov	r6, r0
 800c50c:	4628      	mov	r0, r5
 800c50e:	460f      	mov	r7, r1
 800c510:	f7f4 f840 	bl	8000594 <__aeabi_i2d>
 800c514:	a36a      	add	r3, pc, #424	; (adr r3, 800c6c0 <_dtoa_r+0x2f0>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f4 f8a5 	bl	8000668 <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f3 fee9 	bl	80002fc <__adddf3>
 800c52a:	4606      	mov	r6, r0
 800c52c:	460f      	mov	r7, r1
 800c52e:	f7f4 fb4b 	bl	8000bc8 <__aeabi_d2iz>
 800c532:	2200      	movs	r2, #0
 800c534:	4682      	mov	sl, r0
 800c536:	2300      	movs	r3, #0
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f4 fb06 	bl	8000b4c <__aeabi_dcmplt>
 800c540:	b148      	cbz	r0, 800c556 <_dtoa_r+0x186>
 800c542:	4650      	mov	r0, sl
 800c544:	f7f4 f826 	bl	8000594 <__aeabi_i2d>
 800c548:	4632      	mov	r2, r6
 800c54a:	463b      	mov	r3, r7
 800c54c:	f7f4 faf4 	bl	8000b38 <__aeabi_dcmpeq>
 800c550:	b908      	cbnz	r0, 800c556 <_dtoa_r+0x186>
 800c552:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c556:	f1ba 0f16 	cmp.w	sl, #22
 800c55a:	d854      	bhi.n	800c606 <_dtoa_r+0x236>
 800c55c:	4b61      	ldr	r3, [pc, #388]	; (800c6e4 <_dtoa_r+0x314>)
 800c55e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c56a:	f7f4 faef 	bl	8000b4c <__aeabi_dcmplt>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d04b      	beq.n	800c60a <_dtoa_r+0x23a>
 800c572:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c576:	2300      	movs	r3, #0
 800c578:	930e      	str	r3, [sp, #56]	; 0x38
 800c57a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c57c:	1b5d      	subs	r5, r3, r5
 800c57e:	1e6b      	subs	r3, r5, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	bf43      	ittte	mi
 800c584:	2300      	movmi	r3, #0
 800c586:	f1c5 0801 	rsbmi	r8, r5, #1
 800c58a:	9304      	strmi	r3, [sp, #16]
 800c58c:	f04f 0800 	movpl.w	r8, #0
 800c590:	f1ba 0f00 	cmp.w	sl, #0
 800c594:	db3b      	blt.n	800c60e <_dtoa_r+0x23e>
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c59c:	4453      	add	r3, sl
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	9b05      	ldr	r3, [sp, #20]
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d869      	bhi.n	800c67e <_dtoa_r+0x2ae>
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	bfc4      	itt	gt
 800c5ae:	3b04      	subgt	r3, #4
 800c5b0:	9305      	strgt	r3, [sp, #20]
 800c5b2:	9b05      	ldr	r3, [sp, #20]
 800c5b4:	f1a3 0302 	sub.w	r3, r3, #2
 800c5b8:	bfcc      	ite	gt
 800c5ba:	2500      	movgt	r5, #0
 800c5bc:	2501      	movle	r5, #1
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d869      	bhi.n	800c696 <_dtoa_r+0x2c6>
 800c5c2:	e8df f003 	tbb	[pc, r3]
 800c5c6:	4e2c      	.short	0x4e2c
 800c5c8:	5a4c      	.short	0x5a4c
 800c5ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c5ce:	441d      	add	r5, r3
 800c5d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5d4:	2b20      	cmp	r3, #32
 800c5d6:	bfc1      	itttt	gt
 800c5d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c5e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c5e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c5e8:	bfda      	itte	le
 800c5ea:	f1c3 0320 	rsble	r3, r3, #32
 800c5ee:	fa06 f003 	lslle.w	r0, r6, r3
 800c5f2:	4318      	orrgt	r0, r3
 800c5f4:	f7f3 ffbe 	bl	8000574 <__aeabi_ui2d>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	4606      	mov	r6, r0
 800c5fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c600:	3d01      	subs	r5, #1
 800c602:	9310      	str	r3, [sp, #64]	; 0x40
 800c604:	e771      	b.n	800c4ea <_dtoa_r+0x11a>
 800c606:	2301      	movs	r3, #1
 800c608:	e7b6      	b.n	800c578 <_dtoa_r+0x1a8>
 800c60a:	900e      	str	r0, [sp, #56]	; 0x38
 800c60c:	e7b5      	b.n	800c57a <_dtoa_r+0x1aa>
 800c60e:	f1ca 0300 	rsb	r3, sl, #0
 800c612:	9306      	str	r3, [sp, #24]
 800c614:	2300      	movs	r3, #0
 800c616:	eba8 080a 	sub.w	r8, r8, sl
 800c61a:	930d      	str	r3, [sp, #52]	; 0x34
 800c61c:	e7c2      	b.n	800c5a4 <_dtoa_r+0x1d4>
 800c61e:	2300      	movs	r3, #0
 800c620:	9308      	str	r3, [sp, #32]
 800c622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	dc39      	bgt.n	800c69c <_dtoa_r+0x2cc>
 800c628:	f04f 0901 	mov.w	r9, #1
 800c62c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c630:	464b      	mov	r3, r9
 800c632:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c636:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c638:	2200      	movs	r2, #0
 800c63a:	6042      	str	r2, [r0, #4]
 800c63c:	2204      	movs	r2, #4
 800c63e:	f102 0614 	add.w	r6, r2, #20
 800c642:	429e      	cmp	r6, r3
 800c644:	6841      	ldr	r1, [r0, #4]
 800c646:	d92f      	bls.n	800c6a8 <_dtoa_r+0x2d8>
 800c648:	4620      	mov	r0, r4
 800c64a:	f001 f84d 	bl	800d6e8 <_Balloc>
 800c64e:	9000      	str	r0, [sp, #0]
 800c650:	2800      	cmp	r0, #0
 800c652:	d14b      	bne.n	800c6ec <_dtoa_r+0x31c>
 800c654:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <_dtoa_r+0x318>)
 800c656:	4602      	mov	r2, r0
 800c658:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c65c:	e6d1      	b.n	800c402 <_dtoa_r+0x32>
 800c65e:	2301      	movs	r3, #1
 800c660:	e7de      	b.n	800c620 <_dtoa_r+0x250>
 800c662:	2300      	movs	r3, #0
 800c664:	9308      	str	r3, [sp, #32]
 800c666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c668:	eb0a 0903 	add.w	r9, sl, r3
 800c66c:	f109 0301 	add.w	r3, r9, #1
 800c670:	2b01      	cmp	r3, #1
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	bfb8      	it	lt
 800c676:	2301      	movlt	r3, #1
 800c678:	e7dd      	b.n	800c636 <_dtoa_r+0x266>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e7f2      	b.n	800c664 <_dtoa_r+0x294>
 800c67e:	2501      	movs	r5, #1
 800c680:	2300      	movs	r3, #0
 800c682:	9305      	str	r3, [sp, #20]
 800c684:	9508      	str	r5, [sp, #32]
 800c686:	f04f 39ff 	mov.w	r9, #4294967295
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c690:	2312      	movs	r3, #18
 800c692:	9209      	str	r2, [sp, #36]	; 0x24
 800c694:	e7cf      	b.n	800c636 <_dtoa_r+0x266>
 800c696:	2301      	movs	r3, #1
 800c698:	9308      	str	r3, [sp, #32]
 800c69a:	e7f4      	b.n	800c686 <_dtoa_r+0x2b6>
 800c69c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c6a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c6a4:	464b      	mov	r3, r9
 800c6a6:	e7c6      	b.n	800c636 <_dtoa_r+0x266>
 800c6a8:	3101      	adds	r1, #1
 800c6aa:	6041      	str	r1, [r0, #4]
 800c6ac:	0052      	lsls	r2, r2, #1
 800c6ae:	e7c6      	b.n	800c63e <_dtoa_r+0x26e>
 800c6b0:	636f4361 	.word	0x636f4361
 800c6b4:	3fd287a7 	.word	0x3fd287a7
 800c6b8:	8b60c8b3 	.word	0x8b60c8b3
 800c6bc:	3fc68a28 	.word	0x3fc68a28
 800c6c0:	509f79fb 	.word	0x509f79fb
 800c6c4:	3fd34413 	.word	0x3fd34413
 800c6c8:	08010409 	.word	0x08010409
 800c6cc:	0801067b 	.word	0x0801067b
 800c6d0:	7ff00000 	.word	0x7ff00000
 800c6d4:	08010677 	.word	0x08010677
 800c6d8:	0801066e 	.word	0x0801066e
 800c6dc:	080103e1 	.word	0x080103e1
 800c6e0:	3ff80000 	.word	0x3ff80000
 800c6e4:	080107f0 	.word	0x080107f0
 800c6e8:	080106da 	.word	0x080106da
 800c6ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ee:	9a00      	ldr	r2, [sp, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	2b0e      	cmp	r3, #14
 800c6f6:	f200 80ad 	bhi.w	800c854 <_dtoa_r+0x484>
 800c6fa:	2d00      	cmp	r5, #0
 800c6fc:	f000 80aa 	beq.w	800c854 <_dtoa_r+0x484>
 800c700:	f1ba 0f00 	cmp.w	sl, #0
 800c704:	dd36      	ble.n	800c774 <_dtoa_r+0x3a4>
 800c706:	4ac3      	ldr	r2, [pc, #780]	; (800ca14 <_dtoa_r+0x644>)
 800c708:	f00a 030f 	and.w	r3, sl, #15
 800c70c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c710:	ed93 7b00 	vldr	d7, [r3]
 800c714:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c718:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c71c:	eeb0 8a47 	vmov.f32	s16, s14
 800c720:	eef0 8a67 	vmov.f32	s17, s15
 800c724:	d016      	beq.n	800c754 <_dtoa_r+0x384>
 800c726:	4bbc      	ldr	r3, [pc, #752]	; (800ca18 <_dtoa_r+0x648>)
 800c728:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c72c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c730:	f7f4 f8c4 	bl	80008bc <__aeabi_ddiv>
 800c734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c738:	f007 070f 	and.w	r7, r7, #15
 800c73c:	2503      	movs	r5, #3
 800c73e:	4eb6      	ldr	r6, [pc, #728]	; (800ca18 <_dtoa_r+0x648>)
 800c740:	b957      	cbnz	r7, 800c758 <_dtoa_r+0x388>
 800c742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c746:	ec53 2b18 	vmov	r2, r3, d8
 800c74a:	f7f4 f8b7 	bl	80008bc <__aeabi_ddiv>
 800c74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c752:	e029      	b.n	800c7a8 <_dtoa_r+0x3d8>
 800c754:	2502      	movs	r5, #2
 800c756:	e7f2      	b.n	800c73e <_dtoa_r+0x36e>
 800c758:	07f9      	lsls	r1, r7, #31
 800c75a:	d508      	bpl.n	800c76e <_dtoa_r+0x39e>
 800c75c:	ec51 0b18 	vmov	r0, r1, d8
 800c760:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c764:	f7f3 ff80 	bl	8000668 <__aeabi_dmul>
 800c768:	ec41 0b18 	vmov	d8, r0, r1
 800c76c:	3501      	adds	r5, #1
 800c76e:	107f      	asrs	r7, r7, #1
 800c770:	3608      	adds	r6, #8
 800c772:	e7e5      	b.n	800c740 <_dtoa_r+0x370>
 800c774:	f000 80a6 	beq.w	800c8c4 <_dtoa_r+0x4f4>
 800c778:	f1ca 0600 	rsb	r6, sl, #0
 800c77c:	4ba5      	ldr	r3, [pc, #660]	; (800ca14 <_dtoa_r+0x644>)
 800c77e:	4fa6      	ldr	r7, [pc, #664]	; (800ca18 <_dtoa_r+0x648>)
 800c780:	f006 020f 	and.w	r2, r6, #15
 800c784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c790:	f7f3 ff6a 	bl	8000668 <__aeabi_dmul>
 800c794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c798:	1136      	asrs	r6, r6, #4
 800c79a:	2300      	movs	r3, #0
 800c79c:	2502      	movs	r5, #2
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	f040 8085 	bne.w	800c8ae <_dtoa_r+0x4de>
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1d2      	bne.n	800c74e <_dtoa_r+0x37e>
 800c7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 808c 	beq.w	800c8c8 <_dtoa_r+0x4f8>
 800c7b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7b4:	4b99      	ldr	r3, [pc, #612]	; (800ca1c <_dtoa_r+0x64c>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f4 f9c6 	bl	8000b4c <__aeabi_dcmplt>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	f000 8081 	beq.w	800c8c8 <_dtoa_r+0x4f8>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d07d      	beq.n	800c8c8 <_dtoa_r+0x4f8>
 800c7cc:	f1b9 0f00 	cmp.w	r9, #0
 800c7d0:	dd3c      	ble.n	800c84c <_dtoa_r+0x47c>
 800c7d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4b91      	ldr	r3, [pc, #580]	; (800ca20 <_dtoa_r+0x650>)
 800c7dc:	4630      	mov	r0, r6
 800c7de:	4639      	mov	r1, r7
 800c7e0:	f7f3 ff42 	bl	8000668 <__aeabi_dmul>
 800c7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e8:	3501      	adds	r5, #1
 800c7ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c7ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f7f3 fece 	bl	8000594 <__aeabi_i2d>
 800c7f8:	4632      	mov	r2, r6
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	f7f3 ff34 	bl	8000668 <__aeabi_dmul>
 800c800:	4b88      	ldr	r3, [pc, #544]	; (800ca24 <_dtoa_r+0x654>)
 800c802:	2200      	movs	r2, #0
 800c804:	f7f3 fd7a 	bl	80002fc <__adddf3>
 800c808:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c814:	2b00      	cmp	r3, #0
 800c816:	d15c      	bne.n	800c8d2 <_dtoa_r+0x502>
 800c818:	4b83      	ldr	r3, [pc, #524]	; (800ca28 <_dtoa_r+0x658>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	4630      	mov	r0, r6
 800c81e:	4639      	mov	r1, r7
 800c820:	f7f3 fd6a 	bl	80002f8 <__aeabi_dsub>
 800c824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c828:	4606      	mov	r6, r0
 800c82a:	460f      	mov	r7, r1
 800c82c:	f7f4 f9ac 	bl	8000b88 <__aeabi_dcmpgt>
 800c830:	2800      	cmp	r0, #0
 800c832:	f040 8296 	bne.w	800cd62 <_dtoa_r+0x992>
 800c836:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c83a:	4630      	mov	r0, r6
 800c83c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c840:	4639      	mov	r1, r7
 800c842:	f7f4 f983 	bl	8000b4c <__aeabi_dcmplt>
 800c846:	2800      	cmp	r0, #0
 800c848:	f040 8288 	bne.w	800cd5c <_dtoa_r+0x98c>
 800c84c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c856:	2b00      	cmp	r3, #0
 800c858:	f2c0 8158 	blt.w	800cb0c <_dtoa_r+0x73c>
 800c85c:	f1ba 0f0e 	cmp.w	sl, #14
 800c860:	f300 8154 	bgt.w	800cb0c <_dtoa_r+0x73c>
 800c864:	4b6b      	ldr	r3, [pc, #428]	; (800ca14 <_dtoa_r+0x644>)
 800c866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c86a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c870:	2b00      	cmp	r3, #0
 800c872:	f280 80e3 	bge.w	800ca3c <_dtoa_r+0x66c>
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f300 80df 	bgt.w	800ca3c <_dtoa_r+0x66c>
 800c87e:	f040 826d 	bne.w	800cd5c <_dtoa_r+0x98c>
 800c882:	4b69      	ldr	r3, [pc, #420]	; (800ca28 <_dtoa_r+0x658>)
 800c884:	2200      	movs	r2, #0
 800c886:	4640      	mov	r0, r8
 800c888:	4649      	mov	r1, r9
 800c88a:	f7f3 feed 	bl	8000668 <__aeabi_dmul>
 800c88e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c892:	f7f4 f96f 	bl	8000b74 <__aeabi_dcmpge>
 800c896:	9e01      	ldr	r6, [sp, #4]
 800c898:	4637      	mov	r7, r6
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f040 8243 	bne.w	800cd26 <_dtoa_r+0x956>
 800c8a0:	9d00      	ldr	r5, [sp, #0]
 800c8a2:	2331      	movs	r3, #49	; 0x31
 800c8a4:	f805 3b01 	strb.w	r3, [r5], #1
 800c8a8:	f10a 0a01 	add.w	sl, sl, #1
 800c8ac:	e23f      	b.n	800cd2e <_dtoa_r+0x95e>
 800c8ae:	07f2      	lsls	r2, r6, #31
 800c8b0:	d505      	bpl.n	800c8be <_dtoa_r+0x4ee>
 800c8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b6:	f7f3 fed7 	bl	8000668 <__aeabi_dmul>
 800c8ba:	3501      	adds	r5, #1
 800c8bc:	2301      	movs	r3, #1
 800c8be:	1076      	asrs	r6, r6, #1
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	e76c      	b.n	800c79e <_dtoa_r+0x3ce>
 800c8c4:	2502      	movs	r5, #2
 800c8c6:	e76f      	b.n	800c7a8 <_dtoa_r+0x3d8>
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800c8ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c8d0:	e78d      	b.n	800c7ee <_dtoa_r+0x41e>
 800c8d2:	9900      	ldr	r1, [sp, #0]
 800c8d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c8d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8d8:	4b4e      	ldr	r3, [pc, #312]	; (800ca14 <_dtoa_r+0x644>)
 800c8da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8de:	4401      	add	r1, r0
 800c8e0:	9102      	str	r1, [sp, #8]
 800c8e2:	9908      	ldr	r1, [sp, #32]
 800c8e4:	eeb0 8a47 	vmov.f32	s16, s14
 800c8e8:	eef0 8a67 	vmov.f32	s17, s15
 800c8ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	d045      	beq.n	800c984 <_dtoa_r+0x5b4>
 800c8f8:	494c      	ldr	r1, [pc, #304]	; (800ca2c <_dtoa_r+0x65c>)
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	f7f3 ffde 	bl	80008bc <__aeabi_ddiv>
 800c900:	ec53 2b18 	vmov	r2, r3, d8
 800c904:	f7f3 fcf8 	bl	80002f8 <__aeabi_dsub>
 800c908:	9d00      	ldr	r5, [sp, #0]
 800c90a:	ec41 0b18 	vmov	d8, r0, r1
 800c90e:	4639      	mov	r1, r7
 800c910:	4630      	mov	r0, r6
 800c912:	f7f4 f959 	bl	8000bc8 <__aeabi_d2iz>
 800c916:	900c      	str	r0, [sp, #48]	; 0x30
 800c918:	f7f3 fe3c 	bl	8000594 <__aeabi_i2d>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4630      	mov	r0, r6
 800c922:	4639      	mov	r1, r7
 800c924:	f7f3 fce8 	bl	80002f8 <__aeabi_dsub>
 800c928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c92a:	3330      	adds	r3, #48	; 0x30
 800c92c:	f805 3b01 	strb.w	r3, [r5], #1
 800c930:	ec53 2b18 	vmov	r2, r3, d8
 800c934:	4606      	mov	r6, r0
 800c936:	460f      	mov	r7, r1
 800c938:	f7f4 f908 	bl	8000b4c <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d165      	bne.n	800ca0c <_dtoa_r+0x63c>
 800c940:	4632      	mov	r2, r6
 800c942:	463b      	mov	r3, r7
 800c944:	4935      	ldr	r1, [pc, #212]	; (800ca1c <_dtoa_r+0x64c>)
 800c946:	2000      	movs	r0, #0
 800c948:	f7f3 fcd6 	bl	80002f8 <__aeabi_dsub>
 800c94c:	ec53 2b18 	vmov	r2, r3, d8
 800c950:	f7f4 f8fc 	bl	8000b4c <__aeabi_dcmplt>
 800c954:	2800      	cmp	r0, #0
 800c956:	f040 80b9 	bne.w	800cacc <_dtoa_r+0x6fc>
 800c95a:	9b02      	ldr	r3, [sp, #8]
 800c95c:	429d      	cmp	r5, r3
 800c95e:	f43f af75 	beq.w	800c84c <_dtoa_r+0x47c>
 800c962:	4b2f      	ldr	r3, [pc, #188]	; (800ca20 <_dtoa_r+0x650>)
 800c964:	ec51 0b18 	vmov	r0, r1, d8
 800c968:	2200      	movs	r2, #0
 800c96a:	f7f3 fe7d 	bl	8000668 <__aeabi_dmul>
 800c96e:	4b2c      	ldr	r3, [pc, #176]	; (800ca20 <_dtoa_r+0x650>)
 800c970:	ec41 0b18 	vmov	d8, r0, r1
 800c974:	2200      	movs	r2, #0
 800c976:	4630      	mov	r0, r6
 800c978:	4639      	mov	r1, r7
 800c97a:	f7f3 fe75 	bl	8000668 <__aeabi_dmul>
 800c97e:	4606      	mov	r6, r0
 800c980:	460f      	mov	r7, r1
 800c982:	e7c4      	b.n	800c90e <_dtoa_r+0x53e>
 800c984:	ec51 0b17 	vmov	r0, r1, d7
 800c988:	f7f3 fe6e 	bl	8000668 <__aeabi_dmul>
 800c98c:	9b02      	ldr	r3, [sp, #8]
 800c98e:	9d00      	ldr	r5, [sp, #0]
 800c990:	930c      	str	r3, [sp, #48]	; 0x30
 800c992:	ec41 0b18 	vmov	d8, r0, r1
 800c996:	4639      	mov	r1, r7
 800c998:	4630      	mov	r0, r6
 800c99a:	f7f4 f915 	bl	8000bc8 <__aeabi_d2iz>
 800c99e:	9011      	str	r0, [sp, #68]	; 0x44
 800c9a0:	f7f3 fdf8 	bl	8000594 <__aeabi_i2d>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f3 fca4 	bl	80002f8 <__aeabi_dsub>
 800c9b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9b2:	3330      	adds	r3, #48	; 0x30
 800c9b4:	f805 3b01 	strb.w	r3, [r5], #1
 800c9b8:	9b02      	ldr	r3, [sp, #8]
 800c9ba:	429d      	cmp	r5, r3
 800c9bc:	4606      	mov	r6, r0
 800c9be:	460f      	mov	r7, r1
 800c9c0:	f04f 0200 	mov.w	r2, #0
 800c9c4:	d134      	bne.n	800ca30 <_dtoa_r+0x660>
 800c9c6:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <_dtoa_r+0x65c>)
 800c9c8:	ec51 0b18 	vmov	r0, r1, d8
 800c9cc:	f7f3 fc96 	bl	80002fc <__adddf3>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f7f4 f8d6 	bl	8000b88 <__aeabi_dcmpgt>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d175      	bne.n	800cacc <_dtoa_r+0x6fc>
 800c9e0:	ec53 2b18 	vmov	r2, r3, d8
 800c9e4:	4911      	ldr	r1, [pc, #68]	; (800ca2c <_dtoa_r+0x65c>)
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	f7f3 fc86 	bl	80002f8 <__aeabi_dsub>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	f7f4 f8aa 	bl	8000b4c <__aeabi_dcmplt>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f43f af27 	beq.w	800c84c <_dtoa_r+0x47c>
 800c9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca00:	1e6b      	subs	r3, r5, #1
 800ca02:	930c      	str	r3, [sp, #48]	; 0x30
 800ca04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca08:	2b30      	cmp	r3, #48	; 0x30
 800ca0a:	d0f8      	beq.n	800c9fe <_dtoa_r+0x62e>
 800ca0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ca10:	e04a      	b.n	800caa8 <_dtoa_r+0x6d8>
 800ca12:	bf00      	nop
 800ca14:	080107f0 	.word	0x080107f0
 800ca18:	080107c8 	.word	0x080107c8
 800ca1c:	3ff00000 	.word	0x3ff00000
 800ca20:	40240000 	.word	0x40240000
 800ca24:	401c0000 	.word	0x401c0000
 800ca28:	40140000 	.word	0x40140000
 800ca2c:	3fe00000 	.word	0x3fe00000
 800ca30:	4baf      	ldr	r3, [pc, #700]	; (800ccf0 <_dtoa_r+0x920>)
 800ca32:	f7f3 fe19 	bl	8000668 <__aeabi_dmul>
 800ca36:	4606      	mov	r6, r0
 800ca38:	460f      	mov	r7, r1
 800ca3a:	e7ac      	b.n	800c996 <_dtoa_r+0x5c6>
 800ca3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca40:	9d00      	ldr	r5, [sp, #0]
 800ca42:	4642      	mov	r2, r8
 800ca44:	464b      	mov	r3, r9
 800ca46:	4630      	mov	r0, r6
 800ca48:	4639      	mov	r1, r7
 800ca4a:	f7f3 ff37 	bl	80008bc <__aeabi_ddiv>
 800ca4e:	f7f4 f8bb 	bl	8000bc8 <__aeabi_d2iz>
 800ca52:	9002      	str	r0, [sp, #8]
 800ca54:	f7f3 fd9e 	bl	8000594 <__aeabi_i2d>
 800ca58:	4642      	mov	r2, r8
 800ca5a:	464b      	mov	r3, r9
 800ca5c:	f7f3 fe04 	bl	8000668 <__aeabi_dmul>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f3 fc46 	bl	80002f8 <__aeabi_dsub>
 800ca6c:	9e02      	ldr	r6, [sp, #8]
 800ca6e:	9f01      	ldr	r7, [sp, #4]
 800ca70:	3630      	adds	r6, #48	; 0x30
 800ca72:	f805 6b01 	strb.w	r6, [r5], #1
 800ca76:	9e00      	ldr	r6, [sp, #0]
 800ca78:	1bae      	subs	r6, r5, r6
 800ca7a:	42b7      	cmp	r7, r6
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	d137      	bne.n	800caf2 <_dtoa_r+0x722>
 800ca82:	f7f3 fc3b 	bl	80002fc <__adddf3>
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460f      	mov	r7, r1
 800ca8e:	f7f4 f87b 	bl	8000b88 <__aeabi_dcmpgt>
 800ca92:	b9c8      	cbnz	r0, 800cac8 <_dtoa_r+0x6f8>
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	f7f4 f84c 	bl	8000b38 <__aeabi_dcmpeq>
 800caa0:	b110      	cbz	r0, 800caa8 <_dtoa_r+0x6d8>
 800caa2:	9b02      	ldr	r3, [sp, #8]
 800caa4:	07d9      	lsls	r1, r3, #31
 800caa6:	d40f      	bmi.n	800cac8 <_dtoa_r+0x6f8>
 800caa8:	4620      	mov	r0, r4
 800caaa:	4659      	mov	r1, fp
 800caac:	f000 fe5c 	bl	800d768 <_Bfree>
 800cab0:	2300      	movs	r3, #0
 800cab2:	702b      	strb	r3, [r5, #0]
 800cab4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cab6:	f10a 0001 	add.w	r0, sl, #1
 800caba:	6018      	str	r0, [r3, #0]
 800cabc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f43f acd8 	beq.w	800c474 <_dtoa_r+0xa4>
 800cac4:	601d      	str	r5, [r3, #0]
 800cac6:	e4d5      	b.n	800c474 <_dtoa_r+0xa4>
 800cac8:	f8cd a01c 	str.w	sl, [sp, #28]
 800cacc:	462b      	mov	r3, r5
 800cace:	461d      	mov	r5, r3
 800cad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cad4:	2a39      	cmp	r2, #57	; 0x39
 800cad6:	d108      	bne.n	800caea <_dtoa_r+0x71a>
 800cad8:	9a00      	ldr	r2, [sp, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d1f7      	bne.n	800cace <_dtoa_r+0x6fe>
 800cade:	9a07      	ldr	r2, [sp, #28]
 800cae0:	9900      	ldr	r1, [sp, #0]
 800cae2:	3201      	adds	r2, #1
 800cae4:	9207      	str	r2, [sp, #28]
 800cae6:	2230      	movs	r2, #48	; 0x30
 800cae8:	700a      	strb	r2, [r1, #0]
 800caea:	781a      	ldrb	r2, [r3, #0]
 800caec:	3201      	adds	r2, #1
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e78c      	b.n	800ca0c <_dtoa_r+0x63c>
 800caf2:	4b7f      	ldr	r3, [pc, #508]	; (800ccf0 <_dtoa_r+0x920>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	f7f3 fdb7 	bl	8000668 <__aeabi_dmul>
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	4606      	mov	r6, r0
 800cb00:	460f      	mov	r7, r1
 800cb02:	f7f4 f819 	bl	8000b38 <__aeabi_dcmpeq>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d09b      	beq.n	800ca42 <_dtoa_r+0x672>
 800cb0a:	e7cd      	b.n	800caa8 <_dtoa_r+0x6d8>
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	f000 80c4 	beq.w	800cc9c <_dtoa_r+0x8cc>
 800cb14:	9a05      	ldr	r2, [sp, #20]
 800cb16:	2a01      	cmp	r2, #1
 800cb18:	f300 80a8 	bgt.w	800cc6c <_dtoa_r+0x89c>
 800cb1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	f000 80a0 	beq.w	800cc64 <_dtoa_r+0x894>
 800cb24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb28:	9e06      	ldr	r6, [sp, #24]
 800cb2a:	4645      	mov	r5, r8
 800cb2c:	9a04      	ldr	r2, [sp, #16]
 800cb2e:	2101      	movs	r1, #1
 800cb30:	441a      	add	r2, r3
 800cb32:	4620      	mov	r0, r4
 800cb34:	4498      	add	r8, r3
 800cb36:	9204      	str	r2, [sp, #16]
 800cb38:	f000 ff1c 	bl	800d974 <__i2b>
 800cb3c:	4607      	mov	r7, r0
 800cb3e:	2d00      	cmp	r5, #0
 800cb40:	dd0b      	ble.n	800cb5a <_dtoa_r+0x78a>
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd08      	ble.n	800cb5a <_dtoa_r+0x78a>
 800cb48:	42ab      	cmp	r3, r5
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	bfa8      	it	ge
 800cb4e:	462b      	movge	r3, r5
 800cb50:	eba8 0803 	sub.w	r8, r8, r3
 800cb54:	1aed      	subs	r5, r5, r3
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	9304      	str	r3, [sp, #16]
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	b1fb      	cbz	r3, 800cb9e <_dtoa_r+0x7ce>
 800cb5e:	9b08      	ldr	r3, [sp, #32]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 809f 	beq.w	800cca4 <_dtoa_r+0x8d4>
 800cb66:	2e00      	cmp	r6, #0
 800cb68:	dd11      	ble.n	800cb8e <_dtoa_r+0x7be>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 ffbc 	bl	800daec <__pow5mult>
 800cb74:	465a      	mov	r2, fp
 800cb76:	4601      	mov	r1, r0
 800cb78:	4607      	mov	r7, r0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 ff10 	bl	800d9a0 <__multiply>
 800cb80:	4659      	mov	r1, fp
 800cb82:	9007      	str	r0, [sp, #28]
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 fdef 	bl	800d768 <_Bfree>
 800cb8a:	9b07      	ldr	r3, [sp, #28]
 800cb8c:	469b      	mov	fp, r3
 800cb8e:	9b06      	ldr	r3, [sp, #24]
 800cb90:	1b9a      	subs	r2, r3, r6
 800cb92:	d004      	beq.n	800cb9e <_dtoa_r+0x7ce>
 800cb94:	4659      	mov	r1, fp
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 ffa8 	bl	800daec <__pow5mult>
 800cb9c:	4683      	mov	fp, r0
 800cb9e:	2101      	movs	r1, #1
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 fee7 	bl	800d974 <__i2b>
 800cba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	4606      	mov	r6, r0
 800cbac:	dd7c      	ble.n	800cca8 <_dtoa_r+0x8d8>
 800cbae:	461a      	mov	r2, r3
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 ff9a 	bl	800daec <__pow5mult>
 800cbb8:	9b05      	ldr	r3, [sp, #20]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	dd76      	ble.n	800ccae <_dtoa_r+0x8de>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	9306      	str	r3, [sp, #24]
 800cbc4:	6933      	ldr	r3, [r6, #16]
 800cbc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbca:	6918      	ldr	r0, [r3, #16]
 800cbcc:	f000 fe82 	bl	800d8d4 <__hi0bits>
 800cbd0:	f1c0 0020 	rsb	r0, r0, #32
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	4418      	add	r0, r3
 800cbd8:	f010 001f 	ands.w	r0, r0, #31
 800cbdc:	f000 8086 	beq.w	800ccec <_dtoa_r+0x91c>
 800cbe0:	f1c0 0320 	rsb	r3, r0, #32
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	dd7f      	ble.n	800cce8 <_dtoa_r+0x918>
 800cbe8:	f1c0 001c 	rsb	r0, r0, #28
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	4403      	add	r3, r0
 800cbf0:	4480      	add	r8, r0
 800cbf2:	4405      	add	r5, r0
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	f1b8 0f00 	cmp.w	r8, #0
 800cbfa:	dd05      	ble.n	800cc08 <_dtoa_r+0x838>
 800cbfc:	4659      	mov	r1, fp
 800cbfe:	4642      	mov	r2, r8
 800cc00:	4620      	mov	r0, r4
 800cc02:	f000 ffcd 	bl	800dba0 <__lshift>
 800cc06:	4683      	mov	fp, r0
 800cc08:	9b04      	ldr	r3, [sp, #16]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dd05      	ble.n	800cc1a <_dtoa_r+0x84a>
 800cc0e:	4631      	mov	r1, r6
 800cc10:	461a      	mov	r2, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 ffc4 	bl	800dba0 <__lshift>
 800cc18:	4606      	mov	r6, r0
 800cc1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d069      	beq.n	800ccf4 <_dtoa_r+0x924>
 800cc20:	4631      	mov	r1, r6
 800cc22:	4658      	mov	r0, fp
 800cc24:	f001 f828 	bl	800dc78 <__mcmp>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	da63      	bge.n	800ccf4 <_dtoa_r+0x924>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4659      	mov	r1, fp
 800cc30:	220a      	movs	r2, #10
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fdba 	bl	800d7ac <__multadd>
 800cc38:	9b08      	ldr	r3, [sp, #32]
 800cc3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc3e:	4683      	mov	fp, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 818f 	beq.w	800cf64 <_dtoa_r+0xb94>
 800cc46:	4639      	mov	r1, r7
 800cc48:	2300      	movs	r3, #0
 800cc4a:	220a      	movs	r2, #10
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 fdad 	bl	800d7ac <__multadd>
 800cc52:	f1b9 0f00 	cmp.w	r9, #0
 800cc56:	4607      	mov	r7, r0
 800cc58:	f300 808e 	bgt.w	800cd78 <_dtoa_r+0x9a8>
 800cc5c:	9b05      	ldr	r3, [sp, #20]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	dc50      	bgt.n	800cd04 <_dtoa_r+0x934>
 800cc62:	e089      	b.n	800cd78 <_dtoa_r+0x9a8>
 800cc64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc6a:	e75d      	b.n	800cb28 <_dtoa_r+0x758>
 800cc6c:	9b01      	ldr	r3, [sp, #4]
 800cc6e:	1e5e      	subs	r6, r3, #1
 800cc70:	9b06      	ldr	r3, [sp, #24]
 800cc72:	42b3      	cmp	r3, r6
 800cc74:	bfbf      	itttt	lt
 800cc76:	9b06      	ldrlt	r3, [sp, #24]
 800cc78:	9606      	strlt	r6, [sp, #24]
 800cc7a:	1af2      	sublt	r2, r6, r3
 800cc7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cc7e:	bfb6      	itet	lt
 800cc80:	189b      	addlt	r3, r3, r2
 800cc82:	1b9e      	subge	r6, r3, r6
 800cc84:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	bfb8      	it	lt
 800cc8a:	2600      	movlt	r6, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfb5      	itete	lt
 800cc90:	eba8 0503 	sublt.w	r5, r8, r3
 800cc94:	9b01      	ldrge	r3, [sp, #4]
 800cc96:	2300      	movlt	r3, #0
 800cc98:	4645      	movge	r5, r8
 800cc9a:	e747      	b.n	800cb2c <_dtoa_r+0x75c>
 800cc9c:	9e06      	ldr	r6, [sp, #24]
 800cc9e:	9f08      	ldr	r7, [sp, #32]
 800cca0:	4645      	mov	r5, r8
 800cca2:	e74c      	b.n	800cb3e <_dtoa_r+0x76e>
 800cca4:	9a06      	ldr	r2, [sp, #24]
 800cca6:	e775      	b.n	800cb94 <_dtoa_r+0x7c4>
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	dc18      	bgt.n	800cce0 <_dtoa_r+0x910>
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	b9b3      	cbnz	r3, 800cce0 <_dtoa_r+0x910>
 800ccb2:	9b03      	ldr	r3, [sp, #12]
 800ccb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb8:	b9a3      	cbnz	r3, 800cce4 <_dtoa_r+0x914>
 800ccba:	9b03      	ldr	r3, [sp, #12]
 800ccbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccc0:	0d1b      	lsrs	r3, r3, #20
 800ccc2:	051b      	lsls	r3, r3, #20
 800ccc4:	b12b      	cbz	r3, 800ccd2 <_dtoa_r+0x902>
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	f108 0801 	add.w	r8, r8, #1
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	9306      	str	r3, [sp, #24]
 800ccd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f47f af74 	bne.w	800cbc4 <_dtoa_r+0x7f4>
 800ccdc:	2001      	movs	r0, #1
 800ccde:	e779      	b.n	800cbd4 <_dtoa_r+0x804>
 800cce0:	2300      	movs	r3, #0
 800cce2:	e7f6      	b.n	800ccd2 <_dtoa_r+0x902>
 800cce4:	9b02      	ldr	r3, [sp, #8]
 800cce6:	e7f4      	b.n	800ccd2 <_dtoa_r+0x902>
 800cce8:	d085      	beq.n	800cbf6 <_dtoa_r+0x826>
 800ccea:	4618      	mov	r0, r3
 800ccec:	301c      	adds	r0, #28
 800ccee:	e77d      	b.n	800cbec <_dtoa_r+0x81c>
 800ccf0:	40240000 	.word	0x40240000
 800ccf4:	9b01      	ldr	r3, [sp, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dc38      	bgt.n	800cd6c <_dtoa_r+0x99c>
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	dd35      	ble.n	800cd6c <_dtoa_r+0x99c>
 800cd00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cd04:	f1b9 0f00 	cmp.w	r9, #0
 800cd08:	d10d      	bne.n	800cd26 <_dtoa_r+0x956>
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	2205      	movs	r2, #5
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fd4b 	bl	800d7ac <__multadd>
 800cd16:	4601      	mov	r1, r0
 800cd18:	4606      	mov	r6, r0
 800cd1a:	4658      	mov	r0, fp
 800cd1c:	f000 ffac 	bl	800dc78 <__mcmp>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	f73f adbd 	bgt.w	800c8a0 <_dtoa_r+0x4d0>
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	9d00      	ldr	r5, [sp, #0]
 800cd2a:	ea6f 0a03 	mvn.w	sl, r3
 800cd2e:	f04f 0800 	mov.w	r8, #0
 800cd32:	4631      	mov	r1, r6
 800cd34:	4620      	mov	r0, r4
 800cd36:	f000 fd17 	bl	800d768 <_Bfree>
 800cd3a:	2f00      	cmp	r7, #0
 800cd3c:	f43f aeb4 	beq.w	800caa8 <_dtoa_r+0x6d8>
 800cd40:	f1b8 0f00 	cmp.w	r8, #0
 800cd44:	d005      	beq.n	800cd52 <_dtoa_r+0x982>
 800cd46:	45b8      	cmp	r8, r7
 800cd48:	d003      	beq.n	800cd52 <_dtoa_r+0x982>
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fd0b 	bl	800d768 <_Bfree>
 800cd52:	4639      	mov	r1, r7
 800cd54:	4620      	mov	r0, r4
 800cd56:	f000 fd07 	bl	800d768 <_Bfree>
 800cd5a:	e6a5      	b.n	800caa8 <_dtoa_r+0x6d8>
 800cd5c:	2600      	movs	r6, #0
 800cd5e:	4637      	mov	r7, r6
 800cd60:	e7e1      	b.n	800cd26 <_dtoa_r+0x956>
 800cd62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cd68:	4637      	mov	r7, r6
 800cd6a:	e599      	b.n	800c8a0 <_dtoa_r+0x4d0>
 800cd6c:	9b08      	ldr	r3, [sp, #32]
 800cd6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f000 80fd 	beq.w	800cf72 <_dtoa_r+0xba2>
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	dd05      	ble.n	800cd88 <_dtoa_r+0x9b8>
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	462a      	mov	r2, r5
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 ff0d 	bl	800dba0 <__lshift>
 800cd86:	4607      	mov	r7, r0
 800cd88:	9b06      	ldr	r3, [sp, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d05c      	beq.n	800ce48 <_dtoa_r+0xa78>
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 fca9 	bl	800d6e8 <_Balloc>
 800cd96:	4605      	mov	r5, r0
 800cd98:	b928      	cbnz	r0, 800cda6 <_dtoa_r+0x9d6>
 800cd9a:	4b80      	ldr	r3, [pc, #512]	; (800cf9c <_dtoa_r+0xbcc>)
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cda2:	f7ff bb2e 	b.w	800c402 <_dtoa_r+0x32>
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	3202      	adds	r2, #2
 800cdaa:	0092      	lsls	r2, r2, #2
 800cdac:	f107 010c 	add.w	r1, r7, #12
 800cdb0:	300c      	adds	r0, #12
 800cdb2:	f7fd fb63 	bl	800a47c <memcpy>
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	4629      	mov	r1, r5
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fef0 	bl	800dba0 <__lshift>
 800cdc0:	9b00      	ldr	r3, [sp, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	9b00      	ldr	r3, [sp, #0]
 800cdc8:	444b      	add	r3, r9
 800cdca:	9307      	str	r3, [sp, #28]
 800cdcc:	9b02      	ldr	r3, [sp, #8]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	46b8      	mov	r8, r7
 800cdd4:	9306      	str	r3, [sp, #24]
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	4631      	mov	r1, r6
 800cddc:	3b01      	subs	r3, #1
 800cdde:	4658      	mov	r0, fp
 800cde0:	9302      	str	r3, [sp, #8]
 800cde2:	f7ff fa67 	bl	800c2b4 <quorem>
 800cde6:	4603      	mov	r3, r0
 800cde8:	3330      	adds	r3, #48	; 0x30
 800cdea:	9004      	str	r0, [sp, #16]
 800cdec:	4641      	mov	r1, r8
 800cdee:	4658      	mov	r0, fp
 800cdf0:	9308      	str	r3, [sp, #32]
 800cdf2:	f000 ff41 	bl	800dc78 <__mcmp>
 800cdf6:	463a      	mov	r2, r7
 800cdf8:	4681      	mov	r9, r0
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 ff57 	bl	800dcb0 <__mdiff>
 800ce02:	68c2      	ldr	r2, [r0, #12]
 800ce04:	9b08      	ldr	r3, [sp, #32]
 800ce06:	4605      	mov	r5, r0
 800ce08:	bb02      	cbnz	r2, 800ce4c <_dtoa_r+0xa7c>
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4658      	mov	r0, fp
 800ce0e:	f000 ff33 	bl	800dc78 <__mcmp>
 800ce12:	9b08      	ldr	r3, [sp, #32]
 800ce14:	4602      	mov	r2, r0
 800ce16:	4629      	mov	r1, r5
 800ce18:	4620      	mov	r0, r4
 800ce1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ce1e:	f000 fca3 	bl	800d768 <_Bfree>
 800ce22:	9b05      	ldr	r3, [sp, #20]
 800ce24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce26:	9d01      	ldr	r5, [sp, #4]
 800ce28:	ea43 0102 	orr.w	r1, r3, r2
 800ce2c:	9b06      	ldr	r3, [sp, #24]
 800ce2e:	430b      	orrs	r3, r1
 800ce30:	9b08      	ldr	r3, [sp, #32]
 800ce32:	d10d      	bne.n	800ce50 <_dtoa_r+0xa80>
 800ce34:	2b39      	cmp	r3, #57	; 0x39
 800ce36:	d029      	beq.n	800ce8c <_dtoa_r+0xabc>
 800ce38:	f1b9 0f00 	cmp.w	r9, #0
 800ce3c:	dd01      	ble.n	800ce42 <_dtoa_r+0xa72>
 800ce3e:	9b04      	ldr	r3, [sp, #16]
 800ce40:	3331      	adds	r3, #49	; 0x31
 800ce42:	9a02      	ldr	r2, [sp, #8]
 800ce44:	7013      	strb	r3, [r2, #0]
 800ce46:	e774      	b.n	800cd32 <_dtoa_r+0x962>
 800ce48:	4638      	mov	r0, r7
 800ce4a:	e7b9      	b.n	800cdc0 <_dtoa_r+0x9f0>
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	e7e2      	b.n	800ce16 <_dtoa_r+0xa46>
 800ce50:	f1b9 0f00 	cmp.w	r9, #0
 800ce54:	db06      	blt.n	800ce64 <_dtoa_r+0xa94>
 800ce56:	9905      	ldr	r1, [sp, #20]
 800ce58:	ea41 0909 	orr.w	r9, r1, r9
 800ce5c:	9906      	ldr	r1, [sp, #24]
 800ce5e:	ea59 0101 	orrs.w	r1, r9, r1
 800ce62:	d120      	bne.n	800cea6 <_dtoa_r+0xad6>
 800ce64:	2a00      	cmp	r2, #0
 800ce66:	ddec      	ble.n	800ce42 <_dtoa_r+0xa72>
 800ce68:	4659      	mov	r1, fp
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	f000 fe96 	bl	800dba0 <__lshift>
 800ce74:	4631      	mov	r1, r6
 800ce76:	4683      	mov	fp, r0
 800ce78:	f000 fefe 	bl	800dc78 <__mcmp>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	dc02      	bgt.n	800ce88 <_dtoa_r+0xab8>
 800ce82:	d1de      	bne.n	800ce42 <_dtoa_r+0xa72>
 800ce84:	07da      	lsls	r2, r3, #31
 800ce86:	d5dc      	bpl.n	800ce42 <_dtoa_r+0xa72>
 800ce88:	2b39      	cmp	r3, #57	; 0x39
 800ce8a:	d1d8      	bne.n	800ce3e <_dtoa_r+0xa6e>
 800ce8c:	9a02      	ldr	r2, [sp, #8]
 800ce8e:	2339      	movs	r3, #57	; 0x39
 800ce90:	7013      	strb	r3, [r2, #0]
 800ce92:	462b      	mov	r3, r5
 800ce94:	461d      	mov	r5, r3
 800ce96:	3b01      	subs	r3, #1
 800ce98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce9c:	2a39      	cmp	r2, #57	; 0x39
 800ce9e:	d050      	beq.n	800cf42 <_dtoa_r+0xb72>
 800cea0:	3201      	adds	r2, #1
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	e745      	b.n	800cd32 <_dtoa_r+0x962>
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	dd03      	ble.n	800ceb2 <_dtoa_r+0xae2>
 800ceaa:	2b39      	cmp	r3, #57	; 0x39
 800ceac:	d0ee      	beq.n	800ce8c <_dtoa_r+0xabc>
 800ceae:	3301      	adds	r3, #1
 800ceb0:	e7c7      	b.n	800ce42 <_dtoa_r+0xa72>
 800ceb2:	9a01      	ldr	r2, [sp, #4]
 800ceb4:	9907      	ldr	r1, [sp, #28]
 800ceb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ceba:	428a      	cmp	r2, r1
 800cebc:	d02a      	beq.n	800cf14 <_dtoa_r+0xb44>
 800cebe:	4659      	mov	r1, fp
 800cec0:	2300      	movs	r3, #0
 800cec2:	220a      	movs	r2, #10
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fc71 	bl	800d7ac <__multadd>
 800ceca:	45b8      	cmp	r8, r7
 800cecc:	4683      	mov	fp, r0
 800cece:	f04f 0300 	mov.w	r3, #0
 800ced2:	f04f 020a 	mov.w	r2, #10
 800ced6:	4641      	mov	r1, r8
 800ced8:	4620      	mov	r0, r4
 800ceda:	d107      	bne.n	800ceec <_dtoa_r+0xb1c>
 800cedc:	f000 fc66 	bl	800d7ac <__multadd>
 800cee0:	4680      	mov	r8, r0
 800cee2:	4607      	mov	r7, r0
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	3301      	adds	r3, #1
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	e775      	b.n	800cdd8 <_dtoa_r+0xa08>
 800ceec:	f000 fc5e 	bl	800d7ac <__multadd>
 800cef0:	4639      	mov	r1, r7
 800cef2:	4680      	mov	r8, r0
 800cef4:	2300      	movs	r3, #0
 800cef6:	220a      	movs	r2, #10
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fc57 	bl	800d7ac <__multadd>
 800cefe:	4607      	mov	r7, r0
 800cf00:	e7f0      	b.n	800cee4 <_dtoa_r+0xb14>
 800cf02:	f1b9 0f00 	cmp.w	r9, #0
 800cf06:	9a00      	ldr	r2, [sp, #0]
 800cf08:	bfcc      	ite	gt
 800cf0a:	464d      	movgt	r5, r9
 800cf0c:	2501      	movle	r5, #1
 800cf0e:	4415      	add	r5, r2
 800cf10:	f04f 0800 	mov.w	r8, #0
 800cf14:	4659      	mov	r1, fp
 800cf16:	2201      	movs	r2, #1
 800cf18:	4620      	mov	r0, r4
 800cf1a:	9301      	str	r3, [sp, #4]
 800cf1c:	f000 fe40 	bl	800dba0 <__lshift>
 800cf20:	4631      	mov	r1, r6
 800cf22:	4683      	mov	fp, r0
 800cf24:	f000 fea8 	bl	800dc78 <__mcmp>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	dcb2      	bgt.n	800ce92 <_dtoa_r+0xac2>
 800cf2c:	d102      	bne.n	800cf34 <_dtoa_r+0xb64>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	07db      	lsls	r3, r3, #31
 800cf32:	d4ae      	bmi.n	800ce92 <_dtoa_r+0xac2>
 800cf34:	462b      	mov	r3, r5
 800cf36:	461d      	mov	r5, r3
 800cf38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf3c:	2a30      	cmp	r2, #48	; 0x30
 800cf3e:	d0fa      	beq.n	800cf36 <_dtoa_r+0xb66>
 800cf40:	e6f7      	b.n	800cd32 <_dtoa_r+0x962>
 800cf42:	9a00      	ldr	r2, [sp, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d1a5      	bne.n	800ce94 <_dtoa_r+0xac4>
 800cf48:	f10a 0a01 	add.w	sl, sl, #1
 800cf4c:	2331      	movs	r3, #49	; 0x31
 800cf4e:	e779      	b.n	800ce44 <_dtoa_r+0xa74>
 800cf50:	4b13      	ldr	r3, [pc, #76]	; (800cfa0 <_dtoa_r+0xbd0>)
 800cf52:	f7ff baaf 	b.w	800c4b4 <_dtoa_r+0xe4>
 800cf56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f47f aa86 	bne.w	800c46a <_dtoa_r+0x9a>
 800cf5e:	4b11      	ldr	r3, [pc, #68]	; (800cfa4 <_dtoa_r+0xbd4>)
 800cf60:	f7ff baa8 	b.w	800c4b4 <_dtoa_r+0xe4>
 800cf64:	f1b9 0f00 	cmp.w	r9, #0
 800cf68:	dc03      	bgt.n	800cf72 <_dtoa_r+0xba2>
 800cf6a:	9b05      	ldr	r3, [sp, #20]
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	f73f aec9 	bgt.w	800cd04 <_dtoa_r+0x934>
 800cf72:	9d00      	ldr	r5, [sp, #0]
 800cf74:	4631      	mov	r1, r6
 800cf76:	4658      	mov	r0, fp
 800cf78:	f7ff f99c 	bl	800c2b4 <quorem>
 800cf7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf80:	f805 3b01 	strb.w	r3, [r5], #1
 800cf84:	9a00      	ldr	r2, [sp, #0]
 800cf86:	1aaa      	subs	r2, r5, r2
 800cf88:	4591      	cmp	r9, r2
 800cf8a:	ddba      	ble.n	800cf02 <_dtoa_r+0xb32>
 800cf8c:	4659      	mov	r1, fp
 800cf8e:	2300      	movs	r3, #0
 800cf90:	220a      	movs	r2, #10
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fc0a 	bl	800d7ac <__multadd>
 800cf98:	4683      	mov	fp, r0
 800cf9a:	e7eb      	b.n	800cf74 <_dtoa_r+0xba4>
 800cf9c:	080106da 	.word	0x080106da
 800cfa0:	080103e0 	.word	0x080103e0
 800cfa4:	0801066e 	.word	0x0801066e

0800cfa8 <fiprintf>:
 800cfa8:	b40e      	push	{r1, r2, r3}
 800cfaa:	b503      	push	{r0, r1, lr}
 800cfac:	4601      	mov	r1, r0
 800cfae:	ab03      	add	r3, sp, #12
 800cfb0:	4805      	ldr	r0, [pc, #20]	; (800cfc8 <fiprintf+0x20>)
 800cfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb6:	6800      	ldr	r0, [r0, #0]
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	f001 fa8f 	bl	800e4dc <_vfiprintf_r>
 800cfbe:	b002      	add	sp, #8
 800cfc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfc4:	b003      	add	sp, #12
 800cfc6:	4770      	bx	lr
 800cfc8:	2000038c 	.word	0x2000038c

0800cfcc <rshift>:
 800cfcc:	6903      	ldr	r3, [r0, #16]
 800cfce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfda:	f100 0414 	add.w	r4, r0, #20
 800cfde:	dd45      	ble.n	800d06c <rshift+0xa0>
 800cfe0:	f011 011f 	ands.w	r1, r1, #31
 800cfe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfec:	d10c      	bne.n	800d008 <rshift+0x3c>
 800cfee:	f100 0710 	add.w	r7, r0, #16
 800cff2:	4629      	mov	r1, r5
 800cff4:	42b1      	cmp	r1, r6
 800cff6:	d334      	bcc.n	800d062 <rshift+0x96>
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	1eea      	subs	r2, r5, #3
 800cffe:	4296      	cmp	r6, r2
 800d000:	bf38      	it	cc
 800d002:	2300      	movcc	r3, #0
 800d004:	4423      	add	r3, r4
 800d006:	e015      	b.n	800d034 <rshift+0x68>
 800d008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d00c:	f1c1 0820 	rsb	r8, r1, #32
 800d010:	40cf      	lsrs	r7, r1
 800d012:	f105 0e04 	add.w	lr, r5, #4
 800d016:	46a1      	mov	r9, r4
 800d018:	4576      	cmp	r6, lr
 800d01a:	46f4      	mov	ip, lr
 800d01c:	d815      	bhi.n	800d04a <rshift+0x7e>
 800d01e:	1a9b      	subs	r3, r3, r2
 800d020:	009a      	lsls	r2, r3, #2
 800d022:	3a04      	subs	r2, #4
 800d024:	3501      	adds	r5, #1
 800d026:	42ae      	cmp	r6, r5
 800d028:	bf38      	it	cc
 800d02a:	2200      	movcc	r2, #0
 800d02c:	18a3      	adds	r3, r4, r2
 800d02e:	50a7      	str	r7, [r4, r2]
 800d030:	b107      	cbz	r7, 800d034 <rshift+0x68>
 800d032:	3304      	adds	r3, #4
 800d034:	1b1a      	subs	r2, r3, r4
 800d036:	42a3      	cmp	r3, r4
 800d038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d03c:	bf08      	it	eq
 800d03e:	2300      	moveq	r3, #0
 800d040:	6102      	str	r2, [r0, #16]
 800d042:	bf08      	it	eq
 800d044:	6143      	streq	r3, [r0, #20]
 800d046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04a:	f8dc c000 	ldr.w	ip, [ip]
 800d04e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d052:	ea4c 0707 	orr.w	r7, ip, r7
 800d056:	f849 7b04 	str.w	r7, [r9], #4
 800d05a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d05e:	40cf      	lsrs	r7, r1
 800d060:	e7da      	b.n	800d018 <rshift+0x4c>
 800d062:	f851 cb04 	ldr.w	ip, [r1], #4
 800d066:	f847 cf04 	str.w	ip, [r7, #4]!
 800d06a:	e7c3      	b.n	800cff4 <rshift+0x28>
 800d06c:	4623      	mov	r3, r4
 800d06e:	e7e1      	b.n	800d034 <rshift+0x68>

0800d070 <__hexdig_fun>:
 800d070:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d802      	bhi.n	800d07e <__hexdig_fun+0xe>
 800d078:	3820      	subs	r0, #32
 800d07a:	b2c0      	uxtb	r0, r0
 800d07c:	4770      	bx	lr
 800d07e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d082:	2b05      	cmp	r3, #5
 800d084:	d801      	bhi.n	800d08a <__hexdig_fun+0x1a>
 800d086:	3847      	subs	r0, #71	; 0x47
 800d088:	e7f7      	b.n	800d07a <__hexdig_fun+0xa>
 800d08a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d08e:	2b05      	cmp	r3, #5
 800d090:	d801      	bhi.n	800d096 <__hexdig_fun+0x26>
 800d092:	3827      	subs	r0, #39	; 0x27
 800d094:	e7f1      	b.n	800d07a <__hexdig_fun+0xa>
 800d096:	2000      	movs	r0, #0
 800d098:	4770      	bx	lr
	...

0800d09c <__gethex>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	ed2d 8b02 	vpush	{d8}
 800d0a4:	b089      	sub	sp, #36	; 0x24
 800d0a6:	ee08 0a10 	vmov	s16, r0
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	4bbc      	ldr	r3, [pc, #752]	; (800d3a0 <__gethex+0x304>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	468b      	mov	fp, r1
 800d0b6:	4690      	mov	r8, r2
 800d0b8:	f7f3 f8bc 	bl	8000234 <strlen>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	f8db 2000 	ldr.w	r2, [fp]
 800d0c2:	4403      	add	r3, r0
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d0ca:	9305      	str	r3, [sp, #20]
 800d0cc:	1c93      	adds	r3, r2, #2
 800d0ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0d6:	32fe      	adds	r2, #254	; 0xfe
 800d0d8:	18d1      	adds	r1, r2, r3
 800d0da:	461f      	mov	r7, r3
 800d0dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d0e0:	9100      	str	r1, [sp, #0]
 800d0e2:	2830      	cmp	r0, #48	; 0x30
 800d0e4:	d0f8      	beq.n	800d0d8 <__gethex+0x3c>
 800d0e6:	f7ff ffc3 	bl	800d070 <__hexdig_fun>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d13a      	bne.n	800d166 <__gethex+0xca>
 800d0f0:	9901      	ldr	r1, [sp, #4]
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f001 fb48 	bl	800e78a <strncmp>
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d168      	bne.n	800d1d2 <__gethex+0x136>
 800d100:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d104:	eb07 060a 	add.w	r6, r7, sl
 800d108:	f7ff ffb2 	bl	800d070 <__hexdig_fun>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d062      	beq.n	800d1d6 <__gethex+0x13a>
 800d110:	4633      	mov	r3, r6
 800d112:	7818      	ldrb	r0, [r3, #0]
 800d114:	2830      	cmp	r0, #48	; 0x30
 800d116:	461f      	mov	r7, r3
 800d118:	f103 0301 	add.w	r3, r3, #1
 800d11c:	d0f9      	beq.n	800d112 <__gethex+0x76>
 800d11e:	f7ff ffa7 	bl	800d070 <__hexdig_fun>
 800d122:	2301      	movs	r3, #1
 800d124:	fab0 f480 	clz	r4, r0
 800d128:	0964      	lsrs	r4, r4, #5
 800d12a:	4635      	mov	r5, r6
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	463a      	mov	r2, r7
 800d130:	4616      	mov	r6, r2
 800d132:	3201      	adds	r2, #1
 800d134:	7830      	ldrb	r0, [r6, #0]
 800d136:	f7ff ff9b 	bl	800d070 <__hexdig_fun>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1f8      	bne.n	800d130 <__gethex+0x94>
 800d13e:	9901      	ldr	r1, [sp, #4]
 800d140:	4652      	mov	r2, sl
 800d142:	4630      	mov	r0, r6
 800d144:	f001 fb21 	bl	800e78a <strncmp>
 800d148:	b980      	cbnz	r0, 800d16c <__gethex+0xd0>
 800d14a:	b94d      	cbnz	r5, 800d160 <__gethex+0xc4>
 800d14c:	eb06 050a 	add.w	r5, r6, sl
 800d150:	462a      	mov	r2, r5
 800d152:	4616      	mov	r6, r2
 800d154:	3201      	adds	r2, #1
 800d156:	7830      	ldrb	r0, [r6, #0]
 800d158:	f7ff ff8a 	bl	800d070 <__hexdig_fun>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d1f8      	bne.n	800d152 <__gethex+0xb6>
 800d160:	1bad      	subs	r5, r5, r6
 800d162:	00ad      	lsls	r5, r5, #2
 800d164:	e004      	b.n	800d170 <__gethex+0xd4>
 800d166:	2400      	movs	r4, #0
 800d168:	4625      	mov	r5, r4
 800d16a:	e7e0      	b.n	800d12e <__gethex+0x92>
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	d1f7      	bne.n	800d160 <__gethex+0xc4>
 800d170:	7833      	ldrb	r3, [r6, #0]
 800d172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d176:	2b50      	cmp	r3, #80	; 0x50
 800d178:	d13b      	bne.n	800d1f2 <__gethex+0x156>
 800d17a:	7873      	ldrb	r3, [r6, #1]
 800d17c:	2b2b      	cmp	r3, #43	; 0x2b
 800d17e:	d02c      	beq.n	800d1da <__gethex+0x13e>
 800d180:	2b2d      	cmp	r3, #45	; 0x2d
 800d182:	d02e      	beq.n	800d1e2 <__gethex+0x146>
 800d184:	1c71      	adds	r1, r6, #1
 800d186:	f04f 0900 	mov.w	r9, #0
 800d18a:	7808      	ldrb	r0, [r1, #0]
 800d18c:	f7ff ff70 	bl	800d070 <__hexdig_fun>
 800d190:	1e43      	subs	r3, r0, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b18      	cmp	r3, #24
 800d196:	d82c      	bhi.n	800d1f2 <__gethex+0x156>
 800d198:	f1a0 0210 	sub.w	r2, r0, #16
 800d19c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1a0:	f7ff ff66 	bl	800d070 <__hexdig_fun>
 800d1a4:	1e43      	subs	r3, r0, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b18      	cmp	r3, #24
 800d1aa:	d91d      	bls.n	800d1e8 <__gethex+0x14c>
 800d1ac:	f1b9 0f00 	cmp.w	r9, #0
 800d1b0:	d000      	beq.n	800d1b4 <__gethex+0x118>
 800d1b2:	4252      	negs	r2, r2
 800d1b4:	4415      	add	r5, r2
 800d1b6:	f8cb 1000 	str.w	r1, [fp]
 800d1ba:	b1e4      	cbz	r4, 800d1f6 <__gethex+0x15a>
 800d1bc:	9b00      	ldr	r3, [sp, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2700      	movne	r7, #0
 800d1c4:	2706      	moveq	r7, #6
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	b009      	add	sp, #36	; 0x24
 800d1ca:	ecbd 8b02 	vpop	{d8}
 800d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d2:	463e      	mov	r6, r7
 800d1d4:	4625      	mov	r5, r4
 800d1d6:	2401      	movs	r4, #1
 800d1d8:	e7ca      	b.n	800d170 <__gethex+0xd4>
 800d1da:	f04f 0900 	mov.w	r9, #0
 800d1de:	1cb1      	adds	r1, r6, #2
 800d1e0:	e7d3      	b.n	800d18a <__gethex+0xee>
 800d1e2:	f04f 0901 	mov.w	r9, #1
 800d1e6:	e7fa      	b.n	800d1de <__gethex+0x142>
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	fb03 0202 	mla	r2, r3, r2, r0
 800d1ee:	3a10      	subs	r2, #16
 800d1f0:	e7d4      	b.n	800d19c <__gethex+0x100>
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	e7df      	b.n	800d1b6 <__gethex+0x11a>
 800d1f6:	1bf3      	subs	r3, r6, r7
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	2b07      	cmp	r3, #7
 800d1fe:	dc0b      	bgt.n	800d218 <__gethex+0x17c>
 800d200:	ee18 0a10 	vmov	r0, s16
 800d204:	f000 fa70 	bl	800d6e8 <_Balloc>
 800d208:	4604      	mov	r4, r0
 800d20a:	b940      	cbnz	r0, 800d21e <__gethex+0x182>
 800d20c:	4b65      	ldr	r3, [pc, #404]	; (800d3a4 <__gethex+0x308>)
 800d20e:	4602      	mov	r2, r0
 800d210:	21de      	movs	r1, #222	; 0xde
 800d212:	4865      	ldr	r0, [pc, #404]	; (800d3a8 <__gethex+0x30c>)
 800d214:	f7ff f830 	bl	800c278 <__assert_func>
 800d218:	3101      	adds	r1, #1
 800d21a:	105b      	asrs	r3, r3, #1
 800d21c:	e7ee      	b.n	800d1fc <__gethex+0x160>
 800d21e:	f100 0914 	add.w	r9, r0, #20
 800d222:	f04f 0b00 	mov.w	fp, #0
 800d226:	f1ca 0301 	rsb	r3, sl, #1
 800d22a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d22e:	f8cd b000 	str.w	fp, [sp]
 800d232:	9306      	str	r3, [sp, #24]
 800d234:	42b7      	cmp	r7, r6
 800d236:	d340      	bcc.n	800d2ba <__gethex+0x21e>
 800d238:	9802      	ldr	r0, [sp, #8]
 800d23a:	9b00      	ldr	r3, [sp, #0]
 800d23c:	f840 3b04 	str.w	r3, [r0], #4
 800d240:	eba0 0009 	sub.w	r0, r0, r9
 800d244:	1080      	asrs	r0, r0, #2
 800d246:	0146      	lsls	r6, r0, #5
 800d248:	6120      	str	r0, [r4, #16]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fb42 	bl	800d8d4 <__hi0bits>
 800d250:	1a30      	subs	r0, r6, r0
 800d252:	f8d8 6000 	ldr.w	r6, [r8]
 800d256:	42b0      	cmp	r0, r6
 800d258:	dd63      	ble.n	800d322 <__gethex+0x286>
 800d25a:	1b87      	subs	r7, r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fedc 	bl	800e01c <__any_on>
 800d264:	4682      	mov	sl, r0
 800d266:	b1a8      	cbz	r0, 800d294 <__gethex+0x1f8>
 800d268:	1e7b      	subs	r3, r7, #1
 800d26a:	1159      	asrs	r1, r3, #5
 800d26c:	f003 021f 	and.w	r2, r3, #31
 800d270:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d274:	f04f 0a01 	mov.w	sl, #1
 800d278:	fa0a f202 	lsl.w	r2, sl, r2
 800d27c:	420a      	tst	r2, r1
 800d27e:	d009      	beq.n	800d294 <__gethex+0x1f8>
 800d280:	4553      	cmp	r3, sl
 800d282:	dd05      	ble.n	800d290 <__gethex+0x1f4>
 800d284:	1eb9      	subs	r1, r7, #2
 800d286:	4620      	mov	r0, r4
 800d288:	f000 fec8 	bl	800e01c <__any_on>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d145      	bne.n	800d31c <__gethex+0x280>
 800d290:	f04f 0a02 	mov.w	sl, #2
 800d294:	4639      	mov	r1, r7
 800d296:	4620      	mov	r0, r4
 800d298:	f7ff fe98 	bl	800cfcc <rshift>
 800d29c:	443d      	add	r5, r7
 800d29e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	da4c      	bge.n	800d340 <__gethex+0x2a4>
 800d2a6:	ee18 0a10 	vmov	r0, s16
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f000 fa5c 	bl	800d768 <_Bfree>
 800d2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	27a3      	movs	r7, #163	; 0xa3
 800d2b8:	e785      	b.n	800d1c6 <__gethex+0x12a>
 800d2ba:	1e73      	subs	r3, r6, #1
 800d2bc:	9a05      	ldr	r2, [sp, #20]
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d019      	beq.n	800d2fc <__gethex+0x260>
 800d2c8:	f1bb 0f20 	cmp.w	fp, #32
 800d2cc:	d107      	bne.n	800d2de <__gethex+0x242>
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	9a00      	ldr	r2, [sp, #0]
 800d2d2:	f843 2b04 	str.w	r2, [r3], #4
 800d2d6:	9302      	str	r3, [sp, #8]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	469b      	mov	fp, r3
 800d2de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d2e2:	f7ff fec5 	bl	800d070 <__hexdig_fun>
 800d2e6:	9b00      	ldr	r3, [sp, #0]
 800d2e8:	f000 000f 	and.w	r0, r0, #15
 800d2ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800d2f0:	4303      	orrs	r3, r0
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	f10b 0b04 	add.w	fp, fp, #4
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	e00d      	b.n	800d318 <__gethex+0x27c>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	4413      	add	r3, r2
 800d302:	42bb      	cmp	r3, r7
 800d304:	d3e0      	bcc.n	800d2c8 <__gethex+0x22c>
 800d306:	4618      	mov	r0, r3
 800d308:	9901      	ldr	r1, [sp, #4]
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	4652      	mov	r2, sl
 800d30e:	f001 fa3c 	bl	800e78a <strncmp>
 800d312:	9b07      	ldr	r3, [sp, #28]
 800d314:	2800      	cmp	r0, #0
 800d316:	d1d7      	bne.n	800d2c8 <__gethex+0x22c>
 800d318:	461e      	mov	r6, r3
 800d31a:	e78b      	b.n	800d234 <__gethex+0x198>
 800d31c:	f04f 0a03 	mov.w	sl, #3
 800d320:	e7b8      	b.n	800d294 <__gethex+0x1f8>
 800d322:	da0a      	bge.n	800d33a <__gethex+0x29e>
 800d324:	1a37      	subs	r7, r6, r0
 800d326:	4621      	mov	r1, r4
 800d328:	ee18 0a10 	vmov	r0, s16
 800d32c:	463a      	mov	r2, r7
 800d32e:	f000 fc37 	bl	800dba0 <__lshift>
 800d332:	1bed      	subs	r5, r5, r7
 800d334:	4604      	mov	r4, r0
 800d336:	f100 0914 	add.w	r9, r0, #20
 800d33a:	f04f 0a00 	mov.w	sl, #0
 800d33e:	e7ae      	b.n	800d29e <__gethex+0x202>
 800d340:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d344:	42a8      	cmp	r0, r5
 800d346:	dd72      	ble.n	800d42e <__gethex+0x392>
 800d348:	1b45      	subs	r5, r0, r5
 800d34a:	42ae      	cmp	r6, r5
 800d34c:	dc36      	bgt.n	800d3bc <__gethex+0x320>
 800d34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d02a      	beq.n	800d3ac <__gethex+0x310>
 800d356:	2b03      	cmp	r3, #3
 800d358:	d02c      	beq.n	800d3b4 <__gethex+0x318>
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d115      	bne.n	800d38a <__gethex+0x2ee>
 800d35e:	42ae      	cmp	r6, r5
 800d360:	d113      	bne.n	800d38a <__gethex+0x2ee>
 800d362:	2e01      	cmp	r6, #1
 800d364:	d10b      	bne.n	800d37e <__gethex+0x2e2>
 800d366:	9a04      	ldr	r2, [sp, #16]
 800d368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	2301      	movs	r3, #1
 800d370:	6123      	str	r3, [r4, #16]
 800d372:	f8c9 3000 	str.w	r3, [r9]
 800d376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d378:	2762      	movs	r7, #98	; 0x62
 800d37a:	601c      	str	r4, [r3, #0]
 800d37c:	e723      	b.n	800d1c6 <__gethex+0x12a>
 800d37e:	1e71      	subs	r1, r6, #1
 800d380:	4620      	mov	r0, r4
 800d382:	f000 fe4b 	bl	800e01c <__any_on>
 800d386:	2800      	cmp	r0, #0
 800d388:	d1ed      	bne.n	800d366 <__gethex+0x2ca>
 800d38a:	ee18 0a10 	vmov	r0, s16
 800d38e:	4621      	mov	r1, r4
 800d390:	f000 f9ea 	bl	800d768 <_Bfree>
 800d394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d396:	2300      	movs	r3, #0
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	2750      	movs	r7, #80	; 0x50
 800d39c:	e713      	b.n	800d1c6 <__gethex+0x12a>
 800d39e:	bf00      	nop
 800d3a0:	08010754 	.word	0x08010754
 800d3a4:	080106da 	.word	0x080106da
 800d3a8:	080106eb 	.word	0x080106eb
 800d3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1eb      	bne.n	800d38a <__gethex+0x2ee>
 800d3b2:	e7d8      	b.n	800d366 <__gethex+0x2ca>
 800d3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1d5      	bne.n	800d366 <__gethex+0x2ca>
 800d3ba:	e7e6      	b.n	800d38a <__gethex+0x2ee>
 800d3bc:	1e6f      	subs	r7, r5, #1
 800d3be:	f1ba 0f00 	cmp.w	sl, #0
 800d3c2:	d131      	bne.n	800d428 <__gethex+0x38c>
 800d3c4:	b127      	cbz	r7, 800d3d0 <__gethex+0x334>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fe27 	bl	800e01c <__any_on>
 800d3ce:	4682      	mov	sl, r0
 800d3d0:	117b      	asrs	r3, r7, #5
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d3d8:	f007 071f 	and.w	r7, r7, #31
 800d3dc:	fa01 f707 	lsl.w	r7, r1, r7
 800d3e0:	421f      	tst	r7, r3
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	bf18      	it	ne
 800d3e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d3ec:	1b76      	subs	r6, r6, r5
 800d3ee:	f7ff fded 	bl	800cfcc <rshift>
 800d3f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d3f6:	2702      	movs	r7, #2
 800d3f8:	f1ba 0f00 	cmp.w	sl, #0
 800d3fc:	d048      	beq.n	800d490 <__gethex+0x3f4>
 800d3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d015      	beq.n	800d432 <__gethex+0x396>
 800d406:	2b03      	cmp	r3, #3
 800d408:	d017      	beq.n	800d43a <__gethex+0x39e>
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d109      	bne.n	800d422 <__gethex+0x386>
 800d40e:	f01a 0f02 	tst.w	sl, #2
 800d412:	d006      	beq.n	800d422 <__gethex+0x386>
 800d414:	f8d9 0000 	ldr.w	r0, [r9]
 800d418:	ea4a 0a00 	orr.w	sl, sl, r0
 800d41c:	f01a 0f01 	tst.w	sl, #1
 800d420:	d10e      	bne.n	800d440 <__gethex+0x3a4>
 800d422:	f047 0710 	orr.w	r7, r7, #16
 800d426:	e033      	b.n	800d490 <__gethex+0x3f4>
 800d428:	f04f 0a01 	mov.w	sl, #1
 800d42c:	e7d0      	b.n	800d3d0 <__gethex+0x334>
 800d42e:	2701      	movs	r7, #1
 800d430:	e7e2      	b.n	800d3f8 <__gethex+0x35c>
 800d432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d434:	f1c3 0301 	rsb	r3, r3, #1
 800d438:	9315      	str	r3, [sp, #84]	; 0x54
 800d43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0f0      	beq.n	800d422 <__gethex+0x386>
 800d440:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d444:	f104 0314 	add.w	r3, r4, #20
 800d448:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d44c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d450:	f04f 0c00 	mov.w	ip, #0
 800d454:	4618      	mov	r0, r3
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d45e:	d01c      	beq.n	800d49a <__gethex+0x3fe>
 800d460:	3201      	adds	r2, #1
 800d462:	6002      	str	r2, [r0, #0]
 800d464:	2f02      	cmp	r7, #2
 800d466:	f104 0314 	add.w	r3, r4, #20
 800d46a:	d13f      	bne.n	800d4ec <__gethex+0x450>
 800d46c:	f8d8 2000 	ldr.w	r2, [r8]
 800d470:	3a01      	subs	r2, #1
 800d472:	42b2      	cmp	r2, r6
 800d474:	d10a      	bne.n	800d48c <__gethex+0x3f0>
 800d476:	1171      	asrs	r1, r6, #5
 800d478:	2201      	movs	r2, #1
 800d47a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d47e:	f006 061f 	and.w	r6, r6, #31
 800d482:	fa02 f606 	lsl.w	r6, r2, r6
 800d486:	421e      	tst	r6, r3
 800d488:	bf18      	it	ne
 800d48a:	4617      	movne	r7, r2
 800d48c:	f047 0720 	orr.w	r7, r7, #32
 800d490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d492:	601c      	str	r4, [r3, #0]
 800d494:	9b04      	ldr	r3, [sp, #16]
 800d496:	601d      	str	r5, [r3, #0]
 800d498:	e695      	b.n	800d1c6 <__gethex+0x12a>
 800d49a:	4299      	cmp	r1, r3
 800d49c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4a0:	d8d8      	bhi.n	800d454 <__gethex+0x3b8>
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	459b      	cmp	fp, r3
 800d4a6:	db19      	blt.n	800d4dc <__gethex+0x440>
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	ee18 0a10 	vmov	r0, s16
 800d4ae:	3101      	adds	r1, #1
 800d4b0:	f000 f91a 	bl	800d6e8 <_Balloc>
 800d4b4:	4681      	mov	r9, r0
 800d4b6:	b918      	cbnz	r0, 800d4c0 <__gethex+0x424>
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <__gethex+0x488>)
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	2184      	movs	r1, #132	; 0x84
 800d4be:	e6a8      	b.n	800d212 <__gethex+0x176>
 800d4c0:	6922      	ldr	r2, [r4, #16]
 800d4c2:	3202      	adds	r2, #2
 800d4c4:	f104 010c 	add.w	r1, r4, #12
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	300c      	adds	r0, #12
 800d4cc:	f7fc ffd6 	bl	800a47c <memcpy>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	ee18 0a10 	vmov	r0, s16
 800d4d6:	f000 f947 	bl	800d768 <_Bfree>
 800d4da:	464c      	mov	r4, r9
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4e4:	6122      	str	r2, [r4, #16]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	615a      	str	r2, [r3, #20]
 800d4ea:	e7bb      	b.n	800d464 <__gethex+0x3c8>
 800d4ec:	6922      	ldr	r2, [r4, #16]
 800d4ee:	455a      	cmp	r2, fp
 800d4f0:	dd0b      	ble.n	800d50a <__gethex+0x46e>
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f7ff fd69 	bl	800cfcc <rshift>
 800d4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4fe:	3501      	adds	r5, #1
 800d500:	42ab      	cmp	r3, r5
 800d502:	f6ff aed0 	blt.w	800d2a6 <__gethex+0x20a>
 800d506:	2701      	movs	r7, #1
 800d508:	e7c0      	b.n	800d48c <__gethex+0x3f0>
 800d50a:	f016 061f 	ands.w	r6, r6, #31
 800d50e:	d0fa      	beq.n	800d506 <__gethex+0x46a>
 800d510:	449a      	add	sl, r3
 800d512:	f1c6 0620 	rsb	r6, r6, #32
 800d516:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d51a:	f000 f9db 	bl	800d8d4 <__hi0bits>
 800d51e:	42b0      	cmp	r0, r6
 800d520:	dbe7      	blt.n	800d4f2 <__gethex+0x456>
 800d522:	e7f0      	b.n	800d506 <__gethex+0x46a>
 800d524:	080106da 	.word	0x080106da

0800d528 <L_shift>:
 800d528:	f1c2 0208 	rsb	r2, r2, #8
 800d52c:	0092      	lsls	r2, r2, #2
 800d52e:	b570      	push	{r4, r5, r6, lr}
 800d530:	f1c2 0620 	rsb	r6, r2, #32
 800d534:	6843      	ldr	r3, [r0, #4]
 800d536:	6804      	ldr	r4, [r0, #0]
 800d538:	fa03 f506 	lsl.w	r5, r3, r6
 800d53c:	432c      	orrs	r4, r5
 800d53e:	40d3      	lsrs	r3, r2
 800d540:	6004      	str	r4, [r0, #0]
 800d542:	f840 3f04 	str.w	r3, [r0, #4]!
 800d546:	4288      	cmp	r0, r1
 800d548:	d3f4      	bcc.n	800d534 <L_shift+0xc>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}

0800d54c <__match>:
 800d54c:	b530      	push	{r4, r5, lr}
 800d54e:	6803      	ldr	r3, [r0, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d556:	b914      	cbnz	r4, 800d55e <__match+0x12>
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	2001      	movs	r0, #1
 800d55c:	bd30      	pop	{r4, r5, pc}
 800d55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d562:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d566:	2d19      	cmp	r5, #25
 800d568:	bf98      	it	ls
 800d56a:	3220      	addls	r2, #32
 800d56c:	42a2      	cmp	r2, r4
 800d56e:	d0f0      	beq.n	800d552 <__match+0x6>
 800d570:	2000      	movs	r0, #0
 800d572:	e7f3      	b.n	800d55c <__match+0x10>

0800d574 <__hexnan>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	680b      	ldr	r3, [r1, #0]
 800d57a:	6801      	ldr	r1, [r0, #0]
 800d57c:	115e      	asrs	r6, r3, #5
 800d57e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d582:	f013 031f 	ands.w	r3, r3, #31
 800d586:	b087      	sub	sp, #28
 800d588:	bf18      	it	ne
 800d58a:	3604      	addne	r6, #4
 800d58c:	2500      	movs	r5, #0
 800d58e:	1f37      	subs	r7, r6, #4
 800d590:	4682      	mov	sl, r0
 800d592:	4690      	mov	r8, r2
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	f846 5c04 	str.w	r5, [r6, #-4]
 800d59a:	46b9      	mov	r9, r7
 800d59c:	463c      	mov	r4, r7
 800d59e:	9502      	str	r5, [sp, #8]
 800d5a0:	46ab      	mov	fp, r5
 800d5a2:	784a      	ldrb	r2, [r1, #1]
 800d5a4:	1c4b      	adds	r3, r1, #1
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	b342      	cbz	r2, 800d5fc <__hexnan+0x88>
 800d5aa:	4610      	mov	r0, r2
 800d5ac:	9105      	str	r1, [sp, #20]
 800d5ae:	9204      	str	r2, [sp, #16]
 800d5b0:	f7ff fd5e 	bl	800d070 <__hexdig_fun>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d14f      	bne.n	800d658 <__hexnan+0xe4>
 800d5b8:	9a04      	ldr	r2, [sp, #16]
 800d5ba:	9905      	ldr	r1, [sp, #20]
 800d5bc:	2a20      	cmp	r2, #32
 800d5be:	d818      	bhi.n	800d5f2 <__hexnan+0x7e>
 800d5c0:	9b02      	ldr	r3, [sp, #8]
 800d5c2:	459b      	cmp	fp, r3
 800d5c4:	dd13      	ble.n	800d5ee <__hexnan+0x7a>
 800d5c6:	454c      	cmp	r4, r9
 800d5c8:	d206      	bcs.n	800d5d8 <__hexnan+0x64>
 800d5ca:	2d07      	cmp	r5, #7
 800d5cc:	dc04      	bgt.n	800d5d8 <__hexnan+0x64>
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f7ff ffa8 	bl	800d528 <L_shift>
 800d5d8:	4544      	cmp	r4, r8
 800d5da:	d950      	bls.n	800d67e <__hexnan+0x10a>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f1a4 0904 	sub.w	r9, r4, #4
 800d5e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5e6:	f8cd b008 	str.w	fp, [sp, #8]
 800d5ea:	464c      	mov	r4, r9
 800d5ec:	461d      	mov	r5, r3
 800d5ee:	9903      	ldr	r1, [sp, #12]
 800d5f0:	e7d7      	b.n	800d5a2 <__hexnan+0x2e>
 800d5f2:	2a29      	cmp	r2, #41	; 0x29
 800d5f4:	d156      	bne.n	800d6a4 <__hexnan+0x130>
 800d5f6:	3102      	adds	r1, #2
 800d5f8:	f8ca 1000 	str.w	r1, [sl]
 800d5fc:	f1bb 0f00 	cmp.w	fp, #0
 800d600:	d050      	beq.n	800d6a4 <__hexnan+0x130>
 800d602:	454c      	cmp	r4, r9
 800d604:	d206      	bcs.n	800d614 <__hexnan+0xa0>
 800d606:	2d07      	cmp	r5, #7
 800d608:	dc04      	bgt.n	800d614 <__hexnan+0xa0>
 800d60a:	462a      	mov	r2, r5
 800d60c:	4649      	mov	r1, r9
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff ff8a 	bl	800d528 <L_shift>
 800d614:	4544      	cmp	r4, r8
 800d616:	d934      	bls.n	800d682 <__hexnan+0x10e>
 800d618:	f1a8 0204 	sub.w	r2, r8, #4
 800d61c:	4623      	mov	r3, r4
 800d61e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d622:	f842 1f04 	str.w	r1, [r2, #4]!
 800d626:	429f      	cmp	r7, r3
 800d628:	d2f9      	bcs.n	800d61e <__hexnan+0xaa>
 800d62a:	1b3b      	subs	r3, r7, r4
 800d62c:	f023 0303 	bic.w	r3, r3, #3
 800d630:	3304      	adds	r3, #4
 800d632:	3401      	adds	r4, #1
 800d634:	3e03      	subs	r6, #3
 800d636:	42b4      	cmp	r4, r6
 800d638:	bf88      	it	hi
 800d63a:	2304      	movhi	r3, #4
 800d63c:	4443      	add	r3, r8
 800d63e:	2200      	movs	r2, #0
 800d640:	f843 2b04 	str.w	r2, [r3], #4
 800d644:	429f      	cmp	r7, r3
 800d646:	d2fb      	bcs.n	800d640 <__hexnan+0xcc>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	b91b      	cbnz	r3, 800d654 <__hexnan+0xe0>
 800d64c:	4547      	cmp	r7, r8
 800d64e:	d127      	bne.n	800d6a0 <__hexnan+0x12c>
 800d650:	2301      	movs	r3, #1
 800d652:	603b      	str	r3, [r7, #0]
 800d654:	2005      	movs	r0, #5
 800d656:	e026      	b.n	800d6a6 <__hexnan+0x132>
 800d658:	3501      	adds	r5, #1
 800d65a:	2d08      	cmp	r5, #8
 800d65c:	f10b 0b01 	add.w	fp, fp, #1
 800d660:	dd06      	ble.n	800d670 <__hexnan+0xfc>
 800d662:	4544      	cmp	r4, r8
 800d664:	d9c3      	bls.n	800d5ee <__hexnan+0x7a>
 800d666:	2300      	movs	r3, #0
 800d668:	f844 3c04 	str.w	r3, [r4, #-4]
 800d66c:	2501      	movs	r5, #1
 800d66e:	3c04      	subs	r4, #4
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	f000 000f 	and.w	r0, r0, #15
 800d676:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d67a:	6022      	str	r2, [r4, #0]
 800d67c:	e7b7      	b.n	800d5ee <__hexnan+0x7a>
 800d67e:	2508      	movs	r5, #8
 800d680:	e7b5      	b.n	800d5ee <__hexnan+0x7a>
 800d682:	9b01      	ldr	r3, [sp, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0df      	beq.n	800d648 <__hexnan+0xd4>
 800d688:	f04f 32ff 	mov.w	r2, #4294967295
 800d68c:	f1c3 0320 	rsb	r3, r3, #32
 800d690:	fa22 f303 	lsr.w	r3, r2, r3
 800d694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d698:	401a      	ands	r2, r3
 800d69a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d69e:	e7d3      	b.n	800d648 <__hexnan+0xd4>
 800d6a0:	3f04      	subs	r7, #4
 800d6a2:	e7d1      	b.n	800d648 <__hexnan+0xd4>
 800d6a4:	2004      	movs	r0, #4
 800d6a6:	b007      	add	sp, #28
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ac <_localeconv_r>:
 800d6ac:	4800      	ldr	r0, [pc, #0]	; (800d6b0 <_localeconv_r+0x4>)
 800d6ae:	4770      	bx	lr
 800d6b0:	200004e4 	.word	0x200004e4

0800d6b4 <malloc>:
 800d6b4:	4b02      	ldr	r3, [pc, #8]	; (800d6c0 <malloc+0xc>)
 800d6b6:	4601      	mov	r1, r0
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	f000 bd2f 	b.w	800e11c <_malloc_r>
 800d6be:	bf00      	nop
 800d6c0:	2000038c 	.word	0x2000038c

0800d6c4 <__ascii_mbtowc>:
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	b901      	cbnz	r1, 800d6ca <__ascii_mbtowc+0x6>
 800d6c8:	a901      	add	r1, sp, #4
 800d6ca:	b142      	cbz	r2, 800d6de <__ascii_mbtowc+0x1a>
 800d6cc:	b14b      	cbz	r3, 800d6e2 <__ascii_mbtowc+0x1e>
 800d6ce:	7813      	ldrb	r3, [r2, #0]
 800d6d0:	600b      	str	r3, [r1, #0]
 800d6d2:	7812      	ldrb	r2, [r2, #0]
 800d6d4:	1e10      	subs	r0, r2, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	2001      	movne	r0, #1
 800d6da:	b002      	add	sp, #8
 800d6dc:	4770      	bx	lr
 800d6de:	4610      	mov	r0, r2
 800d6e0:	e7fb      	b.n	800d6da <__ascii_mbtowc+0x16>
 800d6e2:	f06f 0001 	mvn.w	r0, #1
 800d6e6:	e7f8      	b.n	800d6da <__ascii_mbtowc+0x16>

0800d6e8 <_Balloc>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	b976      	cbnz	r6, 800d710 <_Balloc+0x28>
 800d6f2:	2010      	movs	r0, #16
 800d6f4:	f7ff ffde 	bl	800d6b4 <malloc>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d6fc:	b920      	cbnz	r0, 800d708 <_Balloc+0x20>
 800d6fe:	4b18      	ldr	r3, [pc, #96]	; (800d760 <_Balloc+0x78>)
 800d700:	4818      	ldr	r0, [pc, #96]	; (800d764 <_Balloc+0x7c>)
 800d702:	2166      	movs	r1, #102	; 0x66
 800d704:	f7fe fdb8 	bl	800c278 <__assert_func>
 800d708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d70c:	6006      	str	r6, [r0, #0]
 800d70e:	60c6      	str	r6, [r0, #12]
 800d710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d712:	68f3      	ldr	r3, [r6, #12]
 800d714:	b183      	cbz	r3, 800d738 <_Balloc+0x50>
 800d716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d71e:	b9b8      	cbnz	r0, 800d750 <_Balloc+0x68>
 800d720:	2101      	movs	r1, #1
 800d722:	fa01 f605 	lsl.w	r6, r1, r5
 800d726:	1d72      	adds	r2, r6, #5
 800d728:	0092      	lsls	r2, r2, #2
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fc97 	bl	800e05e <_calloc_r>
 800d730:	b160      	cbz	r0, 800d74c <_Balloc+0x64>
 800d732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d736:	e00e      	b.n	800d756 <_Balloc+0x6e>
 800d738:	2221      	movs	r2, #33	; 0x21
 800d73a:	2104      	movs	r1, #4
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fc8e 	bl	800e05e <_calloc_r>
 800d742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d744:	60f0      	str	r0, [r6, #12]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1e4      	bne.n	800d716 <_Balloc+0x2e>
 800d74c:	2000      	movs	r0, #0
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	6802      	ldr	r2, [r0, #0]
 800d752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d756:	2300      	movs	r3, #0
 800d758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d75c:	e7f7      	b.n	800d74e <_Balloc+0x66>
 800d75e:	bf00      	nop
 800d760:	08010409 	.word	0x08010409
 800d764:	08010768 	.word	0x08010768

0800d768 <_Bfree>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d76c:	4605      	mov	r5, r0
 800d76e:	460c      	mov	r4, r1
 800d770:	b976      	cbnz	r6, 800d790 <_Bfree+0x28>
 800d772:	2010      	movs	r0, #16
 800d774:	f7ff ff9e 	bl	800d6b4 <malloc>
 800d778:	4602      	mov	r2, r0
 800d77a:	6268      	str	r0, [r5, #36]	; 0x24
 800d77c:	b920      	cbnz	r0, 800d788 <_Bfree+0x20>
 800d77e:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <_Bfree+0x3c>)
 800d780:	4809      	ldr	r0, [pc, #36]	; (800d7a8 <_Bfree+0x40>)
 800d782:	218a      	movs	r1, #138	; 0x8a
 800d784:	f7fe fd78 	bl	800c278 <__assert_func>
 800d788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d78c:	6006      	str	r6, [r0, #0]
 800d78e:	60c6      	str	r6, [r0, #12]
 800d790:	b13c      	cbz	r4, 800d7a2 <_Bfree+0x3a>
 800d792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d794:	6862      	ldr	r2, [r4, #4]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d79c:	6021      	str	r1, [r4, #0]
 800d79e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7a2:	bd70      	pop	{r4, r5, r6, pc}
 800d7a4:	08010409 	.word	0x08010409
 800d7a8:	08010768 	.word	0x08010768

0800d7ac <__multadd>:
 800d7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b0:	690e      	ldr	r6, [r1, #16]
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	4698      	mov	r8, r3
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	f101 0014 	add.w	r0, r1, #20
 800d7bc:	2300      	movs	r3, #0
 800d7be:	6805      	ldr	r5, [r0, #0]
 800d7c0:	b2a9      	uxth	r1, r5
 800d7c2:	fb02 8101 	mla	r1, r2, r1, r8
 800d7c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d7ca:	0c2d      	lsrs	r5, r5, #16
 800d7cc:	fb02 c505 	mla	r5, r2, r5, ip
 800d7d0:	b289      	uxth	r1, r1
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d7d8:	429e      	cmp	r6, r3
 800d7da:	f840 1b04 	str.w	r1, [r0], #4
 800d7de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d7e2:	dcec      	bgt.n	800d7be <__multadd+0x12>
 800d7e4:	f1b8 0f00 	cmp.w	r8, #0
 800d7e8:	d022      	beq.n	800d830 <__multadd+0x84>
 800d7ea:	68a3      	ldr	r3, [r4, #8]
 800d7ec:	42b3      	cmp	r3, r6
 800d7ee:	dc19      	bgt.n	800d824 <__multadd+0x78>
 800d7f0:	6861      	ldr	r1, [r4, #4]
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	f7ff ff77 	bl	800d6e8 <_Balloc>
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b928      	cbnz	r0, 800d80a <__multadd+0x5e>
 800d7fe:	4602      	mov	r2, r0
 800d800:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <__multadd+0x8c>)
 800d802:	480e      	ldr	r0, [pc, #56]	; (800d83c <__multadd+0x90>)
 800d804:	21b5      	movs	r1, #181	; 0xb5
 800d806:	f7fe fd37 	bl	800c278 <__assert_func>
 800d80a:	6922      	ldr	r2, [r4, #16]
 800d80c:	3202      	adds	r2, #2
 800d80e:	f104 010c 	add.w	r1, r4, #12
 800d812:	0092      	lsls	r2, r2, #2
 800d814:	300c      	adds	r0, #12
 800d816:	f7fc fe31 	bl	800a47c <memcpy>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ffa3 	bl	800d768 <_Bfree>
 800d822:	462c      	mov	r4, r5
 800d824:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d828:	3601      	adds	r6, #1
 800d82a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d82e:	6126      	str	r6, [r4, #16]
 800d830:	4620      	mov	r0, r4
 800d832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d836:	bf00      	nop
 800d838:	080106da 	.word	0x080106da
 800d83c:	08010768 	.word	0x08010768

0800d840 <__s2b>:
 800d840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d844:	460c      	mov	r4, r1
 800d846:	4615      	mov	r5, r2
 800d848:	461f      	mov	r7, r3
 800d84a:	2209      	movs	r2, #9
 800d84c:	3308      	adds	r3, #8
 800d84e:	4606      	mov	r6, r0
 800d850:	fb93 f3f2 	sdiv	r3, r3, r2
 800d854:	2100      	movs	r1, #0
 800d856:	2201      	movs	r2, #1
 800d858:	429a      	cmp	r2, r3
 800d85a:	db09      	blt.n	800d870 <__s2b+0x30>
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7ff ff43 	bl	800d6e8 <_Balloc>
 800d862:	b940      	cbnz	r0, 800d876 <__s2b+0x36>
 800d864:	4602      	mov	r2, r0
 800d866:	4b19      	ldr	r3, [pc, #100]	; (800d8cc <__s2b+0x8c>)
 800d868:	4819      	ldr	r0, [pc, #100]	; (800d8d0 <__s2b+0x90>)
 800d86a:	21ce      	movs	r1, #206	; 0xce
 800d86c:	f7fe fd04 	bl	800c278 <__assert_func>
 800d870:	0052      	lsls	r2, r2, #1
 800d872:	3101      	adds	r1, #1
 800d874:	e7f0      	b.n	800d858 <__s2b+0x18>
 800d876:	9b08      	ldr	r3, [sp, #32]
 800d878:	6143      	str	r3, [r0, #20]
 800d87a:	2d09      	cmp	r5, #9
 800d87c:	f04f 0301 	mov.w	r3, #1
 800d880:	6103      	str	r3, [r0, #16]
 800d882:	dd16      	ble.n	800d8b2 <__s2b+0x72>
 800d884:	f104 0909 	add.w	r9, r4, #9
 800d888:	46c8      	mov	r8, r9
 800d88a:	442c      	add	r4, r5
 800d88c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d890:	4601      	mov	r1, r0
 800d892:	3b30      	subs	r3, #48	; 0x30
 800d894:	220a      	movs	r2, #10
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff ff88 	bl	800d7ac <__multadd>
 800d89c:	45a0      	cmp	r8, r4
 800d89e:	d1f5      	bne.n	800d88c <__s2b+0x4c>
 800d8a0:	f1a5 0408 	sub.w	r4, r5, #8
 800d8a4:	444c      	add	r4, r9
 800d8a6:	1b2d      	subs	r5, r5, r4
 800d8a8:	1963      	adds	r3, r4, r5
 800d8aa:	42bb      	cmp	r3, r7
 800d8ac:	db04      	blt.n	800d8b8 <__s2b+0x78>
 800d8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	340a      	adds	r4, #10
 800d8b4:	2509      	movs	r5, #9
 800d8b6:	e7f6      	b.n	800d8a6 <__s2b+0x66>
 800d8b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8bc:	4601      	mov	r1, r0
 800d8be:	3b30      	subs	r3, #48	; 0x30
 800d8c0:	220a      	movs	r2, #10
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7ff ff72 	bl	800d7ac <__multadd>
 800d8c8:	e7ee      	b.n	800d8a8 <__s2b+0x68>
 800d8ca:	bf00      	nop
 800d8cc:	080106da 	.word	0x080106da
 800d8d0:	08010768 	.word	0x08010768

0800d8d4 <__hi0bits>:
 800d8d4:	0c03      	lsrs	r3, r0, #16
 800d8d6:	041b      	lsls	r3, r3, #16
 800d8d8:	b9d3      	cbnz	r3, 800d910 <__hi0bits+0x3c>
 800d8da:	0400      	lsls	r0, r0, #16
 800d8dc:	2310      	movs	r3, #16
 800d8de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8e2:	bf04      	itt	eq
 800d8e4:	0200      	lsleq	r0, r0, #8
 800d8e6:	3308      	addeq	r3, #8
 800d8e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8ec:	bf04      	itt	eq
 800d8ee:	0100      	lsleq	r0, r0, #4
 800d8f0:	3304      	addeq	r3, #4
 800d8f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8f6:	bf04      	itt	eq
 800d8f8:	0080      	lsleq	r0, r0, #2
 800d8fa:	3302      	addeq	r3, #2
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	db05      	blt.n	800d90c <__hi0bits+0x38>
 800d900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d904:	f103 0301 	add.w	r3, r3, #1
 800d908:	bf08      	it	eq
 800d90a:	2320      	moveq	r3, #32
 800d90c:	4618      	mov	r0, r3
 800d90e:	4770      	bx	lr
 800d910:	2300      	movs	r3, #0
 800d912:	e7e4      	b.n	800d8de <__hi0bits+0xa>

0800d914 <__lo0bits>:
 800d914:	6803      	ldr	r3, [r0, #0]
 800d916:	f013 0207 	ands.w	r2, r3, #7
 800d91a:	4601      	mov	r1, r0
 800d91c:	d00b      	beq.n	800d936 <__lo0bits+0x22>
 800d91e:	07da      	lsls	r2, r3, #31
 800d920:	d424      	bmi.n	800d96c <__lo0bits+0x58>
 800d922:	0798      	lsls	r0, r3, #30
 800d924:	bf49      	itett	mi
 800d926:	085b      	lsrmi	r3, r3, #1
 800d928:	089b      	lsrpl	r3, r3, #2
 800d92a:	2001      	movmi	r0, #1
 800d92c:	600b      	strmi	r3, [r1, #0]
 800d92e:	bf5c      	itt	pl
 800d930:	600b      	strpl	r3, [r1, #0]
 800d932:	2002      	movpl	r0, #2
 800d934:	4770      	bx	lr
 800d936:	b298      	uxth	r0, r3
 800d938:	b9b0      	cbnz	r0, 800d968 <__lo0bits+0x54>
 800d93a:	0c1b      	lsrs	r3, r3, #16
 800d93c:	2010      	movs	r0, #16
 800d93e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d942:	bf04      	itt	eq
 800d944:	0a1b      	lsreq	r3, r3, #8
 800d946:	3008      	addeq	r0, #8
 800d948:	071a      	lsls	r2, r3, #28
 800d94a:	bf04      	itt	eq
 800d94c:	091b      	lsreq	r3, r3, #4
 800d94e:	3004      	addeq	r0, #4
 800d950:	079a      	lsls	r2, r3, #30
 800d952:	bf04      	itt	eq
 800d954:	089b      	lsreq	r3, r3, #2
 800d956:	3002      	addeq	r0, #2
 800d958:	07da      	lsls	r2, r3, #31
 800d95a:	d403      	bmi.n	800d964 <__lo0bits+0x50>
 800d95c:	085b      	lsrs	r3, r3, #1
 800d95e:	f100 0001 	add.w	r0, r0, #1
 800d962:	d005      	beq.n	800d970 <__lo0bits+0x5c>
 800d964:	600b      	str	r3, [r1, #0]
 800d966:	4770      	bx	lr
 800d968:	4610      	mov	r0, r2
 800d96a:	e7e8      	b.n	800d93e <__lo0bits+0x2a>
 800d96c:	2000      	movs	r0, #0
 800d96e:	4770      	bx	lr
 800d970:	2020      	movs	r0, #32
 800d972:	4770      	bx	lr

0800d974 <__i2b>:
 800d974:	b510      	push	{r4, lr}
 800d976:	460c      	mov	r4, r1
 800d978:	2101      	movs	r1, #1
 800d97a:	f7ff feb5 	bl	800d6e8 <_Balloc>
 800d97e:	4602      	mov	r2, r0
 800d980:	b928      	cbnz	r0, 800d98e <__i2b+0x1a>
 800d982:	4b05      	ldr	r3, [pc, #20]	; (800d998 <__i2b+0x24>)
 800d984:	4805      	ldr	r0, [pc, #20]	; (800d99c <__i2b+0x28>)
 800d986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d98a:	f7fe fc75 	bl	800c278 <__assert_func>
 800d98e:	2301      	movs	r3, #1
 800d990:	6144      	str	r4, [r0, #20]
 800d992:	6103      	str	r3, [r0, #16]
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	080106da 	.word	0x080106da
 800d99c:	08010768 	.word	0x08010768

0800d9a0 <__multiply>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	4614      	mov	r4, r2
 800d9a6:	690a      	ldr	r2, [r1, #16]
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	bfb8      	it	lt
 800d9ae:	460b      	movlt	r3, r1
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	bfbc      	itt	lt
 800d9b4:	4625      	movlt	r5, r4
 800d9b6:	461c      	movlt	r4, r3
 800d9b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d9bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d9c0:	68ab      	ldr	r3, [r5, #8]
 800d9c2:	6869      	ldr	r1, [r5, #4]
 800d9c4:	eb0a 0709 	add.w	r7, sl, r9
 800d9c8:	42bb      	cmp	r3, r7
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	bfb8      	it	lt
 800d9ce:	3101      	addlt	r1, #1
 800d9d0:	f7ff fe8a 	bl	800d6e8 <_Balloc>
 800d9d4:	b930      	cbnz	r0, 800d9e4 <__multiply+0x44>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	4b42      	ldr	r3, [pc, #264]	; (800dae4 <__multiply+0x144>)
 800d9da:	4843      	ldr	r0, [pc, #268]	; (800dae8 <__multiply+0x148>)
 800d9dc:	f240 115d 	movw	r1, #349	; 0x15d
 800d9e0:	f7fe fc4a 	bl	800c278 <__assert_func>
 800d9e4:	f100 0614 	add.w	r6, r0, #20
 800d9e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d9ec:	4633      	mov	r3, r6
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	4543      	cmp	r3, r8
 800d9f2:	d31e      	bcc.n	800da32 <__multiply+0x92>
 800d9f4:	f105 0c14 	add.w	ip, r5, #20
 800d9f8:	f104 0314 	add.w	r3, r4, #20
 800d9fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800da00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800da04:	9202      	str	r2, [sp, #8]
 800da06:	ebac 0205 	sub.w	r2, ip, r5
 800da0a:	3a15      	subs	r2, #21
 800da0c:	f022 0203 	bic.w	r2, r2, #3
 800da10:	3204      	adds	r2, #4
 800da12:	f105 0115 	add.w	r1, r5, #21
 800da16:	458c      	cmp	ip, r1
 800da18:	bf38      	it	cc
 800da1a:	2204      	movcc	r2, #4
 800da1c:	9201      	str	r2, [sp, #4]
 800da1e:	9a02      	ldr	r2, [sp, #8]
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	429a      	cmp	r2, r3
 800da24:	d808      	bhi.n	800da38 <__multiply+0x98>
 800da26:	2f00      	cmp	r7, #0
 800da28:	dc55      	bgt.n	800dad6 <__multiply+0x136>
 800da2a:	6107      	str	r7, [r0, #16]
 800da2c:	b005      	add	sp, #20
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	f843 2b04 	str.w	r2, [r3], #4
 800da36:	e7db      	b.n	800d9f0 <__multiply+0x50>
 800da38:	f8b3 a000 	ldrh.w	sl, [r3]
 800da3c:	f1ba 0f00 	cmp.w	sl, #0
 800da40:	d020      	beq.n	800da84 <__multiply+0xe4>
 800da42:	f105 0e14 	add.w	lr, r5, #20
 800da46:	46b1      	mov	r9, r6
 800da48:	2200      	movs	r2, #0
 800da4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800da4e:	f8d9 b000 	ldr.w	fp, [r9]
 800da52:	b2a1      	uxth	r1, r4
 800da54:	fa1f fb8b 	uxth.w	fp, fp
 800da58:	fb0a b101 	mla	r1, sl, r1, fp
 800da5c:	4411      	add	r1, r2
 800da5e:	f8d9 2000 	ldr.w	r2, [r9]
 800da62:	0c24      	lsrs	r4, r4, #16
 800da64:	0c12      	lsrs	r2, r2, #16
 800da66:	fb0a 2404 	mla	r4, sl, r4, r2
 800da6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800da6e:	b289      	uxth	r1, r1
 800da70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800da74:	45f4      	cmp	ip, lr
 800da76:	f849 1b04 	str.w	r1, [r9], #4
 800da7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800da7e:	d8e4      	bhi.n	800da4a <__multiply+0xaa>
 800da80:	9901      	ldr	r1, [sp, #4]
 800da82:	5072      	str	r2, [r6, r1]
 800da84:	9a03      	ldr	r2, [sp, #12]
 800da86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da8a:	3304      	adds	r3, #4
 800da8c:	f1b9 0f00 	cmp.w	r9, #0
 800da90:	d01f      	beq.n	800dad2 <__multiply+0x132>
 800da92:	6834      	ldr	r4, [r6, #0]
 800da94:	f105 0114 	add.w	r1, r5, #20
 800da98:	46b6      	mov	lr, r6
 800da9a:	f04f 0a00 	mov.w	sl, #0
 800da9e:	880a      	ldrh	r2, [r1, #0]
 800daa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800daa4:	fb09 b202 	mla	r2, r9, r2, fp
 800daa8:	4492      	add	sl, r2
 800daaa:	b2a4      	uxth	r4, r4
 800daac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dab0:	f84e 4b04 	str.w	r4, [lr], #4
 800dab4:	f851 4b04 	ldr.w	r4, [r1], #4
 800dab8:	f8be 2000 	ldrh.w	r2, [lr]
 800dabc:	0c24      	lsrs	r4, r4, #16
 800dabe:	fb09 2404 	mla	r4, r9, r4, r2
 800dac2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dac6:	458c      	cmp	ip, r1
 800dac8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dacc:	d8e7      	bhi.n	800da9e <__multiply+0xfe>
 800dace:	9a01      	ldr	r2, [sp, #4]
 800dad0:	50b4      	str	r4, [r6, r2]
 800dad2:	3604      	adds	r6, #4
 800dad4:	e7a3      	b.n	800da1e <__multiply+0x7e>
 800dad6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1a5      	bne.n	800da2a <__multiply+0x8a>
 800dade:	3f01      	subs	r7, #1
 800dae0:	e7a1      	b.n	800da26 <__multiply+0x86>
 800dae2:	bf00      	nop
 800dae4:	080106da 	.word	0x080106da
 800dae8:	08010768 	.word	0x08010768

0800daec <__pow5mult>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	4615      	mov	r5, r2
 800daf2:	f012 0203 	ands.w	r2, r2, #3
 800daf6:	4606      	mov	r6, r0
 800daf8:	460f      	mov	r7, r1
 800dafa:	d007      	beq.n	800db0c <__pow5mult+0x20>
 800dafc:	4c25      	ldr	r4, [pc, #148]	; (800db94 <__pow5mult+0xa8>)
 800dafe:	3a01      	subs	r2, #1
 800db00:	2300      	movs	r3, #0
 800db02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db06:	f7ff fe51 	bl	800d7ac <__multadd>
 800db0a:	4607      	mov	r7, r0
 800db0c:	10ad      	asrs	r5, r5, #2
 800db0e:	d03d      	beq.n	800db8c <__pow5mult+0xa0>
 800db10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db12:	b97c      	cbnz	r4, 800db34 <__pow5mult+0x48>
 800db14:	2010      	movs	r0, #16
 800db16:	f7ff fdcd 	bl	800d6b4 <malloc>
 800db1a:	4602      	mov	r2, r0
 800db1c:	6270      	str	r0, [r6, #36]	; 0x24
 800db1e:	b928      	cbnz	r0, 800db2c <__pow5mult+0x40>
 800db20:	4b1d      	ldr	r3, [pc, #116]	; (800db98 <__pow5mult+0xac>)
 800db22:	481e      	ldr	r0, [pc, #120]	; (800db9c <__pow5mult+0xb0>)
 800db24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db28:	f7fe fba6 	bl	800c278 <__assert_func>
 800db2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db30:	6004      	str	r4, [r0, #0]
 800db32:	60c4      	str	r4, [r0, #12]
 800db34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db3c:	b94c      	cbnz	r4, 800db52 <__pow5mult+0x66>
 800db3e:	f240 2171 	movw	r1, #625	; 0x271
 800db42:	4630      	mov	r0, r6
 800db44:	f7ff ff16 	bl	800d974 <__i2b>
 800db48:	2300      	movs	r3, #0
 800db4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db4e:	4604      	mov	r4, r0
 800db50:	6003      	str	r3, [r0, #0]
 800db52:	f04f 0900 	mov.w	r9, #0
 800db56:	07eb      	lsls	r3, r5, #31
 800db58:	d50a      	bpl.n	800db70 <__pow5mult+0x84>
 800db5a:	4639      	mov	r1, r7
 800db5c:	4622      	mov	r2, r4
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ff1e 	bl	800d9a0 <__multiply>
 800db64:	4639      	mov	r1, r7
 800db66:	4680      	mov	r8, r0
 800db68:	4630      	mov	r0, r6
 800db6a:	f7ff fdfd 	bl	800d768 <_Bfree>
 800db6e:	4647      	mov	r7, r8
 800db70:	106d      	asrs	r5, r5, #1
 800db72:	d00b      	beq.n	800db8c <__pow5mult+0xa0>
 800db74:	6820      	ldr	r0, [r4, #0]
 800db76:	b938      	cbnz	r0, 800db88 <__pow5mult+0x9c>
 800db78:	4622      	mov	r2, r4
 800db7a:	4621      	mov	r1, r4
 800db7c:	4630      	mov	r0, r6
 800db7e:	f7ff ff0f 	bl	800d9a0 <__multiply>
 800db82:	6020      	str	r0, [r4, #0]
 800db84:	f8c0 9000 	str.w	r9, [r0]
 800db88:	4604      	mov	r4, r0
 800db8a:	e7e4      	b.n	800db56 <__pow5mult+0x6a>
 800db8c:	4638      	mov	r0, r7
 800db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db92:	bf00      	nop
 800db94:	080108b8 	.word	0x080108b8
 800db98:	08010409 	.word	0x08010409
 800db9c:	08010768 	.word	0x08010768

0800dba0 <__lshift>:
 800dba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dba4:	460c      	mov	r4, r1
 800dba6:	6849      	ldr	r1, [r1, #4]
 800dba8:	6923      	ldr	r3, [r4, #16]
 800dbaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	4607      	mov	r7, r0
 800dbb2:	4691      	mov	r9, r2
 800dbb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbb8:	f108 0601 	add.w	r6, r8, #1
 800dbbc:	42b3      	cmp	r3, r6
 800dbbe:	db0b      	blt.n	800dbd8 <__lshift+0x38>
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f7ff fd91 	bl	800d6e8 <_Balloc>
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	b948      	cbnz	r0, 800dbde <__lshift+0x3e>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	4b28      	ldr	r3, [pc, #160]	; (800dc70 <__lshift+0xd0>)
 800dbce:	4829      	ldr	r0, [pc, #164]	; (800dc74 <__lshift+0xd4>)
 800dbd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbd4:	f7fe fb50 	bl	800c278 <__assert_func>
 800dbd8:	3101      	adds	r1, #1
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	e7ee      	b.n	800dbbc <__lshift+0x1c>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f100 0114 	add.w	r1, r0, #20
 800dbe4:	f100 0210 	add.w	r2, r0, #16
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4553      	cmp	r3, sl
 800dbec:	db33      	blt.n	800dc56 <__lshift+0xb6>
 800dbee:	6920      	ldr	r0, [r4, #16]
 800dbf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbf4:	f104 0314 	add.w	r3, r4, #20
 800dbf8:	f019 091f 	ands.w	r9, r9, #31
 800dbfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc04:	d02b      	beq.n	800dc5e <__lshift+0xbe>
 800dc06:	f1c9 0e20 	rsb	lr, r9, #32
 800dc0a:	468a      	mov	sl, r1
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	6818      	ldr	r0, [r3, #0]
 800dc10:	fa00 f009 	lsl.w	r0, r0, r9
 800dc14:	4302      	orrs	r2, r0
 800dc16:	f84a 2b04 	str.w	r2, [sl], #4
 800dc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1e:	459c      	cmp	ip, r3
 800dc20:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc24:	d8f3      	bhi.n	800dc0e <__lshift+0x6e>
 800dc26:	ebac 0304 	sub.w	r3, ip, r4
 800dc2a:	3b15      	subs	r3, #21
 800dc2c:	f023 0303 	bic.w	r3, r3, #3
 800dc30:	3304      	adds	r3, #4
 800dc32:	f104 0015 	add.w	r0, r4, #21
 800dc36:	4584      	cmp	ip, r0
 800dc38:	bf38      	it	cc
 800dc3a:	2304      	movcc	r3, #4
 800dc3c:	50ca      	str	r2, [r1, r3]
 800dc3e:	b10a      	cbz	r2, 800dc44 <__lshift+0xa4>
 800dc40:	f108 0602 	add.w	r6, r8, #2
 800dc44:	3e01      	subs	r6, #1
 800dc46:	4638      	mov	r0, r7
 800dc48:	612e      	str	r6, [r5, #16]
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	f7ff fd8c 	bl	800d768 <_Bfree>
 800dc50:	4628      	mov	r0, r5
 800dc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc56:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	e7c5      	b.n	800dbea <__lshift+0x4a>
 800dc5e:	3904      	subs	r1, #4
 800dc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc64:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc68:	459c      	cmp	ip, r3
 800dc6a:	d8f9      	bhi.n	800dc60 <__lshift+0xc0>
 800dc6c:	e7ea      	b.n	800dc44 <__lshift+0xa4>
 800dc6e:	bf00      	nop
 800dc70:	080106da 	.word	0x080106da
 800dc74:	08010768 	.word	0x08010768

0800dc78 <__mcmp>:
 800dc78:	b530      	push	{r4, r5, lr}
 800dc7a:	6902      	ldr	r2, [r0, #16]
 800dc7c:	690c      	ldr	r4, [r1, #16]
 800dc7e:	1b12      	subs	r2, r2, r4
 800dc80:	d10e      	bne.n	800dca0 <__mcmp+0x28>
 800dc82:	f100 0314 	add.w	r3, r0, #20
 800dc86:	3114      	adds	r1, #20
 800dc88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc98:	42a5      	cmp	r5, r4
 800dc9a:	d003      	beq.n	800dca4 <__mcmp+0x2c>
 800dc9c:	d305      	bcc.n	800dcaa <__mcmp+0x32>
 800dc9e:	2201      	movs	r2, #1
 800dca0:	4610      	mov	r0, r2
 800dca2:	bd30      	pop	{r4, r5, pc}
 800dca4:	4283      	cmp	r3, r0
 800dca6:	d3f3      	bcc.n	800dc90 <__mcmp+0x18>
 800dca8:	e7fa      	b.n	800dca0 <__mcmp+0x28>
 800dcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800dcae:	e7f7      	b.n	800dca0 <__mcmp+0x28>

0800dcb0 <__mdiff>:
 800dcb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	4606      	mov	r6, r0
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4620      	mov	r0, r4
 800dcbc:	4617      	mov	r7, r2
 800dcbe:	f7ff ffdb 	bl	800dc78 <__mcmp>
 800dcc2:	1e05      	subs	r5, r0, #0
 800dcc4:	d110      	bne.n	800dce8 <__mdiff+0x38>
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7ff fd0d 	bl	800d6e8 <_Balloc>
 800dcce:	b930      	cbnz	r0, 800dcde <__mdiff+0x2e>
 800dcd0:	4b39      	ldr	r3, [pc, #228]	; (800ddb8 <__mdiff+0x108>)
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	f240 2132 	movw	r1, #562	; 0x232
 800dcd8:	4838      	ldr	r0, [pc, #224]	; (800ddbc <__mdiff+0x10c>)
 800dcda:	f7fe facd 	bl	800c278 <__assert_func>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	bfa4      	itt	ge
 800dcea:	463b      	movge	r3, r7
 800dcec:	4627      	movge	r7, r4
 800dcee:	4630      	mov	r0, r6
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	bfa6      	itte	ge
 800dcf4:	461c      	movge	r4, r3
 800dcf6:	2500      	movge	r5, #0
 800dcf8:	2501      	movlt	r5, #1
 800dcfa:	f7ff fcf5 	bl	800d6e8 <_Balloc>
 800dcfe:	b920      	cbnz	r0, 800dd0a <__mdiff+0x5a>
 800dd00:	4b2d      	ldr	r3, [pc, #180]	; (800ddb8 <__mdiff+0x108>)
 800dd02:	4602      	mov	r2, r0
 800dd04:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd08:	e7e6      	b.n	800dcd8 <__mdiff+0x28>
 800dd0a:	693e      	ldr	r6, [r7, #16]
 800dd0c:	60c5      	str	r5, [r0, #12]
 800dd0e:	6925      	ldr	r5, [r4, #16]
 800dd10:	f107 0114 	add.w	r1, r7, #20
 800dd14:	f104 0914 	add.w	r9, r4, #20
 800dd18:	f100 0e14 	add.w	lr, r0, #20
 800dd1c:	f107 0210 	add.w	r2, r7, #16
 800dd20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dd24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dd28:	46f2      	mov	sl, lr
 800dd2a:	2700      	movs	r7, #0
 800dd2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd34:	fa1f f883 	uxth.w	r8, r3
 800dd38:	fa17 f78b 	uxtah	r7, r7, fp
 800dd3c:	0c1b      	lsrs	r3, r3, #16
 800dd3e:	eba7 0808 	sub.w	r8, r7, r8
 800dd42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd4a:	fa1f f888 	uxth.w	r8, r8
 800dd4e:	141f      	asrs	r7, r3, #16
 800dd50:	454d      	cmp	r5, r9
 800dd52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd56:	f84a 3b04 	str.w	r3, [sl], #4
 800dd5a:	d8e7      	bhi.n	800dd2c <__mdiff+0x7c>
 800dd5c:	1b2b      	subs	r3, r5, r4
 800dd5e:	3b15      	subs	r3, #21
 800dd60:	f023 0303 	bic.w	r3, r3, #3
 800dd64:	3304      	adds	r3, #4
 800dd66:	3415      	adds	r4, #21
 800dd68:	42a5      	cmp	r5, r4
 800dd6a:	bf38      	it	cc
 800dd6c:	2304      	movcc	r3, #4
 800dd6e:	4419      	add	r1, r3
 800dd70:	4473      	add	r3, lr
 800dd72:	469e      	mov	lr, r3
 800dd74:	460d      	mov	r5, r1
 800dd76:	4565      	cmp	r5, ip
 800dd78:	d30e      	bcc.n	800dd98 <__mdiff+0xe8>
 800dd7a:	f10c 0203 	add.w	r2, ip, #3
 800dd7e:	1a52      	subs	r2, r2, r1
 800dd80:	f022 0203 	bic.w	r2, r2, #3
 800dd84:	3903      	subs	r1, #3
 800dd86:	458c      	cmp	ip, r1
 800dd88:	bf38      	it	cc
 800dd8a:	2200      	movcc	r2, #0
 800dd8c:	441a      	add	r2, r3
 800dd8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd92:	b17b      	cbz	r3, 800ddb4 <__mdiff+0x104>
 800dd94:	6106      	str	r6, [r0, #16]
 800dd96:	e7a5      	b.n	800dce4 <__mdiff+0x34>
 800dd98:	f855 8b04 	ldr.w	r8, [r5], #4
 800dd9c:	fa17 f488 	uxtah	r4, r7, r8
 800dda0:	1422      	asrs	r2, r4, #16
 800dda2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dda6:	b2a4      	uxth	r4, r4
 800dda8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ddac:	f84e 4b04 	str.w	r4, [lr], #4
 800ddb0:	1417      	asrs	r7, r2, #16
 800ddb2:	e7e0      	b.n	800dd76 <__mdiff+0xc6>
 800ddb4:	3e01      	subs	r6, #1
 800ddb6:	e7ea      	b.n	800dd8e <__mdiff+0xde>
 800ddb8:	080106da 	.word	0x080106da
 800ddbc:	08010768 	.word	0x08010768

0800ddc0 <__ulp>:
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	ed8d 0b00 	vstr	d0, [sp]
 800ddc6:	9b01      	ldr	r3, [sp, #4]
 800ddc8:	4912      	ldr	r1, [pc, #72]	; (800de14 <__ulp+0x54>)
 800ddca:	4019      	ands	r1, r3
 800ddcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	dd05      	ble.n	800dde0 <__ulp+0x20>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	ec43 2b10 	vmov	d0, r2, r3
 800dddc:	b002      	add	sp, #8
 800ddde:	4770      	bx	lr
 800dde0:	4249      	negs	r1, r1
 800dde2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dde6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ddea:	f04f 0200 	mov.w	r2, #0
 800ddee:	f04f 0300 	mov.w	r3, #0
 800ddf2:	da04      	bge.n	800ddfe <__ulp+0x3e>
 800ddf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ddf8:	fa41 f300 	asr.w	r3, r1, r0
 800ddfc:	e7ec      	b.n	800ddd8 <__ulp+0x18>
 800ddfe:	f1a0 0114 	sub.w	r1, r0, #20
 800de02:	291e      	cmp	r1, #30
 800de04:	bfda      	itte	le
 800de06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800de0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800de0e:	2101      	movgt	r1, #1
 800de10:	460a      	mov	r2, r1
 800de12:	e7e1      	b.n	800ddd8 <__ulp+0x18>
 800de14:	7ff00000 	.word	0x7ff00000

0800de18 <__b2d>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	6905      	ldr	r5, [r0, #16]
 800de1c:	f100 0714 	add.w	r7, r0, #20
 800de20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de24:	1f2e      	subs	r6, r5, #4
 800de26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7ff fd52 	bl	800d8d4 <__hi0bits>
 800de30:	f1c0 0320 	rsb	r3, r0, #32
 800de34:	280a      	cmp	r0, #10
 800de36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800deb4 <__b2d+0x9c>
 800de3a:	600b      	str	r3, [r1, #0]
 800de3c:	dc14      	bgt.n	800de68 <__b2d+0x50>
 800de3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800de42:	fa24 f10e 	lsr.w	r1, r4, lr
 800de46:	42b7      	cmp	r7, r6
 800de48:	ea41 030c 	orr.w	r3, r1, ip
 800de4c:	bf34      	ite	cc
 800de4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de52:	2100      	movcs	r1, #0
 800de54:	3015      	adds	r0, #21
 800de56:	fa04 f000 	lsl.w	r0, r4, r0
 800de5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800de5e:	ea40 0201 	orr.w	r2, r0, r1
 800de62:	ec43 2b10 	vmov	d0, r2, r3
 800de66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de68:	42b7      	cmp	r7, r6
 800de6a:	bf3a      	itte	cc
 800de6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de70:	f1a5 0608 	subcc.w	r6, r5, #8
 800de74:	2100      	movcs	r1, #0
 800de76:	380b      	subs	r0, #11
 800de78:	d017      	beq.n	800deaa <__b2d+0x92>
 800de7a:	f1c0 0c20 	rsb	ip, r0, #32
 800de7e:	fa04 f500 	lsl.w	r5, r4, r0
 800de82:	42be      	cmp	r6, r7
 800de84:	fa21 f40c 	lsr.w	r4, r1, ip
 800de88:	ea45 0504 	orr.w	r5, r5, r4
 800de8c:	bf8c      	ite	hi
 800de8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de92:	2400      	movls	r4, #0
 800de94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800de98:	fa01 f000 	lsl.w	r0, r1, r0
 800de9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dea0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dea4:	ea40 0204 	orr.w	r2, r0, r4
 800dea8:	e7db      	b.n	800de62 <__b2d+0x4a>
 800deaa:	ea44 030c 	orr.w	r3, r4, ip
 800deae:	460a      	mov	r2, r1
 800deb0:	e7d7      	b.n	800de62 <__b2d+0x4a>
 800deb2:	bf00      	nop
 800deb4:	3ff00000 	.word	0x3ff00000

0800deb8 <__d2b>:
 800deb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800debc:	4689      	mov	r9, r1
 800debe:	2101      	movs	r1, #1
 800dec0:	ec57 6b10 	vmov	r6, r7, d0
 800dec4:	4690      	mov	r8, r2
 800dec6:	f7ff fc0f 	bl	800d6e8 <_Balloc>
 800deca:	4604      	mov	r4, r0
 800decc:	b930      	cbnz	r0, 800dedc <__d2b+0x24>
 800dece:	4602      	mov	r2, r0
 800ded0:	4b25      	ldr	r3, [pc, #148]	; (800df68 <__d2b+0xb0>)
 800ded2:	4826      	ldr	r0, [pc, #152]	; (800df6c <__d2b+0xb4>)
 800ded4:	f240 310a 	movw	r1, #778	; 0x30a
 800ded8:	f7fe f9ce 	bl	800c278 <__assert_func>
 800dedc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dee4:	bb35      	cbnz	r5, 800df34 <__d2b+0x7c>
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	9301      	str	r3, [sp, #4]
 800deea:	d028      	beq.n	800df3e <__d2b+0x86>
 800deec:	4668      	mov	r0, sp
 800deee:	9600      	str	r6, [sp, #0]
 800def0:	f7ff fd10 	bl	800d914 <__lo0bits>
 800def4:	9900      	ldr	r1, [sp, #0]
 800def6:	b300      	cbz	r0, 800df3a <__d2b+0x82>
 800def8:	9a01      	ldr	r2, [sp, #4]
 800defa:	f1c0 0320 	rsb	r3, r0, #32
 800defe:	fa02 f303 	lsl.w	r3, r2, r3
 800df02:	430b      	orrs	r3, r1
 800df04:	40c2      	lsrs	r2, r0
 800df06:	6163      	str	r3, [r4, #20]
 800df08:	9201      	str	r2, [sp, #4]
 800df0a:	9b01      	ldr	r3, [sp, #4]
 800df0c:	61a3      	str	r3, [r4, #24]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	bf14      	ite	ne
 800df12:	2202      	movne	r2, #2
 800df14:	2201      	moveq	r2, #1
 800df16:	6122      	str	r2, [r4, #16]
 800df18:	b1d5      	cbz	r5, 800df50 <__d2b+0x98>
 800df1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df1e:	4405      	add	r5, r0
 800df20:	f8c9 5000 	str.w	r5, [r9]
 800df24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df28:	f8c8 0000 	str.w	r0, [r8]
 800df2c:	4620      	mov	r0, r4
 800df2e:	b003      	add	sp, #12
 800df30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df38:	e7d5      	b.n	800dee6 <__d2b+0x2e>
 800df3a:	6161      	str	r1, [r4, #20]
 800df3c:	e7e5      	b.n	800df0a <__d2b+0x52>
 800df3e:	a801      	add	r0, sp, #4
 800df40:	f7ff fce8 	bl	800d914 <__lo0bits>
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	6163      	str	r3, [r4, #20]
 800df48:	2201      	movs	r2, #1
 800df4a:	6122      	str	r2, [r4, #16]
 800df4c:	3020      	adds	r0, #32
 800df4e:	e7e3      	b.n	800df18 <__d2b+0x60>
 800df50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df58:	f8c9 0000 	str.w	r0, [r9]
 800df5c:	6918      	ldr	r0, [r3, #16]
 800df5e:	f7ff fcb9 	bl	800d8d4 <__hi0bits>
 800df62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df66:	e7df      	b.n	800df28 <__d2b+0x70>
 800df68:	080106da 	.word	0x080106da
 800df6c:	08010768 	.word	0x08010768

0800df70 <__ratio>:
 800df70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	4688      	mov	r8, r1
 800df76:	4669      	mov	r1, sp
 800df78:	4681      	mov	r9, r0
 800df7a:	f7ff ff4d 	bl	800de18 <__b2d>
 800df7e:	a901      	add	r1, sp, #4
 800df80:	4640      	mov	r0, r8
 800df82:	ec55 4b10 	vmov	r4, r5, d0
 800df86:	f7ff ff47 	bl	800de18 <__b2d>
 800df8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df92:	eba3 0c02 	sub.w	ip, r3, r2
 800df96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df9a:	1a9b      	subs	r3, r3, r2
 800df9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dfa0:	ec51 0b10 	vmov	r0, r1, d0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	bfd6      	itet	le
 800dfa8:	460a      	movle	r2, r1
 800dfaa:	462a      	movgt	r2, r5
 800dfac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfb0:	468b      	mov	fp, r1
 800dfb2:	462f      	mov	r7, r5
 800dfb4:	bfd4      	ite	le
 800dfb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dfba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	ee10 2a10 	vmov	r2, s0
 800dfc4:	465b      	mov	r3, fp
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	f7f2 fc78 	bl	80008bc <__aeabi_ddiv>
 800dfcc:	ec41 0b10 	vmov	d0, r0, r1
 800dfd0:	b003      	add	sp, #12
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfd6 <__copybits>:
 800dfd6:	3901      	subs	r1, #1
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	1149      	asrs	r1, r1, #5
 800dfdc:	6914      	ldr	r4, [r2, #16]
 800dfde:	3101      	adds	r1, #1
 800dfe0:	f102 0314 	add.w	r3, r2, #20
 800dfe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfec:	1f05      	subs	r5, r0, #4
 800dfee:	42a3      	cmp	r3, r4
 800dff0:	d30c      	bcc.n	800e00c <__copybits+0x36>
 800dff2:	1aa3      	subs	r3, r4, r2
 800dff4:	3b11      	subs	r3, #17
 800dff6:	f023 0303 	bic.w	r3, r3, #3
 800dffa:	3211      	adds	r2, #17
 800dffc:	42a2      	cmp	r2, r4
 800dffe:	bf88      	it	hi
 800e000:	2300      	movhi	r3, #0
 800e002:	4418      	add	r0, r3
 800e004:	2300      	movs	r3, #0
 800e006:	4288      	cmp	r0, r1
 800e008:	d305      	bcc.n	800e016 <__copybits+0x40>
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e010:	f845 6f04 	str.w	r6, [r5, #4]!
 800e014:	e7eb      	b.n	800dfee <__copybits+0x18>
 800e016:	f840 3b04 	str.w	r3, [r0], #4
 800e01a:	e7f4      	b.n	800e006 <__copybits+0x30>

0800e01c <__any_on>:
 800e01c:	f100 0214 	add.w	r2, r0, #20
 800e020:	6900      	ldr	r0, [r0, #16]
 800e022:	114b      	asrs	r3, r1, #5
 800e024:	4298      	cmp	r0, r3
 800e026:	b510      	push	{r4, lr}
 800e028:	db11      	blt.n	800e04e <__any_on+0x32>
 800e02a:	dd0a      	ble.n	800e042 <__any_on+0x26>
 800e02c:	f011 011f 	ands.w	r1, r1, #31
 800e030:	d007      	beq.n	800e042 <__any_on+0x26>
 800e032:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e036:	fa24 f001 	lsr.w	r0, r4, r1
 800e03a:	fa00 f101 	lsl.w	r1, r0, r1
 800e03e:	428c      	cmp	r4, r1
 800e040:	d10b      	bne.n	800e05a <__any_on+0x3e>
 800e042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e046:	4293      	cmp	r3, r2
 800e048:	d803      	bhi.n	800e052 <__any_on+0x36>
 800e04a:	2000      	movs	r0, #0
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	4603      	mov	r3, r0
 800e050:	e7f7      	b.n	800e042 <__any_on+0x26>
 800e052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e056:	2900      	cmp	r1, #0
 800e058:	d0f5      	beq.n	800e046 <__any_on+0x2a>
 800e05a:	2001      	movs	r0, #1
 800e05c:	e7f6      	b.n	800e04c <__any_on+0x30>

0800e05e <_calloc_r>:
 800e05e:	b513      	push	{r0, r1, r4, lr}
 800e060:	434a      	muls	r2, r1
 800e062:	4611      	mov	r1, r2
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	f000 f859 	bl	800e11c <_malloc_r>
 800e06a:	4604      	mov	r4, r0
 800e06c:	b118      	cbz	r0, 800e076 <_calloc_r+0x18>
 800e06e:	9a01      	ldr	r2, [sp, #4]
 800e070:	2100      	movs	r1, #0
 800e072:	f7fc fa11 	bl	800a498 <memset>
 800e076:	4620      	mov	r0, r4
 800e078:	b002      	add	sp, #8
 800e07a:	bd10      	pop	{r4, pc}

0800e07c <_free_r>:
 800e07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e07e:	2900      	cmp	r1, #0
 800e080:	d048      	beq.n	800e114 <_free_r+0x98>
 800e082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e086:	9001      	str	r0, [sp, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f1a1 0404 	sub.w	r4, r1, #4
 800e08e:	bfb8      	it	lt
 800e090:	18e4      	addlt	r4, r4, r3
 800e092:	f000 fe9b 	bl	800edcc <__malloc_lock>
 800e096:	4a20      	ldr	r2, [pc, #128]	; (800e118 <_free_r+0x9c>)
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	6813      	ldr	r3, [r2, #0]
 800e09c:	4615      	mov	r5, r2
 800e09e:	b933      	cbnz	r3, 800e0ae <_free_r+0x32>
 800e0a0:	6063      	str	r3, [r4, #4]
 800e0a2:	6014      	str	r4, [r2, #0]
 800e0a4:	b003      	add	sp, #12
 800e0a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0aa:	f000 be95 	b.w	800edd8 <__malloc_unlock>
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	d90b      	bls.n	800e0ca <_free_r+0x4e>
 800e0b2:	6821      	ldr	r1, [r4, #0]
 800e0b4:	1862      	adds	r2, r4, r1
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	bf04      	itt	eq
 800e0ba:	681a      	ldreq	r2, [r3, #0]
 800e0bc:	685b      	ldreq	r3, [r3, #4]
 800e0be:	6063      	str	r3, [r4, #4]
 800e0c0:	bf04      	itt	eq
 800e0c2:	1852      	addeq	r2, r2, r1
 800e0c4:	6022      	streq	r2, [r4, #0]
 800e0c6:	602c      	str	r4, [r5, #0]
 800e0c8:	e7ec      	b.n	800e0a4 <_free_r+0x28>
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	b10b      	cbz	r3, 800e0d4 <_free_r+0x58>
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	d9fa      	bls.n	800e0ca <_free_r+0x4e>
 800e0d4:	6811      	ldr	r1, [r2, #0]
 800e0d6:	1855      	adds	r5, r2, r1
 800e0d8:	42a5      	cmp	r5, r4
 800e0da:	d10b      	bne.n	800e0f4 <_free_r+0x78>
 800e0dc:	6824      	ldr	r4, [r4, #0]
 800e0de:	4421      	add	r1, r4
 800e0e0:	1854      	adds	r4, r2, r1
 800e0e2:	42a3      	cmp	r3, r4
 800e0e4:	6011      	str	r1, [r2, #0]
 800e0e6:	d1dd      	bne.n	800e0a4 <_free_r+0x28>
 800e0e8:	681c      	ldr	r4, [r3, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	6053      	str	r3, [r2, #4]
 800e0ee:	4421      	add	r1, r4
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	e7d7      	b.n	800e0a4 <_free_r+0x28>
 800e0f4:	d902      	bls.n	800e0fc <_free_r+0x80>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	6003      	str	r3, [r0, #0]
 800e0fa:	e7d3      	b.n	800e0a4 <_free_r+0x28>
 800e0fc:	6825      	ldr	r5, [r4, #0]
 800e0fe:	1961      	adds	r1, r4, r5
 800e100:	428b      	cmp	r3, r1
 800e102:	bf04      	itt	eq
 800e104:	6819      	ldreq	r1, [r3, #0]
 800e106:	685b      	ldreq	r3, [r3, #4]
 800e108:	6063      	str	r3, [r4, #4]
 800e10a:	bf04      	itt	eq
 800e10c:	1949      	addeq	r1, r1, r5
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	6054      	str	r4, [r2, #4]
 800e112:	e7c7      	b.n	800e0a4 <_free_r+0x28>
 800e114:	b003      	add	sp, #12
 800e116:	bd30      	pop	{r4, r5, pc}
 800e118:	20001cb4 	.word	0x20001cb4

0800e11c <_malloc_r>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	1ccd      	adds	r5, r1, #3
 800e120:	f025 0503 	bic.w	r5, r5, #3
 800e124:	3508      	adds	r5, #8
 800e126:	2d0c      	cmp	r5, #12
 800e128:	bf38      	it	cc
 800e12a:	250c      	movcc	r5, #12
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	4606      	mov	r6, r0
 800e130:	db01      	blt.n	800e136 <_malloc_r+0x1a>
 800e132:	42a9      	cmp	r1, r5
 800e134:	d903      	bls.n	800e13e <_malloc_r+0x22>
 800e136:	230c      	movs	r3, #12
 800e138:	6033      	str	r3, [r6, #0]
 800e13a:	2000      	movs	r0, #0
 800e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e13e:	f000 fe45 	bl	800edcc <__malloc_lock>
 800e142:	4921      	ldr	r1, [pc, #132]	; (800e1c8 <_malloc_r+0xac>)
 800e144:	680a      	ldr	r2, [r1, #0]
 800e146:	4614      	mov	r4, r2
 800e148:	b99c      	cbnz	r4, 800e172 <_malloc_r+0x56>
 800e14a:	4f20      	ldr	r7, [pc, #128]	; (800e1cc <_malloc_r+0xb0>)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	b923      	cbnz	r3, 800e15a <_malloc_r+0x3e>
 800e150:	4621      	mov	r1, r4
 800e152:	4630      	mov	r0, r6
 800e154:	f000 fafc 	bl	800e750 <_sbrk_r>
 800e158:	6038      	str	r0, [r7, #0]
 800e15a:	4629      	mov	r1, r5
 800e15c:	4630      	mov	r0, r6
 800e15e:	f000 faf7 	bl	800e750 <_sbrk_r>
 800e162:	1c43      	adds	r3, r0, #1
 800e164:	d123      	bne.n	800e1ae <_malloc_r+0x92>
 800e166:	230c      	movs	r3, #12
 800e168:	6033      	str	r3, [r6, #0]
 800e16a:	4630      	mov	r0, r6
 800e16c:	f000 fe34 	bl	800edd8 <__malloc_unlock>
 800e170:	e7e3      	b.n	800e13a <_malloc_r+0x1e>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	1b5b      	subs	r3, r3, r5
 800e176:	d417      	bmi.n	800e1a8 <_malloc_r+0x8c>
 800e178:	2b0b      	cmp	r3, #11
 800e17a:	d903      	bls.n	800e184 <_malloc_r+0x68>
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	441c      	add	r4, r3
 800e180:	6025      	str	r5, [r4, #0]
 800e182:	e004      	b.n	800e18e <_malloc_r+0x72>
 800e184:	6863      	ldr	r3, [r4, #4]
 800e186:	42a2      	cmp	r2, r4
 800e188:	bf0c      	ite	eq
 800e18a:	600b      	streq	r3, [r1, #0]
 800e18c:	6053      	strne	r3, [r2, #4]
 800e18e:	4630      	mov	r0, r6
 800e190:	f000 fe22 	bl	800edd8 <__malloc_unlock>
 800e194:	f104 000b 	add.w	r0, r4, #11
 800e198:	1d23      	adds	r3, r4, #4
 800e19a:	f020 0007 	bic.w	r0, r0, #7
 800e19e:	1ac2      	subs	r2, r0, r3
 800e1a0:	d0cc      	beq.n	800e13c <_malloc_r+0x20>
 800e1a2:	1a1b      	subs	r3, r3, r0
 800e1a4:	50a3      	str	r3, [r4, r2]
 800e1a6:	e7c9      	b.n	800e13c <_malloc_r+0x20>
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	6864      	ldr	r4, [r4, #4]
 800e1ac:	e7cc      	b.n	800e148 <_malloc_r+0x2c>
 800e1ae:	1cc4      	adds	r4, r0, #3
 800e1b0:	f024 0403 	bic.w	r4, r4, #3
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d0e3      	beq.n	800e180 <_malloc_r+0x64>
 800e1b8:	1a21      	subs	r1, r4, r0
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f000 fac8 	bl	800e750 <_sbrk_r>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d1dd      	bne.n	800e180 <_malloc_r+0x64>
 800e1c4:	e7cf      	b.n	800e166 <_malloc_r+0x4a>
 800e1c6:	bf00      	nop
 800e1c8:	20001cb4 	.word	0x20001cb4
 800e1cc:	20001cb8 	.word	0x20001cb8

0800e1d0 <__ssputs_r>:
 800e1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d4:	688e      	ldr	r6, [r1, #8]
 800e1d6:	429e      	cmp	r6, r3
 800e1d8:	4682      	mov	sl, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	4690      	mov	r8, r2
 800e1de:	461f      	mov	r7, r3
 800e1e0:	d838      	bhi.n	800e254 <__ssputs_r+0x84>
 800e1e2:	898a      	ldrh	r2, [r1, #12]
 800e1e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1e8:	d032      	beq.n	800e250 <__ssputs_r+0x80>
 800e1ea:	6825      	ldr	r5, [r4, #0]
 800e1ec:	6909      	ldr	r1, [r1, #16]
 800e1ee:	eba5 0901 	sub.w	r9, r5, r1
 800e1f2:	6965      	ldr	r5, [r4, #20]
 800e1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	444b      	add	r3, r9
 800e200:	106d      	asrs	r5, r5, #1
 800e202:	429d      	cmp	r5, r3
 800e204:	bf38      	it	cc
 800e206:	461d      	movcc	r5, r3
 800e208:	0553      	lsls	r3, r2, #21
 800e20a:	d531      	bpl.n	800e270 <__ssputs_r+0xa0>
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7ff ff85 	bl	800e11c <_malloc_r>
 800e212:	4606      	mov	r6, r0
 800e214:	b950      	cbnz	r0, 800e22c <__ssputs_r+0x5c>
 800e216:	230c      	movs	r3, #12
 800e218:	f8ca 3000 	str.w	r3, [sl]
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e222:	81a3      	strh	r3, [r4, #12]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295
 800e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22c:	6921      	ldr	r1, [r4, #16]
 800e22e:	464a      	mov	r2, r9
 800e230:	f7fc f924 	bl	800a47c <memcpy>
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	6126      	str	r6, [r4, #16]
 800e242:	6165      	str	r5, [r4, #20]
 800e244:	444e      	add	r6, r9
 800e246:	eba5 0509 	sub.w	r5, r5, r9
 800e24a:	6026      	str	r6, [r4, #0]
 800e24c:	60a5      	str	r5, [r4, #8]
 800e24e:	463e      	mov	r6, r7
 800e250:	42be      	cmp	r6, r7
 800e252:	d900      	bls.n	800e256 <__ssputs_r+0x86>
 800e254:	463e      	mov	r6, r7
 800e256:	4632      	mov	r2, r6
 800e258:	6820      	ldr	r0, [r4, #0]
 800e25a:	4641      	mov	r1, r8
 800e25c:	f000 fd9c 	bl	800ed98 <memmove>
 800e260:	68a3      	ldr	r3, [r4, #8]
 800e262:	6822      	ldr	r2, [r4, #0]
 800e264:	1b9b      	subs	r3, r3, r6
 800e266:	4432      	add	r2, r6
 800e268:	60a3      	str	r3, [r4, #8]
 800e26a:	6022      	str	r2, [r4, #0]
 800e26c:	2000      	movs	r0, #0
 800e26e:	e7db      	b.n	800e228 <__ssputs_r+0x58>
 800e270:	462a      	mov	r2, r5
 800e272:	f000 fdb7 	bl	800ede4 <_realloc_r>
 800e276:	4606      	mov	r6, r0
 800e278:	2800      	cmp	r0, #0
 800e27a:	d1e1      	bne.n	800e240 <__ssputs_r+0x70>
 800e27c:	6921      	ldr	r1, [r4, #16]
 800e27e:	4650      	mov	r0, sl
 800e280:	f7ff fefc 	bl	800e07c <_free_r>
 800e284:	e7c7      	b.n	800e216 <__ssputs_r+0x46>
	...

0800e288 <_svfiprintf_r>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	4698      	mov	r8, r3
 800e28e:	898b      	ldrh	r3, [r1, #12]
 800e290:	061b      	lsls	r3, r3, #24
 800e292:	b09d      	sub	sp, #116	; 0x74
 800e294:	4607      	mov	r7, r0
 800e296:	460d      	mov	r5, r1
 800e298:	4614      	mov	r4, r2
 800e29a:	d50e      	bpl.n	800e2ba <_svfiprintf_r+0x32>
 800e29c:	690b      	ldr	r3, [r1, #16]
 800e29e:	b963      	cbnz	r3, 800e2ba <_svfiprintf_r+0x32>
 800e2a0:	2140      	movs	r1, #64	; 0x40
 800e2a2:	f7ff ff3b 	bl	800e11c <_malloc_r>
 800e2a6:	6028      	str	r0, [r5, #0]
 800e2a8:	6128      	str	r0, [r5, #16]
 800e2aa:	b920      	cbnz	r0, 800e2b6 <_svfiprintf_r+0x2e>
 800e2ac:	230c      	movs	r3, #12
 800e2ae:	603b      	str	r3, [r7, #0]
 800e2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b4:	e0d1      	b.n	800e45a <_svfiprintf_r+0x1d2>
 800e2b6:	2340      	movs	r3, #64	; 0x40
 800e2b8:	616b      	str	r3, [r5, #20]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2be:	2320      	movs	r3, #32
 800e2c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2c8:	2330      	movs	r3, #48	; 0x30
 800e2ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e474 <_svfiprintf_r+0x1ec>
 800e2ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d2:	f04f 0901 	mov.w	r9, #1
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	469a      	mov	sl, r3
 800e2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2de:	b10a      	cbz	r2, 800e2e4 <_svfiprintf_r+0x5c>
 800e2e0:	2a25      	cmp	r2, #37	; 0x25
 800e2e2:	d1f9      	bne.n	800e2d8 <_svfiprintf_r+0x50>
 800e2e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e2e8:	d00b      	beq.n	800e302 <_svfiprintf_r+0x7a>
 800e2ea:	465b      	mov	r3, fp
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	f7ff ff6d 	bl	800e1d0 <__ssputs_r>
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	f000 80aa 	beq.w	800e450 <_svfiprintf_r+0x1c8>
 800e2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2fe:	445a      	add	r2, fp
 800e300:	9209      	str	r2, [sp, #36]	; 0x24
 800e302:	f89a 3000 	ldrb.w	r3, [sl]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 80a2 	beq.w	800e450 <_svfiprintf_r+0x1c8>
 800e30c:	2300      	movs	r3, #0
 800e30e:	f04f 32ff 	mov.w	r2, #4294967295
 800e312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e316:	f10a 0a01 	add.w	sl, sl, #1
 800e31a:	9304      	str	r3, [sp, #16]
 800e31c:	9307      	str	r3, [sp, #28]
 800e31e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e322:	931a      	str	r3, [sp, #104]	; 0x68
 800e324:	4654      	mov	r4, sl
 800e326:	2205      	movs	r2, #5
 800e328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e32c:	4851      	ldr	r0, [pc, #324]	; (800e474 <_svfiprintf_r+0x1ec>)
 800e32e:	f7f1 ff8f 	bl	8000250 <memchr>
 800e332:	9a04      	ldr	r2, [sp, #16]
 800e334:	b9d8      	cbnz	r0, 800e36e <_svfiprintf_r+0xe6>
 800e336:	06d0      	lsls	r0, r2, #27
 800e338:	bf44      	itt	mi
 800e33a:	2320      	movmi	r3, #32
 800e33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e340:	0711      	lsls	r1, r2, #28
 800e342:	bf44      	itt	mi
 800e344:	232b      	movmi	r3, #43	; 0x2b
 800e346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e34a:	f89a 3000 	ldrb.w	r3, [sl]
 800e34e:	2b2a      	cmp	r3, #42	; 0x2a
 800e350:	d015      	beq.n	800e37e <_svfiprintf_r+0xf6>
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	4654      	mov	r4, sl
 800e356:	2000      	movs	r0, #0
 800e358:	f04f 0c0a 	mov.w	ip, #10
 800e35c:	4621      	mov	r1, r4
 800e35e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e362:	3b30      	subs	r3, #48	; 0x30
 800e364:	2b09      	cmp	r3, #9
 800e366:	d94e      	bls.n	800e406 <_svfiprintf_r+0x17e>
 800e368:	b1b0      	cbz	r0, 800e398 <_svfiprintf_r+0x110>
 800e36a:	9207      	str	r2, [sp, #28]
 800e36c:	e014      	b.n	800e398 <_svfiprintf_r+0x110>
 800e36e:	eba0 0308 	sub.w	r3, r0, r8
 800e372:	fa09 f303 	lsl.w	r3, r9, r3
 800e376:	4313      	orrs	r3, r2
 800e378:	9304      	str	r3, [sp, #16]
 800e37a:	46a2      	mov	sl, r4
 800e37c:	e7d2      	b.n	800e324 <_svfiprintf_r+0x9c>
 800e37e:	9b03      	ldr	r3, [sp, #12]
 800e380:	1d19      	adds	r1, r3, #4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	9103      	str	r1, [sp, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	bfbb      	ittet	lt
 800e38a:	425b      	neglt	r3, r3
 800e38c:	f042 0202 	orrlt.w	r2, r2, #2
 800e390:	9307      	strge	r3, [sp, #28]
 800e392:	9307      	strlt	r3, [sp, #28]
 800e394:	bfb8      	it	lt
 800e396:	9204      	strlt	r2, [sp, #16]
 800e398:	7823      	ldrb	r3, [r4, #0]
 800e39a:	2b2e      	cmp	r3, #46	; 0x2e
 800e39c:	d10c      	bne.n	800e3b8 <_svfiprintf_r+0x130>
 800e39e:	7863      	ldrb	r3, [r4, #1]
 800e3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3a2:	d135      	bne.n	800e410 <_svfiprintf_r+0x188>
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	1d1a      	adds	r2, r3, #4
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	9203      	str	r2, [sp, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bfb8      	it	lt
 800e3b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3b4:	3402      	adds	r4, #2
 800e3b6:	9305      	str	r3, [sp, #20]
 800e3b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e484 <_svfiprintf_r+0x1fc>
 800e3bc:	7821      	ldrb	r1, [r4, #0]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	4650      	mov	r0, sl
 800e3c2:	f7f1 ff45 	bl	8000250 <memchr>
 800e3c6:	b140      	cbz	r0, 800e3da <_svfiprintf_r+0x152>
 800e3c8:	2340      	movs	r3, #64	; 0x40
 800e3ca:	eba0 000a 	sub.w	r0, r0, sl
 800e3ce:	fa03 f000 	lsl.w	r0, r3, r0
 800e3d2:	9b04      	ldr	r3, [sp, #16]
 800e3d4:	4303      	orrs	r3, r0
 800e3d6:	3401      	adds	r4, #1
 800e3d8:	9304      	str	r3, [sp, #16]
 800e3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3de:	4826      	ldr	r0, [pc, #152]	; (800e478 <_svfiprintf_r+0x1f0>)
 800e3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3e4:	2206      	movs	r2, #6
 800e3e6:	f7f1 ff33 	bl	8000250 <memchr>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d038      	beq.n	800e460 <_svfiprintf_r+0x1d8>
 800e3ee:	4b23      	ldr	r3, [pc, #140]	; (800e47c <_svfiprintf_r+0x1f4>)
 800e3f0:	bb1b      	cbnz	r3, 800e43a <_svfiprintf_r+0x1b2>
 800e3f2:	9b03      	ldr	r3, [sp, #12]
 800e3f4:	3307      	adds	r3, #7
 800e3f6:	f023 0307 	bic.w	r3, r3, #7
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	9303      	str	r3, [sp, #12]
 800e3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e400:	4433      	add	r3, r6
 800e402:	9309      	str	r3, [sp, #36]	; 0x24
 800e404:	e767      	b.n	800e2d6 <_svfiprintf_r+0x4e>
 800e406:	fb0c 3202 	mla	r2, ip, r2, r3
 800e40a:	460c      	mov	r4, r1
 800e40c:	2001      	movs	r0, #1
 800e40e:	e7a5      	b.n	800e35c <_svfiprintf_r+0xd4>
 800e410:	2300      	movs	r3, #0
 800e412:	3401      	adds	r4, #1
 800e414:	9305      	str	r3, [sp, #20]
 800e416:	4619      	mov	r1, r3
 800e418:	f04f 0c0a 	mov.w	ip, #10
 800e41c:	4620      	mov	r0, r4
 800e41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e422:	3a30      	subs	r2, #48	; 0x30
 800e424:	2a09      	cmp	r2, #9
 800e426:	d903      	bls.n	800e430 <_svfiprintf_r+0x1a8>
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0c5      	beq.n	800e3b8 <_svfiprintf_r+0x130>
 800e42c:	9105      	str	r1, [sp, #20]
 800e42e:	e7c3      	b.n	800e3b8 <_svfiprintf_r+0x130>
 800e430:	fb0c 2101 	mla	r1, ip, r1, r2
 800e434:	4604      	mov	r4, r0
 800e436:	2301      	movs	r3, #1
 800e438:	e7f0      	b.n	800e41c <_svfiprintf_r+0x194>
 800e43a:	ab03      	add	r3, sp, #12
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	462a      	mov	r2, r5
 800e440:	4b0f      	ldr	r3, [pc, #60]	; (800e480 <_svfiprintf_r+0x1f8>)
 800e442:	a904      	add	r1, sp, #16
 800e444:	4638      	mov	r0, r7
 800e446:	f7fc f8cf 	bl	800a5e8 <_printf_float>
 800e44a:	1c42      	adds	r2, r0, #1
 800e44c:	4606      	mov	r6, r0
 800e44e:	d1d6      	bne.n	800e3fe <_svfiprintf_r+0x176>
 800e450:	89ab      	ldrh	r3, [r5, #12]
 800e452:	065b      	lsls	r3, r3, #25
 800e454:	f53f af2c 	bmi.w	800e2b0 <_svfiprintf_r+0x28>
 800e458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e45a:	b01d      	add	sp, #116	; 0x74
 800e45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e460:	ab03      	add	r3, sp, #12
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	462a      	mov	r2, r5
 800e466:	4b06      	ldr	r3, [pc, #24]	; (800e480 <_svfiprintf_r+0x1f8>)
 800e468:	a904      	add	r1, sp, #16
 800e46a:	4638      	mov	r0, r7
 800e46c:	f7fc fb60 	bl	800ab30 <_printf_i>
 800e470:	e7eb      	b.n	800e44a <_svfiprintf_r+0x1c2>
 800e472:	bf00      	nop
 800e474:	080108c4 	.word	0x080108c4
 800e478:	080108ce 	.word	0x080108ce
 800e47c:	0800a5e9 	.word	0x0800a5e9
 800e480:	0800e1d1 	.word	0x0800e1d1
 800e484:	080108ca 	.word	0x080108ca

0800e488 <__sfputc_r>:
 800e488:	6893      	ldr	r3, [r2, #8]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	b410      	push	{r4}
 800e490:	6093      	str	r3, [r2, #8]
 800e492:	da08      	bge.n	800e4a6 <__sfputc_r+0x1e>
 800e494:	6994      	ldr	r4, [r2, #24]
 800e496:	42a3      	cmp	r3, r4
 800e498:	db01      	blt.n	800e49e <__sfputc_r+0x16>
 800e49a:	290a      	cmp	r1, #10
 800e49c:	d103      	bne.n	800e4a6 <__sfputc_r+0x1e>
 800e49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4a2:	f000 b985 	b.w	800e7b0 <__swbuf_r>
 800e4a6:	6813      	ldr	r3, [r2, #0]
 800e4a8:	1c58      	adds	r0, r3, #1
 800e4aa:	6010      	str	r0, [r2, #0]
 800e4ac:	7019      	strb	r1, [r3, #0]
 800e4ae:	4608      	mov	r0, r1
 800e4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <__sfputs_r>:
 800e4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	460f      	mov	r7, r1
 800e4bc:	4614      	mov	r4, r2
 800e4be:	18d5      	adds	r5, r2, r3
 800e4c0:	42ac      	cmp	r4, r5
 800e4c2:	d101      	bne.n	800e4c8 <__sfputs_r+0x12>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	e007      	b.n	800e4d8 <__sfputs_r+0x22>
 800e4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4cc:	463a      	mov	r2, r7
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f7ff ffda 	bl	800e488 <__sfputc_r>
 800e4d4:	1c43      	adds	r3, r0, #1
 800e4d6:	d1f3      	bne.n	800e4c0 <__sfputs_r+0xa>
 800e4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4dc <_vfiprintf_r>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	b09d      	sub	sp, #116	; 0x74
 800e4e4:	4614      	mov	r4, r2
 800e4e6:	4698      	mov	r8, r3
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	b118      	cbz	r0, 800e4f4 <_vfiprintf_r+0x18>
 800e4ec:	6983      	ldr	r3, [r0, #24]
 800e4ee:	b90b      	cbnz	r3, 800e4f4 <_vfiprintf_r+0x18>
 800e4f0:	f000 fb4e 	bl	800eb90 <__sinit>
 800e4f4:	4b89      	ldr	r3, [pc, #548]	; (800e71c <_vfiprintf_r+0x240>)
 800e4f6:	429d      	cmp	r5, r3
 800e4f8:	d11b      	bne.n	800e532 <_vfiprintf_r+0x56>
 800e4fa:	6875      	ldr	r5, [r6, #4]
 800e4fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4fe:	07d9      	lsls	r1, r3, #31
 800e500:	d405      	bmi.n	800e50e <_vfiprintf_r+0x32>
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	059a      	lsls	r2, r3, #22
 800e506:	d402      	bmi.n	800e50e <_vfiprintf_r+0x32>
 800e508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e50a:	f000 fbdf 	bl	800eccc <__retarget_lock_acquire_recursive>
 800e50e:	89ab      	ldrh	r3, [r5, #12]
 800e510:	071b      	lsls	r3, r3, #28
 800e512:	d501      	bpl.n	800e518 <_vfiprintf_r+0x3c>
 800e514:	692b      	ldr	r3, [r5, #16]
 800e516:	b9eb      	cbnz	r3, 800e554 <_vfiprintf_r+0x78>
 800e518:	4629      	mov	r1, r5
 800e51a:	4630      	mov	r0, r6
 800e51c:	f000 f9a8 	bl	800e870 <__swsetup_r>
 800e520:	b1c0      	cbz	r0, 800e554 <_vfiprintf_r+0x78>
 800e522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e524:	07dc      	lsls	r4, r3, #31
 800e526:	d50e      	bpl.n	800e546 <_vfiprintf_r+0x6a>
 800e528:	f04f 30ff 	mov.w	r0, #4294967295
 800e52c:	b01d      	add	sp, #116	; 0x74
 800e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e532:	4b7b      	ldr	r3, [pc, #492]	; (800e720 <_vfiprintf_r+0x244>)
 800e534:	429d      	cmp	r5, r3
 800e536:	d101      	bne.n	800e53c <_vfiprintf_r+0x60>
 800e538:	68b5      	ldr	r5, [r6, #8]
 800e53a:	e7df      	b.n	800e4fc <_vfiprintf_r+0x20>
 800e53c:	4b79      	ldr	r3, [pc, #484]	; (800e724 <_vfiprintf_r+0x248>)
 800e53e:	429d      	cmp	r5, r3
 800e540:	bf08      	it	eq
 800e542:	68f5      	ldreq	r5, [r6, #12]
 800e544:	e7da      	b.n	800e4fc <_vfiprintf_r+0x20>
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	0598      	lsls	r0, r3, #22
 800e54a:	d4ed      	bmi.n	800e528 <_vfiprintf_r+0x4c>
 800e54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e54e:	f000 fbbe 	bl	800ecce <__retarget_lock_release_recursive>
 800e552:	e7e9      	b.n	800e528 <_vfiprintf_r+0x4c>
 800e554:	2300      	movs	r3, #0
 800e556:	9309      	str	r3, [sp, #36]	; 0x24
 800e558:	2320      	movs	r3, #32
 800e55a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e55e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e562:	2330      	movs	r3, #48	; 0x30
 800e564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e728 <_vfiprintf_r+0x24c>
 800e568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e56c:	f04f 0901 	mov.w	r9, #1
 800e570:	4623      	mov	r3, r4
 800e572:	469a      	mov	sl, r3
 800e574:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e578:	b10a      	cbz	r2, 800e57e <_vfiprintf_r+0xa2>
 800e57a:	2a25      	cmp	r2, #37	; 0x25
 800e57c:	d1f9      	bne.n	800e572 <_vfiprintf_r+0x96>
 800e57e:	ebba 0b04 	subs.w	fp, sl, r4
 800e582:	d00b      	beq.n	800e59c <_vfiprintf_r+0xc0>
 800e584:	465b      	mov	r3, fp
 800e586:	4622      	mov	r2, r4
 800e588:	4629      	mov	r1, r5
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7ff ff93 	bl	800e4b6 <__sfputs_r>
 800e590:	3001      	adds	r0, #1
 800e592:	f000 80aa 	beq.w	800e6ea <_vfiprintf_r+0x20e>
 800e596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e598:	445a      	add	r2, fp
 800e59a:	9209      	str	r2, [sp, #36]	; 0x24
 800e59c:	f89a 3000 	ldrb.w	r3, [sl]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f000 80a2 	beq.w	800e6ea <_vfiprintf_r+0x20e>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5b0:	f10a 0a01 	add.w	sl, sl, #1
 800e5b4:	9304      	str	r3, [sp, #16]
 800e5b6:	9307      	str	r3, [sp, #28]
 800e5b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5bc:	931a      	str	r3, [sp, #104]	; 0x68
 800e5be:	4654      	mov	r4, sl
 800e5c0:	2205      	movs	r2, #5
 800e5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c6:	4858      	ldr	r0, [pc, #352]	; (800e728 <_vfiprintf_r+0x24c>)
 800e5c8:	f7f1 fe42 	bl	8000250 <memchr>
 800e5cc:	9a04      	ldr	r2, [sp, #16]
 800e5ce:	b9d8      	cbnz	r0, 800e608 <_vfiprintf_r+0x12c>
 800e5d0:	06d1      	lsls	r1, r2, #27
 800e5d2:	bf44      	itt	mi
 800e5d4:	2320      	movmi	r3, #32
 800e5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5da:	0713      	lsls	r3, r2, #28
 800e5dc:	bf44      	itt	mi
 800e5de:	232b      	movmi	r3, #43	; 0x2b
 800e5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ea:	d015      	beq.n	800e618 <_vfiprintf_r+0x13c>
 800e5ec:	9a07      	ldr	r2, [sp, #28]
 800e5ee:	4654      	mov	r4, sl
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	f04f 0c0a 	mov.w	ip, #10
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5fc:	3b30      	subs	r3, #48	; 0x30
 800e5fe:	2b09      	cmp	r3, #9
 800e600:	d94e      	bls.n	800e6a0 <_vfiprintf_r+0x1c4>
 800e602:	b1b0      	cbz	r0, 800e632 <_vfiprintf_r+0x156>
 800e604:	9207      	str	r2, [sp, #28]
 800e606:	e014      	b.n	800e632 <_vfiprintf_r+0x156>
 800e608:	eba0 0308 	sub.w	r3, r0, r8
 800e60c:	fa09 f303 	lsl.w	r3, r9, r3
 800e610:	4313      	orrs	r3, r2
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	46a2      	mov	sl, r4
 800e616:	e7d2      	b.n	800e5be <_vfiprintf_r+0xe2>
 800e618:	9b03      	ldr	r3, [sp, #12]
 800e61a:	1d19      	adds	r1, r3, #4
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	9103      	str	r1, [sp, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	bfbb      	ittet	lt
 800e624:	425b      	neglt	r3, r3
 800e626:	f042 0202 	orrlt.w	r2, r2, #2
 800e62a:	9307      	strge	r3, [sp, #28]
 800e62c:	9307      	strlt	r3, [sp, #28]
 800e62e:	bfb8      	it	lt
 800e630:	9204      	strlt	r2, [sp, #16]
 800e632:	7823      	ldrb	r3, [r4, #0]
 800e634:	2b2e      	cmp	r3, #46	; 0x2e
 800e636:	d10c      	bne.n	800e652 <_vfiprintf_r+0x176>
 800e638:	7863      	ldrb	r3, [r4, #1]
 800e63a:	2b2a      	cmp	r3, #42	; 0x2a
 800e63c:	d135      	bne.n	800e6aa <_vfiprintf_r+0x1ce>
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	1d1a      	adds	r2, r3, #4
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	9203      	str	r2, [sp, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfb8      	it	lt
 800e64a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e64e:	3402      	adds	r4, #2
 800e650:	9305      	str	r3, [sp, #20]
 800e652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e738 <_vfiprintf_r+0x25c>
 800e656:	7821      	ldrb	r1, [r4, #0]
 800e658:	2203      	movs	r2, #3
 800e65a:	4650      	mov	r0, sl
 800e65c:	f7f1 fdf8 	bl	8000250 <memchr>
 800e660:	b140      	cbz	r0, 800e674 <_vfiprintf_r+0x198>
 800e662:	2340      	movs	r3, #64	; 0x40
 800e664:	eba0 000a 	sub.w	r0, r0, sl
 800e668:	fa03 f000 	lsl.w	r0, r3, r0
 800e66c:	9b04      	ldr	r3, [sp, #16]
 800e66e:	4303      	orrs	r3, r0
 800e670:	3401      	adds	r4, #1
 800e672:	9304      	str	r3, [sp, #16]
 800e674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e678:	482c      	ldr	r0, [pc, #176]	; (800e72c <_vfiprintf_r+0x250>)
 800e67a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e67e:	2206      	movs	r2, #6
 800e680:	f7f1 fde6 	bl	8000250 <memchr>
 800e684:	2800      	cmp	r0, #0
 800e686:	d03f      	beq.n	800e708 <_vfiprintf_r+0x22c>
 800e688:	4b29      	ldr	r3, [pc, #164]	; (800e730 <_vfiprintf_r+0x254>)
 800e68a:	bb1b      	cbnz	r3, 800e6d4 <_vfiprintf_r+0x1f8>
 800e68c:	9b03      	ldr	r3, [sp, #12]
 800e68e:	3307      	adds	r3, #7
 800e690:	f023 0307 	bic.w	r3, r3, #7
 800e694:	3308      	adds	r3, #8
 800e696:	9303      	str	r3, [sp, #12]
 800e698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e69a:	443b      	add	r3, r7
 800e69c:	9309      	str	r3, [sp, #36]	; 0x24
 800e69e:	e767      	b.n	800e570 <_vfiprintf_r+0x94>
 800e6a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6a4:	460c      	mov	r4, r1
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	e7a5      	b.n	800e5f6 <_vfiprintf_r+0x11a>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	3401      	adds	r4, #1
 800e6ae:	9305      	str	r3, [sp, #20]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	f04f 0c0a 	mov.w	ip, #10
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6bc:	3a30      	subs	r2, #48	; 0x30
 800e6be:	2a09      	cmp	r2, #9
 800e6c0:	d903      	bls.n	800e6ca <_vfiprintf_r+0x1ee>
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0c5      	beq.n	800e652 <_vfiprintf_r+0x176>
 800e6c6:	9105      	str	r1, [sp, #20]
 800e6c8:	e7c3      	b.n	800e652 <_vfiprintf_r+0x176>
 800e6ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e7f0      	b.n	800e6b6 <_vfiprintf_r+0x1da>
 800e6d4:	ab03      	add	r3, sp, #12
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	462a      	mov	r2, r5
 800e6da:	4b16      	ldr	r3, [pc, #88]	; (800e734 <_vfiprintf_r+0x258>)
 800e6dc:	a904      	add	r1, sp, #16
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f7fb ff82 	bl	800a5e8 <_printf_float>
 800e6e4:	4607      	mov	r7, r0
 800e6e6:	1c78      	adds	r0, r7, #1
 800e6e8:	d1d6      	bne.n	800e698 <_vfiprintf_r+0x1bc>
 800e6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6ec:	07d9      	lsls	r1, r3, #31
 800e6ee:	d405      	bmi.n	800e6fc <_vfiprintf_r+0x220>
 800e6f0:	89ab      	ldrh	r3, [r5, #12]
 800e6f2:	059a      	lsls	r2, r3, #22
 800e6f4:	d402      	bmi.n	800e6fc <_vfiprintf_r+0x220>
 800e6f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6f8:	f000 fae9 	bl	800ecce <__retarget_lock_release_recursive>
 800e6fc:	89ab      	ldrh	r3, [r5, #12]
 800e6fe:	065b      	lsls	r3, r3, #25
 800e700:	f53f af12 	bmi.w	800e528 <_vfiprintf_r+0x4c>
 800e704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e706:	e711      	b.n	800e52c <_vfiprintf_r+0x50>
 800e708:	ab03      	add	r3, sp, #12
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	462a      	mov	r2, r5
 800e70e:	4b09      	ldr	r3, [pc, #36]	; (800e734 <_vfiprintf_r+0x258>)
 800e710:	a904      	add	r1, sp, #16
 800e712:	4630      	mov	r0, r6
 800e714:	f7fc fa0c 	bl	800ab30 <_printf_i>
 800e718:	e7e4      	b.n	800e6e4 <_vfiprintf_r+0x208>
 800e71a:	bf00      	nop
 800e71c:	080108f8 	.word	0x080108f8
 800e720:	08010918 	.word	0x08010918
 800e724:	080108d8 	.word	0x080108d8
 800e728:	080108c4 	.word	0x080108c4
 800e72c:	080108ce 	.word	0x080108ce
 800e730:	0800a5e9 	.word	0x0800a5e9
 800e734:	0800e4b7 	.word	0x0800e4b7
 800e738:	080108ca 	.word	0x080108ca
 800e73c:	00000000 	.word	0x00000000

0800e740 <nan>:
 800e740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e748 <nan+0x8>
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	00000000 	.word	0x00000000
 800e74c:	7ff80000 	.word	0x7ff80000

0800e750 <_sbrk_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4d06      	ldr	r5, [pc, #24]	; (800e76c <_sbrk_r+0x1c>)
 800e754:	2300      	movs	r3, #0
 800e756:	4604      	mov	r4, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	602b      	str	r3, [r5, #0]
 800e75c:	f7fb f8aa 	bl	80098b4 <_sbrk>
 800e760:	1c43      	adds	r3, r0, #1
 800e762:	d102      	bne.n	800e76a <_sbrk_r+0x1a>
 800e764:	682b      	ldr	r3, [r5, #0]
 800e766:	b103      	cbz	r3, 800e76a <_sbrk_r+0x1a>
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	bd38      	pop	{r3, r4, r5, pc}
 800e76c:	20003860 	.word	0x20003860

0800e770 <finitef>:
 800e770:	b082      	sub	sp, #8
 800e772:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e776:	9801      	ldr	r0, [sp, #4]
 800e778:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e77c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e780:	bfac      	ite	ge
 800e782:	2000      	movge	r0, #0
 800e784:	2001      	movlt	r0, #1
 800e786:	b002      	add	sp, #8
 800e788:	4770      	bx	lr

0800e78a <strncmp>:
 800e78a:	b510      	push	{r4, lr}
 800e78c:	b16a      	cbz	r2, 800e7aa <strncmp+0x20>
 800e78e:	3901      	subs	r1, #1
 800e790:	1884      	adds	r4, r0, r2
 800e792:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e796:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d103      	bne.n	800e7a6 <strncmp+0x1c>
 800e79e:	42a0      	cmp	r0, r4
 800e7a0:	d001      	beq.n	800e7a6 <strncmp+0x1c>
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1f5      	bne.n	800e792 <strncmp+0x8>
 800e7a6:	1a98      	subs	r0, r3, r2
 800e7a8:	bd10      	pop	{r4, pc}
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	e7fc      	b.n	800e7a8 <strncmp+0x1e>
	...

0800e7b0 <__swbuf_r>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	4614      	mov	r4, r2
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	b118      	cbz	r0, 800e7c2 <__swbuf_r+0x12>
 800e7ba:	6983      	ldr	r3, [r0, #24]
 800e7bc:	b90b      	cbnz	r3, 800e7c2 <__swbuf_r+0x12>
 800e7be:	f000 f9e7 	bl	800eb90 <__sinit>
 800e7c2:	4b21      	ldr	r3, [pc, #132]	; (800e848 <__swbuf_r+0x98>)
 800e7c4:	429c      	cmp	r4, r3
 800e7c6:	d12b      	bne.n	800e820 <__swbuf_r+0x70>
 800e7c8:	686c      	ldr	r4, [r5, #4]
 800e7ca:	69a3      	ldr	r3, [r4, #24]
 800e7cc:	60a3      	str	r3, [r4, #8]
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	071a      	lsls	r2, r3, #28
 800e7d2:	d52f      	bpl.n	800e834 <__swbuf_r+0x84>
 800e7d4:	6923      	ldr	r3, [r4, #16]
 800e7d6:	b36b      	cbz	r3, 800e834 <__swbuf_r+0x84>
 800e7d8:	6923      	ldr	r3, [r4, #16]
 800e7da:	6820      	ldr	r0, [r4, #0]
 800e7dc:	1ac0      	subs	r0, r0, r3
 800e7de:	6963      	ldr	r3, [r4, #20]
 800e7e0:	b2f6      	uxtb	r6, r6
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	4637      	mov	r7, r6
 800e7e6:	dc04      	bgt.n	800e7f2 <__swbuf_r+0x42>
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	f000 f93c 	bl	800ea68 <_fflush_r>
 800e7f0:	bb30      	cbnz	r0, 800e840 <__swbuf_r+0x90>
 800e7f2:	68a3      	ldr	r3, [r4, #8]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	60a3      	str	r3, [r4, #8]
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	6022      	str	r2, [r4, #0]
 800e7fe:	701e      	strb	r6, [r3, #0]
 800e800:	6963      	ldr	r3, [r4, #20]
 800e802:	3001      	adds	r0, #1
 800e804:	4283      	cmp	r3, r0
 800e806:	d004      	beq.n	800e812 <__swbuf_r+0x62>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	07db      	lsls	r3, r3, #31
 800e80c:	d506      	bpl.n	800e81c <__swbuf_r+0x6c>
 800e80e:	2e0a      	cmp	r6, #10
 800e810:	d104      	bne.n	800e81c <__swbuf_r+0x6c>
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f000 f927 	bl	800ea68 <_fflush_r>
 800e81a:	b988      	cbnz	r0, 800e840 <__swbuf_r+0x90>
 800e81c:	4638      	mov	r0, r7
 800e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e820:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <__swbuf_r+0x9c>)
 800e822:	429c      	cmp	r4, r3
 800e824:	d101      	bne.n	800e82a <__swbuf_r+0x7a>
 800e826:	68ac      	ldr	r4, [r5, #8]
 800e828:	e7cf      	b.n	800e7ca <__swbuf_r+0x1a>
 800e82a:	4b09      	ldr	r3, [pc, #36]	; (800e850 <__swbuf_r+0xa0>)
 800e82c:	429c      	cmp	r4, r3
 800e82e:	bf08      	it	eq
 800e830:	68ec      	ldreq	r4, [r5, #12]
 800e832:	e7ca      	b.n	800e7ca <__swbuf_r+0x1a>
 800e834:	4621      	mov	r1, r4
 800e836:	4628      	mov	r0, r5
 800e838:	f000 f81a 	bl	800e870 <__swsetup_r>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d0cb      	beq.n	800e7d8 <__swbuf_r+0x28>
 800e840:	f04f 37ff 	mov.w	r7, #4294967295
 800e844:	e7ea      	b.n	800e81c <__swbuf_r+0x6c>
 800e846:	bf00      	nop
 800e848:	080108f8 	.word	0x080108f8
 800e84c:	08010918 	.word	0x08010918
 800e850:	080108d8 	.word	0x080108d8

0800e854 <__ascii_wctomb>:
 800e854:	b149      	cbz	r1, 800e86a <__ascii_wctomb+0x16>
 800e856:	2aff      	cmp	r2, #255	; 0xff
 800e858:	bf85      	ittet	hi
 800e85a:	238a      	movhi	r3, #138	; 0x8a
 800e85c:	6003      	strhi	r3, [r0, #0]
 800e85e:	700a      	strbls	r2, [r1, #0]
 800e860:	f04f 30ff 	movhi.w	r0, #4294967295
 800e864:	bf98      	it	ls
 800e866:	2001      	movls	r0, #1
 800e868:	4770      	bx	lr
 800e86a:	4608      	mov	r0, r1
 800e86c:	4770      	bx	lr
	...

0800e870 <__swsetup_r>:
 800e870:	4b32      	ldr	r3, [pc, #200]	; (800e93c <__swsetup_r+0xcc>)
 800e872:	b570      	push	{r4, r5, r6, lr}
 800e874:	681d      	ldr	r5, [r3, #0]
 800e876:	4606      	mov	r6, r0
 800e878:	460c      	mov	r4, r1
 800e87a:	b125      	cbz	r5, 800e886 <__swsetup_r+0x16>
 800e87c:	69ab      	ldr	r3, [r5, #24]
 800e87e:	b913      	cbnz	r3, 800e886 <__swsetup_r+0x16>
 800e880:	4628      	mov	r0, r5
 800e882:	f000 f985 	bl	800eb90 <__sinit>
 800e886:	4b2e      	ldr	r3, [pc, #184]	; (800e940 <__swsetup_r+0xd0>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d10f      	bne.n	800e8ac <__swsetup_r+0x3c>
 800e88c:	686c      	ldr	r4, [r5, #4]
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e894:	0719      	lsls	r1, r3, #28
 800e896:	d42c      	bmi.n	800e8f2 <__swsetup_r+0x82>
 800e898:	06dd      	lsls	r5, r3, #27
 800e89a:	d411      	bmi.n	800e8c0 <__swsetup_r+0x50>
 800e89c:	2309      	movs	r3, #9
 800e89e:	6033      	str	r3, [r6, #0]
 800e8a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8aa:	e03e      	b.n	800e92a <__swsetup_r+0xba>
 800e8ac:	4b25      	ldr	r3, [pc, #148]	; (800e944 <__swsetup_r+0xd4>)
 800e8ae:	429c      	cmp	r4, r3
 800e8b0:	d101      	bne.n	800e8b6 <__swsetup_r+0x46>
 800e8b2:	68ac      	ldr	r4, [r5, #8]
 800e8b4:	e7eb      	b.n	800e88e <__swsetup_r+0x1e>
 800e8b6:	4b24      	ldr	r3, [pc, #144]	; (800e948 <__swsetup_r+0xd8>)
 800e8b8:	429c      	cmp	r4, r3
 800e8ba:	bf08      	it	eq
 800e8bc:	68ec      	ldreq	r4, [r5, #12]
 800e8be:	e7e6      	b.n	800e88e <__swsetup_r+0x1e>
 800e8c0:	0758      	lsls	r0, r3, #29
 800e8c2:	d512      	bpl.n	800e8ea <__swsetup_r+0x7a>
 800e8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8c6:	b141      	cbz	r1, 800e8da <__swsetup_r+0x6a>
 800e8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8cc:	4299      	cmp	r1, r3
 800e8ce:	d002      	beq.n	800e8d6 <__swsetup_r+0x66>
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f7ff fbd3 	bl	800e07c <_free_r>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	6363      	str	r3, [r4, #52]	; 0x34
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8e0:	81a3      	strh	r3, [r4, #12]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	6063      	str	r3, [r4, #4]
 800e8e6:	6923      	ldr	r3, [r4, #16]
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f043 0308 	orr.w	r3, r3, #8
 800e8f0:	81a3      	strh	r3, [r4, #12]
 800e8f2:	6923      	ldr	r3, [r4, #16]
 800e8f4:	b94b      	cbnz	r3, 800e90a <__swsetup_r+0x9a>
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e900:	d003      	beq.n	800e90a <__swsetup_r+0x9a>
 800e902:	4621      	mov	r1, r4
 800e904:	4630      	mov	r0, r6
 800e906:	f000 fa07 	bl	800ed18 <__smakebuf_r>
 800e90a:	89a0      	ldrh	r0, [r4, #12]
 800e90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e910:	f010 0301 	ands.w	r3, r0, #1
 800e914:	d00a      	beq.n	800e92c <__swsetup_r+0xbc>
 800e916:	2300      	movs	r3, #0
 800e918:	60a3      	str	r3, [r4, #8]
 800e91a:	6963      	ldr	r3, [r4, #20]
 800e91c:	425b      	negs	r3, r3
 800e91e:	61a3      	str	r3, [r4, #24]
 800e920:	6923      	ldr	r3, [r4, #16]
 800e922:	b943      	cbnz	r3, 800e936 <__swsetup_r+0xc6>
 800e924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e928:	d1ba      	bne.n	800e8a0 <__swsetup_r+0x30>
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	0781      	lsls	r1, r0, #30
 800e92e:	bf58      	it	pl
 800e930:	6963      	ldrpl	r3, [r4, #20]
 800e932:	60a3      	str	r3, [r4, #8]
 800e934:	e7f4      	b.n	800e920 <__swsetup_r+0xb0>
 800e936:	2000      	movs	r0, #0
 800e938:	e7f7      	b.n	800e92a <__swsetup_r+0xba>
 800e93a:	bf00      	nop
 800e93c:	2000038c 	.word	0x2000038c
 800e940:	080108f8 	.word	0x080108f8
 800e944:	08010918 	.word	0x08010918
 800e948:	080108d8 	.word	0x080108d8

0800e94c <abort>:
 800e94c:	b508      	push	{r3, lr}
 800e94e:	2006      	movs	r0, #6
 800e950:	f000 fa96 	bl	800ee80 <raise>
 800e954:	2001      	movs	r0, #1
 800e956:	f7fa ff7c 	bl	8009852 <_exit>
	...

0800e95c <__sflush_r>:
 800e95c:	898a      	ldrh	r2, [r1, #12]
 800e95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e962:	4605      	mov	r5, r0
 800e964:	0710      	lsls	r0, r2, #28
 800e966:	460c      	mov	r4, r1
 800e968:	d458      	bmi.n	800ea1c <__sflush_r+0xc0>
 800e96a:	684b      	ldr	r3, [r1, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	dc05      	bgt.n	800e97c <__sflush_r+0x20>
 800e970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e972:	2b00      	cmp	r3, #0
 800e974:	dc02      	bgt.n	800e97c <__sflush_r+0x20>
 800e976:	2000      	movs	r0, #0
 800e978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e97e:	2e00      	cmp	r6, #0
 800e980:	d0f9      	beq.n	800e976 <__sflush_r+0x1a>
 800e982:	2300      	movs	r3, #0
 800e984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e988:	682f      	ldr	r7, [r5, #0]
 800e98a:	602b      	str	r3, [r5, #0]
 800e98c:	d032      	beq.n	800e9f4 <__sflush_r+0x98>
 800e98e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	075a      	lsls	r2, r3, #29
 800e994:	d505      	bpl.n	800e9a2 <__sflush_r+0x46>
 800e996:	6863      	ldr	r3, [r4, #4]
 800e998:	1ac0      	subs	r0, r0, r3
 800e99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e99c:	b10b      	cbz	r3, 800e9a2 <__sflush_r+0x46>
 800e99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9a0:	1ac0      	subs	r0, r0, r3
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9a8:	6a21      	ldr	r1, [r4, #32]
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	47b0      	blx	r6
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	d106      	bne.n	800e9c2 <__sflush_r+0x66>
 800e9b4:	6829      	ldr	r1, [r5, #0]
 800e9b6:	291d      	cmp	r1, #29
 800e9b8:	d82c      	bhi.n	800ea14 <__sflush_r+0xb8>
 800e9ba:	4a2a      	ldr	r2, [pc, #168]	; (800ea64 <__sflush_r+0x108>)
 800e9bc:	40ca      	lsrs	r2, r1
 800e9be:	07d6      	lsls	r6, r2, #31
 800e9c0:	d528      	bpl.n	800ea14 <__sflush_r+0xb8>
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	6062      	str	r2, [r4, #4]
 800e9c6:	04d9      	lsls	r1, r3, #19
 800e9c8:	6922      	ldr	r2, [r4, #16]
 800e9ca:	6022      	str	r2, [r4, #0]
 800e9cc:	d504      	bpl.n	800e9d8 <__sflush_r+0x7c>
 800e9ce:	1c42      	adds	r2, r0, #1
 800e9d0:	d101      	bne.n	800e9d6 <__sflush_r+0x7a>
 800e9d2:	682b      	ldr	r3, [r5, #0]
 800e9d4:	b903      	cbnz	r3, 800e9d8 <__sflush_r+0x7c>
 800e9d6:	6560      	str	r0, [r4, #84]	; 0x54
 800e9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9da:	602f      	str	r7, [r5, #0]
 800e9dc:	2900      	cmp	r1, #0
 800e9de:	d0ca      	beq.n	800e976 <__sflush_r+0x1a>
 800e9e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9e4:	4299      	cmp	r1, r3
 800e9e6:	d002      	beq.n	800e9ee <__sflush_r+0x92>
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f7ff fb47 	bl	800e07c <_free_r>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800e9f2:	e7c1      	b.n	800e978 <__sflush_r+0x1c>
 800e9f4:	6a21      	ldr	r1, [r4, #32]
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b0      	blx	r6
 800e9fc:	1c41      	adds	r1, r0, #1
 800e9fe:	d1c7      	bne.n	800e990 <__sflush_r+0x34>
 800ea00:	682b      	ldr	r3, [r5, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0c4      	beq.n	800e990 <__sflush_r+0x34>
 800ea06:	2b1d      	cmp	r3, #29
 800ea08:	d001      	beq.n	800ea0e <__sflush_r+0xb2>
 800ea0a:	2b16      	cmp	r3, #22
 800ea0c:	d101      	bne.n	800ea12 <__sflush_r+0xb6>
 800ea0e:	602f      	str	r7, [r5, #0]
 800ea10:	e7b1      	b.n	800e976 <__sflush_r+0x1a>
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	e7ad      	b.n	800e978 <__sflush_r+0x1c>
 800ea1c:	690f      	ldr	r7, [r1, #16]
 800ea1e:	2f00      	cmp	r7, #0
 800ea20:	d0a9      	beq.n	800e976 <__sflush_r+0x1a>
 800ea22:	0793      	lsls	r3, r2, #30
 800ea24:	680e      	ldr	r6, [r1, #0]
 800ea26:	bf08      	it	eq
 800ea28:	694b      	ldreq	r3, [r1, #20]
 800ea2a:	600f      	str	r7, [r1, #0]
 800ea2c:	bf18      	it	ne
 800ea2e:	2300      	movne	r3, #0
 800ea30:	eba6 0807 	sub.w	r8, r6, r7
 800ea34:	608b      	str	r3, [r1, #8]
 800ea36:	f1b8 0f00 	cmp.w	r8, #0
 800ea3a:	dd9c      	ble.n	800e976 <__sflush_r+0x1a>
 800ea3c:	6a21      	ldr	r1, [r4, #32]
 800ea3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea40:	4643      	mov	r3, r8
 800ea42:	463a      	mov	r2, r7
 800ea44:	4628      	mov	r0, r5
 800ea46:	47b0      	blx	r6
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	dc06      	bgt.n	800ea5a <__sflush_r+0xfe>
 800ea4c:	89a3      	ldrh	r3, [r4, #12]
 800ea4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	f04f 30ff 	mov.w	r0, #4294967295
 800ea58:	e78e      	b.n	800e978 <__sflush_r+0x1c>
 800ea5a:	4407      	add	r7, r0
 800ea5c:	eba8 0800 	sub.w	r8, r8, r0
 800ea60:	e7e9      	b.n	800ea36 <__sflush_r+0xda>
 800ea62:	bf00      	nop
 800ea64:	20400001 	.word	0x20400001

0800ea68 <_fflush_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	690b      	ldr	r3, [r1, #16]
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	460c      	mov	r4, r1
 800ea70:	b913      	cbnz	r3, 800ea78 <_fflush_r+0x10>
 800ea72:	2500      	movs	r5, #0
 800ea74:	4628      	mov	r0, r5
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	b118      	cbz	r0, 800ea82 <_fflush_r+0x1a>
 800ea7a:	6983      	ldr	r3, [r0, #24]
 800ea7c:	b90b      	cbnz	r3, 800ea82 <_fflush_r+0x1a>
 800ea7e:	f000 f887 	bl	800eb90 <__sinit>
 800ea82:	4b14      	ldr	r3, [pc, #80]	; (800ead4 <_fflush_r+0x6c>)
 800ea84:	429c      	cmp	r4, r3
 800ea86:	d11b      	bne.n	800eac0 <_fflush_r+0x58>
 800ea88:	686c      	ldr	r4, [r5, #4]
 800ea8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d0ef      	beq.n	800ea72 <_fflush_r+0xa>
 800ea92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea94:	07d0      	lsls	r0, r2, #31
 800ea96:	d404      	bmi.n	800eaa2 <_fflush_r+0x3a>
 800ea98:	0599      	lsls	r1, r3, #22
 800ea9a:	d402      	bmi.n	800eaa2 <_fflush_r+0x3a>
 800ea9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea9e:	f000 f915 	bl	800eccc <__retarget_lock_acquire_recursive>
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	f7ff ff59 	bl	800e95c <__sflush_r>
 800eaaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaac:	07da      	lsls	r2, r3, #31
 800eaae:	4605      	mov	r5, r0
 800eab0:	d4e0      	bmi.n	800ea74 <_fflush_r+0xc>
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	059b      	lsls	r3, r3, #22
 800eab6:	d4dd      	bmi.n	800ea74 <_fflush_r+0xc>
 800eab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaba:	f000 f908 	bl	800ecce <__retarget_lock_release_recursive>
 800eabe:	e7d9      	b.n	800ea74 <_fflush_r+0xc>
 800eac0:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <_fflush_r+0x70>)
 800eac2:	429c      	cmp	r4, r3
 800eac4:	d101      	bne.n	800eaca <_fflush_r+0x62>
 800eac6:	68ac      	ldr	r4, [r5, #8]
 800eac8:	e7df      	b.n	800ea8a <_fflush_r+0x22>
 800eaca:	4b04      	ldr	r3, [pc, #16]	; (800eadc <_fflush_r+0x74>)
 800eacc:	429c      	cmp	r4, r3
 800eace:	bf08      	it	eq
 800ead0:	68ec      	ldreq	r4, [r5, #12]
 800ead2:	e7da      	b.n	800ea8a <_fflush_r+0x22>
 800ead4:	080108f8 	.word	0x080108f8
 800ead8:	08010918 	.word	0x08010918
 800eadc:	080108d8 	.word	0x080108d8

0800eae0 <std>:
 800eae0:	2300      	movs	r3, #0
 800eae2:	b510      	push	{r4, lr}
 800eae4:	4604      	mov	r4, r0
 800eae6:	e9c0 3300 	strd	r3, r3, [r0]
 800eaea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaee:	6083      	str	r3, [r0, #8]
 800eaf0:	8181      	strh	r1, [r0, #12]
 800eaf2:	6643      	str	r3, [r0, #100]	; 0x64
 800eaf4:	81c2      	strh	r2, [r0, #14]
 800eaf6:	6183      	str	r3, [r0, #24]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	2208      	movs	r2, #8
 800eafc:	305c      	adds	r0, #92	; 0x5c
 800eafe:	f7fb fccb 	bl	800a498 <memset>
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <std+0x38>)
 800eb04:	6263      	str	r3, [r4, #36]	; 0x24
 800eb06:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <std+0x3c>)
 800eb08:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb0a:	4b05      	ldr	r3, [pc, #20]	; (800eb20 <std+0x40>)
 800eb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb0e:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <std+0x44>)
 800eb10:	6224      	str	r4, [r4, #32]
 800eb12:	6323      	str	r3, [r4, #48]	; 0x30
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	bf00      	nop
 800eb18:	0800eeb9 	.word	0x0800eeb9
 800eb1c:	0800eedb 	.word	0x0800eedb
 800eb20:	0800ef13 	.word	0x0800ef13
 800eb24:	0800ef37 	.word	0x0800ef37

0800eb28 <_cleanup_r>:
 800eb28:	4901      	ldr	r1, [pc, #4]	; (800eb30 <_cleanup_r+0x8>)
 800eb2a:	f000 b8af 	b.w	800ec8c <_fwalk_reent>
 800eb2e:	bf00      	nop
 800eb30:	0800ea69 	.word	0x0800ea69

0800eb34 <__sfmoreglue>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	1e4a      	subs	r2, r1, #1
 800eb38:	2568      	movs	r5, #104	; 0x68
 800eb3a:	4355      	muls	r5, r2
 800eb3c:	460e      	mov	r6, r1
 800eb3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb42:	f7ff faeb 	bl	800e11c <_malloc_r>
 800eb46:	4604      	mov	r4, r0
 800eb48:	b140      	cbz	r0, 800eb5c <__sfmoreglue+0x28>
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb50:	300c      	adds	r0, #12
 800eb52:	60a0      	str	r0, [r4, #8]
 800eb54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb58:	f7fb fc9e 	bl	800a498 <memset>
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}

0800eb60 <__sfp_lock_acquire>:
 800eb60:	4801      	ldr	r0, [pc, #4]	; (800eb68 <__sfp_lock_acquire+0x8>)
 800eb62:	f000 b8b3 	b.w	800eccc <__retarget_lock_acquire_recursive>
 800eb66:	bf00      	nop
 800eb68:	2000385c 	.word	0x2000385c

0800eb6c <__sfp_lock_release>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	; (800eb74 <__sfp_lock_release+0x8>)
 800eb6e:	f000 b8ae 	b.w	800ecce <__retarget_lock_release_recursive>
 800eb72:	bf00      	nop
 800eb74:	2000385c 	.word	0x2000385c

0800eb78 <__sinit_lock_acquire>:
 800eb78:	4801      	ldr	r0, [pc, #4]	; (800eb80 <__sinit_lock_acquire+0x8>)
 800eb7a:	f000 b8a7 	b.w	800eccc <__retarget_lock_acquire_recursive>
 800eb7e:	bf00      	nop
 800eb80:	20003857 	.word	0x20003857

0800eb84 <__sinit_lock_release>:
 800eb84:	4801      	ldr	r0, [pc, #4]	; (800eb8c <__sinit_lock_release+0x8>)
 800eb86:	f000 b8a2 	b.w	800ecce <__retarget_lock_release_recursive>
 800eb8a:	bf00      	nop
 800eb8c:	20003857 	.word	0x20003857

0800eb90 <__sinit>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	4604      	mov	r4, r0
 800eb94:	f7ff fff0 	bl	800eb78 <__sinit_lock_acquire>
 800eb98:	69a3      	ldr	r3, [r4, #24]
 800eb9a:	b11b      	cbz	r3, 800eba4 <__sinit+0x14>
 800eb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eba0:	f7ff bff0 	b.w	800eb84 <__sinit_lock_release>
 800eba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eba8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebaa:	4b13      	ldr	r3, [pc, #76]	; (800ebf8 <__sinit+0x68>)
 800ebac:	4a13      	ldr	r2, [pc, #76]	; (800ebfc <__sinit+0x6c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	bf04      	itt	eq
 800ebb6:	2301      	moveq	r3, #1
 800ebb8:	61a3      	streq	r3, [r4, #24]
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 f820 	bl	800ec00 <__sfp>
 800ebc0:	6060      	str	r0, [r4, #4]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f000 f81c 	bl	800ec00 <__sfp>
 800ebc8:	60a0      	str	r0, [r4, #8]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f818 	bl	800ec00 <__sfp>
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	60e0      	str	r0, [r4, #12]
 800ebd4:	2104      	movs	r1, #4
 800ebd6:	6860      	ldr	r0, [r4, #4]
 800ebd8:	f7ff ff82 	bl	800eae0 <std>
 800ebdc:	68a0      	ldr	r0, [r4, #8]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	2109      	movs	r1, #9
 800ebe2:	f7ff ff7d 	bl	800eae0 <std>
 800ebe6:	68e0      	ldr	r0, [r4, #12]
 800ebe8:	2202      	movs	r2, #2
 800ebea:	2112      	movs	r1, #18
 800ebec:	f7ff ff78 	bl	800eae0 <std>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	61a3      	str	r3, [r4, #24]
 800ebf4:	e7d2      	b.n	800eb9c <__sinit+0xc>
 800ebf6:	bf00      	nop
 800ebf8:	080103cc 	.word	0x080103cc
 800ebfc:	0800eb29 	.word	0x0800eb29

0800ec00 <__sfp>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	4607      	mov	r7, r0
 800ec04:	f7ff ffac 	bl	800eb60 <__sfp_lock_acquire>
 800ec08:	4b1e      	ldr	r3, [pc, #120]	; (800ec84 <__sfp+0x84>)
 800ec0a:	681e      	ldr	r6, [r3, #0]
 800ec0c:	69b3      	ldr	r3, [r6, #24]
 800ec0e:	b913      	cbnz	r3, 800ec16 <__sfp+0x16>
 800ec10:	4630      	mov	r0, r6
 800ec12:	f7ff ffbd 	bl	800eb90 <__sinit>
 800ec16:	3648      	adds	r6, #72	; 0x48
 800ec18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	d503      	bpl.n	800ec28 <__sfp+0x28>
 800ec20:	6833      	ldr	r3, [r6, #0]
 800ec22:	b30b      	cbz	r3, 800ec68 <__sfp+0x68>
 800ec24:	6836      	ldr	r6, [r6, #0]
 800ec26:	e7f7      	b.n	800ec18 <__sfp+0x18>
 800ec28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec2c:	b9d5      	cbnz	r5, 800ec64 <__sfp+0x64>
 800ec2e:	4b16      	ldr	r3, [pc, #88]	; (800ec88 <__sfp+0x88>)
 800ec30:	60e3      	str	r3, [r4, #12]
 800ec32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec36:	6665      	str	r5, [r4, #100]	; 0x64
 800ec38:	f000 f847 	bl	800ecca <__retarget_lock_init_recursive>
 800ec3c:	f7ff ff96 	bl	800eb6c <__sfp_lock_release>
 800ec40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec48:	6025      	str	r5, [r4, #0]
 800ec4a:	61a5      	str	r5, [r4, #24]
 800ec4c:	2208      	movs	r2, #8
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec54:	f7fb fc20 	bl	800a498 <memset>
 800ec58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec60:	4620      	mov	r0, r4
 800ec62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec64:	3468      	adds	r4, #104	; 0x68
 800ec66:	e7d9      	b.n	800ec1c <__sfp+0x1c>
 800ec68:	2104      	movs	r1, #4
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	f7ff ff62 	bl	800eb34 <__sfmoreglue>
 800ec70:	4604      	mov	r4, r0
 800ec72:	6030      	str	r0, [r6, #0]
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d1d5      	bne.n	800ec24 <__sfp+0x24>
 800ec78:	f7ff ff78 	bl	800eb6c <__sfp_lock_release>
 800ec7c:	230c      	movs	r3, #12
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	e7ee      	b.n	800ec60 <__sfp+0x60>
 800ec82:	bf00      	nop
 800ec84:	080103cc 	.word	0x080103cc
 800ec88:	ffff0001 	.word	0xffff0001

0800ec8c <_fwalk_reent>:
 800ec8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec90:	4606      	mov	r6, r0
 800ec92:	4688      	mov	r8, r1
 800ec94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec98:	2700      	movs	r7, #0
 800ec9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec9e:	f1b9 0901 	subs.w	r9, r9, #1
 800eca2:	d505      	bpl.n	800ecb0 <_fwalk_reent+0x24>
 800eca4:	6824      	ldr	r4, [r4, #0]
 800eca6:	2c00      	cmp	r4, #0
 800eca8:	d1f7      	bne.n	800ec9a <_fwalk_reent+0xe>
 800ecaa:	4638      	mov	r0, r7
 800ecac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecb0:	89ab      	ldrh	r3, [r5, #12]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d907      	bls.n	800ecc6 <_fwalk_reent+0x3a>
 800ecb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	d003      	beq.n	800ecc6 <_fwalk_reent+0x3a>
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	47c0      	blx	r8
 800ecc4:	4307      	orrs	r7, r0
 800ecc6:	3568      	adds	r5, #104	; 0x68
 800ecc8:	e7e9      	b.n	800ec9e <_fwalk_reent+0x12>

0800ecca <__retarget_lock_init_recursive>:
 800ecca:	4770      	bx	lr

0800eccc <__retarget_lock_acquire_recursive>:
 800eccc:	4770      	bx	lr

0800ecce <__retarget_lock_release_recursive>:
 800ecce:	4770      	bx	lr

0800ecd0 <__swhatbuf_r>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	460e      	mov	r6, r1
 800ecd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	b096      	sub	sp, #88	; 0x58
 800ecdc:	4614      	mov	r4, r2
 800ecde:	461d      	mov	r5, r3
 800ece0:	da07      	bge.n	800ecf2 <__swhatbuf_r+0x22>
 800ece2:	2300      	movs	r3, #0
 800ece4:	602b      	str	r3, [r5, #0]
 800ece6:	89b3      	ldrh	r3, [r6, #12]
 800ece8:	061a      	lsls	r2, r3, #24
 800ecea:	d410      	bmi.n	800ed0e <__swhatbuf_r+0x3e>
 800ecec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecf0:	e00e      	b.n	800ed10 <__swhatbuf_r+0x40>
 800ecf2:	466a      	mov	r2, sp
 800ecf4:	f000 f946 	bl	800ef84 <_fstat_r>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	dbf2      	blt.n	800ece2 <__swhatbuf_r+0x12>
 800ecfc:	9a01      	ldr	r2, [sp, #4]
 800ecfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed06:	425a      	negs	r2, r3
 800ed08:	415a      	adcs	r2, r3
 800ed0a:	602a      	str	r2, [r5, #0]
 800ed0c:	e7ee      	b.n	800ecec <__swhatbuf_r+0x1c>
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	2000      	movs	r0, #0
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	b016      	add	sp, #88	; 0x58
 800ed16:	bd70      	pop	{r4, r5, r6, pc}

0800ed18 <__smakebuf_r>:
 800ed18:	898b      	ldrh	r3, [r1, #12]
 800ed1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed1c:	079d      	lsls	r5, r3, #30
 800ed1e:	4606      	mov	r6, r0
 800ed20:	460c      	mov	r4, r1
 800ed22:	d507      	bpl.n	800ed34 <__smakebuf_r+0x1c>
 800ed24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	6163      	str	r3, [r4, #20]
 800ed30:	b002      	add	sp, #8
 800ed32:	bd70      	pop	{r4, r5, r6, pc}
 800ed34:	ab01      	add	r3, sp, #4
 800ed36:	466a      	mov	r2, sp
 800ed38:	f7ff ffca 	bl	800ecd0 <__swhatbuf_r>
 800ed3c:	9900      	ldr	r1, [sp, #0]
 800ed3e:	4605      	mov	r5, r0
 800ed40:	4630      	mov	r0, r6
 800ed42:	f7ff f9eb 	bl	800e11c <_malloc_r>
 800ed46:	b948      	cbnz	r0, 800ed5c <__smakebuf_r+0x44>
 800ed48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed4c:	059a      	lsls	r2, r3, #22
 800ed4e:	d4ef      	bmi.n	800ed30 <__smakebuf_r+0x18>
 800ed50:	f023 0303 	bic.w	r3, r3, #3
 800ed54:	f043 0302 	orr.w	r3, r3, #2
 800ed58:	81a3      	strh	r3, [r4, #12]
 800ed5a:	e7e3      	b.n	800ed24 <__smakebuf_r+0xc>
 800ed5c:	4b0d      	ldr	r3, [pc, #52]	; (800ed94 <__smakebuf_r+0x7c>)
 800ed5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	6020      	str	r0, [r4, #0]
 800ed64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed68:	81a3      	strh	r3, [r4, #12]
 800ed6a:	9b00      	ldr	r3, [sp, #0]
 800ed6c:	6163      	str	r3, [r4, #20]
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	6120      	str	r0, [r4, #16]
 800ed72:	b15b      	cbz	r3, 800ed8c <__smakebuf_r+0x74>
 800ed74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f000 f915 	bl	800efa8 <_isatty_r>
 800ed7e:	b128      	cbz	r0, 800ed8c <__smakebuf_r+0x74>
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	f023 0303 	bic.w	r3, r3, #3
 800ed86:	f043 0301 	orr.w	r3, r3, #1
 800ed8a:	81a3      	strh	r3, [r4, #12]
 800ed8c:	89a0      	ldrh	r0, [r4, #12]
 800ed8e:	4305      	orrs	r5, r0
 800ed90:	81a5      	strh	r5, [r4, #12]
 800ed92:	e7cd      	b.n	800ed30 <__smakebuf_r+0x18>
 800ed94:	0800eb29 	.word	0x0800eb29

0800ed98 <memmove>:
 800ed98:	4288      	cmp	r0, r1
 800ed9a:	b510      	push	{r4, lr}
 800ed9c:	eb01 0402 	add.w	r4, r1, r2
 800eda0:	d902      	bls.n	800eda8 <memmove+0x10>
 800eda2:	4284      	cmp	r4, r0
 800eda4:	4623      	mov	r3, r4
 800eda6:	d807      	bhi.n	800edb8 <memmove+0x20>
 800eda8:	1e43      	subs	r3, r0, #1
 800edaa:	42a1      	cmp	r1, r4
 800edac:	d008      	beq.n	800edc0 <memmove+0x28>
 800edae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edb6:	e7f8      	b.n	800edaa <memmove+0x12>
 800edb8:	4402      	add	r2, r0
 800edba:	4601      	mov	r1, r0
 800edbc:	428a      	cmp	r2, r1
 800edbe:	d100      	bne.n	800edc2 <memmove+0x2a>
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edca:	e7f7      	b.n	800edbc <memmove+0x24>

0800edcc <__malloc_lock>:
 800edcc:	4801      	ldr	r0, [pc, #4]	; (800edd4 <__malloc_lock+0x8>)
 800edce:	f7ff bf7d 	b.w	800eccc <__retarget_lock_acquire_recursive>
 800edd2:	bf00      	nop
 800edd4:	20003858 	.word	0x20003858

0800edd8 <__malloc_unlock>:
 800edd8:	4801      	ldr	r0, [pc, #4]	; (800ede0 <__malloc_unlock+0x8>)
 800edda:	f7ff bf78 	b.w	800ecce <__retarget_lock_release_recursive>
 800edde:	bf00      	nop
 800ede0:	20003858 	.word	0x20003858

0800ede4 <_realloc_r>:
 800ede4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede6:	4607      	mov	r7, r0
 800ede8:	4614      	mov	r4, r2
 800edea:	460e      	mov	r6, r1
 800edec:	b921      	cbnz	r1, 800edf8 <_realloc_r+0x14>
 800edee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800edf2:	4611      	mov	r1, r2
 800edf4:	f7ff b992 	b.w	800e11c <_malloc_r>
 800edf8:	b922      	cbnz	r2, 800ee04 <_realloc_r+0x20>
 800edfa:	f7ff f93f 	bl	800e07c <_free_r>
 800edfe:	4625      	mov	r5, r4
 800ee00:	4628      	mov	r0, r5
 800ee02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee04:	f000 f8f2 	bl	800efec <_malloc_usable_size_r>
 800ee08:	42a0      	cmp	r0, r4
 800ee0a:	d20f      	bcs.n	800ee2c <_realloc_r+0x48>
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f7ff f984 	bl	800e11c <_malloc_r>
 800ee14:	4605      	mov	r5, r0
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d0f2      	beq.n	800ee00 <_realloc_r+0x1c>
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	f7fb fb2d 	bl	800a47c <memcpy>
 800ee22:	4631      	mov	r1, r6
 800ee24:	4638      	mov	r0, r7
 800ee26:	f7ff f929 	bl	800e07c <_free_r>
 800ee2a:	e7e9      	b.n	800ee00 <_realloc_r+0x1c>
 800ee2c:	4635      	mov	r5, r6
 800ee2e:	e7e7      	b.n	800ee00 <_realloc_r+0x1c>

0800ee30 <_raise_r>:
 800ee30:	291f      	cmp	r1, #31
 800ee32:	b538      	push	{r3, r4, r5, lr}
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	d904      	bls.n	800ee44 <_raise_r+0x14>
 800ee3a:	2316      	movs	r3, #22
 800ee3c:	6003      	str	r3, [r0, #0]
 800ee3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee46:	b112      	cbz	r2, 800ee4e <_raise_r+0x1e>
 800ee48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee4c:	b94b      	cbnz	r3, 800ee62 <_raise_r+0x32>
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f000 f830 	bl	800eeb4 <_getpid_r>
 800ee54:	462a      	mov	r2, r5
 800ee56:	4601      	mov	r1, r0
 800ee58:	4620      	mov	r0, r4
 800ee5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee5e:	f000 b817 	b.w	800ee90 <_kill_r>
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d00a      	beq.n	800ee7c <_raise_r+0x4c>
 800ee66:	1c59      	adds	r1, r3, #1
 800ee68:	d103      	bne.n	800ee72 <_raise_r+0x42>
 800ee6a:	2316      	movs	r3, #22
 800ee6c:	6003      	str	r3, [r0, #0]
 800ee6e:	2001      	movs	r0, #1
 800ee70:	e7e7      	b.n	800ee42 <_raise_r+0x12>
 800ee72:	2400      	movs	r4, #0
 800ee74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee78:	4628      	mov	r0, r5
 800ee7a:	4798      	blx	r3
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	e7e0      	b.n	800ee42 <_raise_r+0x12>

0800ee80 <raise>:
 800ee80:	4b02      	ldr	r3, [pc, #8]	; (800ee8c <raise+0xc>)
 800ee82:	4601      	mov	r1, r0
 800ee84:	6818      	ldr	r0, [r3, #0]
 800ee86:	f7ff bfd3 	b.w	800ee30 <_raise_r>
 800ee8a:	bf00      	nop
 800ee8c:	2000038c 	.word	0x2000038c

0800ee90 <_kill_r>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4d07      	ldr	r5, [pc, #28]	; (800eeb0 <_kill_r+0x20>)
 800ee94:	2300      	movs	r3, #0
 800ee96:	4604      	mov	r4, r0
 800ee98:	4608      	mov	r0, r1
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	f7fa fcd0 	bl	8009842 <_kill>
 800eea2:	1c43      	adds	r3, r0, #1
 800eea4:	d102      	bne.n	800eeac <_kill_r+0x1c>
 800eea6:	682b      	ldr	r3, [r5, #0]
 800eea8:	b103      	cbz	r3, 800eeac <_kill_r+0x1c>
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	bf00      	nop
 800eeb0:	20003860 	.word	0x20003860

0800eeb4 <_getpid_r>:
 800eeb4:	f7fa bcc3 	b.w	800983e <_getpid>

0800eeb8 <__sread>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	460c      	mov	r4, r1
 800eebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec0:	f000 f89c 	bl	800effc <_read_r>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	bfab      	itete	ge
 800eec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eeca:	89a3      	ldrhlt	r3, [r4, #12]
 800eecc:	181b      	addge	r3, r3, r0
 800eece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eed2:	bfac      	ite	ge
 800eed4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eed6:	81a3      	strhlt	r3, [r4, #12]
 800eed8:	bd10      	pop	{r4, pc}

0800eeda <__swrite>:
 800eeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eede:	461f      	mov	r7, r3
 800eee0:	898b      	ldrh	r3, [r1, #12]
 800eee2:	05db      	lsls	r3, r3, #23
 800eee4:	4605      	mov	r5, r0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4616      	mov	r6, r2
 800eeea:	d505      	bpl.n	800eef8 <__swrite+0x1e>
 800eeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef0:	2302      	movs	r3, #2
 800eef2:	2200      	movs	r2, #0
 800eef4:	f000 f868 	bl	800efc8 <_lseek_r>
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef02:	81a3      	strh	r3, [r4, #12]
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	4628      	mov	r0, r5
 800ef0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0e:	f000 b817 	b.w	800ef40 <_write_r>

0800ef12 <__sseek>:
 800ef12:	b510      	push	{r4, lr}
 800ef14:	460c      	mov	r4, r1
 800ef16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef1a:	f000 f855 	bl	800efc8 <_lseek_r>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	bf15      	itete	ne
 800ef24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef2e:	81a3      	strheq	r3, [r4, #12]
 800ef30:	bf18      	it	ne
 800ef32:	81a3      	strhne	r3, [r4, #12]
 800ef34:	bd10      	pop	{r4, pc}

0800ef36 <__sclose>:
 800ef36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef3a:	f000 b813 	b.w	800ef64 <_close_r>
	...

0800ef40 <_write_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	; (800ef60 <_write_r+0x20>)
 800ef44:	4604      	mov	r4, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	602a      	str	r2, [r5, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f7fa fc95 	bl	800987e <_write>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_write_r+0x1e>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_write_r+0x1e>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	20003860 	.word	0x20003860

0800ef64 <_close_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d06      	ldr	r5, [pc, #24]	; (800ef80 <_close_r+0x1c>)
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	602b      	str	r3, [r5, #0]
 800ef70:	f7fa fc93 	bl	800989a <_close>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_close_r+0x1a>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_close_r+0x1a>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	20003860 	.word	0x20003860

0800ef84 <_fstat_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_fstat_r+0x20>)
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	4608      	mov	r0, r1
 800ef8e:	4611      	mov	r1, r2
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	f7fa fc85 	bl	80098a0 <_fstat>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d102      	bne.n	800efa0 <_fstat_r+0x1c>
 800ef9a:	682b      	ldr	r3, [r5, #0]
 800ef9c:	b103      	cbz	r3, 800efa0 <_fstat_r+0x1c>
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop
 800efa4:	20003860 	.word	0x20003860

0800efa8 <_isatty_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d06      	ldr	r5, [pc, #24]	; (800efc4 <_isatty_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	f7fa fc79 	bl	80098aa <_isatty>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_isatty_r+0x1a>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_isatty_r+0x1a>
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	20003860 	.word	0x20003860

0800efc8 <_lseek_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4d07      	ldr	r5, [pc, #28]	; (800efe8 <_lseek_r+0x20>)
 800efcc:	4604      	mov	r4, r0
 800efce:	4608      	mov	r0, r1
 800efd0:	4611      	mov	r1, r2
 800efd2:	2200      	movs	r2, #0
 800efd4:	602a      	str	r2, [r5, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	f7fa fc69 	bl	80098ae <_lseek>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_lseek_r+0x1e>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_lseek_r+0x1e>
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	20003860 	.word	0x20003860

0800efec <_malloc_usable_size_r>:
 800efec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eff0:	1f18      	subs	r0, r3, #4
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bfbc      	itt	lt
 800eff6:	580b      	ldrlt	r3, [r1, r0]
 800eff8:	18c0      	addlt	r0, r0, r3
 800effa:	4770      	bx	lr

0800effc <_read_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4d07      	ldr	r5, [pc, #28]	; (800f01c <_read_r+0x20>)
 800f000:	4604      	mov	r4, r0
 800f002:	4608      	mov	r0, r1
 800f004:	4611      	mov	r1, r2
 800f006:	2200      	movs	r2, #0
 800f008:	602a      	str	r2, [r5, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f7fa fc27 	bl	800985e <_read>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_read_r+0x1e>
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	b103      	cbz	r3, 800f01a <_read_r+0x1e>
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	20003860 	.word	0x20003860

0800f020 <round>:
 800f020:	ec51 0b10 	vmov	r0, r1, d0
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f02a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800f02e:	2c13      	cmp	r4, #19
 800f030:	ee10 2a10 	vmov	r2, s0
 800f034:	460b      	mov	r3, r1
 800f036:	dc19      	bgt.n	800f06c <round+0x4c>
 800f038:	2c00      	cmp	r4, #0
 800f03a:	da09      	bge.n	800f050 <round+0x30>
 800f03c:	3401      	adds	r4, #1
 800f03e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f042:	d103      	bne.n	800f04c <round+0x2c>
 800f044:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f048:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f04c:	2100      	movs	r1, #0
 800f04e:	e028      	b.n	800f0a2 <round+0x82>
 800f050:	4d15      	ldr	r5, [pc, #84]	; (800f0a8 <round+0x88>)
 800f052:	4125      	asrs	r5, r4
 800f054:	ea01 0605 	and.w	r6, r1, r5
 800f058:	4332      	orrs	r2, r6
 800f05a:	d00e      	beq.n	800f07a <round+0x5a>
 800f05c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f060:	fa42 f404 	asr.w	r4, r2, r4
 800f064:	4423      	add	r3, r4
 800f066:	ea23 0305 	bic.w	r3, r3, r5
 800f06a:	e7ef      	b.n	800f04c <round+0x2c>
 800f06c:	2c33      	cmp	r4, #51	; 0x33
 800f06e:	dd07      	ble.n	800f080 <round+0x60>
 800f070:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f074:	d101      	bne.n	800f07a <round+0x5a>
 800f076:	f7f1 f941 	bl	80002fc <__adddf3>
 800f07a:	ec41 0b10 	vmov	d0, r0, r1
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800f084:	f04f 35ff 	mov.w	r5, #4294967295
 800f088:	40f5      	lsrs	r5, r6
 800f08a:	4228      	tst	r0, r5
 800f08c:	d0f5      	beq.n	800f07a <round+0x5a>
 800f08e:	2101      	movs	r1, #1
 800f090:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f094:	fa01 f404 	lsl.w	r4, r1, r4
 800f098:	1912      	adds	r2, r2, r4
 800f09a:	bf28      	it	cs
 800f09c:	185b      	addcs	r3, r3, r1
 800f09e:	ea22 0105 	bic.w	r1, r2, r5
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	e7e8      	b.n	800f07a <round+0x5a>
 800f0a8:	000fffff 	.word	0x000fffff

0800f0ac <ceilf>:
 800f0ac:	ee10 3a10 	vmov	r3, s0
 800f0b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f0b4:	3a7f      	subs	r2, #127	; 0x7f
 800f0b6:	2a16      	cmp	r2, #22
 800f0b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f0bc:	dc2a      	bgt.n	800f114 <ceilf+0x68>
 800f0be:	2a00      	cmp	r2, #0
 800f0c0:	da11      	bge.n	800f0e6 <ceilf+0x3a>
 800f0c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f128 <ceilf+0x7c>
 800f0c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f0ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d2:	dd05      	ble.n	800f0e0 <ceilf+0x34>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	db23      	blt.n	800f120 <ceilf+0x74>
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	bf18      	it	ne
 800f0dc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800f0e0:	ee00 3a10 	vmov	s0, r3
 800f0e4:	4770      	bx	lr
 800f0e6:	4911      	ldr	r1, [pc, #68]	; (800f12c <ceilf+0x80>)
 800f0e8:	4111      	asrs	r1, r2
 800f0ea:	420b      	tst	r3, r1
 800f0ec:	d0fa      	beq.n	800f0e4 <ceilf+0x38>
 800f0ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f128 <ceilf+0x7c>
 800f0f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f0f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fe:	ddef      	ble.n	800f0e0 <ceilf+0x34>
 800f100:	2b00      	cmp	r3, #0
 800f102:	bfc2      	ittt	gt
 800f104:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800f108:	fa40 f202 	asrgt.w	r2, r0, r2
 800f10c:	189b      	addgt	r3, r3, r2
 800f10e:	ea23 0301 	bic.w	r3, r3, r1
 800f112:	e7e5      	b.n	800f0e0 <ceilf+0x34>
 800f114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f118:	d3e4      	bcc.n	800f0e4 <ceilf+0x38>
 800f11a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f11e:	4770      	bx	lr
 800f120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f124:	e7dc      	b.n	800f0e0 <ceilf+0x34>
 800f126:	bf00      	nop
 800f128:	7149f2ca 	.word	0x7149f2ca
 800f12c:	007fffff 	.word	0x007fffff

0800f130 <roundf>:
 800f130:	ee10 0a10 	vmov	r0, s0
 800f134:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f138:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800f13c:	2a16      	cmp	r2, #22
 800f13e:	dc15      	bgt.n	800f16c <roundf+0x3c>
 800f140:	2a00      	cmp	r2, #0
 800f142:	da08      	bge.n	800f156 <roundf+0x26>
 800f144:	3201      	adds	r2, #1
 800f146:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f14a:	d101      	bne.n	800f150 <roundf+0x20>
 800f14c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f150:	ee00 3a10 	vmov	s0, r3
 800f154:	4770      	bx	lr
 800f156:	4908      	ldr	r1, [pc, #32]	; (800f178 <roundf+0x48>)
 800f158:	4111      	asrs	r1, r2
 800f15a:	4208      	tst	r0, r1
 800f15c:	d0fa      	beq.n	800f154 <roundf+0x24>
 800f15e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f162:	4113      	asrs	r3, r2
 800f164:	4403      	add	r3, r0
 800f166:	ea23 0301 	bic.w	r3, r3, r1
 800f16a:	e7f1      	b.n	800f150 <roundf+0x20>
 800f16c:	2a80      	cmp	r2, #128	; 0x80
 800f16e:	d1f1      	bne.n	800f154 <roundf+0x24>
 800f170:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	007fffff 	.word	0x007fffff

0800f17c <expf>:
 800f17c:	b508      	push	{r3, lr}
 800f17e:	ed2d 8b02 	vpush	{d8}
 800f182:	eef0 8a40 	vmov.f32	s17, s0
 800f186:	f000 f92b 	bl	800f3e0 <__ieee754_expf>
 800f18a:	4b16      	ldr	r3, [pc, #88]	; (800f1e4 <expf+0x68>)
 800f18c:	f993 3000 	ldrsb.w	r3, [r3]
 800f190:	3301      	adds	r3, #1
 800f192:	eeb0 8a40 	vmov.f32	s16, s0
 800f196:	d011      	beq.n	800f1bc <expf+0x40>
 800f198:	eeb0 0a68 	vmov.f32	s0, s17
 800f19c:	f7ff fae8 	bl	800e770 <finitef>
 800f1a0:	b160      	cbz	r0, 800f1bc <expf+0x40>
 800f1a2:	eddf 7a11 	vldr	s15, [pc, #68]	; 800f1e8 <expf+0x6c>
 800f1a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	dd0a      	ble.n	800f1c6 <expf+0x4a>
 800f1b0:	f7fb f93a 	bl	800a428 <__errno>
 800f1b4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800f1ec <expf+0x70>
 800f1b8:	2322      	movs	r3, #34	; 0x22
 800f1ba:	6003      	str	r3, [r0, #0]
 800f1bc:	eeb0 0a48 	vmov.f32	s0, s16
 800f1c0:	ecbd 8b02 	vpop	{d8}
 800f1c4:	bd08      	pop	{r3, pc}
 800f1c6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f1f0 <expf+0x74>
 800f1ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d2:	d5f3      	bpl.n	800f1bc <expf+0x40>
 800f1d4:	f7fb f928 	bl	800a428 <__errno>
 800f1d8:	2322      	movs	r3, #34	; 0x22
 800f1da:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800f1f4 <expf+0x78>
 800f1de:	6003      	str	r3, [r0, #0]
 800f1e0:	e7ec      	b.n	800f1bc <expf+0x40>
 800f1e2:	bf00      	nop
 800f1e4:	20000560 	.word	0x20000560
 800f1e8:	42b17180 	.word	0x42b17180
 800f1ec:	7f800000 	.word	0x7f800000
 800f1f0:	c2cff1b5 	.word	0xc2cff1b5
 800f1f4:	00000000 	.word	0x00000000

0800f1f8 <logf>:
 800f1f8:	b508      	push	{r3, lr}
 800f1fa:	ed2d 8b02 	vpush	{d8}
 800f1fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f202:	f000 f9c1 	bl	800f588 <__ieee754_logf>
 800f206:	4b14      	ldr	r3, [pc, #80]	; (800f258 <logf+0x60>)
 800f208:	f993 3000 	ldrsb.w	r3, [r3]
 800f20c:	3301      	adds	r3, #1
 800f20e:	d014      	beq.n	800f23a <logf+0x42>
 800f210:	eeb4 8a48 	vcmp.f32	s16, s16
 800f214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f218:	d60f      	bvs.n	800f23a <logf+0x42>
 800f21a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f222:	dc0a      	bgt.n	800f23a <logf+0x42>
 800f224:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f22c:	d108      	bne.n	800f240 <logf+0x48>
 800f22e:	f7fb f8fb 	bl	800a428 <__errno>
 800f232:	2322      	movs	r3, #34	; 0x22
 800f234:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800f25c <logf+0x64>
 800f238:	6003      	str	r3, [r0, #0]
 800f23a:	ecbd 8b02 	vpop	{d8}
 800f23e:	bd08      	pop	{r3, pc}
 800f240:	f7fb f8f2 	bl	800a428 <__errno>
 800f244:	ecbd 8b02 	vpop	{d8}
 800f248:	2321      	movs	r3, #33	; 0x21
 800f24a:	6003      	str	r3, [r0, #0]
 800f24c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f250:	4803      	ldr	r0, [pc, #12]	; (800f260 <logf+0x68>)
 800f252:	f7fc b82f 	b.w	800b2b4 <nanf>
 800f256:	bf00      	nop
 800f258:	20000560 	.word	0x20000560
 800f25c:	ff800000 	.word	0xff800000
 800f260:	0801056c 	.word	0x0801056c

0800f264 <powf>:
 800f264:	b508      	push	{r3, lr}
 800f266:	ed2d 8b04 	vpush	{d8-d9}
 800f26a:	eeb0 9a40 	vmov.f32	s18, s0
 800f26e:	eef0 8a60 	vmov.f32	s17, s1
 800f272:	f000 fa79 	bl	800f768 <__ieee754_powf>
 800f276:	4b43      	ldr	r3, [pc, #268]	; (800f384 <powf+0x120>)
 800f278:	f993 3000 	ldrsb.w	r3, [r3]
 800f27c:	3301      	adds	r3, #1
 800f27e:	eeb0 8a40 	vmov.f32	s16, s0
 800f282:	d012      	beq.n	800f2aa <powf+0x46>
 800f284:	eef4 8a68 	vcmp.f32	s17, s17
 800f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28c:	d60d      	bvs.n	800f2aa <powf+0x46>
 800f28e:	eeb4 9a49 	vcmp.f32	s18, s18
 800f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f296:	d70d      	bvc.n	800f2b4 <powf+0x50>
 800f298:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2a4:	bf08      	it	eq
 800f2a6:	eeb0 8a67 	vmoveq.f32	s16, s15
 800f2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800f2ae:	ecbd 8b04 	vpop	{d8-d9}
 800f2b2:	bd08      	pop	{r3, pc}
 800f2b4:	eddf 9a34 	vldr	s19, [pc, #208]	; 800f388 <powf+0x124>
 800f2b8:	eeb4 9a69 	vcmp.f32	s18, s19
 800f2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c0:	d116      	bne.n	800f2f0 <powf+0x8c>
 800f2c2:	eef4 8a69 	vcmp.f32	s17, s19
 800f2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ca:	d057      	beq.n	800f37c <powf+0x118>
 800f2cc:	eeb0 0a68 	vmov.f32	s0, s17
 800f2d0:	f7ff fa4e 	bl	800e770 <finitef>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d0e8      	beq.n	800f2aa <powf+0x46>
 800f2d8:	eef4 8ae9 	vcmpe.f32	s17, s19
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	d5e3      	bpl.n	800f2aa <powf+0x46>
 800f2e2:	f7fb f8a1 	bl	800a428 <__errno>
 800f2e6:	2321      	movs	r3, #33	; 0x21
 800f2e8:	6003      	str	r3, [r0, #0]
 800f2ea:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800f38c <powf+0x128>
 800f2ee:	e7dc      	b.n	800f2aa <powf+0x46>
 800f2f0:	f7ff fa3e 	bl	800e770 <finitef>
 800f2f4:	bb50      	cbnz	r0, 800f34c <powf+0xe8>
 800f2f6:	eeb0 0a49 	vmov.f32	s0, s18
 800f2fa:	f7ff fa39 	bl	800e770 <finitef>
 800f2fe:	b328      	cbz	r0, 800f34c <powf+0xe8>
 800f300:	eeb0 0a68 	vmov.f32	s0, s17
 800f304:	f7ff fa34 	bl	800e770 <finitef>
 800f308:	b300      	cbz	r0, 800f34c <powf+0xe8>
 800f30a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	d706      	bvc.n	800f322 <powf+0xbe>
 800f314:	f7fb f888 	bl	800a428 <__errno>
 800f318:	2321      	movs	r3, #33	; 0x21
 800f31a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800f31e:	6003      	str	r3, [r0, #0]
 800f320:	e7c3      	b.n	800f2aa <powf+0x46>
 800f322:	f7fb f881 	bl	800a428 <__errno>
 800f326:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f32a:	2322      	movs	r3, #34	; 0x22
 800f32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f330:	6003      	str	r3, [r0, #0]
 800f332:	d508      	bpl.n	800f346 <powf+0xe2>
 800f334:	eeb0 0a68 	vmov.f32	s0, s17
 800f338:	f000 fce0 	bl	800fcfc <rintf>
 800f33c:	eeb4 0a68 	vcmp.f32	s0, s17
 800f340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f344:	d1d1      	bne.n	800f2ea <powf+0x86>
 800f346:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800f390 <powf+0x12c>
 800f34a:	e7ae      	b.n	800f2aa <powf+0x46>
 800f34c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f354:	d1a9      	bne.n	800f2aa <powf+0x46>
 800f356:	eeb0 0a49 	vmov.f32	s0, s18
 800f35a:	f7ff fa09 	bl	800e770 <finitef>
 800f35e:	2800      	cmp	r0, #0
 800f360:	d0a3      	beq.n	800f2aa <powf+0x46>
 800f362:	eeb0 0a68 	vmov.f32	s0, s17
 800f366:	f7ff fa03 	bl	800e770 <finitef>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d09d      	beq.n	800f2aa <powf+0x46>
 800f36e:	f7fb f85b 	bl	800a428 <__errno>
 800f372:	2322      	movs	r3, #34	; 0x22
 800f374:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f388 <powf+0x124>
 800f378:	6003      	str	r3, [r0, #0]
 800f37a:	e796      	b.n	800f2aa <powf+0x46>
 800f37c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f380:	e793      	b.n	800f2aa <powf+0x46>
 800f382:	bf00      	nop
 800f384:	20000560 	.word	0x20000560
 800f388:	00000000 	.word	0x00000000
 800f38c:	ff800000 	.word	0xff800000
 800f390:	7f800000 	.word	0x7f800000

0800f394 <sqrtf>:
 800f394:	b508      	push	{r3, lr}
 800f396:	ed2d 8b02 	vpush	{d8}
 800f39a:	eeb0 8a40 	vmov.f32	s16, s0
 800f39e:	f000 fca3 	bl	800fce8 <__ieee754_sqrtf>
 800f3a2:	4b0d      	ldr	r3, [pc, #52]	; (800f3d8 <sqrtf+0x44>)
 800f3a4:	f993 3000 	ldrsb.w	r3, [r3]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	d011      	beq.n	800f3d0 <sqrtf+0x3c>
 800f3ac:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b4:	d60c      	bvs.n	800f3d0 <sqrtf+0x3c>
 800f3b6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800f3dc <sqrtf+0x48>
 800f3ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c2:	d505      	bpl.n	800f3d0 <sqrtf+0x3c>
 800f3c4:	f7fb f830 	bl	800a428 <__errno>
 800f3c8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f3cc:	2321      	movs	r3, #33	; 0x21
 800f3ce:	6003      	str	r3, [r0, #0]
 800f3d0:	ecbd 8b02 	vpop	{d8}
 800f3d4:	bd08      	pop	{r3, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20000560 	.word	0x20000560
 800f3dc:	00000000 	.word	0x00000000

0800f3e0 <__ieee754_expf>:
 800f3e0:	ee10 2a10 	vmov	r2, s0
 800f3e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f3e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f3ec:	d902      	bls.n	800f3f4 <__ieee754_expf+0x14>
 800f3ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3f2:	4770      	bx	lr
 800f3f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f3f8:	d106      	bne.n	800f408 <__ieee754_expf+0x28>
 800f3fa:	eddf 7a51 	vldr	s15, [pc, #324]	; 800f540 <__ieee754_expf+0x160>
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	bf18      	it	ne
 800f402:	eeb0 0a67 	vmovne.f32	s0, s15
 800f406:	4770      	bx	lr
 800f408:	484e      	ldr	r0, [pc, #312]	; (800f544 <__ieee754_expf+0x164>)
 800f40a:	4282      	cmp	r2, r0
 800f40c:	dd04      	ble.n	800f418 <__ieee754_expf+0x38>
 800f40e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f548 <__ieee754_expf+0x168>
 800f412:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f416:	4770      	bx	lr
 800f418:	2a00      	cmp	r2, #0
 800f41a:	da03      	bge.n	800f424 <__ieee754_expf+0x44>
 800f41c:	4a4b      	ldr	r2, [pc, #300]	; (800f54c <__ieee754_expf+0x16c>)
 800f41e:	4291      	cmp	r1, r2
 800f420:	f200 808a 	bhi.w	800f538 <__ieee754_expf+0x158>
 800f424:	4a4a      	ldr	r2, [pc, #296]	; (800f550 <__ieee754_expf+0x170>)
 800f426:	4291      	cmp	r1, r2
 800f428:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f42c:	d954      	bls.n	800f4d8 <__ieee754_expf+0xf8>
 800f42e:	4a49      	ldr	r2, [pc, #292]	; (800f554 <__ieee754_expf+0x174>)
 800f430:	4291      	cmp	r1, r2
 800f432:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f436:	d836      	bhi.n	800f4a6 <__ieee754_expf+0xc6>
 800f438:	4947      	ldr	r1, [pc, #284]	; (800f558 <__ieee754_expf+0x178>)
 800f43a:	4411      	add	r1, r2
 800f43c:	ed91 7a00 	vldr	s14, [r1]
 800f440:	4946      	ldr	r1, [pc, #280]	; (800f55c <__ieee754_expf+0x17c>)
 800f442:	440a      	add	r2, r1
 800f444:	edd2 7a00 	vldr	s15, [r2]
 800f448:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f44c:	f1c3 0201 	rsb	r2, r3, #1
 800f450:	1ad2      	subs	r2, r2, r3
 800f452:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f456:	ee60 6a00 	vmul.f32	s13, s0, s0
 800f45a:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f560 <__ieee754_expf+0x180>
 800f45e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800f564 <__ieee754_expf+0x184>
 800f462:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800f466:	eddf 5a40 	vldr	s11, [pc, #256]	; 800f568 <__ieee754_expf+0x188>
 800f46a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f46e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800f56c <__ieee754_expf+0x18c>
 800f472:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800f476:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f570 <__ieee754_expf+0x190>
 800f47a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f47e:	eeb0 5a40 	vmov.f32	s10, s0
 800f482:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800f486:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f48a:	eef0 6a45 	vmov.f32	s13, s10
 800f48e:	ee20 5a05 	vmul.f32	s10, s0, s10
 800f492:	bb92      	cbnz	r2, 800f4fa <__ieee754_expf+0x11a>
 800f494:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800f498:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f49c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f4a0:	ee36 0a40 	vsub.f32	s0, s12, s0
 800f4a4:	4770      	bx	lr
 800f4a6:	4b33      	ldr	r3, [pc, #204]	; (800f574 <__ieee754_expf+0x194>)
 800f4a8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f578 <__ieee754_expf+0x198>
 800f4ac:	4413      	add	r3, r2
 800f4ae:	edd3 7a00 	vldr	s15, [r3]
 800f4b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f4b6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f57c <__ieee754_expf+0x19c>
 800f4ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4be:	ee17 2a90 	vmov	r2, s15
 800f4c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f4ca:	eeb0 7a40 	vmov.f32	s14, s0
 800f4ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f580 <__ieee754_expf+0x1a0>
 800f4d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f4d6:	e7bc      	b.n	800f452 <__ieee754_expf+0x72>
 800f4d8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800f4dc:	d20b      	bcs.n	800f4f6 <__ieee754_expf+0x116>
 800f4de:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800f548 <__ieee754_expf+0x168>
 800f4e2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f4e6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ee:	dd02      	ble.n	800f4f6 <__ieee754_expf+0x116>
 800f4f0:	ee30 0a06 	vadd.f32	s0, s0, s12
 800f4f4:	4770      	bx	lr
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	e7ad      	b.n	800f456 <__ieee754_expf+0x76>
 800f4fa:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f4fe:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f502:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f506:	bfb8      	it	lt
 800f508:	3264      	addlt	r2, #100	; 0x64
 800f50a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f50e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f512:	ee76 7a40 	vsub.f32	s15, s12, s0
 800f516:	ee17 3a90 	vmov	r3, s15
 800f51a:	bfab      	itete	ge
 800f51c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f520:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f524:	ee00 3a10 	vmovge	s0, r3
 800f528:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800f584 <__ieee754_expf+0x1a4>
 800f52c:	bfbc      	itt	lt
 800f52e:	ee00 3a10 	vmovlt	s0, r3
 800f532:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f536:	4770      	bx	lr
 800f538:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f540 <__ieee754_expf+0x160>
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	00000000 	.word	0x00000000
 800f544:	42b17217 	.word	0x42b17217
 800f548:	7149f2ca 	.word	0x7149f2ca
 800f54c:	42cff1b5 	.word	0x42cff1b5
 800f550:	3eb17218 	.word	0x3eb17218
 800f554:	3f851591 	.word	0x3f851591
 800f558:	08010940 	.word	0x08010940
 800f55c:	08010948 	.word	0x08010948
 800f560:	3331bb4c 	.word	0x3331bb4c
 800f564:	b5ddea0e 	.word	0xb5ddea0e
 800f568:	388ab355 	.word	0x388ab355
 800f56c:	bb360b61 	.word	0xbb360b61
 800f570:	3e2aaaab 	.word	0x3e2aaaab
 800f574:	08010938 	.word	0x08010938
 800f578:	3fb8aa3b 	.word	0x3fb8aa3b
 800f57c:	3f317180 	.word	0x3f317180
 800f580:	3717f7d1 	.word	0x3717f7d1
 800f584:	0d800000 	.word	0x0d800000

0800f588 <__ieee754_logf>:
 800f588:	ee10 3a10 	vmov	r3, s0
 800f58c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f590:	d106      	bne.n	800f5a0 <__ieee754_logf+0x18>
 800f592:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f728 <__ieee754_logf+0x1a0>
 800f596:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f72c <__ieee754_logf+0x1a4>
 800f59a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f59e:	4770      	bx	lr
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	da02      	bge.n	800f5aa <__ieee754_logf+0x22>
 800f5a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f5a8:	e7f5      	b.n	800f596 <__ieee754_logf+0xe>
 800f5aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f5ae:	db02      	blt.n	800f5b6 <__ieee754_logf+0x2e>
 800f5b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f5b4:	4770      	bx	lr
 800f5b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f5ba:	bfb8      	it	lt
 800f5bc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f730 <__ieee754_logf+0x1a8>
 800f5c0:	485c      	ldr	r0, [pc, #368]	; (800f734 <__ieee754_logf+0x1ac>)
 800f5c2:	bfbe      	ittt	lt
 800f5c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f5c8:	f06f 0118 	mvnlt.w	r1, #24
 800f5cc:	ee17 3a90 	vmovlt	r3, s15
 800f5d0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f5d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f5d8:	4418      	add	r0, r3
 800f5da:	bfa8      	it	ge
 800f5dc:	2100      	movge	r1, #0
 800f5de:	3a7f      	subs	r2, #127	; 0x7f
 800f5e0:	440a      	add	r2, r1
 800f5e2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f5e6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f5ea:	4319      	orrs	r1, r3
 800f5ec:	ee00 1a10 	vmov	s0, r1
 800f5f0:	4951      	ldr	r1, [pc, #324]	; (800f738 <__ieee754_logf+0x1b0>)
 800f5f2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f5f6:	f103 000f 	add.w	r0, r3, #15
 800f5fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5fe:	4001      	ands	r1, r0
 800f600:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f604:	bb89      	cbnz	r1, 800f66a <__ieee754_logf+0xe2>
 800f606:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60e:	d10f      	bne.n	800f630 <__ieee754_logf+0xa8>
 800f610:	2a00      	cmp	r2, #0
 800f612:	f000 8085 	beq.w	800f720 <__ieee754_logf+0x198>
 800f616:	ee07 2a90 	vmov	s15, r2
 800f61a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f73c <__ieee754_logf+0x1b4>
 800f61e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f740 <__ieee754_logf+0x1b8>
 800f622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f626:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f62a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f62e:	4770      	bx	lr
 800f630:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f744 <__ieee754_logf+0x1bc>
 800f634:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f638:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f63c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f640:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f644:	b912      	cbnz	r2, 800f64c <__ieee754_logf+0xc4>
 800f646:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f64a:	4770      	bx	lr
 800f64c:	ee07 2a90 	vmov	s15, r2
 800f650:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f73c <__ieee754_logf+0x1b4>
 800f654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f658:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f65c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f660:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f740 <__ieee754_logf+0x1b8>
 800f664:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f668:	4770      	bx	lr
 800f66a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f66e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f672:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f748 <__ieee754_logf+0x1c0>
 800f676:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f74c <__ieee754_logf+0x1c4>
 800f67a:	4935      	ldr	r1, [pc, #212]	; (800f750 <__ieee754_logf+0x1c8>)
 800f67c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f680:	4419      	add	r1, r3
 800f682:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f686:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f68a:	430b      	orrs	r3, r1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	ee07 2a90 	vmov	s15, r2
 800f692:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f69a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f69e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f754 <__ieee754_logf+0x1cc>
 800f6a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f6a6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f758 <__ieee754_logf+0x1d0>
 800f6aa:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f6ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f75c <__ieee754_logf+0x1d4>
 800f6b2:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f6b6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f760 <__ieee754_logf+0x1d8>
 800f6ba:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f6be:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f764 <__ieee754_logf+0x1dc>
 800f6c2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f6c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f6ca:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f6ce:	dd1c      	ble.n	800f70a <__ieee754_logf+0x182>
 800f6d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f6d4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f6d8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f6dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f6e4:	b922      	cbnz	r2, 800f6f0 <__ieee754_logf+0x168>
 800f6e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6ee:	4770      	bx	lr
 800f6f0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f73c <__ieee754_logf+0x1b4>
 800f6f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f6f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f700:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f740 <__ieee754_logf+0x1b8>
 800f704:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f708:	4770      	bx	lr
 800f70a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f70e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f712:	2a00      	cmp	r2, #0
 800f714:	d0e9      	beq.n	800f6ea <__ieee754_logf+0x162>
 800f716:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f73c <__ieee754_logf+0x1b4>
 800f71a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f71e:	e7ed      	b.n	800f6fc <__ieee754_logf+0x174>
 800f720:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f72c <__ieee754_logf+0x1a4>
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	cc000000 	.word	0xcc000000
 800f72c:	00000000 	.word	0x00000000
 800f730:	4c000000 	.word	0x4c000000
 800f734:	004afb20 	.word	0x004afb20
 800f738:	007ffff0 	.word	0x007ffff0
 800f73c:	3717f7d1 	.word	0x3717f7d1
 800f740:	3f317180 	.word	0x3f317180
 800f744:	3eaaaaab 	.word	0x3eaaaaab
 800f748:	3e1cd04f 	.word	0x3e1cd04f
 800f74c:	3e178897 	.word	0x3e178897
 800f750:	ffcf5c30 	.word	0xffcf5c30
 800f754:	3e638e29 	.word	0x3e638e29
 800f758:	3ecccccd 	.word	0x3ecccccd
 800f75c:	3e3a3325 	.word	0x3e3a3325
 800f760:	3e924925 	.word	0x3e924925
 800f764:	3f2aaaab 	.word	0x3f2aaaab

0800f768 <__ieee754_powf>:
 800f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76c:	ee10 5a90 	vmov	r5, s1
 800f770:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f774:	ed2d 8b02 	vpush	{d8}
 800f778:	eeb0 8a40 	vmov.f32	s16, s0
 800f77c:	eef0 8a60 	vmov.f32	s17, s1
 800f780:	f000 8291 	beq.w	800fca6 <__ieee754_powf+0x53e>
 800f784:	ee10 8a10 	vmov	r8, s0
 800f788:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f78c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f790:	dc06      	bgt.n	800f7a0 <__ieee754_powf+0x38>
 800f792:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f796:	dd0a      	ble.n	800f7ae <__ieee754_powf+0x46>
 800f798:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f79c:	f000 8283 	beq.w	800fca6 <__ieee754_powf+0x53e>
 800f7a0:	ecbd 8b02 	vpop	{d8}
 800f7a4:	48d8      	ldr	r0, [pc, #864]	; (800fb08 <__ieee754_powf+0x3a0>)
 800f7a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7aa:	f7fb bd83 	b.w	800b2b4 <nanf>
 800f7ae:	f1b8 0f00 	cmp.w	r8, #0
 800f7b2:	da1f      	bge.n	800f7f4 <__ieee754_powf+0x8c>
 800f7b4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f7b8:	da2e      	bge.n	800f818 <__ieee754_powf+0xb0>
 800f7ba:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f7be:	f2c0 827b 	blt.w	800fcb8 <__ieee754_powf+0x550>
 800f7c2:	15fb      	asrs	r3, r7, #23
 800f7c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f7c8:	fa47 f603 	asr.w	r6, r7, r3
 800f7cc:	fa06 f303 	lsl.w	r3, r6, r3
 800f7d0:	42bb      	cmp	r3, r7
 800f7d2:	f040 8271 	bne.w	800fcb8 <__ieee754_powf+0x550>
 800f7d6:	f006 0601 	and.w	r6, r6, #1
 800f7da:	f1c6 0602 	rsb	r6, r6, #2
 800f7de:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f7e2:	d120      	bne.n	800f826 <__ieee754_powf+0xbe>
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	f280 8264 	bge.w	800fcb2 <__ieee754_powf+0x54a>
 800f7ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f7ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f7f2:	e00d      	b.n	800f810 <__ieee754_powf+0xa8>
 800f7f4:	2600      	movs	r6, #0
 800f7f6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f7fa:	d1f0      	bne.n	800f7de <__ieee754_powf+0x76>
 800f7fc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f800:	f000 8251 	beq.w	800fca6 <__ieee754_powf+0x53e>
 800f804:	dd0a      	ble.n	800f81c <__ieee754_powf+0xb4>
 800f806:	2d00      	cmp	r5, #0
 800f808:	f280 8250 	bge.w	800fcac <__ieee754_powf+0x544>
 800f80c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800fb0c <__ieee754_powf+0x3a4>
 800f810:	ecbd 8b02 	vpop	{d8}
 800f814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f818:	2602      	movs	r6, #2
 800f81a:	e7ec      	b.n	800f7f6 <__ieee754_powf+0x8e>
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	daf5      	bge.n	800f80c <__ieee754_powf+0xa4>
 800f820:	eeb1 0a68 	vneg.f32	s0, s17
 800f824:	e7f4      	b.n	800f810 <__ieee754_powf+0xa8>
 800f826:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f82a:	d102      	bne.n	800f832 <__ieee754_powf+0xca>
 800f82c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f830:	e7ee      	b.n	800f810 <__ieee754_powf+0xa8>
 800f832:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f836:	eeb0 0a48 	vmov.f32	s0, s16
 800f83a:	d108      	bne.n	800f84e <__ieee754_powf+0xe6>
 800f83c:	f1b8 0f00 	cmp.w	r8, #0
 800f840:	db05      	blt.n	800f84e <__ieee754_powf+0xe6>
 800f842:	ecbd 8b02 	vpop	{d8}
 800f846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f84a:	f000 ba4d 	b.w	800fce8 <__ieee754_sqrtf>
 800f84e:	f000 fa4e 	bl	800fcee <fabsf>
 800f852:	b124      	cbz	r4, 800f85e <__ieee754_powf+0xf6>
 800f854:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f858:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f85c:	d117      	bne.n	800f88e <__ieee754_powf+0x126>
 800f85e:	2d00      	cmp	r5, #0
 800f860:	bfbc      	itt	lt
 800f862:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f866:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f86a:	f1b8 0f00 	cmp.w	r8, #0
 800f86e:	dacf      	bge.n	800f810 <__ieee754_powf+0xa8>
 800f870:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f874:	ea54 0306 	orrs.w	r3, r4, r6
 800f878:	d104      	bne.n	800f884 <__ieee754_powf+0x11c>
 800f87a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f87e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f882:	e7c5      	b.n	800f810 <__ieee754_powf+0xa8>
 800f884:	2e01      	cmp	r6, #1
 800f886:	d1c3      	bne.n	800f810 <__ieee754_powf+0xa8>
 800f888:	eeb1 0a40 	vneg.f32	s0, s0
 800f88c:	e7c0      	b.n	800f810 <__ieee754_powf+0xa8>
 800f88e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f892:	3801      	subs	r0, #1
 800f894:	ea56 0300 	orrs.w	r3, r6, r0
 800f898:	d104      	bne.n	800f8a4 <__ieee754_powf+0x13c>
 800f89a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f89e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f8a2:	e7b5      	b.n	800f810 <__ieee754_powf+0xa8>
 800f8a4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f8a8:	dd6b      	ble.n	800f982 <__ieee754_powf+0x21a>
 800f8aa:	4b99      	ldr	r3, [pc, #612]	; (800fb10 <__ieee754_powf+0x3a8>)
 800f8ac:	429c      	cmp	r4, r3
 800f8ae:	dc06      	bgt.n	800f8be <__ieee754_powf+0x156>
 800f8b0:	2d00      	cmp	r5, #0
 800f8b2:	daab      	bge.n	800f80c <__ieee754_powf+0xa4>
 800f8b4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800fb14 <__ieee754_powf+0x3ac>
 800f8b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f8bc:	e7a8      	b.n	800f810 <__ieee754_powf+0xa8>
 800f8be:	4b96      	ldr	r3, [pc, #600]	; (800fb18 <__ieee754_powf+0x3b0>)
 800f8c0:	429c      	cmp	r4, r3
 800f8c2:	dd02      	ble.n	800f8ca <__ieee754_powf+0x162>
 800f8c4:	2d00      	cmp	r5, #0
 800f8c6:	dcf5      	bgt.n	800f8b4 <__ieee754_powf+0x14c>
 800f8c8:	e7a0      	b.n	800f80c <__ieee754_powf+0xa4>
 800f8ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8d2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800fb1c <__ieee754_powf+0x3b4>
 800f8d6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f8da:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f8de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f8e2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f8e6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ee:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800fb20 <__ieee754_powf+0x3b8>
 800f8f2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f8f6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800fb24 <__ieee754_powf+0x3bc>
 800f8fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f8fe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800fb28 <__ieee754_powf+0x3c0>
 800f902:	eef0 6a67 	vmov.f32	s13, s15
 800f906:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f90a:	ee16 3a90 	vmov	r3, s13
 800f90e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f912:	f023 030f 	bic.w	r3, r3, #15
 800f916:	ee00 3a90 	vmov	s1, r3
 800f91a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f91e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f922:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f926:	f025 050f 	bic.w	r5, r5, #15
 800f92a:	ee07 5a10 	vmov	s14, r5
 800f92e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f932:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f936:	ee07 3a90 	vmov	s15, r3
 800f93a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f93e:	3e01      	subs	r6, #1
 800f940:	ea56 0200 	orrs.w	r2, r6, r0
 800f944:	ee07 5a10 	vmov	s14, r5
 800f948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f94c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f950:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f954:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f958:	ee17 4a10 	vmov	r4, s14
 800f95c:	bf08      	it	eq
 800f95e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f962:	2c00      	cmp	r4, #0
 800f964:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f968:	f340 8184 	ble.w	800fc74 <__ieee754_powf+0x50c>
 800f96c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f970:	f340 80fc 	ble.w	800fb6c <__ieee754_powf+0x404>
 800f974:	eddf 7a67 	vldr	s15, [pc, #412]	; 800fb14 <__ieee754_powf+0x3ac>
 800f978:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f97c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f980:	e746      	b.n	800f810 <__ieee754_powf+0xa8>
 800f982:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800f986:	bf01      	itttt	eq
 800f988:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800fb2c <__ieee754_powf+0x3c4>
 800f98c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f990:	f06f 0217 	mvneq.w	r2, #23
 800f994:	ee17 4a90 	vmoveq	r4, s15
 800f998:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f99c:	bf18      	it	ne
 800f99e:	2200      	movne	r2, #0
 800f9a0:	3b7f      	subs	r3, #127	; 0x7f
 800f9a2:	4413      	add	r3, r2
 800f9a4:	4a62      	ldr	r2, [pc, #392]	; (800fb30 <__ieee754_powf+0x3c8>)
 800f9a6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f9aa:	4294      	cmp	r4, r2
 800f9ac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f9b0:	dd06      	ble.n	800f9c0 <__ieee754_powf+0x258>
 800f9b2:	4a60      	ldr	r2, [pc, #384]	; (800fb34 <__ieee754_powf+0x3cc>)
 800f9b4:	4294      	cmp	r4, r2
 800f9b6:	f340 80a4 	ble.w	800fb02 <__ieee754_powf+0x39a>
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f9c0:	2400      	movs	r4, #0
 800f9c2:	4a5d      	ldr	r2, [pc, #372]	; (800fb38 <__ieee754_powf+0x3d0>)
 800f9c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f9c8:	ee07 1a90 	vmov	s15, r1
 800f9cc:	ed92 7a00 	vldr	s14, [r2]
 800f9d0:	4a5a      	ldr	r2, [pc, #360]	; (800fb3c <__ieee754_powf+0x3d4>)
 800f9d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f9d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f9da:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f9de:	1049      	asrs	r1, r1, #1
 800f9e0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f9e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f9e8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f9ec:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f9f0:	ee06 1a10 	vmov	s12, r1
 800f9f4:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f9f8:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f9fc:	ee14 7a90 	vmov	r7, s9
 800fa00:	4017      	ands	r7, r2
 800fa02:	ee05 7a90 	vmov	s11, r7
 800fa06:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800fa0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa0e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800fb40 <__ieee754_powf+0x3d8>
 800fa12:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800fa16:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800fa1a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800fa1e:	eddf 6a49 	vldr	s13, [pc, #292]	; 800fb44 <__ieee754_powf+0x3dc>
 800fa22:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fa26:	eddf 6a48 	vldr	s13, [pc, #288]	; 800fb48 <__ieee754_powf+0x3e0>
 800fa2a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa2e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fb1c <__ieee754_powf+0x3b4>
 800fa32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa36:	eddf 6a45 	vldr	s13, [pc, #276]	; 800fb4c <__ieee754_powf+0x3e4>
 800fa3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa3e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800fb50 <__ieee754_powf+0x3e8>
 800fa42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa46:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800fa4a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800fa4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fa52:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fa56:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800fa5a:	eef0 7a45 	vmov.f32	s15, s10
 800fa5e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa66:	ee17 1a90 	vmov	r1, s15
 800fa6a:	4011      	ands	r1, r2
 800fa6c:	ee07 1a90 	vmov	s15, r1
 800fa70:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800fa74:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800fa78:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fa7c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800fa80:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fa84:	eeb0 6a47 	vmov.f32	s12, s14
 800fa88:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fa8c:	ee16 1a10 	vmov	r1, s12
 800fa90:	4011      	ands	r1, r2
 800fa92:	ee06 1a90 	vmov	s13, r1
 800fa96:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800fa9a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800fb54 <__ieee754_powf+0x3ec>
 800fa9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800fb58 <__ieee754_powf+0x3f0>
 800faa2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800faa6:	ee06 1a10 	vmov	s12, r1
 800faaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800faae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fb5c <__ieee754_powf+0x3f4>
 800fab2:	492b      	ldr	r1, [pc, #172]	; (800fb60 <__ieee754_powf+0x3f8>)
 800fab4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fabc:	edd1 7a00 	vldr	s15, [r1]
 800fac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fac4:	ee07 3a90 	vmov	s15, r3
 800fac8:	4b26      	ldr	r3, [pc, #152]	; (800fb64 <__ieee754_powf+0x3fc>)
 800faca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800face:	eef0 7a47 	vmov.f32	s15, s14
 800fad2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fada:	edd4 0a00 	vldr	s1, [r4]
 800fade:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fae6:	ee17 3a90 	vmov	r3, s15
 800faea:	4013      	ands	r3, r2
 800faec:	ee07 3a90 	vmov	s15, r3
 800faf0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800faf4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800faf8:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fafc:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fb00:	e70f      	b.n	800f922 <__ieee754_powf+0x1ba>
 800fb02:	2401      	movs	r4, #1
 800fb04:	e75d      	b.n	800f9c2 <__ieee754_powf+0x25a>
 800fb06:	bf00      	nop
 800fb08:	0801056c 	.word	0x0801056c
 800fb0c:	00000000 	.word	0x00000000
 800fb10:	3f7ffff7 	.word	0x3f7ffff7
 800fb14:	7149f2ca 	.word	0x7149f2ca
 800fb18:	3f800007 	.word	0x3f800007
 800fb1c:	3eaaaaab 	.word	0x3eaaaaab
 800fb20:	3fb8aa3b 	.word	0x3fb8aa3b
 800fb24:	36eca570 	.word	0x36eca570
 800fb28:	3fb8aa00 	.word	0x3fb8aa00
 800fb2c:	4b800000 	.word	0x4b800000
 800fb30:	001cc471 	.word	0x001cc471
 800fb34:	005db3d6 	.word	0x005db3d6
 800fb38:	08010950 	.word	0x08010950
 800fb3c:	fffff000 	.word	0xfffff000
 800fb40:	3e6c3255 	.word	0x3e6c3255
 800fb44:	3e53f142 	.word	0x3e53f142
 800fb48:	3e8ba305 	.word	0x3e8ba305
 800fb4c:	3edb6db7 	.word	0x3edb6db7
 800fb50:	3f19999a 	.word	0x3f19999a
 800fb54:	3f76384f 	.word	0x3f76384f
 800fb58:	3f763800 	.word	0x3f763800
 800fb5c:	369dc3a0 	.word	0x369dc3a0
 800fb60:	08010960 	.word	0x08010960
 800fb64:	08010958 	.word	0x08010958
 800fb68:	3338aa3c 	.word	0x3338aa3c
 800fb6c:	f040 8092 	bne.w	800fc94 <__ieee754_powf+0x52c>
 800fb70:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800fb68 <__ieee754_powf+0x400>
 800fb74:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb78:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fb7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb84:	f73f aef6 	bgt.w	800f974 <__ieee754_powf+0x20c>
 800fb88:	15db      	asrs	r3, r3, #23
 800fb8a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fb8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fb92:	4103      	asrs	r3, r0
 800fb94:	4423      	add	r3, r4
 800fb96:	4949      	ldr	r1, [pc, #292]	; (800fcbc <__ieee754_powf+0x554>)
 800fb98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb9c:	3a7f      	subs	r2, #127	; 0x7f
 800fb9e:	4111      	asrs	r1, r2
 800fba0:	ea23 0101 	bic.w	r1, r3, r1
 800fba4:	ee07 1a10 	vmov	s14, r1
 800fba8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fbac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fbb0:	f1c2 0217 	rsb	r2, r2, #23
 800fbb4:	4110      	asrs	r0, r2
 800fbb6:	2c00      	cmp	r4, #0
 800fbb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbbc:	bfb8      	it	lt
 800fbbe:	4240      	neglt	r0, r0
 800fbc0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fbc4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800fcc0 <__ieee754_powf+0x558>
 800fbc8:	ee17 3a10 	vmov	r3, s14
 800fbcc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fbd0:	f023 030f 	bic.w	r3, r3, #15
 800fbd4:	ee07 3a10 	vmov	s14, r3
 800fbd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbdc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fbe0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fcc4 <__ieee754_powf+0x55c>
 800fbe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbe8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fbec:	eddf 6a36 	vldr	s13, [pc, #216]	; 800fcc8 <__ieee754_powf+0x560>
 800fbf0:	eeb0 0a67 	vmov.f32	s0, s15
 800fbf4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fbf8:	eeb0 6a40 	vmov.f32	s12, s0
 800fbfc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fc00:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fc04:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fc08:	eddf 6a30 	vldr	s13, [pc, #192]	; 800fccc <__ieee754_powf+0x564>
 800fc0c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800fcd0 <__ieee754_powf+0x568>
 800fc10:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fc14:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800fcd4 <__ieee754_powf+0x56c>
 800fc18:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fc1c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800fcd8 <__ieee754_powf+0x570>
 800fc20:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fc24:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800fcdc <__ieee754_powf+0x574>
 800fc28:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fc2c:	eeb0 6a40 	vmov.f32	s12, s0
 800fc30:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fc34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fc38:	eeb0 7a46 	vmov.f32	s14, s12
 800fc3c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fc40:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fc44:	eee0 7a27 	vfma.f32	s15, s0, s15
 800fc48:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fc4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fc54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fc5c:	ee10 3a10 	vmov	r3, s0
 800fc60:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fc64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc68:	da1a      	bge.n	800fca0 <__ieee754_powf+0x538>
 800fc6a:	f7fb fb29 	bl	800b2c0 <scalbnf>
 800fc6e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fc72:	e5cd      	b.n	800f810 <__ieee754_powf+0xa8>
 800fc74:	4a1a      	ldr	r2, [pc, #104]	; (800fce0 <__ieee754_powf+0x578>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	dd02      	ble.n	800fc80 <__ieee754_powf+0x518>
 800fc7a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800fce4 <__ieee754_powf+0x57c>
 800fc7e:	e67b      	b.n	800f978 <__ieee754_powf+0x210>
 800fc80:	d108      	bne.n	800fc94 <__ieee754_powf+0x52c>
 800fc82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc86:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8e:	f6ff af7b 	blt.w	800fb88 <__ieee754_powf+0x420>
 800fc92:	e7f2      	b.n	800fc7a <__ieee754_powf+0x512>
 800fc94:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fc98:	f73f af76 	bgt.w	800fb88 <__ieee754_powf+0x420>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e78f      	b.n	800fbc0 <__ieee754_powf+0x458>
 800fca0:	ee00 3a10 	vmov	s0, r3
 800fca4:	e7e3      	b.n	800fc6e <__ieee754_powf+0x506>
 800fca6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fcaa:	e5b1      	b.n	800f810 <__ieee754_powf+0xa8>
 800fcac:	eeb0 0a68 	vmov.f32	s0, s17
 800fcb0:	e5ae      	b.n	800f810 <__ieee754_powf+0xa8>
 800fcb2:	eeb0 0a48 	vmov.f32	s0, s16
 800fcb6:	e5ab      	b.n	800f810 <__ieee754_powf+0xa8>
 800fcb8:	2600      	movs	r6, #0
 800fcba:	e590      	b.n	800f7de <__ieee754_powf+0x76>
 800fcbc:	007fffff 	.word	0x007fffff
 800fcc0:	3f317218 	.word	0x3f317218
 800fcc4:	35bfbe8c 	.word	0x35bfbe8c
 800fcc8:	3f317200 	.word	0x3f317200
 800fccc:	3331bb4c 	.word	0x3331bb4c
 800fcd0:	b5ddea0e 	.word	0xb5ddea0e
 800fcd4:	388ab355 	.word	0x388ab355
 800fcd8:	bb360b61 	.word	0xbb360b61
 800fcdc:	3e2aaaab 	.word	0x3e2aaaab
 800fce0:	43160000 	.word	0x43160000
 800fce4:	0da24260 	.word	0x0da24260

0800fce8 <__ieee754_sqrtf>:
 800fce8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fcec:	4770      	bx	lr

0800fcee <fabsf>:
 800fcee:	ee10 3a10 	vmov	r3, s0
 800fcf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcf6:	ee00 3a10 	vmov	s0, r3
 800fcfa:	4770      	bx	lr

0800fcfc <rintf>:
 800fcfc:	ee10 2a10 	vmov	r2, s0
 800fd00:	b513      	push	{r0, r1, r4, lr}
 800fd02:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800fd06:	397f      	subs	r1, #127	; 0x7f
 800fd08:	2916      	cmp	r1, #22
 800fd0a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fd0e:	dc47      	bgt.n	800fda0 <rintf+0xa4>
 800fd10:	b32b      	cbz	r3, 800fd5e <rintf+0x62>
 800fd12:	2900      	cmp	r1, #0
 800fd14:	ee10 3a10 	vmov	r3, s0
 800fd18:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800fd1c:	da21      	bge.n	800fd62 <rintf+0x66>
 800fd1e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800fd22:	425b      	negs	r3, r3
 800fd24:	4921      	ldr	r1, [pc, #132]	; (800fdac <rintf+0xb0>)
 800fd26:	0a5b      	lsrs	r3, r3, #9
 800fd28:	0d12      	lsrs	r2, r2, #20
 800fd2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd2e:	0512      	lsls	r2, r2, #20
 800fd30:	4313      	orrs	r3, r2
 800fd32:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800fd36:	ee07 3a90 	vmov	s15, r3
 800fd3a:	edd1 6a00 	vldr	s13, [r1]
 800fd3e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800fd42:	ed8d 7a01 	vstr	s14, [sp, #4]
 800fd46:	eddd 7a01 	vldr	s15, [sp, #4]
 800fd4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fd4e:	ee17 3a90 	vmov	r3, s15
 800fd52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd56:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800fd5a:	ee00 3a10 	vmov	s0, r3
 800fd5e:	b002      	add	sp, #8
 800fd60:	bd10      	pop	{r4, pc}
 800fd62:	4a13      	ldr	r2, [pc, #76]	; (800fdb0 <rintf+0xb4>)
 800fd64:	410a      	asrs	r2, r1
 800fd66:	4213      	tst	r3, r2
 800fd68:	d0f9      	beq.n	800fd5e <rintf+0x62>
 800fd6a:	0854      	lsrs	r4, r2, #1
 800fd6c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800fd70:	d006      	beq.n	800fd80 <rintf+0x84>
 800fd72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fd76:	ea23 0304 	bic.w	r3, r3, r4
 800fd7a:	fa42 f101 	asr.w	r1, r2, r1
 800fd7e:	430b      	orrs	r3, r1
 800fd80:	4a0a      	ldr	r2, [pc, #40]	; (800fdac <rintf+0xb0>)
 800fd82:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800fd86:	ed90 7a00 	vldr	s14, [r0]
 800fd8a:	ee07 3a90 	vmov	s15, r3
 800fd8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd92:	edcd 7a01 	vstr	s15, [sp, #4]
 800fd96:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fd9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fd9e:	e7de      	b.n	800fd5e <rintf+0x62>
 800fda0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fda4:	d3db      	bcc.n	800fd5e <rintf+0x62>
 800fda6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fdaa:	e7d8      	b.n	800fd5e <rintf+0x62>
 800fdac:	08010968 	.word	0x08010968
 800fdb0:	007fffff 	.word	0x007fffff

0800fdb4 <_init>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	bf00      	nop
 800fdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdba:	bc08      	pop	{r3}
 800fdbc:	469e      	mov	lr, r3
 800fdbe:	4770      	bx	lr

0800fdc0 <_fini>:
 800fdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc2:	bf00      	nop
 800fdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdc6:	bc08      	pop	{r3}
 800fdc8:	469e      	mov	lr, r3
 800fdca:	4770      	bx	lr
